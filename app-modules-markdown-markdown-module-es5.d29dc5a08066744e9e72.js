function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty3(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["app-modules-markdown-markdown-module"], {
  /***/
  "../../node_modules/lodash.assign/index.js":
  /*!************************************************************!*\
    !*** M:/Workspace/i'm/node_modules/lodash.assign/index.js ***!
    \************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesLodashAssignIndexJs(module, exports) {
    /**
     * lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright jQuery Foundation and other contributors <https://jquery.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER = 9007199254740991;
    /** `Object#toString` result references. */

    var argsTag = '[object Arguments]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]';
    /** Used to detect unsigned integer values. */

    var reIsUint = /^(?:0|[1-9]\d*)$/;
    /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */

    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);

        case 1:
          return func.call(thisArg, args[0]);

        case 2:
          return func.call(thisArg, args[0], args[1]);

        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }

      return func.apply(thisArg, args);
    }
    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */


    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }

      return result;
    }
    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */


    function overArg(func, transform) {
      return function (arg) {
        return func(transform(arg));
      };
    }
    /** Used for built-in method references. */


    var objectProto = Object.prototype;
    /** Used to check objects for own properties. */

    var hasOwnProperty = objectProto.hasOwnProperty;
    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */

    var objectToString = objectProto.toString;
    /** Built-in value references. */

    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    /* Built-in method references for those with the same name as other `lodash` methods. */

    var nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max;
    /** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */

    var nonEnumShadows = !propertyIsEnumerable.call({
      'valueOf': 1
    }, 'valueOf');
    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */

    function arrayLikeKeys(value, inherited) {
      // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
      // Safari 9 makes `arguments.length` enumerable in strict mode.
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length,
          skipIndexes = !!length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
          result.push(key);
        }
      }

      return result;
    }
    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */


    function assignValue(object, key, value) {
      var objValue = object[key];

      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
        object[key] = value;
      }
    }
    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */


    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }

      var result = [];

      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }

      return result;
    }
    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */


    function baseRest(func, start) {
      start = nativeMax(start === undefined ? func.length - 1 : start, 0);
      return function () {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }

        index = -1;
        var otherArgs = Array(start + 1);

        while (++index < start) {
          otherArgs[index] = args[index];
        }

        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }
    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */


    function copyObject(source, props, object, customizer) {
      object || (object = {});
      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
        assignValue(object, key, newValue === undefined ? source[key] : newValue);
      }

      return object;
    }
    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */


    function createAssigner(assigner) {
      return baseRest(function (object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;
        customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }

        object = Object(object);

        while (++index < length) {
          var source = sources[index];

          if (source) {
            assigner(object, source, index, customizer);
          }
        }

        return object;
      });
    }
    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */


    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
    }
    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */


    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }

      var type = typeof index;

      if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
        return eq(object[index], value);
      }

      return false;
    }
    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */


    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
      return value === proto;
    }
    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */


    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */


    function isArguments(value) {
      // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
    }
    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */


    var isArray = Array.isArray;
    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */

    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */


    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */


    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 8-9 which returns 'object' for typed array and other constructors.
      var tag = isObject(value) ? objectToString.call(value) : '';
      return tag == funcTag || tag == genTag;
    }
    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */


    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */


    function isObject(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }
    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */


    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }
    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */


    var assign = createAssigner(function (object, source) {
      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }

      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });
    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */

    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    module.exports = assign;
    /***/
  },

  /***/
  "./node_modules/@angular/elements/__ivy_ngcc__/fesm2015/elements.js":
  /*!**************************************************************************!*\
    !*** ./node_modules/@angular/elements/__ivy_ngcc__/fesm2015/elements.js ***!
    \**************************************************************************/

  /*! exports provided: NgElement, VERSION, createCustomElement */

  /***/
  function node_modulesAngularElements__ivy_ngcc__Fesm2015ElementsJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgElement", function () {
      return NgElement;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "VERSION", function () {
      return VERSION;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "createCustomElement", function () {
      return createCustomElement;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! rxjs/operators */
    "./node_modules/rxjs/_esm2015/operators/index.js");
    /**
     * @license Angular v9.1.11
     * (c) 2010-2020 Google LLC. https://angular.io/
     * License: MIT
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: packages/elements/src/utils.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var ɵ0 =
    /**
    * @return {?}
    */
    function ɵ0() {
      /** @type {?} */
      var elProto =
      /** @type {?} */
      Element.prototype;
      return elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector || elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;
    };
    /** @type {?} */


    var matches = ɵ0();
    /**
     * Provide methods for scheduling the execution of a callback.
     * @type {?}
     */

    var scheduler = {
      /**
       * Schedule a callback to be called after some delay.
       *
       * Returns a function that when executed will cancel the scheduled function.
       * @param {?} taskFn
       * @param {?} delay
       * @return {?}
       */
      schedule: function schedule(taskFn, delay) {
        /** @type {?} */
        var id = setTimeout(taskFn, delay);
        return (
          /**
          * @return {?}
          */
          function () {
            return clearTimeout(id);
          }
        );
      },

      /**
       * Schedule a callback to be called before the next render.
       * (If `window.requestAnimationFrame()` is not available, use `scheduler.schedule()` instead.)
       *
       * Returns a function that when executed will cancel the scheduled function.
       * @param {?} taskFn
       * @return {?}
       */
      scheduleBeforeRender: function scheduleBeforeRender(taskFn) {
        // TODO(gkalpak): Implement a better way of accessing `requestAnimationFrame()`
        //                (e.g. accounting for vendor prefix, SSR-compatibility, etc).
        if (typeof window === 'undefined') {
          // For SSR just schedule immediately.
          return scheduler.schedule(taskFn, 0);
        }

        if (typeof window.requestAnimationFrame === 'undefined') {
          /** @type {?} */
          var frameMs = 16;
          return scheduler.schedule(taskFn, frameMs);
        }
        /** @type {?} */


        var id = window.requestAnimationFrame(taskFn);
        return (
          /**
          * @return {?}
          */
          function () {
            return window.cancelAnimationFrame(id);
          }
        );
      }
    };
    /**
     * Convert a camelCased string to kebab-cased.
     * @param {?} input
     * @return {?}
     */

    function camelToDashCase(input) {
      return input.replace(/[A-Z]/g,
      /**
      * @param {?} char
      * @return {?}
      */
      function (_char) {
        return "-".concat(_char.toLowerCase());
      });
    }
    /**
     * Create a `CustomEvent` (even on browsers where `CustomEvent` is not a constructor).
     * @param {?} doc
     * @param {?} name
     * @param {?} detail
     * @return {?}
     */


    function createCustomEvent(doc, name, detail) {
      /** @type {?} */
      var bubbles = false;
      /** @type {?} */

      var cancelable = false; // On IE9-11, `CustomEvent` is not a constructor.

      if (typeof CustomEvent !== 'function') {
        /** @type {?} */
        var event = doc.createEvent('CustomEvent');
        event.initCustomEvent(name, bubbles, cancelable, detail);
        return event;
      }

      return new CustomEvent(name, {
        bubbles: bubbles,
        cancelable: cancelable,
        detail: detail
      });
    }
    /**
     * Check whether the input is an `Element`.
     * @param {?} node
     * @return {?}
     */


    function isElement(node) {
      return !!node && node.nodeType === Node.ELEMENT_NODE;
    }
    /**
     * Check whether the input is a function.
     * @param {?} value
     * @return {?}
     */


    function isFunction(value) {
      return typeof value === 'function';
    }
    /**
     * Convert a kebab-cased string to camelCased.
     * @param {?} input
     * @return {?}
     */


    function kebabToCamelCase(input) {
      return input.replace(/-([a-z\d])/g,
      /**
      * @param {?} _
      * @param {?} char
      * @return {?}
      */
      function (_, _char2) {
        return _char2.toUpperCase();
      });
    }
    /**
     * Check whether an `Element` matches a CSS selector.
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */


    function matchesSelector(element, selector) {
      return matches.call(element, selector);
    }
    /**
     * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.
     * @param {?} value1
     * @param {?} value2
     * @return {?}
     */


    function strictEquals(value1, value2) {
      return value1 === value2 || value1 !== value1 && value2 !== value2;
    }
    /**
     * Gets a map of default set of attributes to observe and the properties they affect.
     * @param {?} inputs
     * @return {?}
     */


    function getDefaultAttributeToPropertyInputs(inputs) {
      /** @type {?} */
      var attributeToPropertyInputs = {};
      inputs.forEach(
      /**
      * @param {?} __0
      * @return {?}
      */
      function (_ref2) {
        var propName = _ref2.propName,
            templateName = _ref2.templateName;
        attributeToPropertyInputs[camelToDashCase(templateName)] = propName;
      });
      return attributeToPropertyInputs;
    }
    /**
     * Gets a component's set of inputs. Uses the injector to get the component factory where the inputs
     * are defined.
     * @param {?} component
     * @param {?} injector
     * @return {?}
     */


    function getComponentInputs(component, injector) {
      /** @type {?} */
      var componentFactoryResolver = injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"]);
      /** @type {?} */

      var componentFactory = componentFactoryResolver.resolveComponentFactory(component);
      return componentFactory.inputs;
    }
    /**
     * @fileoverview added by tsickle
     * Generated from: packages/elements/src/extract-projectable-nodes.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @param {?} host
     * @param {?} ngContentSelectors
     * @return {?}
     */


    function extractProjectableNodes(host, ngContentSelectors) {
      /** @type {?} */
      var nodes = host.childNodes;
      /** @type {?} */

      var projectableNodes = ngContentSelectors.map(
      /**
      * @return {?}
      */
      function () {
        return [];
      });
      /** @type {?} */

      var wildcardIndex = -1;
      ngContentSelectors.some(
      /**
      * @param {?} selector
      * @param {?} i
      * @return {?}
      */
      function (selector, i) {
        if (selector === '*') {
          wildcardIndex = i;
          return true;
        }

        return false;
      });

      for (var i = 0, ii = nodes.length; i < ii; ++i) {
        /** @type {?} */
        var node = nodes[i];
        /** @type {?} */

        var ngContentIndex = findMatchingIndex(node, ngContentSelectors, wildcardIndex);

        if (ngContentIndex !== -1) {
          projectableNodes[ngContentIndex].push(node);
        }
      }

      return projectableNodes;
    }
    /**
     * @param {?} node
     * @param {?} selectors
     * @param {?} defaultIndex
     * @return {?}
     */


    function findMatchingIndex(node, selectors, defaultIndex) {
      /** @type {?} */
      var matchingIndex = defaultIndex;

      if (isElement(node)) {
        selectors.some(
        /**
        * @param {?} selector
        * @param {?} i
        * @return {?}
        */
        function (selector, i) {
          if (selector !== '*' && matchesSelector(node, selector)) {
            matchingIndex = i;
            return true;
          }

          return false;
        });
      }

      return matchingIndex;
    }
    /**
     * @fileoverview added by tsickle
     * Generated from: packages/elements/src/component-factory-strategy.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Time in milliseconds to wait before destroying the component ref when disconnected.
     * @type {?}
     */


    var DESTROY_DELAY = 10;
    /**
     * Factory that creates new ComponentNgElementStrategy instance. Gets the component factory with the
     * constructor's injector's factory resolver and passes that factory to each strategy.
     *
     * \@publicApi
     */

    var ComponentNgElementStrategyFactory = /*#__PURE__*/function () {
      /**
       * @param {?} component
       * @param {?} injector
       */
      function ComponentNgElementStrategyFactory(component, injector) {
        _classCallCheck(this, ComponentNgElementStrategyFactory);

        this.componentFactory = injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"]).resolveComponentFactory(component);
      }
      /**
       * @param {?} injector
       * @return {?}
       */


      _createClass(ComponentNgElementStrategyFactory, [{
        key: "create",
        value: function create(injector) {
          return new ComponentNgElementStrategy(this.componentFactory, injector);
        }
      }]);

      return ComponentNgElementStrategyFactory;
    }();

    if (false) {}
    /**
     * Creates and destroys a component ref using a component factory and handles change detection
     * in response to input changes.
     *
     * \@publicApi
     */


    var ComponentNgElementStrategy = /*#__PURE__*/function () {
      /**
       * @param {?} componentFactory
       * @param {?} injector
       */
      function ComponentNgElementStrategy(componentFactory, injector) {
        _classCallCheck(this, ComponentNgElementStrategy);

        this.componentFactory = componentFactory;
        this.injector = injector;
        /**
         * Reference to the component that was created on connect.
         */

        this.componentRef = null;
        /**
         * Changes that have been made to the component ref since the last time onChanges was called.
         */

        this.inputChanges = null;
        /**
         * Whether the created component implements the onChanges function.
         */

        this.implementsOnChanges = false;
        /**
         * Whether a change detection has been scheduled to run on the component.
         */

        this.scheduledChangeDetectionFn = null;
        /**
         * Callback function that when called will cancel a scheduled destruction on the component.
         */

        this.scheduledDestroyFn = null;
        /**
         * Initial input values that were set before the component was created.
         */

        this.initialInputValues = new Map();
        /**
         * Set of component inputs that have not yet changed, i.e. for which `ngOnChanges()` has not
         * fired. (This is used to determine the value of `fistChange` in `SimpleChange` instances.)
         */

        this.unchangedInputs = new Set();
      }
      /**
       * Initializes a new component if one has not yet been created and cancels any scheduled
       * destruction.
       * @param {?} element
       * @return {?}
       */


      _createClass(ComponentNgElementStrategy, [{
        key: "connect",
        value: function connect(element) {
          // If the element is marked to be destroyed, cancel the task since the component was reconnected
          if (this.scheduledDestroyFn !== null) {
            this.scheduledDestroyFn();
            this.scheduledDestroyFn = null;
            return;
          }

          if (this.componentRef === null) {
            this.initializeComponent(element);
          }
        }
        /**
         * Schedules the component to be destroyed after some small delay in case the element is just
         * being moved across the DOM.
         * @return {?}
         */

      }, {
        key: "disconnect",
        value: function disconnect() {
          var _this = this;

          // Return if there is no componentRef or the component is already scheduled for destruction
          if (this.componentRef === null || this.scheduledDestroyFn !== null) {
            return;
          } // Schedule the component to be destroyed after a small timeout in case it is being
          // moved elsewhere in the DOM


          this.scheduledDestroyFn = scheduler.schedule(
          /**
          * @return {?}
          */
          function () {
            if (_this.componentRef !== null) {
              _this.componentRef.destroy();

              _this.componentRef = null;
            }
          }, DESTROY_DELAY);
        }
        /**
         * Returns the component property value. If the component has not yet been created, the value is
         * retrieved from the cached initialization values.
         * @param {?} property
         * @return {?}
         */

      }, {
        key: "getInputValue",
        value: function getInputValue(property) {
          if (this.componentRef === null) {
            return this.initialInputValues.get(property);
          }

          return this.componentRef.instance[property];
        }
        /**
         * Sets the input value for the property. If the component has not yet been created, the value is
         * cached and set when the component is created.
         * @param {?} property
         * @param {?} value
         * @return {?}
         */

      }, {
        key: "setInputValue",
        value: function setInputValue(property, value) {
          if (this.componentRef === null) {
            this.initialInputValues.set(property, value);
            return;
          } // Ignore the value if it is strictly equal to the current value, except if it is `undefined`
          // and this is the first change to the value (because an explicit `undefined` _is_ strictly
          // equal to not having a value set at all, but we still need to record this as a change).


          if (strictEquals(value, this.getInputValue(property)) && !(value === undefined && this.unchangedInputs.has(property))) {
            return;
          }

          this.recordInputChange(property, value);
          this.componentRef.instance[property] = value;
          this.scheduleDetectChanges();
        }
        /**
         * Creates a new component through the component factory with the provided element host and
         * sets up its initial inputs, listens for outputs changes, and runs an initial change detection.
         * @protected
         * @param {?} element
         * @return {?}
         */

      }, {
        key: "initializeComponent",
        value: function initializeComponent(element) {
          /** @type {?} */
          var childInjector = _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"].create({
            providers: [],
            parent: this.injector
          });
          /** @type {?} */


          var projectableNodes = extractProjectableNodes(element, this.componentFactory.ngContentSelectors);
          this.componentRef = this.componentFactory.create(childInjector, projectableNodes, element);
          this.implementsOnChanges = isFunction(
          /** @type {?} */
          this.componentRef.instance.ngOnChanges);
          this.initializeInputs();
          this.initializeOutputs(this.componentRef);
          this.detectChanges();
          /** @type {?} */

          var applicationRef = this.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ApplicationRef"]);
          applicationRef.attachView(this.componentRef.hostView);
        }
        /**
         * Set any stored initial inputs on the component's properties.
         * @protected
         * @return {?}
         */

      }, {
        key: "initializeInputs",
        value: function initializeInputs() {
          var _this2 = this;

          this.componentFactory.inputs.forEach(
          /**
          * @param {?} __0
          * @return {?}
          */
          function (_ref3) {
            var propName = _ref3.propName;

            if (_this2.implementsOnChanges) {
              // If the component implements `ngOnChanges()`, keep track of which inputs have never
              // changed so far.
              _this2.unchangedInputs.add(propName);
            }

            if (_this2.initialInputValues.has(propName)) {
              // Call `setInputValue()` now that the component has been instantiated to update its
              // properties and fire `ngOnChanges()`.
              _this2.setInputValue(propName, _this2.initialInputValues.get(propName));
            }
          });
          this.initialInputValues.clear();
        }
        /**
         * Sets up listeners for the component's outputs so that the events stream emits the events.
         * @protected
         * @param {?} componentRef
         * @return {?}
         */

      }, {
        key: "initializeOutputs",
        value: function initializeOutputs(componentRef) {
          /** @type {?} */
          var eventEmitters = this.componentFactory.outputs.map(
          /**
          * @param {?} __0
          * @return {?}
          */
          function (_ref4) {
            var propName = _ref4.propName,
                templateName = _ref4.templateName;

            /** @type {?} */
            var emitter = componentRef.instance[propName];
            return emitter.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(
            /**
            * @param {?} value
            * @return {?}
            */
            function (value) {
              return {
                name: templateName,
                value: value
              };
            }));
          });
          this.events = Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["merge"]).apply(void 0, _toConsumableArray(eventEmitters));
        }
        /**
         * Calls ngOnChanges with all the inputs that have changed since the last call.
         * @protected
         * @param {?} componentRef
         * @return {?}
         */

      }, {
        key: "callNgOnChanges",
        value: function callNgOnChanges(componentRef) {
          if (!this.implementsOnChanges || this.inputChanges === null) {
            return;
          } // Cache the changes and set inputChanges to null to capture any changes that might occur
          // during ngOnChanges.

          /** @type {?} */


          var inputChanges = this.inputChanges;
          this.inputChanges = null;

          /** @type {?} */
          componentRef.instance.ngOnChanges(inputChanges);
        }
        /**
         * Schedules change detection to run on the component.
         * Ignores subsequent calls if already scheduled.
         * @protected
         * @return {?}
         */

      }, {
        key: "scheduleDetectChanges",
        value: function scheduleDetectChanges() {
          var _this3 = this;

          if (this.scheduledChangeDetectionFn) {
            return;
          }

          this.scheduledChangeDetectionFn = scheduler.scheduleBeforeRender(
          /**
          * @return {?}
          */
          function () {
            _this3.scheduledChangeDetectionFn = null;

            _this3.detectChanges();
          });
        }
        /**
         * Records input changes so that the component receives SimpleChanges in its onChanges function.
         * @protected
         * @param {?} property
         * @param {?} currentValue
         * @return {?}
         */

      }, {
        key: "recordInputChange",
        value: function recordInputChange(property, currentValue) {
          // Do not record the change if the component does not implement `OnChanges`.
          // (We can only determine that after the component has been instantiated.)
          if (this.componentRef !== null && !this.implementsOnChanges) {
            return;
          }

          if (this.inputChanges === null) {
            this.inputChanges = {};
          } // If there already is a change, modify the current value to match but leave the values for
          // previousValue and isFirstChange.

          /** @type {?} */


          var pendingChange = this.inputChanges[property];

          if (pendingChange) {
            pendingChange.currentValue = currentValue;
            return;
          }
          /** @type {?} */


          var isFirstChange = this.unchangedInputs.has(property);
          this.unchangedInputs["delete"](property);
          /** @type {?} */

          var previousValue = isFirstChange ? undefined : this.getInputValue(property);
          this.inputChanges[property] = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["SimpleChange"](previousValue, currentValue, isFirstChange);
        }
        /**
         * Runs change detection on the component.
         * @protected
         * @return {?}
         */

      }, {
        key: "detectChanges",
        value: function detectChanges() {
          if (this.componentRef === null) {
            return;
          }

          this.callNgOnChanges(this.componentRef);
          this.componentRef.changeDetectorRef.detectChanges();
        }
      }]);

      return ComponentNgElementStrategy;
    }();

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * Generated from: packages/elements/src/create-custom-element.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Prototype for a class constructor based on an Angular component
     * that can be used for custom element registration. Implemented and returned
     * by the {\@link createCustomElement createCustomElement() function}.
     *
     * \@publicApi
     * @record
     * @template P
     */


    function NgElementConstructor() {}

    if (false) {}
    /**
     * Implements the functionality needed for a custom element.
     *
     * \@publicApi
     * @abstract
     */


    var NgElement = /*#__PURE__*/function (_HTMLElement) {
      _inherits(NgElement, _HTMLElement);

      var _super2 = _createSuper(NgElement);

      function NgElement() {
        var _this4;

        _classCallCheck(this, NgElement);

        _this4 = _super2.apply(this, arguments);
        /**
         * A subscription to change, connect, and disconnect events in the custom element.
         */

        _this4.ngElementEventsSubscription = null;
        return _this4;
      }

      return NgElement;
    }( /*#__PURE__*/_wrapNativeSuper(HTMLElement));

    if (false) {}
    /**
     * A configuration that initializes an NgElementConstructor with the
     * dependencies and strategy it needs to transform a component into
     * a custom element class.
     *
     * \@publicApi
     * @record
     */


    function NgElementConfig() {}

    if (false) {}
    /**
     * \@description Creates a custom element class based on an Angular component.
     *
     * Builds a class that encapsulates the functionality of the provided component and
     * uses the configuration information to provide more context to the class.
     * Takes the component factory's inputs and outputs to convert them to the proper
     * custom element API and add hooks to input changes.
     *
     * The configuration's injector is the initial injector set on the class,
     * and used by default for each created instance.This behavior can be overridden with the
     * static property to affect all newly created instances, or as a constructor argument for
     * one-off creations.
     *
     * \@publicApi
     * @template P
     * @param {?} component The component to transform.
     * @param {?} config A configuration that provides initialization information to the created class.
     * @return {?} The custom-element construction class, which can be registered with
     * a browser's `CustomElementRegistry`.
     *
     */


    function createCustomElement(component, config) {
      /** @type {?} */
      var inputs = getComponentInputs(component, config.injector);
      /** @type {?} */

      var strategyFactory = config.strategyFactory || new ComponentNgElementStrategyFactory(component, config.injector);
      /** @type {?} */

      var attributeToPropertyInputs = getDefaultAttributeToPropertyInputs(inputs);

      var NgElementImpl = /*#__PURE__*/function (_NgElement) {
        _inherits(NgElementImpl, _NgElement);

        var _super3 = _createSuper(NgElementImpl);

        /**
         * @param {?=} injector
         */
        function NgElementImpl(injector) {
          var _this5;

          _classCallCheck(this, NgElementImpl);

          _this5 = _super3.call(this);
          _this5.injector = injector;
          return _this5;
        }
        /**
         * @protected
         * @return {?}
         */


        _createClass(NgElementImpl, [{
          key: "attributeChangedCallback",

          /**
           * @param {?} attrName
           * @param {?} oldValue
           * @param {?} newValue
           * @param {?=} namespace
           * @return {?}
           */
          value: function attributeChangedCallback(attrName, oldValue, newValue, namespace) {
            /** @type {?} */
            var propName =
            /** @type {?} */
            attributeToPropertyInputs[attrName];
            this.ngElementStrategy.setInputValue(propName, newValue);
          }
          /**
           * @return {?}
           */

        }, {
          key: "connectedCallback",
          value: function connectedCallback() {
            var _this6 = this;

            this.ngElementStrategy.connect(this); // Listen for events from the strategy and dispatch them as custom events

            this.ngElementEventsSubscription = this.ngElementStrategy.events.subscribe(
            /**
            * @param {?} e
            * @return {?}
            */
            function (e) {
              /** @type {?} */
              var customEvent = createCustomEvent(
              /** @type {?} */
              _this6.ownerDocument, e.name, e.value);

              _this6.dispatchEvent(customEvent);
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "disconnectedCallback",
          value: function disconnectedCallback() {
            // Not using `this.ngElementStrategy` to avoid unnecessarily creating the `NgElementStrategy`.
            if (this._ngElementStrategy) {
              this._ngElementStrategy.disconnect();
            }

            if (this.ngElementEventsSubscription) {
              this.ngElementEventsSubscription.unsubscribe();
              this.ngElementEventsSubscription = null;
            }
          }
        }, {
          key: "ngElementStrategy",
          get: function get() {
            var _this7 = this;

            // NOTE:
            // Some polyfills (e.g. `document-register-element`) do not call the constructor, therefore
            // it is not safe to set `ngElementStrategy` in the constructor and assume it will be
            // available inside the methods.
            //
            // TODO(andrewseguin): Add e2e tests that cover cases where the constructor isn't called. For
            // now this is tested using a Google internal test suite.
            if (!this._ngElementStrategy) {
              /** @type {?} */
              var strategy = this._ngElementStrategy = strategyFactory.create(this.injector || config.injector); // Collect pre-existing values on the element to re-apply through the strategy.

              /** @type {?} */

              var preExistingValues = inputs.filter(
              /**
              * @param {?} __0
              * @return {?}
              */
              function (_ref5) {
                var propName = _ref5.propName;
                return _this7.hasOwnProperty(propName);
              }).map(
              /**
              * @param {?} __0
              * @return {?}
              */
              function (_ref6) {
                var propName = _ref6.propName;
                return [propName,
                /** @type {?} */
                _this7[propName]];
              }); // In some browsers (e.g. IE10), `Object.setPrototypeOf()` (which is required by some Custom
              // Elements polyfills) is not defined and is thus polyfilled in a way that does not preserve
              // the prototype chain. In such cases, `this` will not be an instance of `NgElementImpl` and
              // thus not have the component input getters/setters defined on `NgElementImpl.prototype`.

              if (!(this instanceof NgElementImpl)) {
                // Add getters and setters to the instance itself for each property input.
                defineInputGettersSetters(inputs, this);
              } else {
                // Delete the property from the instance, so that it can go through the getters/setters
                // set on `NgElementImpl.prototype`.
                preExistingValues.forEach(
                /**
                * @param {?} __0
                * @return {?}
                */
                function (_ref7) {
                  var _ref8 = _slicedToArray(_ref7, 1),
                      propName = _ref8[0];

                  return delete
                  /** @type {?} */
                  _this7[propName];
                });
              } // Re-apply pre-existing values through the strategy.


              preExistingValues.forEach(
              /**
              * @param {?} __0
              * @return {?}
              */
              function (_ref9) {
                var _ref10 = _slicedToArray(_ref9, 2),
                    propName = _ref10[0],
                    value = _ref10[1];

                return strategy.setInputValue(propName, value);
              });
            }

            return (
              /** @type {?} */
              this._ngElementStrategy
            );
          }
        }]);

        return NgElementImpl;
      }(NgElement); // Work around a bug in closure typed optimizations(b/79557487) where it is not honoring static
      // field externs. So using quoted access to explicitly prevent renaming.


      NgElementImpl['observedAttributes'] = Object.keys(attributeToPropertyInputs);

      if (false) {} // Add getters and setters to the prototype for each property input.


      defineInputGettersSetters(inputs, NgElementImpl.prototype);
      return (
        /** @type {?} */

        /** @type {?} */
        NgElementImpl
      );
    } // Helpers

    /**
     * @param {?} inputs
     * @param {?} target
     * @return {?}
     */


    function defineInputGettersSetters(inputs, target) {
      // Add getters and setters for each property input.
      inputs.forEach(
      /**
      * @param {?} __0
      * @return {?}
      */
      function (_ref11) {
        var propName = _ref11.propName;
        Object.defineProperty(target, propName, {
          /**
           * @return {?}
           */
          get: function get() {
            return this.ngElementStrategy.getInputValue(propName);
          },

          /**
           * @param {?} newValue
           * @return {?}
           */
          set: function set(newValue) {
            this.ngElementStrategy.setInputValue(propName, newValue);
          },
          configurable: true,
          enumerable: true
        });
      });
    }
    /**
     * @fileoverview added by tsickle
     * Generated from: packages/elements/src/version.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * \@publicApi
     * @type {?}
     */


    var VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Version"]('9.1.11');
    /**
     * @fileoverview added by tsickle
     * Generated from: packages/elements/public_api.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: packages/elements/index.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Generated bundle index. Do not edit.
     */
    //# sourceMappingURL=elements.js.map

    /***/
  },

  /***/
  "./node_modules/asciimath-to-latex/index.js":
  /*!**************************************************!*\
    !*** ./node_modules/asciimath-to-latex/index.js ***!
    \**************************************************/

  /*! no static exports found */

  /***/
  function node_modulesAsciimathToLatexIndexJs(module, exports) {
    var config = {
      translateOnLoad: true,
      //true to autotranslate
      mathcolor: "",
      // defaults to back, or specify any other color
      displaystyle: true,
      // puts limits above and below large operators
      showasciiformulaonhover: true,
      // helps students learn ASCIIMath
      decimalsign: ".",
      // change to "," if you like, beware of `(1,2)`!
      AMdelimiter1: "`",
      AMescape1: "\\\\`",
      // can use other characters
      AMusedelimiter2: false,
      //whether to use second delimiter below
      AMdelimiter2: "$",
      AMescape2: "\\\\\\$",
      AMdelimiter2regexp: "\\$",
      AMdocumentId: "wikitext",
      // PmWiki element containing math (default=body)
      doubleblankmathdelimiter: false // if true,  x+1  is equal to `x+1`

    }; // for IE this works only in <!--   -->

    var CONST = 0,
        UNARY = 1,
        BINARY = 2,
        INFIX = 3,
        LEFTBRACKET = 4,
        RIGHTBRACKET = 5,
        SPACE = 6,
        UNDEROVER = 7,
        DEFINITION = 8,
        LEFTRIGHT = 9,
        TEXT = 10; // token types

    var AMsqrt = {
      input: "sqrt",
      tag: "msqrt",
      output: "sqrt",
      tex: null,
      ttype: UNARY
    },
        AMroot = {
      input: "root",
      tag: "mroot",
      output: "root",
      tex: null,
      ttype: BINARY
    },
        AMfrac = {
      input: "frac",
      tag: "mfrac",
      output: "/",
      tex: null,
      ttype: BINARY
    },
        AMdiv = {
      input: "/",
      tag: "mfrac",
      output: "/",
      tex: null,
      ttype: INFIX
    },
        AMover = {
      input: "stackrel",
      tag: "mover",
      output: "stackrel",
      tex: null,
      ttype: BINARY
    },
        AMsub = {
      input: "_",
      tag: "msub",
      output: "_",
      tex: null,
      ttype: INFIX
    },
        AMsup = {
      input: "^",
      tag: "msup",
      output: "^",
      tex: null,
      ttype: INFIX
    },
        AMtext = {
      input: "text",
      tag: "mtext",
      output: "text",
      tex: null,
      ttype: TEXT
    },
        AMmbox = {
      input: "mbox",
      tag: "mtext",
      output: "mbox",
      tex: null,
      ttype: TEXT
    },
        AMquote = {
      input: "\"",
      tag: "mtext",
      output: "mbox",
      tex: null,
      ttype: TEXT
    };
    var AMsymbols = [//some greek symbols
    {
      input: "alpha",
      tag: "mi",
      output: "\u03B1",
      tex: null,
      ttype: CONST
    }, {
      input: "beta",
      tag: "mi",
      output: "\u03B2",
      tex: null,
      ttype: CONST
    }, {
      input: "chi",
      tag: "mi",
      output: "\u03C7",
      tex: null,
      ttype: CONST
    }, {
      input: "delta",
      tag: "mi",
      output: "\u03B4",
      tex: null,
      ttype: CONST
    }, {
      input: "Delta",
      tag: "mo",
      output: "\u0394",
      tex: null,
      ttype: CONST
    }, {
      input: "epsi",
      tag: "mi",
      output: "\u03B5",
      tex: "epsilon",
      ttype: CONST
    }, {
      input: "varepsilon",
      tag: "mi",
      output: "\u025B",
      tex: null,
      ttype: CONST
    }, {
      input: "eta",
      tag: "mi",
      output: "\u03B7",
      tex: null,
      ttype: CONST
    }, {
      input: "gamma",
      tag: "mi",
      output: "\u03B3",
      tex: null,
      ttype: CONST
    }, {
      input: "Gamma",
      tag: "mo",
      output: "\u0393",
      tex: null,
      ttype: CONST
    }, {
      input: "iota",
      tag: "mi",
      output: "\u03B9",
      tex: null,
      ttype: CONST
    }, {
      input: "kappa",
      tag: "mi",
      output: "\u03BA",
      tex: null,
      ttype: CONST
    }, {
      input: "lambda",
      tag: "mi",
      output: "\u03BB",
      tex: null,
      ttype: CONST
    }, {
      input: "Lambda",
      tag: "mo",
      output: "\u039B",
      tex: null,
      ttype: CONST
    }, {
      input: "lamda",
      tag: "mi",
      output: "lambda",
      tex: null,
      ttype: DEFINITION
    }, {
      input: "Lamda",
      tag: "mi",
      output: "Lambda",
      tex: null,
      ttype: DEFINITION
    }, {
      input: "mu",
      tag: "mi",
      output: "\u03BC",
      tex: null,
      ttype: CONST
    }, {
      input: "nu",
      tag: "mi",
      output: "\u03BD",
      tex: null,
      ttype: CONST
    }, {
      input: "omega",
      tag: "mi",
      output: "\u03C9",
      tex: null,
      ttype: CONST
    }, {
      input: "Omega",
      tag: "mo",
      output: "\u03A9",
      tex: null,
      ttype: CONST
    }, {
      input: "phi",
      tag: "mi",
      output: "\u03C6",
      tex: null,
      ttype: CONST
    }, {
      input: "varphi",
      tag: "mi",
      output: "\u03D5",
      tex: null,
      ttype: CONST
    }, {
      input: "Phi",
      tag: "mo",
      output: "\u03A6",
      tex: null,
      ttype: CONST
    }, {
      input: "pi",
      tag: "mi",
      output: "\u03C0",
      tex: null,
      ttype: CONST
    }, {
      input: "Pi",
      tag: "mo",
      output: "\u03A0",
      tex: null,
      ttype: CONST
    }, {
      input: "psi",
      tag: "mi",
      output: "\u03C8",
      tex: null,
      ttype: CONST
    }, {
      input: "Psi",
      tag: "mi",
      output: "\u03A8",
      tex: null,
      ttype: CONST
    }, {
      input: "rho",
      tag: "mi",
      output: "\u03C1",
      tex: null,
      ttype: CONST
    }, {
      input: "sigma",
      tag: "mi",
      output: "\u03C3",
      tex: null,
      ttype: CONST
    }, {
      input: "Sigma",
      tag: "mo",
      output: "\u03A3",
      tex: null,
      ttype: CONST
    }, {
      input: "tau",
      tag: "mi",
      output: "\u03C4",
      tex: null,
      ttype: CONST
    }, {
      input: "theta",
      tag: "mi",
      output: "\u03B8",
      tex: null,
      ttype: CONST
    }, {
      input: "vartheta",
      tag: "mi",
      output: "\u03D1",
      tex: null,
      ttype: CONST
    }, {
      input: "Theta",
      tag: "mo",
      output: "\u0398",
      tex: null,
      ttype: CONST
    }, {
      input: "upsilon",
      tag: "mi",
      output: "\u03C5",
      tex: null,
      ttype: CONST
    }, {
      input: "xi",
      tag: "mi",
      output: "\u03BE",
      tex: null,
      ttype: CONST
    }, {
      input: "Xi",
      tag: "mo",
      output: "\u039E",
      tex: null,
      ttype: CONST
    }, {
      input: "zeta",
      tag: "mi",
      output: "\u03B6",
      tex: null,
      ttype: CONST
    }, //binary operation symbols
    {
      input: "*",
      tag: "mo",
      output: "\u22C5",
      tex: "cdot",
      ttype: CONST
    }, {
      input: "**",
      tag: "mo",
      output: "\u2217",
      tex: "ast",
      ttype: CONST
    }, {
      input: "***",
      tag: "mo",
      output: "\u22C6",
      tex: "star",
      ttype: CONST
    }, {
      input: "//",
      tag: "mo",
      output: "/",
      tex: "/",
      ttype: CONST,
      val: true,
      notexcopy: true
    }, {
      input: "\\\\",
      tag: "mo",
      output: "\\",
      tex: "backslash",
      ttype: CONST
    }, {
      input: "setminus",
      tag: "mo",
      output: "\\",
      tex: null,
      ttype: CONST
    }, {
      input: "xx",
      tag: "mo",
      output: "\xD7",
      tex: "times",
      ttype: CONST
    }, {
      input: "|><",
      tag: "mo",
      output: "\u22C9",
      tex: "ltimes",
      ttype: CONST
    }, {
      input: "><|",
      tag: "mo",
      output: "\u22CA",
      tex: "rtimes",
      ttype: CONST
    }, {
      input: "|><|",
      tag: "mo",
      output: "\u22C8",
      tex: "bowtie",
      ttype: CONST
    }, {
      input: "-:",
      tag: "mo",
      output: "\xF7",
      tex: "div",
      ttype: CONST
    }, {
      input: "divide",
      tag: "mo",
      output: "-:",
      tex: null,
      ttype: DEFINITION
    }, {
      input: "@",
      tag: "mo",
      output: "\u2218",
      tex: "circ",
      ttype: CONST
    }, {
      input: "o+",
      tag: "mo",
      output: "\u2295",
      tex: "oplus",
      ttype: CONST
    }, {
      input: "ox",
      tag: "mo",
      output: "\u2297",
      tex: "otimes",
      ttype: CONST
    }, {
      input: "o.",
      tag: "mo",
      output: "\u2299",
      tex: "odot",
      ttype: CONST
    }, {
      input: "sum",
      tag: "mo",
      output: "\u2211",
      tex: null,
      ttype: UNDEROVER
    }, {
      input: "prod",
      tag: "mo",
      output: "\u220F",
      tex: null,
      ttype: UNDEROVER
    }, {
      input: "^^",
      tag: "mo",
      output: "\u2227",
      tex: "wedge",
      ttype: CONST
    }, {
      input: "^^^",
      tag: "mo",
      output: "\u22C0",
      tex: "bigwedge",
      ttype: UNDEROVER
    }, {
      input: "vv",
      tag: "mo",
      output: "\u2228",
      tex: "vee",
      ttype: CONST
    }, {
      input: "vvv",
      tag: "mo",
      output: "\u22C1",
      tex: "bigvee",
      ttype: UNDEROVER
    }, {
      input: "nn",
      tag: "mo",
      output: "\u2229",
      tex: "cap",
      ttype: CONST
    }, {
      input: "nnn",
      tag: "mo",
      output: "\u22C2",
      tex: "bigcap",
      ttype: UNDEROVER
    }, {
      input: "uu",
      tag: "mo",
      output: "\u222A",
      tex: "cup",
      ttype: CONST
    }, {
      input: "uuu",
      tag: "mo",
      output: "\u22C3",
      tex: "bigcup",
      ttype: UNDEROVER
    }, {
      input: "overset",
      tag: "mover",
      output: "stackrel",
      tex: null,
      ttype: BINARY
    }, {
      input: "underset",
      tag: "munder",
      output: "stackrel",
      tex: null,
      ttype: BINARY
    }, //binary relation symbols
    {
      input: "!=",
      tag: "mo",
      output: "\u2260",
      tex: "ne",
      ttype: CONST
    }, {
      input: ":=",
      tag: "mo",
      output: ":=",
      tex: null,
      ttype: CONST
    }, {
      input: "lt",
      tag: "mo",
      output: "<",
      tex: null,
      ttype: CONST
    }, {
      input: "gt",
      tag: "mo",
      output: ">",
      tex: null,
      ttype: CONST
    }, {
      input: "<=",
      tag: "mo",
      output: "\u2264",
      tex: "le",
      ttype: CONST
    }, {
      input: "lt=",
      tag: "mo",
      output: "\u2264",
      tex: "leq",
      ttype: CONST
    }, {
      input: "gt=",
      tag: "mo",
      output: "\u2265",
      tex: "geq",
      ttype: CONST
    }, {
      input: ">=",
      tag: "mo",
      output: "\u2265",
      tex: "ge",
      ttype: CONST
    }, {
      input: "-<",
      tag: "mo",
      output: "\u227A",
      tex: "prec",
      ttype: CONST
    }, {
      input: "-lt",
      tag: "mo",
      output: "\u227A",
      tex: null,
      ttype: CONST
    }, {
      input: ">-",
      tag: "mo",
      output: "\u227B",
      tex: "succ",
      ttype: CONST
    }, {
      input: "-<=",
      tag: "mo",
      output: "\u2AAF",
      tex: "preceq",
      ttype: CONST
    }, {
      input: ">-=",
      tag: "mo",
      output: "\u2AB0",
      tex: "succeq",
      ttype: CONST
    }, {
      input: "in",
      tag: "mo",
      output: "\u2208",
      tex: null,
      ttype: CONST
    }, {
      input: "!in",
      tag: "mo",
      output: "\u2209",
      tex: "notin",
      ttype: CONST
    }, {
      input: "sub",
      tag: "mo",
      output: "\u2282",
      tex: "subset",
      ttype: CONST
    }, {
      input: "sup",
      tag: "mo",
      output: "\u2283",
      tex: "supset",
      ttype: CONST
    }, {
      input: "sube",
      tag: "mo",
      output: "\u2286",
      tex: "subseteq",
      ttype: CONST
    }, {
      input: "supe",
      tag: "mo",
      output: "\u2287",
      tex: "supseteq",
      ttype: CONST
    }, {
      input: "-=",
      tag: "mo",
      output: "\u2261",
      tex: "equiv",
      ttype: CONST
    }, {
      input: "~=",
      tag: "mo",
      output: "\u2245",
      tex: "stackrel{\\sim}{=}",
      ttype: CONST
    }, //back hack b/c mimetex doesn't support /cong
    {
      input: "cong",
      tag: "mo",
      output: "~=",
      tex: null,
      ttype: DEFINITION
    }, {
      input: "~~",
      tag: "mo",
      output: "\u2248",
      tex: "approx",
      ttype: CONST
    }, {
      input: "prop",
      tag: "mo",
      output: "\u221D",
      tex: "propto",
      ttype: CONST
    }, //logical symbols
    {
      input: "and",
      tag: "mtext",
      output: "and",
      tex: null,
      ttype: SPACE
    }, {
      input: "or",
      tag: "mtext",
      output: "or",
      tex: null,
      ttype: SPACE
    }, {
      input: "not",
      tag: "mo",
      output: "\xAC",
      tex: "neg",
      ttype: CONST
    }, {
      input: "=>",
      tag: "mo",
      output: "\u21D2",
      tex: "Rightarrow",
      ttype: CONST
    }, {
      input: "implies",
      tag: "mo",
      output: "=>",
      tex: null,
      ttype: DEFINITION
    }, {
      input: "if",
      tag: "mo",
      output: "if",
      tex: null,
      ttype: SPACE
    }, {
      input: "<=>",
      tag: "mo",
      output: "\u21D4",
      tex: "Leftrightarrow",
      ttype: CONST
    }, {
      input: "iff",
      tag: "mo",
      output: "<=>",
      tex: null,
      ttype: DEFINITION
    }, {
      input: "AA",
      tag: "mo",
      output: "\u2200",
      tex: "forall",
      ttype: CONST
    }, {
      input: "EE",
      tag: "mo",
      output: "\u2203",
      tex: "exists",
      ttype: CONST
    }, {
      input: "_|_",
      tag: "mo",
      output: "\u22A5",
      tex: "bot",
      ttype: CONST
    }, {
      input: "TT",
      tag: "mo",
      output: "\u22A4",
      tex: "top",
      ttype: CONST
    }, {
      input: "|--",
      tag: "mo",
      output: "\u22A2",
      tex: "vdash",
      ttype: CONST
    }, {
      input: "|==",
      tag: "mo",
      output: "\u22A8",
      tex: "models",
      ttype: CONST
    }, //mimetex doesn't support
    //grouping brackets
    {
      input: "(",
      tag: "mo",
      output: "(",
      tex: null,
      ttype: LEFTBRACKET,
      val: true
    }, {
      input: ")",
      tag: "mo",
      output: ")",
      tex: null,
      ttype: RIGHTBRACKET,
      val: true
    }, {
      input: "[",
      tag: "mo",
      output: "[",
      tex: null,
      ttype: LEFTBRACKET,
      val: true
    }, {
      input: "]",
      tag: "mo",
      output: "]",
      tex: null,
      ttype: RIGHTBRACKET,
      val: true
    }, {
      input: "{",
      tag: "mo",
      output: "{",
      tex: "lbrace",
      ttype: LEFTBRACKET
    }, {
      input: "}",
      tag: "mo",
      output: "}",
      tex: "rbrace",
      ttype: RIGHTBRACKET
    }, {
      input: "|",
      tag: "mo",
      output: "|",
      tex: null,
      ttype: LEFTRIGHT,
      val: true
    }, //{input:"||", tag:"mo", output:"||", tex:null, ttype:LEFTRIGHT},
    {
      input: "(:",
      tag: "mo",
      output: "\u2329",
      tex: "langle",
      ttype: LEFTBRACKET
    }, {
      input: ":)",
      tag: "mo",
      output: "\u232A",
      tex: "rangle",
      ttype: RIGHTBRACKET
    }, {
      input: "<<",
      tag: "mo",
      output: "\u2329",
      tex: "langle",
      ttype: LEFTBRACKET
    }, {
      input: ">>",
      tag: "mo",
      output: "\u232A",
      tex: "rangle",
      ttype: RIGHTBRACKET
    }, {
      input: "{:",
      tag: "mo",
      output: "{:",
      tex: null,
      ttype: LEFTBRACKET,
      invisible: true
    }, {
      input: ":}",
      tag: "mo",
      output: ":}",
      tex: null,
      ttype: RIGHTBRACKET,
      invisible: true
    }, //miscellaneous symbols
    {
      input: "int",
      tag: "mo",
      output: "\u222B",
      tex: null,
      ttype: CONST
    }, {
      input: "dx",
      tag: "mi",
      output: "{:d x:}",
      tex: null,
      ttype: DEFINITION
    }, {
      input: "dy",
      tag: "mi",
      output: "{:d y:}",
      tex: null,
      ttype: DEFINITION
    }, {
      input: "dz",
      tag: "mi",
      output: "{:d z:}",
      tex: null,
      ttype: DEFINITION
    }, {
      input: "dt",
      tag: "mi",
      output: "{:d t:}",
      tex: null,
      ttype: DEFINITION
    }, {
      input: "oint",
      tag: "mo",
      output: "\u222E",
      tex: null,
      ttype: CONST
    }, {
      input: "del",
      tag: "mo",
      output: "\u2202",
      tex: "partial",
      ttype: CONST
    }, {
      input: "grad",
      tag: "mo",
      output: "\u2207",
      tex: "nabla",
      ttype: CONST
    }, {
      input: "+-",
      tag: "mo",
      output: "\xB1",
      tex: "pm",
      ttype: CONST
    }, {
      input: "O/",
      tag: "mo",
      output: "\u2205",
      tex: "emptyset",
      ttype: CONST
    }, {
      input: "oo",
      tag: "mo",
      output: "\u221E",
      tex: "infty",
      ttype: CONST
    }, {
      input: "aleph",
      tag: "mo",
      output: "\u2135",
      tex: null,
      ttype: CONST
    }, {
      input: "...",
      tag: "mo",
      output: "...",
      tex: "ldots",
      ttype: CONST
    }, {
      input: ":.",
      tag: "mo",
      output: "\u2234",
      tex: "therefore",
      ttype: CONST
    }, {
      input: ":'",
      tag: "mo",
      output: "\u2235",
      tex: "because",
      ttype: CONST
    }, {
      input: "/_",
      tag: "mo",
      output: "\u2220",
      tex: "angle",
      ttype: CONST
    }, {
      input: "/_\\",
      tag: "mo",
      output: "\u25B3",
      tex: "triangle",
      ttype: CONST
    }, {
      input: "\\ ",
      tag: "mo",
      output: "\xA0",
      tex: null,
      ttype: CONST,
      val: true
    }, {
      input: "frown",
      tag: "mo",
      output: "\u2322",
      tex: null,
      ttype: CONST
    }, {
      input: "%",
      tag: "mo",
      output: "%",
      tex: "%",
      ttype: CONST,
      notexcopy: true
    }, {
      input: "quad",
      tag: "mo",
      output: "\xA0\xA0",
      tex: null,
      ttype: CONST
    }, {
      input: "qquad",
      tag: "mo",
      output: "\xA0\xA0\xA0\xA0",
      tex: null,
      ttype: CONST
    }, {
      input: "cdots",
      tag: "mo",
      output: "\u22EF",
      tex: null,
      ttype: CONST
    }, {
      input: "vdots",
      tag: "mo",
      output: "\u22EE",
      tex: null,
      ttype: CONST
    }, {
      input: "ddots",
      tag: "mo",
      output: "\u22F1",
      tex: null,
      ttype: CONST
    }, {
      input: "diamond",
      tag: "mo",
      output: "\u22C4",
      tex: null,
      ttype: CONST
    }, {
      input: "square",
      tag: "mo",
      output: "\u25A1",
      tex: "boxempty",
      ttype: CONST
    }, {
      input: "|__",
      tag: "mo",
      output: "\u230A",
      tex: "lfloor",
      ttype: CONST
    }, {
      input: "__|",
      tag: "mo",
      output: "\u230B",
      tex: "rfloor",
      ttype: CONST
    }, {
      input: "|~",
      tag: "mo",
      output: "\u2308",
      tex: "lceil",
      ttype: CONST
    }, {
      input: "lceiling",
      tag: "mo",
      output: "|~",
      tex: null,
      ttype: DEFINITION
    }, {
      input: "~|",
      tag: "mo",
      output: "\u2309",
      tex: "rceil",
      ttype: CONST
    }, {
      input: "rceiling",
      tag: "mo",
      output: "~|",
      tex: null,
      ttype: DEFINITION
    }, {
      input: "CC",
      tag: "mo",
      output: "\u2102",
      tex: "mathbb{C}",
      ttype: CONST,
      notexcopy: true
    }, {
      input: "NN",
      tag: "mo",
      output: "\u2115",
      tex: "mathbb{N}",
      ttype: CONST,
      notexcopy: true
    }, {
      input: "QQ",
      tag: "mo",
      output: "\u211A",
      tex: "mathbb{Q}",
      ttype: CONST,
      notexcopy: true
    }, {
      input: "RR",
      tag: "mo",
      output: "\u211D",
      tex: "mathbb{R}",
      ttype: CONST,
      notexcopy: true
    }, {
      input: "ZZ",
      tag: "mo",
      output: "\u2124",
      tex: "mathbb{Z}",
      ttype: CONST,
      notexcopy: true
    }, {
      input: "f",
      tag: "mi",
      output: "f",
      tex: null,
      ttype: UNARY,
      func: true,
      val: true
    }, {
      input: "g",
      tag: "mi",
      output: "g",
      tex: null,
      ttype: UNARY,
      func: true,
      val: true
    }, {
      input: "''",
      tag: "mo",
      output: "''",
      tex: null,
      val: true
    }, {
      input: "'''",
      tag: "mo",
      output: "'''",
      tex: null,
      val: true
    }, {
      input: "''''",
      tag: "mo",
      output: "''''",
      tex: null,
      val: true
    }, //standard functions
    {
      input: "lim",
      tag: "mo",
      output: "lim",
      tex: null,
      ttype: UNDEROVER
    }, {
      input: "Lim",
      tag: "mo",
      output: "Lim",
      tex: null,
      ttype: UNDEROVER
    }, {
      input: "sin",
      tag: "mo",
      output: "sin",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "cos",
      tag: "mo",
      output: "cos",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "tan",
      tag: "mo",
      output: "tan",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "arcsin",
      tag: "mo",
      output: "arcsin",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "arccos",
      tag: "mo",
      output: "arccos",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "arctan",
      tag: "mo",
      output: "arctan",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "sinh",
      tag: "mo",
      output: "sinh",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "cosh",
      tag: "mo",
      output: "cosh",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "tanh",
      tag: "mo",
      output: "tanh",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "cot",
      tag: "mo",
      output: "cot",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "coth",
      tag: "mo",
      output: "coth",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "sech",
      tag: "mo",
      output: "sech",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "csch",
      tag: "mo",
      output: "csch",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "sec",
      tag: "mo",
      output: "sec",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "csc",
      tag: "mo",
      output: "csc",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "log",
      tag: "mo",
      output: "log",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "ln",
      tag: "mo",
      output: "ln",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "abs",
      tag: "mo",
      output: "abs",
      tex: null,
      ttype: UNARY,
      notexcopy: true,
      rewriteleftright: ["|", "|"]
    }, {
      input: "norm",
      tag: "mo",
      output: "norm",
      tex: null,
      ttype: UNARY,
      notexcopy: true,
      rewriteleftright: ["\\|", "\\|"]
    }, {
      input: "floor",
      tag: "mo",
      output: "floor",
      tex: null,
      ttype: UNARY,
      notexcopy: true,
      rewriteleftright: ["\\lfloor", "\\rfloor"]
    }, {
      input: "ceil",
      tag: "mo",
      output: "ceil",
      tex: null,
      ttype: UNARY,
      notexcopy: true,
      rewriteleftright: ["\\lceil", "\\rceil"]
    }, {
      input: "Sin",
      tag: "mo",
      output: "sin",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "Cos",
      tag: "mo",
      output: "cos",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "Tan",
      tag: "mo",
      output: "tan",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "Arcsin",
      tag: "mo",
      output: "arcsin",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "Arccos",
      tag: "mo",
      output: "arccos",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "Arctan",
      tag: "mo",
      output: "arctan",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "Sinh",
      tag: "mo",
      output: "sinh",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "Sosh",
      tag: "mo",
      output: "cosh",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "Tanh",
      tag: "mo",
      output: "tanh",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "Cot",
      tag: "mo",
      output: "cot",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "Sec",
      tag: "mo",
      output: "sec",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "Csc",
      tag: "mo",
      output: "csc",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "Log",
      tag: "mo",
      output: "log",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "Ln",
      tag: "mo",
      output: "ln",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "Abs",
      tag: "mo",
      output: "abs",
      tex: null,
      ttype: UNARY,
      notexcopy: true,
      rewriteleftright: ["|", "|"]
    }, {
      input: "det",
      tag: "mo",
      output: "det",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "exp",
      tag: "mo",
      output: "exp",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "dim",
      tag: "mo",
      output: "dim",
      tex: null,
      ttype: CONST
    }, {
      input: "mod",
      tag: "mo",
      output: "mod",
      tex: "text{mod}",
      ttype: CONST,
      notexcopy: true
    }, {
      input: "gcd",
      tag: "mo",
      output: "gcd",
      tex: null,
      ttype: UNARY,
      func: true
    }, {
      input: "lcm",
      tag: "mo",
      output: "lcm",
      tex: "text{lcm}",
      ttype: UNARY,
      func: true,
      notexcopy: true
    }, {
      input: "lub",
      tag: "mo",
      output: "lub",
      tex: null,
      ttype: CONST
    }, {
      input: "glb",
      tag: "mo",
      output: "glb",
      tex: null,
      ttype: CONST
    }, {
      input: "min",
      tag: "mo",
      output: "min",
      tex: null,
      ttype: UNDEROVER
    }, {
      input: "max",
      tag: "mo",
      output: "max",
      tex: null,
      ttype: UNDEROVER
    }, //arrows
    {
      input: "uarr",
      tag: "mo",
      output: "\u2191",
      tex: "uparrow",
      ttype: CONST
    }, {
      input: "darr",
      tag: "mo",
      output: "\u2193",
      tex: "downarrow",
      ttype: CONST
    }, {
      input: "rarr",
      tag: "mo",
      output: "\u2192",
      tex: "rightarrow",
      ttype: CONST
    }, {
      input: "->",
      tag: "mo",
      output: "\u2192",
      tex: "to",
      ttype: CONST
    }, {
      input: ">->",
      tag: "mo",
      output: "\u21A3",
      tex: "rightarrowtail",
      ttype: CONST
    }, {
      input: "->>",
      tag: "mo",
      output: "\u21A0",
      tex: "twoheadrightarrow",
      ttype: CONST
    }, {
      input: ">->>",
      tag: "mo",
      output: "\u2916",
      tex: "twoheadrightarrowtail",
      ttype: CONST
    }, {
      input: "|->",
      tag: "mo",
      output: "\u21A6",
      tex: "mapsto",
      ttype: CONST
    }, {
      input: "larr",
      tag: "mo",
      output: "\u2190",
      tex: "leftarrow",
      ttype: CONST
    }, {
      input: "harr",
      tag: "mo",
      output: "\u2194",
      tex: "leftrightarrow",
      ttype: CONST
    }, {
      input: "rArr",
      tag: "mo",
      output: "\u21D2",
      tex: "Rightarrow",
      ttype: CONST
    }, {
      input: "lArr",
      tag: "mo",
      output: "\u21D0",
      tex: "Leftarrow",
      ttype: CONST
    }, {
      input: "hArr",
      tag: "mo",
      output: "\u21D4",
      tex: "Leftrightarrow",
      ttype: CONST
    }, //commands with argument
    AMsqrt, AMroot, AMfrac, AMdiv, AMover, AMsub, AMsup, {
      input: "cancel",
      tag: "menclose",
      output: "cancel",
      tex: null,
      ttype: UNARY
    }, {
      input: "Sqrt",
      tag: "msqrt",
      output: "sqrt",
      tex: null,
      ttype: UNARY
    }, {
      input: "hat",
      tag: "mover",
      output: "^",
      tex: null,
      ttype: UNARY,
      acc: true
    }, {
      input: "bar",
      tag: "mover",
      output: "\xAF",
      tex: "overline",
      ttype: UNARY,
      acc: true
    }, {
      input: "vec",
      tag: "mover",
      output: "\u2192",
      tex: null,
      ttype: UNARY,
      acc: true
    }, {
      input: "tilde",
      tag: "mover",
      output: "~",
      tex: null,
      ttype: UNARY,
      acc: true
    }, {
      input: "dot",
      tag: "mover",
      output: ".",
      tex: null,
      ttype: UNARY,
      acc: true
    }, {
      input: "ddot",
      tag: "mover",
      output: "..",
      tex: null,
      ttype: UNARY,
      acc: true
    }, {
      input: "ul",
      tag: "munder",
      output: "\u0332",
      tex: "underline",
      ttype: UNARY,
      acc: true
    }, {
      input: "ubrace",
      tag: "munder",
      output: "\u23DF",
      tex: "underbrace",
      ttype: UNARY,
      acc: true
    }, {
      input: "obrace",
      tag: "mover",
      output: "\u23DE",
      tex: "overbrace",
      ttype: UNARY,
      acc: true
    }, AMtext, AMmbox, AMquote, //{input:"var", tag:"mstyle", atname:"fontstyle", atval:"italic", output:"var", tex:null, ttype:UNARY},
    {
      input: "color",
      tag: "mstyle",
      ttype: BINARY
    }, {
      input: "bb",
      tag: "mstyle",
      atname: "mathvariant",
      atval: "bold",
      output: "bb",
      tex: "mathbf",
      ttype: UNARY,
      notexcopy: true
    }, {
      input: "mathbf",
      tag: "mstyle",
      atname: "mathvariant",
      atval: "bold",
      output: "mathbf",
      tex: null,
      ttype: UNARY
    }, {
      input: "sf",
      tag: "mstyle",
      atname: "mathvariant",
      atval: "sans-serif",
      output: "sf",
      tex: "mathsf",
      ttype: UNARY,
      notexcopy: true
    }, {
      input: "mathsf",
      tag: "mstyle",
      atname: "mathvariant",
      atval: "sans-serif",
      output: "mathsf",
      tex: null,
      ttype: UNARY
    }, {
      input: "bbb",
      tag: "mstyle",
      atname: "mathvariant",
      atval: "double-struck",
      output: "bbb",
      tex: "mathbb",
      ttype: UNARY,
      notexcopy: true
    }, {
      input: "mathbb",
      tag: "mstyle",
      atname: "mathvariant",
      atval: "double-struck",
      output: "mathbb",
      tex: null,
      ttype: UNARY
    }, {
      input: "cc",
      tag: "mstyle",
      atname: "mathvariant",
      atval: "script",
      output: "cc",
      tex: "mathcal",
      ttype: UNARY,
      notexcopy: true
    }, {
      input: "mathcal",
      tag: "mstyle",
      atname: "mathvariant",
      atval: "script",
      output: "mathcal",
      tex: null,
      ttype: UNARY
    }, {
      input: "tt",
      tag: "mstyle",
      atname: "mathvariant",
      atval: "monospace",
      output: "tt",
      tex: "mathtt",
      ttype: UNARY,
      notexcopy: true
    }, {
      input: "mathtt",
      tag: "mstyle",
      atname: "mathvariant",
      atval: "monospace",
      output: "mathtt",
      tex: null,
      ttype: UNARY
    }, {
      input: "fr",
      tag: "mstyle",
      atname: "mathvariant",
      atval: "fraktur",
      output: "fr",
      tex: "mathfrak",
      ttype: UNARY,
      notexcopy: true
    }, {
      input: "mathfrak",
      tag: "mstyle",
      atname: "mathvariant",
      atval: "fraktur",
      output: "mathfrak",
      tex: null,
      ttype: UNARY
    }];

    function compareNames(s1, s2) {
      if (s1.input > s2.input) return 1;else return -1;
    }

    var AMnames = []; //list of input symbols

    function AMinitSymbols() {
      var i;
      var symlen = AMsymbols.length;

      for (i = 0; i < symlen; i++) {
        if (AMsymbols[i].tex && !(typeof AMsymbols[i].notexcopy == "boolean" && AMsymbols[i].notexcopy)) {
          AMsymbols.push({
            input: AMsymbols[i].tex,
            tag: AMsymbols[i].tag,
            output: AMsymbols[i].output,
            ttype: AMsymbols[i].ttype,
            acc: AMsymbols[i].acc || false
          });
        }
      }

      refreshSymbols();
    }

    function refreshSymbols() {
      var i;
      AMsymbols.sort(compareNames);

      for (i = 0; i < AMsymbols.length; i++) {
        AMnames[i] = AMsymbols[i].input;
      }
    }

    function newcommand(oldstr, newstr) {
      AMsymbols.push({
        input: oldstr,
        tag: "mo",
        output: newstr,
        tex: null,
        ttype: DEFINITION
      });
      refreshSymbols();
    }

    function newsymbol(symbolobj) {
      AMsymbols.push(symbolobj);
      refreshSymbols();
    }

    function AMremoveCharsAndBlanks(str, n) {
      //remove n characters and any following blanks
      var st;
      if (str.charAt(n) == "\\" && str.charAt(n + 1) != "\\" && str.charAt(n + 1) != " ") st = str.slice(n + 1);else st = str.slice(n);

      for (var i = 0; i < st.length && st.charCodeAt(i) <= 32; i = i + 1) {
        ;
      }

      return st.slice(i);
    }

    function AMposition(arr, str, n) {
      // return position >=n where str appears or would be inserted
      // assumes arr is sorted
      if (n == 0) {
        var h, m;
        n = -1;
        h = arr.length;

        while (n + 1 < h) {
          m = n + h >> 1;
          if (arr[m] < str) n = m;else h = m;
        }

        return h;
      } else for (var i = n; i < arr.length && arr[i] < str; i++) {
        ;
      }

      return i; // i=arr.length || arr[i]>=str
    }

    function AMgetSymbol(str) {
      //return maximal initial substring of str that appears in names
      //return null if there is none
      var k = 0; //new pos

      var j = 0; //old pos

      var mk; //match pos

      var st;
      var tagst;
      var match = "";
      var more = true;

      for (var i = 1; i <= str.length && more; i++) {
        st = str.slice(0, i); //initial substring of length i

        j = k;
        k = AMposition(AMnames, st, j);

        if (k < AMnames.length && str.slice(0, AMnames[k].length) == AMnames[k]) {
          match = AMnames[k];
          mk = k;
          i = match.length;
        }

        more = k < AMnames.length && str.slice(0, AMnames[k].length) >= AMnames[k];
      }

      AMpreviousSymbol = AMcurrentSymbol;

      if (match != "") {
        AMcurrentSymbol = AMsymbols[mk].ttype;
        return AMsymbols[mk];
      } // if str[0] is a digit or - return maxsubstring of digits.digits


      AMcurrentSymbol = CONST;
      k = 1;
      st = str.slice(0, 1);
      var integ = true;

      while ("0" <= st && st <= "9" && k <= str.length) {
        st = str.slice(k, k + 1);
        k++;
      }

      if (st == config.decimalsign) {
        st = str.slice(k, k + 1);

        if ("0" <= st && st <= "9") {
          integ = false;
          k++;

          while ("0" <= st && st <= "9" && k <= str.length) {
            st = str.slice(k, k + 1);
            k++;
          }
        }
      }

      if (integ && k > 1 || k > 2) {
        st = str.slice(0, k - 1);
        tagst = "mn";
      } else {
        k = 2;
        st = str.slice(0, 1); //take 1 character

        tagst = ("A" > st || st > "Z") && ("a" > st || st > "z") ? "mo" : "mi";
      }

      if (st == "-" && AMpreviousSymbol == INFIX) {
        AMcurrentSymbol = INFIX;
        return {
          input: st,
          tag: tagst,
          output: st,
          ttype: UNARY,
          func: true,
          val: true
        };
      }

      return {
        input: st,
        tag: tagst,
        output: st,
        ttype: CONST,
        val: true
      }; //added val bit
    }

    function AMTremoveBrackets(node) {
      var st;

      if (node.charAt(0) == '{' && node.charAt(node.length - 1) == '}') {
        var leftchop = 0;
        st = node.substr(1, 5);

        if (st == '\\left') {
          st = node.charAt(6);

          if (st == "(" || st == "[" || st == "{") {
            leftchop = 7;
          } else {
            st = node.substr(6, 7);

            if (st == '\\lbrace') {
              leftchop = 13;
            }
          }
        } else {
          st = node.charAt(1);

          if (st == "(" || st == "[") {
            leftchop = 2;
          }
        }

        if (leftchop > 0) {
          //st = node.charAt(node.length-7);
          st = node.substr(node.length - 8);

          if (st == "\\right)}" || st == "\\right]}" || st == '\\right.}') {
            node = '{' + node.substr(leftchop);
            node = node.substr(0, node.length - 8) + '}';
          } else if (st == '\\rbrace}') {
            node = '{' + node.substr(leftchop);
            node = node.substr(0, node.length - 14) + '}';
          }
        }
      }

      return node;
    }
    /*Parsing ASCII math expressions with the following grammar
    v ::= [A-Za-z] | greek letters | numbers | other constant symbols
    u ::= sqrt | text | bb | other unary symbols for font commands
    b ::= frac | root | stackrel         binary symbols
    l ::= ( | [ | { | (: | {:            left brackets
    r ::= ) | ] | } | :) | :}            right brackets
    S ::= v | lEr | uS | bSS             Simple expression
    I ::= S_S | S^S | S_S^S | S          Intermediate expression
    E ::= IE | I/I                       Expression
    Each terminal symbol is translated into a corresponding mathml node.*/


    var AMnestingDepth, AMpreviousSymbol, AMcurrentSymbol;

    function AMTgetTeXsymbol(symb) {
      var pre = '';

      if (typeof symb.val == "boolean" && symb.val) {
        pre = '';
      } else {
        pre = '\\';
      }

      if (symb.tex == null) {
        //can't remember why this was here.  Breaks /delta /Delta to removed
        //return (pre+(pre==''?symb.input:symb.input.toLowerCase()));
        return pre + symb.input;
      } else {
        return pre + symb.tex;
      }
    }

    function AMTparseSexpr(str) {
      //parses str and returns [node,tailstr]
      var symbol,
          node,
          result,
          i,
          st,
          // rightvert = false,
      newFrag = '';
      str = AMremoveCharsAndBlanks(str, 0);
      symbol = AMgetSymbol(str); //either a token or a bracket or empty

      if (symbol == null || symbol.ttype == RIGHTBRACKET && AMnestingDepth > 0) {
        return [null, str];
      }

      if (symbol.ttype == DEFINITION) {
        str = symbol.output + AMremoveCharsAndBlanks(str, symbol.input.length);
        symbol = AMgetSymbol(str);
      }

      switch (symbol.ttype) {
        case UNDEROVER:
        case CONST:
          str = AMremoveCharsAndBlanks(str, symbol.input.length);
          var texsymbol = AMTgetTeXsymbol(symbol);
          if (texsymbol.charAt(0) == "\\" || symbol.tag == "mo") return [texsymbol, str];else return ['{' + texsymbol + '}', str];

        case LEFTBRACKET:
          //read (expr+)
          AMnestingDepth++;
          str = AMremoveCharsAndBlanks(str, symbol.input.length);
          result = AMTparseExpr(str, true);
          AMnestingDepth--;
          var leftchop = 0;

          if (result[0].substr(0, 6) == "\\right") {
            st = result[0].charAt(6);

            if (st == ")" || st == "]" || st == "}") {
              leftchop = 6;
            } else if (st == ".") {
              leftchop = 7;
            } else {
              st = result[0].substr(6, 7);

              if (st == '\\rbrace') {
                leftchop = 13;
              }
            }
          }

          if (leftchop > 0) {
            result[0] = result[0].substr(leftchop);
            if (typeof symbol.invisible == "boolean" && symbol.invisible) node = '{' + result[0] + '}';else {
              node = '{' + AMTgetTeXsymbol(symbol) + result[0] + '}';
            }
          } else {
            if (typeof symbol.invisible == "boolean" && symbol.invisible) node = '{\\left.' + result[0] + '}';else {
              node = '{\\left' + AMTgetTeXsymbol(symbol) + result[0] + '}';
            }
          }

          return [node, result[1]];

        case TEXT:
          if (symbol != AMquote) str = AMremoveCharsAndBlanks(str, symbol.input.length);
          if (str.charAt(0) == "{") i = str.indexOf("}");else if (str.charAt(0) == "(") i = str.indexOf(")");else if (str.charAt(0) == "[") i = str.indexOf("]");else if (symbol == AMquote) i = str.slice(1).indexOf("\"") + 1;else i = 0;
          if (i == -1) i = str.length;
          st = str.slice(1, i);

          if (st.charAt(0) == " ") {
            newFrag = '\\ ';
          }

          newFrag += '\\text{' + st + '}';

          if (st.charAt(st.length - 1) == " ") {
            newFrag += '\\ ';
          }

          str = AMremoveCharsAndBlanks(str, i + 1);
          return [newFrag, str];

        case UNARY:
          str = AMremoveCharsAndBlanks(str, symbol.input.length);
          result = AMTparseSexpr(str);
          if (result[0] == null) return ['{' + AMTgetTeXsymbol(symbol) + '}', str];

          if (typeof symbol.func == "boolean" && symbol.func) {
            // functions hack
            st = str.charAt(0);

            if (st == "^" || st == "_" || st == "/" || st == "|" || st == "," || symbol.input.length == 1 && symbol.input.match(/\w/) && st != "(") {
              return ['{' + AMTgetTeXsymbol(symbol) + '}', str];
            } else {
              node = '{' + AMTgetTeXsymbol(symbol) + '{' + result[0] + '}}';
              return [node, result[1]];
            }
          }

          result[0] = AMTremoveBrackets(result[0]);

          if (symbol.input == "sqrt") {
            // sqrt
            return ['\\sqrt{' + result[0] + '}', result[1]];
          } else if (symbol.input == "cancel") {
            // cancel
            return ['\\cancel{' + result[0] + '}', result[1]];
          } else if (typeof symbol.rewriteleftright != "undefined") {
            // abs, floor, ceil
            return ['{\\left' + symbol.rewriteleftright[0] + result[0] + '\\right' + symbol.rewriteleftright[1] + '}', result[1]];
          } else if (typeof symbol.acc == "boolean" && symbol.acc) {
            // accent
            //return ['{'+AMTgetTeXsymbol(symbol)+'{'+result[0]+'}}',result[1]];
            return [AMTgetTeXsymbol(symbol) + '{' + result[0] + '}', result[1]];
          } else {
            // font change command
            return ['{' + AMTgetTeXsymbol(symbol) + '{' + result[0] + '}}', result[1]];
          }

        case BINARY:
          str = AMremoveCharsAndBlanks(str, symbol.input.length);
          result = AMTparseSexpr(str);
          if (result[0] == null) return ['{' + AMTgetTeXsymbol(symbol) + '}', str];
          result[0] = AMTremoveBrackets(result[0]);
          var result2 = AMTparseSexpr(result[1]);
          if (result2[0] == null) return ['{' + AMTgetTeXsymbol(symbol) + '}', str];
          result2[0] = AMTremoveBrackets(result2[0]);

          if (symbol.input == "color") {
            newFrag = '{\\color{' + result[0].replace(/[\{\}]/g, '') + '}' + result2[0] + '}';
          } else if (symbol.input == "root") {
            newFrag = '{\\sqrt[' + result[0] + ']{' + result2[0] + '}}';
          } else {
            newFrag = '{' + AMTgetTeXsymbol(symbol) + '{' + result[0] + '}{' + result2[0] + '}}';
          }

          return [newFrag, result2[1]];

        case INFIX:
          str = AMremoveCharsAndBlanks(str, symbol.input.length);
          return [symbol.output, str];

        case SPACE:
          str = AMremoveCharsAndBlanks(str, symbol.input.length);
          return ['{\\quad\\text{' + symbol.input + '}\\quad}', str];

        case LEFTRIGHT:
          //    if (rightvert) return [null,str]; else rightvert = true;
          AMnestingDepth++;
          str = AMremoveCharsAndBlanks(str, symbol.input.length);
          result = AMTparseExpr(str, false);
          AMnestingDepth--;
          var st = "";
          st = result[0].charAt(result[0].length - 1); //alert(result[0].lastChild+"***"+st);

          if (st == "|") {
            // its an absolute value subterm
            node = '{\\left|' + result[0] + '}';
            return [node, result[1]];
          } else {
            // the "|" is a \mid
            node = '{\\mid}';
            return [node, str];
          }

        default:
          //alert("default");
          str = AMremoveCharsAndBlanks(str, symbol.input.length);
          return ['{' + AMTgetTeXsymbol(symbol) + '}', str];
      }
    }

    function AMTparseIexpr(str) {
      var symbol, sym1, sym2, node, result;
      str = AMremoveCharsAndBlanks(str, 0);
      sym1 = AMgetSymbol(str);
      result = AMTparseSexpr(str);
      node = result[0];
      str = result[1];
      symbol = AMgetSymbol(str);

      if (symbol.ttype == INFIX && symbol.input != "/") {
        str = AMremoveCharsAndBlanks(str, symbol.input.length); // if (symbol.input == "/") result = AMTparseIexpr(str); else

        result = AMTparseSexpr(str);
        if (result[0] == null) // show box in place of missing argument
          result[0] = '{}';else result[0] = AMTremoveBrackets(result[0]);
        str = result[1]; //    if (symbol.input == "/") AMTremoveBrackets(node);

        if (symbol.input == "_") {
          sym2 = AMgetSymbol(str);

          if (sym2.input == "^") {
            str = AMremoveCharsAndBlanks(str, sym2.input.length);
            var res2 = AMTparseSexpr(str);
            res2[0] = AMTremoveBrackets(res2[0]);
            str = res2[1];
            node = '{' + node;
            node += '_{' + result[0] + '}';
            node += '^{' + res2[0] + '}';
            node += '}';
          } else {
            node += '_{' + result[0] + '}';
          }
        } else {
          //must be ^
          //node = '{'+node+'}^{'+result[0]+'}';
          node = node + '^{' + result[0] + '}';
        }

        if (typeof sym1.func != 'undefined' && sym1.func) {
          sym2 = AMgetSymbol(str);

          if (sym2.ttype != INFIX && sym2.ttype != RIGHTBRACKET) {
            result = AMTparseIexpr(str);
            node = '{' + node + result[0] + '}';
            str = result[1];
          }
        }
      }

      return [node, str];
    }

    function AMTparseExpr(str, rightbracket) {
      var symbol,
          node,
          result,
          i,
          nodeList = [],
          newFrag = '';
      var addedright = false;

      do {
        str = AMremoveCharsAndBlanks(str, 0);
        result = AMTparseIexpr(str);
        node = result[0];
        str = result[1];
        symbol = AMgetSymbol(str);

        if (symbol.ttype == INFIX && symbol.input == "/") {
          str = AMremoveCharsAndBlanks(str, symbol.input.length);
          result = AMTparseIexpr(str);
          if (result[0] == null) // show box in place of missing argument
            result[0] = '{}';else result[0] = AMTremoveBrackets(result[0]);
          str = result[1];
          node = AMTremoveBrackets(node);
          node = '\\frac' + '{' + node + '}';
          node += '{' + result[0] + '}';
          newFrag += node;
          symbol = AMgetSymbol(str);
        } else if (node != undefined) newFrag += node;
      } while ((symbol.ttype != RIGHTBRACKET && (symbol.ttype != LEFTRIGHT || rightbracket) || AMnestingDepth == 0) && symbol != null && symbol.output != "");

      if (symbol.ttype == RIGHTBRACKET || symbol.ttype == LEFTRIGHT) {
        //    if (AMnestingDepth > 0) AMnestingDepth--;
        var len = newFrag.length;

        if (len > 2 && newFrag.charAt(0) == '{' && newFrag.indexOf(',') > 0) {
          //could be matrix (total rewrite from .js)
          var right = newFrag.charAt(len - 2);

          if (right == ')' || right == ']') {
            var left = newFrag.charAt(6);

            if (left == '(' && right == ')' && symbol.output != '}' || left == '[' && right == ']') {
              var mxout = '\\matrix{';
              var pos = new Array(); //position of commas

              pos.push(0);
              var matrix = true;
              var mxnestingd = 0;
              var subpos = [];
              subpos[0] = [0];
              var lastsubposstart = 0;
              var mxanynestingd = 0;

              for (i = 1; i < len - 1; i++) {
                if (newFrag.charAt(i) == left) mxnestingd++;

                if (newFrag.charAt(i) == right) {
                  mxnestingd--;

                  if (mxnestingd == 0 && newFrag.charAt(i + 2) == ',' && newFrag.charAt(i + 3) == '{') {
                    pos.push(i + 2);
                    lastsubposstart = i + 2;
                    subpos[lastsubposstart] = [i + 2];
                  }
                }

                if (newFrag.charAt(i) == '[' || newFrag.charAt(i) == '(' || newFrag.charAt(i) == '{') {
                  mxanynestingd++;
                }

                if (newFrag.charAt(i) == ']' || newFrag.charAt(i) == ')' || newFrag.charAt(i) == '}') {
                  mxanynestingd--;
                }

                if (newFrag.charAt(i) == ',' && mxanynestingd == 1) {
                  subpos[lastsubposstart].push(i);
                }

                if (mxanynestingd < 0) {
                  //happens at the end of the row
                  if (lastsubposstart == i + 1) {
                    //if at end of row, skip to next row
                    i++;
                  } else {
                    //misformed something - abandon treating as a matrix
                    matrix = false;
                  }
                }
              }

              pos.push(len);
              var lastmxsubcnt = -1;

              if (mxnestingd == 0 && pos.length > 0 && matrix) {
                for (i = 0; i < pos.length - 1; i++) {
                  if (i > 0) mxout += '\\\\';

                  if (i == 0) {
                    //var subarr = newFrag.substr(pos[i]+7,pos[i+1]-pos[i]-15).split(',');
                    if (subpos[pos[i]].length == 1) {
                      var subarr = [newFrag.substr(pos[i] + 7, pos[i + 1] - pos[i] - 15)];
                    } else {
                      var subarr = [newFrag.substring(pos[i] + 7, subpos[pos[i]][1])];

                      for (var j = 2; j < subpos[pos[i]].length; j++) {
                        subarr.push(newFrag.substring(subpos[pos[i]][j - 1] + 1, subpos[pos[i]][j]));
                      }

                      subarr.push(newFrag.substring(subpos[pos[i]][subpos[pos[i]].length - 1] + 1, pos[i + 1] - 8));
                    }
                  } else {
                    //var subarr = newFrag.substr(pos[i]+8,pos[i+1]-pos[i]-16).split(',');
                    if (subpos[pos[i]].length == 1) {
                      var subarr = [newFrag.substr(pos[i] + 8, pos[i + 1] - pos[i] - 16)];
                    } else {
                      var subarr = [newFrag.substring(pos[i] + 8, subpos[pos[i]][1])];

                      for (var j = 2; j < subpos[pos[i]].length; j++) {
                        subarr.push(newFrag.substring(subpos[pos[i]][j - 1] + 1, subpos[pos[i]][j]));
                      }

                      subarr.push(newFrag.substring(subpos[pos[i]][subpos[pos[i]].length - 1] + 1, pos[i + 1] - 8));
                    }
                  }

                  if (lastmxsubcnt > 0 && subarr.length != lastmxsubcnt) {
                    matrix = false;
                  } else if (lastmxsubcnt == -1) {
                    lastmxsubcnt = subarr.length;
                  }

                  mxout += subarr.join('&');
                }
              }

              mxout += '}';

              if (matrix) {
                newFrag = mxout;
              }
            }
          }
        }

        str = AMremoveCharsAndBlanks(str, symbol.input.length);

        if (typeof symbol.invisible != "boolean" || !symbol.invisible) {
          node = '\\right' + AMTgetTeXsymbol(symbol); //AMcreateMmlNode("mo",document.createTextNode(symbol.output));

          newFrag += node;
          addedright = true;
        } else {
          newFrag += '\\right.';
          addedright = true;
        }
      }

      if (AMnestingDepth > 0 && !addedright) {
        newFrag += '\\right.'; //adjust for non-matching left brackets
        //todo: adjust for non-matching right brackets
      }

      return [newFrag, str];
    }

    function AMTparseAMtoTeX(str) {
      AMnestingDepth = 0;
      str = str.replace(/(&nbsp;|\u00a0|&#160;)/g, "");
      str = str.replace(/&gt;/g, ">");
      str = str.replace(/&lt;/g, "<");

      if (str.match(/\S/) == null) {
        return "";
      }

      return AMTparseExpr(str.replace(/^\s+/g, ""), false)[0];
    }

    function AMparseMath(str) {
      //DLMOD to remove &nbsp;, which editor adds on multiple spaces
      str = str.replace(/(&nbsp;|\u00a0|&#160;)/g, "");
      str = str.replace(/&gt;/g, ">");
      str = str.replace(/&lt;/g, "<");

      if (str.match(/\S/) == null) {
        return document.createTextNode(" ");
      }

      var texstring = AMTparseAMtoTeX(str);

      if (typeof mathbg != "undefined" && mathbg == 'dark') {
        texstring = "\\reverse " + texstring;
      }

      if (config.mathcolor != "") {
        texstring = "\\" + config.mathcolor + texstring;
      }

      if (config.displaystyle) {
        texstring = "\\displaystyle" + texstring;
      } else {
        texstring = "\\textstyle" + texstring;
      }

      texstring = texstring.replace('$', '\\$');
      var node = document.createElement("img");

      if (typeof encodeURIComponent == "function") {
        texstring = encodeURIComponent(texstring);
      } else {
        texstring = escape(texstring);
      }

      node.src = AMTcgiloc + '?' + texstring;
      node.style.verticalAlign = "middle";
      if (config.showasciiformulaonhover) //fixed by djhsu so newline
        node.setAttribute("title", str.replace(/\s+/g, " ")); //does not show in Gecko

      var snode = document.createElement("span");
      snode.appendChild(node); //chg

      return snode;
    } //alias to align with wFallback function


    function AMTparseMath(str) {
      return AMparseMath(str);
    }

    function AMstrarr2docFrag(arr, linebreaks) {
      var newFrag = document.createDocumentFragment();
      var expr = false;

      for (var i = 0; i < arr.length; i++) {
        if (expr) newFrag.appendChild(AMparseMath(arr[i]));else {
          var arri = linebreaks ? arr[i].split("\n\n") : [arr[i]];
          newFrag.appendChild(document.createElement("span").appendChild(document.createTextNode(arri[0])));

          for (var j = 1; j < arri.length; j++) {
            newFrag.appendChild(document.createElement("p"));
            newFrag.appendChild(document.createElement("span").appendChild(document.createTextNode(arri[j])));
          }
        }
        expr = !expr;
      }

      return newFrag;
    }

    function AMprocessNodeR(n, linebreaks) {
      var mtch, str, arr, frg, i;

      if (n.childNodes.length == 0) {
        if ((n.nodeType != 8 || linebreaks) && n.parentNode.nodeName != "form" && n.parentNode.nodeName != "FORM" && n.parentNode.nodeName != "textarea" && n.parentNode.nodeName != "TEXTAREA" && n.parentNode.nodeName != "pre" && n.parentNode.nodeName != "PRE") {
          str = n.nodeValue;

          if (!(str == null)) {
            str = str.replace(/\r\n\r\n/g, "\n\n");

            if (config.doubleblankmathdelimiter) {
              str = str.replace(/\x20\x20\./g, " " + config.AMdelimiter1 + ".");
              str = str.replace(/\x20\x20,/g, " " + config.AMdelimiter1 + ",");
              str = str.replace(/\x20\x20/g, " " + config.AMdelimiter1 + " ");
            }

            str = str.replace(/\x20+/g, " ");
            str = str.replace(/\s*\r\n/g, " ");
            mtch = false;

            if (config.AMusedelimiter2) {
              str = str.replace(new RegExp(config.AMescape2, "g"), function (st) {
                mtch = true;
                return "AMescape2";
              });
            }

            str = str.replace(new RegExp(config.AMescape1, "g"), function (st) {
              mtch = true;
              return "AMescape1";
            });
            if (config.AMusedelimiter2) str = str.replace(new RegExp(config.AMdelimiter2regexp, "g"), config.AMdelimiter1);
            arr = str.split(config.AMdelimiter1);

            for (i = 0; i < arr.length; i++) {
              if (config.AMusedelimiter2) {
                arr[i] = arr[i].replace(/AMescape2/g, config.AMdelimiter2).replace(/AMescape1/g, config.AMdelimiter1);
              } else {
                arr[i] = arr[i].replace(/AMescape1/g, config.AMdelimiter1);
              }
            }

            if (arr.length > 1 || mtch) {
              frg = AMstrarr2docFrag(arr, n.nodeType == 8);
              var len = frg.childNodes.length;
              n.parentNode.replaceChild(frg, n);
              return len - 1;
            }
          }
        } else return 0;
      } else if (n.nodeName != "math") {
        //should this change to img?
        for (i = 0; i < n.childNodes.length; i++) {
          i += AMprocessNodeR(n.childNodes[i], linebreaks);
        }
      }

      return 0;
    }

    function AMprocessNode(n, linebreaks, spanclassAM) {
      var frag, st;

      if (spanclassAM != null) {
        frag = document.getElementsByTagName("span");

        for (var i = 0; i < frag.length; i++) {
          if (frag[i].className == "AM") AMprocessNodeR(frag[i], linebreaks);
        }
      } else {
        try {
          st = n.innerHTML;
        } catch (err) {}

        if (st == null || st.indexOf(config.AMdelimiter1) != -1) // || st.indexOf(config.AMdelimiter2)!=-1)
          AMprocessNodeR(n, linebreaks);
      }
    }

    function translate(spanclassAM) {
      if (!AMtranslated) {
        // run this only once
        AMtranslated = true;
        var body = document.getElementsByTagName("body")[0];
        var processN = document.getElementById(config.AMdocumentId);
        AMprocessNode(processN != null ? processN : body, false, spanclassAM);
      }
    }

    var AMbody;
    var AMtranslated = false;
    var AMnoMathML = true;
    AMinitSymbols();

    function generic() {
      if (config.translateOnLoad) {
        translate();
      }
    }

    module.exports = AMTparseAMtoTeX;
    /***/
  },

  /***/
  "./node_modules/buffer/index.js":
  /*!**************************************!*\
    !*** ./node_modules/buffer/index.js ***!
    \**************************************/

  /*! no static exports found */

  /***/
  function node_modulesBufferIndexJs(module, exports, __webpack_require__) {
    "use strict";
    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <http://feross.org>
     * @license  MIT
     */

    /* eslint-disable no-proto */

    var base64 = __webpack_require__(
    /*! base64-js */
    "./node_modules/base64-js/index.js");

    var ieee754 = __webpack_require__(
    /*! ieee754 */
    "./node_modules/ieee754/index.js");

    var isArray = __webpack_require__(
    /*! isarray */
    "./node_modules/isarray/index.js");

    exports.Buffer = Buffer;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Use Object implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * Due to various browser bugs, sometimes the Object implementation will be used even
     * when the browser supports typed arrays.
     *
     * Note:
     *
     *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
     *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
     *
     *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
     *
     *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
     *     incorrect length in some situations.
    
     * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
     * get the Object implementation, which is slower but behaves correctly.
     */

    Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
    /*
     * Export kMaxLength after typed array support is determined.
     */

    exports.kMaxLength = kMaxLength();

    function typedArraySupport() {
      try {
        var arr = new Uint8Array(1);
        arr.__proto__ = {
          __proto__: Uint8Array.prototype,
          foo: function foo() {
            return 42;
          }
        };
        return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
      } catch (e) {
        return false;
      }
    }

    function kMaxLength() {
      return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
    }

    function createBuffer(that, length) {
      if (kMaxLength() < length) {
        throw new RangeError('Invalid typed array length');
      }

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length);
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) {
          that = new Buffer(length);
        }

        that.length = length;
      }

      return that;
    }
    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */


    function Buffer(arg, encodingOrOffset, length) {
      if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
        return new Buffer(arg, encodingOrOffset, length);
      } // Common case.


      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new Error('If encoding is specified then the first argument must be a string');
        }

        return allocUnsafe(this, arg);
      }

      return from(this, arg, encodingOrOffset, length);
    }

    Buffer.poolSize = 8192; // not used by this implementation
    // TODO: Legacy, not needed anymore. Remove in next major version.

    Buffer._augment = function (arr) {
      arr.__proto__ = Buffer.prototype;
      return arr;
    };

    function from(that, value, encodingOrOffset, length) {
      if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number');
      }

      if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length);
      }

      if (typeof value === 'string') {
        return fromString(that, value, encodingOrOffset);
      }

      return fromObject(that, value);
    }
    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/


    Buffer.from = function (value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length);
    };

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      Buffer.prototype.__proto__ = Uint8Array.prototype;
      Buffer.__proto__ = Uint8Array;

      if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
        // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
        Object.defineProperty(Buffer, Symbol.species, {
          value: null,
          configurable: true
        });
      }
    }

    function assertSize(size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be a number');
      } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative');
      }
    }

    function alloc(that, size, fill, encoding) {
      assertSize(size);

      if (size <= 0) {
        return createBuffer(that, size);
      }

      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
      }

      return createBuffer(that, size);
    }
    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/


    Buffer.alloc = function (size, fill, encoding) {
      return alloc(null, size, fill, encoding);
    };

    function allocUnsafe(that, size) {
      assertSize(size);
      that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

      if (!Buffer.TYPED_ARRAY_SUPPORT) {
        for (var i = 0; i < size; ++i) {
          that[i] = 0;
        }
      }

      return that;
    }
    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */


    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(null, size);
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */


    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(null, size);
    };

    function fromString(that, string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding');
      }

      var length = byteLength(string, encoding) | 0;
      that = createBuffer(that, length);
      var actual = that.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        that = that.slice(0, actual);
      }

      return that;
    }

    function fromArrayLike(that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      that = createBuffer(that, length);

      for (var i = 0; i < length; i += 1) {
        that[i] = array[i] & 255;
      }

      return that;
    }

    function fromArrayBuffer(that, array, byteOffset, length) {
      array.byteLength; // this throws if `array` is not a valid ArrayBuffer

      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('\'offset\' is out of bounds');
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('\'length\' is out of bounds');
      }

      if (byteOffset === undefined && length === undefined) {
        array = new Uint8Array(array);
      } else if (length === undefined) {
        array = new Uint8Array(array, byteOffset);
      } else {
        array = new Uint8Array(array, byteOffset, length);
      }

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array;
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        that = fromArrayLike(that, array);
      }

      return that;
    }

    function fromObject(that, obj) {
      if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);

        if (that.length === 0) {
          return that;
        }

        obj.copy(that, 0, 0, len);
        return that;
      }

      if (obj) {
        if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
          if (typeof obj.length !== 'number' || isnan(obj.length)) {
            return createBuffer(that, 0);
          }

          return fromArrayLike(that, obj);
        }

        if (obj.type === 'Buffer' && isArray(obj.data)) {
          return fromArrayLike(that, obj.data);
        }
      }

      throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
    }

    function checked(length) {
      // Note: cannot use `length < kMaxLength()` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= kMaxLength()) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
      }

      return length | 0;
    }

    function SlowBuffer(length) {
      if (+length != length) {
        // eslint-disable-line eqeqeq
        length = 0;
      }

      return Buffer.alloc(+length);
    }

    Buffer.isBuffer = function isBuffer(b) {
      return !!(b != null && b._isBuffer);
    };

    Buffer.compare = function compare(a, b) {
      if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
        throw new TypeError('Arguments must be Buffers');
      }

      if (a === b) return 0;
      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }

      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    };

    Buffer.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true;

        default:
          return false;
      }
    };

    Buffer.concat = function concat(list, length) {
      if (!isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }

      if (list.length === 0) {
        return Buffer.alloc(0);
      }

      var i;

      if (length === undefined) {
        length = 0;

        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = Buffer.allocUnsafe(length);
      var pos = 0;

      for (i = 0; i < list.length; ++i) {
        var buf = list[i];

        if (!Buffer.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }

        buf.copy(buffer, pos);
        pos += buf.length;
      }

      return buffer;
    };

    function byteLength(string, encoding) {
      if (Buffer.isBuffer(string)) {
        return string.length;
      }

      if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength;
      }

      if (typeof string !== 'string') {
        string = '' + string;
      }

      var len = string.length;
      if (len === 0) return 0; // Use a for loop to avoid recursion

      var loweredCase = false;

      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len;

          case 'utf8':
          case 'utf-8':
          case undefined:
            return utf8ToBytes(string).length;

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2;

          case 'hex':
            return len >>> 1;

          case 'base64':
            return base64ToBytes(string).length;

          default:
            if (loweredCase) return utf8ToBytes(string).length; // assume utf8

            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }

    Buffer.byteLength = byteLength;

    function slowToString(encoding, start, end) {
      var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.
      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

      if (start === undefined || start < 0) {
        start = 0;
      } // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.


      if (start > this.length) {
        return '';
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return '';
      } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return '';
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end);

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end);

          case 'ascii':
            return asciiSlice(this, start, end);

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end);

          case 'base64':
            return base64Slice(this, start, end);

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end);

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    } // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
    // Buffer instances.


    Buffer.prototype._isBuffer = true;

    function swap(b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer.prototype.swap16 = function swap16() {
      var len = this.length;

      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits');
      }

      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }

      return this;
    };

    Buffer.prototype.swap32 = function swap32() {
      var len = this.length;

      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits');
      }

      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }

      return this;
    };

    Buffer.prototype.swap64 = function swap64() {
      var len = this.length;

      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits');
      }

      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }

      return this;
    };

    Buffer.prototype.toString = function toString() {
      var length = this.length | 0;
      if (length === 0) return '';
      if (arguments.length === 0) return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };

    Buffer.prototype.equals = function equals(b) {
      if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
      if (this === b) return true;
      return Buffer.compare(this, b) === 0;
    };

    Buffer.prototype.inspect = function inspect() {
      var str = '';
      var max = exports.INSPECT_MAX_BYTES;

      if (this.length > 0) {
        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
        if (this.length > max) str += ' ... ';
      }

      return '<Buffer ' + str + '>';
    };

    Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
      if (!Buffer.isBuffer(target)) {
        throw new TypeError('Argument must be a Buffer');
      }

      if (start === undefined) {
        start = 0;
      }

      if (end === undefined) {
        end = target ? target.length : 0;
      }

      if (thisStart === undefined) {
        thisStart = 0;
      }

      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index');
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }

      if (thisStart >= thisEnd) {
        return -1;
      }

      if (start >= end) {
        return 1;
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target) return 0;
      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);
      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);

      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
        }
      }

      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf


    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1; // Normalize byteOffset

      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }

      byteOffset = +byteOffset; // Coerce to Number.

      if (isNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : buffer.length - 1;
      } // Normalize byteOffset: negative offsets start from the end of the buffer


      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

      if (byteOffset >= buffer.length) {
        if (dir) return -1;else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;else return -1;
      } // Normalize val


      if (typeof val === 'string') {
        val = Buffer.from(val, encoding);
      } // Finally, search either indexOf (if dir is true) or lastIndexOf


      if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1;
        }

        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]

        if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          }
        }

        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
      }

      throw new TypeError('val must be string, number or Buffer');
    }

    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();

        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }

          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read(buf, i) {
        if (indexSize === 1) {
          return buf[i];
        } else {
          return buf.readUInt16BE(i * indexSize);
        }
      }

      var i;

      if (dir) {
        var foundIndex = -1;

        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

        for (i = byteOffset; i >= 0; i--) {
          var found = true;

          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break;
            }
          }

          if (found) return i;
        }
      }

      return -1;
    }

    Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };

    Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };

    Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };

    function hexWrite(buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;

      if (!length) {
        length = remaining;
      } else {
        length = Number(length);

        if (length > remaining) {
          length = remaining;
        }
      } // must be an even number of digits


      var strLen = string.length;
      if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

      if (length > strLen / 2) {
        length = strLen / 2;
      }

      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed)) return i;
        buf[offset + i] = parsed;
      }

      return i;
    }

    function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }

    function asciiWrite(buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length);
    }

    function latin1Write(buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length);
    }

    function base64Write(buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length);
    }

    function ucs2Write(buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
    }

    Buffer.prototype.write = function write(string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0; // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0; // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset | 0;

        if (isFinite(length)) {
          length = length | 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        } // legacy write(string, encoding, offset, length) - remove in v0.13

      } else {
        throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds');
      }

      if (!encoding) encoding = 'utf8';
      var loweredCase = false;

      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length);

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length);

          case 'ascii':
            return asciiWrite(this, string, offset, length);

          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length);

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length);

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer.prototype.toJSON = function toJSON() {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };

    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
      } else {
        return base64.fromByteArray(buf.slice(start, end));
      }
    }

    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];
      var i = start;

      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }

              break;

            case 2:
              secondByte = buf[i + 1];

              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }

              break;

            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];

              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }

              break;

            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];

              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }

          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res);
    } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety


    var MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray(codePoints) {
      var len = codePoints.length;

      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
      } // Decode in chunks to avoid "call stack size exceeded".


      var res = '';
      var i = 0;

      while (i < len) {
        res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
      }

      return res;
    }

    function asciiSlice(buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }

      return ret;
    }

    function latin1Slice(buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }

      return ret;
    }

    function hexSlice(buf, start, end) {
      var len = buf.length;
      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;
      var out = '';

      for (var i = start; i < end; ++i) {
        out += toHex(buf[i]);
      }

      return out;
    }

    function utf16leSlice(buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = '';

      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }

      return res;
    }

    Buffer.prototype.slice = function slice(start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;
      var newBuf;

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer(sliceLen, undefined);

        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }

      return newBuf;
    };
    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */


    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
    }

    Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;

      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val;
    };

    Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;

      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      var val = this[offset + --byteLength];
      var mul = 1;

      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val;
    };

    Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset];
    };

    Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };

    Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };

    Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
    };

    Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };

    Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;

      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      mul *= 0x80;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength);
      return val;
    };

    Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);
      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];

      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }

      mul *= 0x80;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength);
      return val;
    };

    Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return this[offset];
      return (0xff - this[offset] + 1) * -1;
    };

    Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | this[offset + 1] << 8;
      return val & 0x8000 ? val | 0xFFFF0000 : val;
    };

    Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | this[offset] << 8;
      return val & 0x8000 ? val | 0xFFFF0000 : val;
    };

    Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };

    Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };

    Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
    };

    Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
    };

    Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
    };

    Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
    };

    function checkInt(buf, value, offset, ext, max, min) {
      if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length) throw new RangeError('Index out of range');
    }

    Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;

      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;

      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = value / mul & 0xFF;
      }

      return offset + byteLength;
    };

    Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;

      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;

      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = value / mul & 0xFF;
      }

      return offset + byteLength;
    };

    Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      this[offset] = value & 0xff;
      return offset + 1;
    };

    function objectWriteUInt16(buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffff + value + 1;

      for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
        buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
      }
    }

    Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
      } else {
        objectWriteUInt16(this, value, offset, true);
      }

      return offset + 2;
    };

    Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 0xff;
      } else {
        objectWriteUInt16(this, value, offset, false);
      }

      return offset + 2;
    };

    function objectWriteUInt32(buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffffffff + value + 1;

      for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
        buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
      }
    }

    Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 0xff;
      } else {
        objectWriteUInt32(this, value, offset, true);
      }

      return offset + 4;
    };

    Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 0xff;
      } else {
        objectWriteUInt32(this, value, offset, false);
      }

      return offset + 4;
    };

    Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;

      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;

      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }

        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
      }

      return offset + byteLength;
    };

    Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;

      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;

      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }

        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
      }

      return offset + byteLength;
    };

    Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = value & 0xff;
      return offset + 1;
    };

    Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
      } else {
        objectWriteUInt16(this, value, offset, true);
      }

      return offset + 2;
    };

    Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 0xff;
      } else {
        objectWriteUInt16(this, value, offset, false);
      }

      return offset + 2;
    };

    Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
      } else {
        objectWriteUInt32(this, value, offset, true);
      }

      return offset + 4;
    };

    Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 0xff;
      } else {
        objectWriteUInt32(this, value, offset, false);
      }

      return offset + 4;
    };

    function checkIEEE754(buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range');
      if (offset < 0) throw new RangeError('Index out of range');
    }

    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
      }

      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }

    Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };

    Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };

    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
      }

      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }

    Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };

    Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


    Buffer.prototype.copy = function copy(target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

      if (end === start) return 0;
      if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds');
      }

      if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
      if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

      if (end > this.length) end = this.length;

      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;
      var i;

      if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
        // ascending copy from start
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
      }

      return len;
    }; // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])


    Buffer.prototype.fill = function fill(val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }

        if (val.length === 1) {
          var code = val.charCodeAt(0);

          if (code < 256) {
            val = code;
          }
        }

        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string');
        }

        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding);
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      } // Invalid ranges are not set to a default, so can range check early.


      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index');
      }

      if (end <= start) {
        return this;
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;
      if (!val) val = 0;
      var i;

      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
        var len = bytes.length;

        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this;
    }; // HELPER FUNCTIONS
    // ================


    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

    function base64clean(str) {
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

      if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

      while (str.length % 4 !== 0) {
        str = str + '=';
      }

      return str;
    }

    function stringtrim(str) {
      if (str.trim) return str.trim();
      return str.replace(/^\s+|\s+$/g, '');
    }

    function toHex(n) {
      if (n < 16) return '0' + n.toString(16);
      return n.toString(16);
    }

    function utf8ToBytes(string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i); // is surrogate component

        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue;
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue;
            } // valid lead


            leadSurrogate = codePoint;
            continue;
          } // 2 leads in a row


          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue;
          } // valid surrogate pair


          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null; // encode utf8

        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break;
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break;
          bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break;
          bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break;
          bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else {
          throw new Error('Invalid code point');
        }
      }

      return bytes;
    }

    function asciiToBytes(str) {
      var byteArray = [];

      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }

      return byteArray;
    }

    function utf16leToBytes(str, units) {
      var c, hi, lo;
      var byteArray = [];

      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray;
    }

    function base64ToBytes(str) {
      return base64.toByteArray(base64clean(str));
    }

    function blitBuffer(src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
      }

      return i;
    }

    function isnan(val) {
      return val !== val; // eslint-disable-line no-self-compare
    }
    /***/

  },

  /***/
  "./node_modules/entities/lib/decode_codepoint.js":
  /*!*******************************************************!*\
    !*** ./node_modules/entities/lib/decode_codepoint.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesEntitiesLibDecode_codepointJs(module, exports, __webpack_require__) {
    var decodeMap = __webpack_require__(
    /*! ../maps/decode.json */
    "./node_modules/entities/maps/decode.json");

    module.exports = decodeCodePoint; // modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119

    function decodeCodePoint(codePoint) {
      if (codePoint >= 0xD800 && codePoint <= 0xDFFF || codePoint > 0x10FFFF) {
        return "\uFFFD";
      }

      if (codePoint in decodeMap) {
        codePoint = decodeMap[codePoint];
      }

      var output = "";

      if (codePoint > 0xFFFF) {
        codePoint -= 0x10000;
        output += String.fromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      output += String.fromCharCode(codePoint);
      return output;
    }
    /***/

  },

  /***/
  "./node_modules/entities/maps/decode.json":
  /*!************************************************!*\
    !*** ./node_modules/entities/maps/decode.json ***!
    \************************************************/

  /*! exports provided: 0, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, default */

  /***/
  function node_modulesEntitiesMapsDecodeJson(module) {
    module.exports = JSON.parse("{\"0\":65533,\"128\":8364,\"130\":8218,\"131\":402,\"132\":8222,\"133\":8230,\"134\":8224,\"135\":8225,\"136\":710,\"137\":8240,\"138\":352,\"139\":8249,\"140\":338,\"142\":381,\"145\":8216,\"146\":8217,\"147\":8220,\"148\":8221,\"149\":8226,\"150\":8211,\"151\":8212,\"152\":732,\"153\":8482,\"154\":353,\"155\":8250,\"156\":339,\"158\":382,\"159\":376}");
    /***/
  },

  /***/
  "./node_modules/entities/maps/entities.json":
  /*!**************************************************!*\
    !*** ./node_modules/entities/maps/entities.json ***!
    \**************************************************/

  /*! exports provided: Aacute, aacute, Abreve, abreve, ac, acd, acE, Acirc, acirc, acute, Acy, acy, AElig, aelig, af, Afr, afr, Agrave, agrave, alefsym, aleph, Alpha, alpha, Amacr, amacr, amalg, amp, AMP, andand, And, and, andd, andslope, andv, ang, ange, angle, angmsdaa, angmsdab, angmsdac, angmsdad, angmsdae, angmsdaf, angmsdag, angmsdah, angmsd, angrt, angrtvb, angrtvbd, angsph, angst, angzarr, Aogon, aogon, Aopf, aopf, apacir, ap, apE, ape, apid, apos, ApplyFunction, approx, approxeq, Aring, aring, Ascr, ascr, Assign, ast, asymp, asympeq, Atilde, atilde, Auml, auml, awconint, awint, backcong, backepsilon, backprime, backsim, backsimeq, Backslash, Barv, barvee, barwed, Barwed, barwedge, bbrk, bbrktbrk, bcong, Bcy, bcy, bdquo, becaus, because, Because, bemptyv, bepsi, bernou, Bernoullis, Beta, beta, beth, between, Bfr, bfr, bigcap, bigcirc, bigcup, bigodot, bigoplus, bigotimes, bigsqcup, bigstar, bigtriangledown, bigtriangleup, biguplus, bigvee, bigwedge, bkarow, blacklozenge, blacksquare, blacktriangle, blacktriangledown, blacktriangleleft, blacktriangleright, blank, blk12, blk14, blk34, block, bne, bnequiv, bNot, bnot, Bopf, bopf, bot, bottom, bowtie, boxbox, boxdl, boxdL, boxDl, boxDL, boxdr, boxdR, boxDr, boxDR, boxh, boxH, boxhd, boxHd, boxhD, boxHD, boxhu, boxHu, boxhU, boxHU, boxminus, boxplus, boxtimes, boxul, boxuL, boxUl, boxUL, boxur, boxuR, boxUr, boxUR, boxv, boxV, boxvh, boxvH, boxVh, boxVH, boxvl, boxvL, boxVl, boxVL, boxvr, boxvR, boxVr, boxVR, bprime, breve, Breve, brvbar, bscr, Bscr, bsemi, bsim, bsime, bsolb, bsol, bsolhsub, bull, bullet, bump, bumpE, bumpe, Bumpeq, bumpeq, Cacute, cacute, capand, capbrcup, capcap, cap, Cap, capcup, capdot, CapitalDifferentialD, caps, caret, caron, Cayleys, ccaps, Ccaron, ccaron, Ccedil, ccedil, Ccirc, ccirc, Cconint, ccups, ccupssm, Cdot, cdot, cedil, Cedilla, cemptyv, cent, centerdot, CenterDot, cfr, Cfr, CHcy, chcy, check, checkmark, Chi, chi, circ, circeq, circlearrowleft, circlearrowright, circledast, circledcirc, circleddash, CircleDot, circledR, circledS, CircleMinus, CirclePlus, CircleTimes, cir, cirE, cire, cirfnint, cirmid, cirscir, ClockwiseContourIntegral, CloseCurlyDoubleQuote, CloseCurlyQuote, clubs, clubsuit, colon, Colon, Colone, colone, coloneq, comma, commat, comp, compfn, complement, complexes, cong, congdot, Congruent, conint, Conint, ContourIntegral, copf, Copf, coprod, Coproduct, copy, COPY, copysr, CounterClockwiseContourIntegral, crarr, cross, Cross, Cscr, cscr, csub, csube, csup, csupe, ctdot, cudarrl, cudarrr, cuepr, cuesc, cularr, cularrp, cupbrcap, cupcap, CupCap, cup, Cup, cupcup, cupdot, cupor, cups, curarr, curarrm, curlyeqprec, curlyeqsucc, curlyvee, curlywedge, curren, curvearrowleft, curvearrowright, cuvee, cuwed, cwconint, cwint, cylcty, dagger, Dagger, daleth, darr, Darr, dArr, dash, Dashv, dashv, dbkarow, dblac, Dcaron, dcaron, Dcy, dcy, ddagger, ddarr, DD, dd, DDotrahd, ddotseq, deg, Del, Delta, delta, demptyv, dfisht, Dfr, dfr, dHar, dharl, dharr, DiacriticalAcute, DiacriticalDot, DiacriticalDoubleAcute, DiacriticalGrave, DiacriticalTilde, diam, diamond, Diamond, diamondsuit, diams, die, DifferentialD, digamma, disin, div, divide, divideontimes, divonx, DJcy, djcy, dlcorn, dlcrop, dollar, Dopf, dopf, Dot, dot, DotDot, doteq, doteqdot, DotEqual, dotminus, dotplus, dotsquare, doublebarwedge, DoubleContourIntegral, DoubleDot, DoubleDownArrow, DoubleLeftArrow, DoubleLeftRightArrow, DoubleLeftTee, DoubleLongLeftArrow, DoubleLongLeftRightArrow, DoubleLongRightArrow, DoubleRightArrow, DoubleRightTee, DoubleUpArrow, DoubleUpDownArrow, DoubleVerticalBar, DownArrowBar, downarrow, DownArrow, Downarrow, DownArrowUpArrow, DownBreve, downdownarrows, downharpoonleft, downharpoonright, DownLeftRightVector, DownLeftTeeVector, DownLeftVectorBar, DownLeftVector, DownRightTeeVector, DownRightVectorBar, DownRightVector, DownTeeArrow, DownTee, drbkarow, drcorn, drcrop, Dscr, dscr, DScy, dscy, dsol, Dstrok, dstrok, dtdot, dtri, dtrif, duarr, duhar, dwangle, DZcy, dzcy, dzigrarr, Eacute, eacute, easter, Ecaron, ecaron, Ecirc, ecirc, ecir, ecolon, Ecy, ecy, eDDot, Edot, edot, eDot, ee, efDot, Efr, efr, eg, Egrave, egrave, egs, egsdot, el, Element, elinters, ell, els, elsdot, Emacr, emacr, empty, emptyset, EmptySmallSquare, emptyv, EmptyVerySmallSquare, emsp13, emsp14, emsp, ENG, eng, ensp, Eogon, eogon, Eopf, eopf, epar, eparsl, eplus, epsi, Epsilon, epsilon, epsiv, eqcirc, eqcolon, eqsim, eqslantgtr, eqslantless, Equal, equals, EqualTilde, equest, Equilibrium, equiv, equivDD, eqvparsl, erarr, erDot, escr, Escr, esdot, Esim, esim, Eta, eta, ETH, eth, Euml, euml, euro, excl, exist, Exists, expectation, exponentiale, ExponentialE, fallingdotseq, Fcy, fcy, female, ffilig, fflig, ffllig, Ffr, ffr, filig, FilledSmallSquare, FilledVerySmallSquare, fjlig, flat, fllig, fltns, fnof, Fopf, fopf, forall, ForAll, fork, forkv, Fouriertrf, fpartint, frac12, frac13, frac14, frac15, frac16, frac18, frac23, frac25, frac34, frac35, frac38, frac45, frac56, frac58, frac78, frasl, frown, fscr, Fscr, gacute, Gamma, gamma, Gammad, gammad, gap, Gbreve, gbreve, Gcedil, Gcirc, gcirc, Gcy, gcy, Gdot, gdot, ge, gE, gEl, gel, geq, geqq, geqslant, gescc, ges, gesdot, gesdoto, gesdotol, gesl, gesles, Gfr, gfr, gg, Gg, ggg, gimel, GJcy, gjcy, gla, gl, glE, glj, gnap, gnapprox, gne, gnE, gneq, gneqq, gnsim, Gopf, gopf, grave, GreaterEqual, GreaterEqualLess, GreaterFullEqual, GreaterGreater, GreaterLess, GreaterSlantEqual, GreaterTilde, Gscr, gscr, gsim, gsime, gsiml, gtcc, gtcir, gt, GT, Gt, gtdot, gtlPar, gtquest, gtrapprox, gtrarr, gtrdot, gtreqless, gtreqqless, gtrless, gtrsim, gvertneqq, gvnE, Hacek, hairsp, half, hamilt, HARDcy, hardcy, harrcir, harr, hArr, harrw, Hat, hbar, Hcirc, hcirc, hearts, heartsuit, hellip, hercon, hfr, Hfr, HilbertSpace, hksearow, hkswarow, hoarr, homtht, hookleftarrow, hookrightarrow, hopf, Hopf, horbar, HorizontalLine, hscr, Hscr, hslash, Hstrok, hstrok, HumpDownHump, HumpEqual, hybull, hyphen, Iacute, iacute, ic, Icirc, icirc, Icy, icy, Idot, IEcy, iecy, iexcl, iff, ifr, Ifr, Igrave, igrave, ii, iiiint, iiint, iinfin, iiota, IJlig, ijlig, Imacr, imacr, image, ImaginaryI, imagline, imagpart, imath, Im, imof, imped, Implies, incare, in, infin, infintie, inodot, intcal, int, Int, integers, Integral, intercal, Intersection, intlarhk, intprod, InvisibleComma, InvisibleTimes, IOcy, iocy, Iogon, iogon, Iopf, iopf, Iota, iota, iprod, iquest, iscr, Iscr, isin, isindot, isinE, isins, isinsv, isinv, it, Itilde, itilde, Iukcy, iukcy, Iuml, iuml, Jcirc, jcirc, Jcy, jcy, Jfr, jfr, jmath, Jopf, jopf, Jscr, jscr, Jsercy, jsercy, Jukcy, jukcy, Kappa, kappa, kappav, Kcedil, kcedil, Kcy, kcy, Kfr, kfr, kgreen, KHcy, khcy, KJcy, kjcy, Kopf, kopf, Kscr, kscr, lAarr, Lacute, lacute, laemptyv, lagran, Lambda, lambda, lang, Lang, langd, langle, lap, Laplacetrf, laquo, larrb, larrbfs, larr, Larr, lArr, larrfs, larrhk, larrlp, larrpl, larrsim, larrtl, latail, lAtail, lat, late, lates, lbarr, lBarr, lbbrk, lbrace, lbrack, lbrke, lbrksld, lbrkslu, Lcaron, lcaron, Lcedil, lcedil, lceil, lcub, Lcy, lcy, ldca, ldquo, ldquor, ldrdhar, ldrushar, ldsh, le, lE, LeftAngleBracket, LeftArrowBar, leftarrow, LeftArrow, Leftarrow, LeftArrowRightArrow, leftarrowtail, LeftCeiling, LeftDoubleBracket, LeftDownTeeVector, LeftDownVectorBar, LeftDownVector, LeftFloor, leftharpoondown, leftharpoonup, leftleftarrows, leftrightarrow, LeftRightArrow, Leftrightarrow, leftrightarrows, leftrightharpoons, leftrightsquigarrow, LeftRightVector, LeftTeeArrow, LeftTee, LeftTeeVector, leftthreetimes, LeftTriangleBar, LeftTriangle, LeftTriangleEqual, LeftUpDownVector, LeftUpTeeVector, LeftUpVectorBar, LeftUpVector, LeftVectorBar, LeftVector, lEg, leg, leq, leqq, leqslant, lescc, les, lesdot, lesdoto, lesdotor, lesg, lesges, lessapprox, lessdot, lesseqgtr, lesseqqgtr, LessEqualGreater, LessFullEqual, LessGreater, lessgtr, LessLess, lesssim, LessSlantEqual, LessTilde, lfisht, lfloor, Lfr, lfr, lg, lgE, lHar, lhard, lharu, lharul, lhblk, LJcy, ljcy, llarr, ll, Ll, llcorner, Lleftarrow, llhard, lltri, Lmidot, lmidot, lmoustache, lmoust, lnap, lnapprox, lne, lnE, lneq, lneqq, lnsim, loang, loarr, lobrk, longleftarrow, LongLeftArrow, Longleftarrow, longleftrightarrow, LongLeftRightArrow, Longleftrightarrow, longmapsto, longrightarrow, LongRightArrow, Longrightarrow, looparrowleft, looparrowright, lopar, Lopf, lopf, loplus, lotimes, lowast, lowbar, LowerLeftArrow, LowerRightArrow, loz, lozenge, lozf, lpar, lparlt, lrarr, lrcorner, lrhar, lrhard, lrm, lrtri, lsaquo, lscr, Lscr, lsh, Lsh, lsim, lsime, lsimg, lsqb, lsquo, lsquor, Lstrok, lstrok, ltcc, ltcir, lt, LT, Lt, ltdot, lthree, ltimes, ltlarr, ltquest, ltri, ltrie, ltrif, ltrPar, lurdshar, luruhar, lvertneqq, lvnE, macr, male, malt, maltese, Map, map, mapsto, mapstodown, mapstoleft, mapstoup, marker, mcomma, Mcy, mcy, mdash, mDDot, measuredangle, MediumSpace, Mellintrf, Mfr, mfr, mho, micro, midast, midcir, mid, middot, minusb, minus, minusd, minusdu, MinusPlus, mlcp, mldr, mnplus, models, Mopf, mopf, mp, mscr, Mscr, mstpos, Mu, mu, multimap, mumap, nabla, Nacute, nacute, nang, nap, napE, napid, napos, napprox, natural, naturals, natur, nbsp, nbump, nbumpe, ncap, Ncaron, ncaron, Ncedil, ncedil, ncong, ncongdot, ncup, Ncy, ncy, ndash, nearhk, nearr, neArr, nearrow, ne, nedot, NegativeMediumSpace, NegativeThickSpace, NegativeThinSpace, NegativeVeryThinSpace, nequiv, nesear, nesim, NestedGreaterGreater, NestedLessLess, NewLine, nexist, nexists, Nfr, nfr, ngE, nge, ngeq, ngeqq, ngeqslant, nges, nGg, ngsim, nGt, ngt, ngtr, nGtv, nharr, nhArr, nhpar, ni, nis, nisd, niv, NJcy, njcy, nlarr, nlArr, nldr, nlE, nle, nleftarrow, nLeftarrow, nleftrightarrow, nLeftrightarrow, nleq, nleqq, nleqslant, nles, nless, nLl, nlsim, nLt, nlt, nltri, nltrie, nLtv, nmid, NoBreak, NonBreakingSpace, nopf, Nopf, Not, not, NotCongruent, NotCupCap, NotDoubleVerticalBar, NotElement, NotEqual, NotEqualTilde, NotExists, NotGreater, NotGreaterEqual, NotGreaterFullEqual, NotGreaterGreater, NotGreaterLess, NotGreaterSlantEqual, NotGreaterTilde, NotHumpDownHump, NotHumpEqual, notin, notindot, notinE, notinva, notinvb, notinvc, NotLeftTriangleBar, NotLeftTriangle, NotLeftTriangleEqual, NotLess, NotLessEqual, NotLessGreater, NotLessLess, NotLessSlantEqual, NotLessTilde, NotNestedGreaterGreater, NotNestedLessLess, notni, notniva, notnivb, notnivc, NotPrecedes, NotPrecedesEqual, NotPrecedesSlantEqual, NotReverseElement, NotRightTriangleBar, NotRightTriangle, NotRightTriangleEqual, NotSquareSubset, NotSquareSubsetEqual, NotSquareSuperset, NotSquareSupersetEqual, NotSubset, NotSubsetEqual, NotSucceeds, NotSucceedsEqual, NotSucceedsSlantEqual, NotSucceedsTilde, NotSuperset, NotSupersetEqual, NotTilde, NotTildeEqual, NotTildeFullEqual, NotTildeTilde, NotVerticalBar, nparallel, npar, nparsl, npart, npolint, npr, nprcue, nprec, npreceq, npre, nrarrc, nrarr, nrArr, nrarrw, nrightarrow, nRightarrow, nrtri, nrtrie, nsc, nsccue, nsce, Nscr, nscr, nshortmid, nshortparallel, nsim, nsime, nsimeq, nsmid, nspar, nsqsube, nsqsupe, nsub, nsubE, nsube, nsubset, nsubseteq, nsubseteqq, nsucc, nsucceq, nsup, nsupE, nsupe, nsupset, nsupseteq, nsupseteqq, ntgl, Ntilde, ntilde, ntlg, ntriangleleft, ntrianglelefteq, ntriangleright, ntrianglerighteq, Nu, nu, num, numero, numsp, nvap, nvdash, nvDash, nVdash, nVDash, nvge, nvgt, nvHarr, nvinfin, nvlArr, nvle, nvlt, nvltrie, nvrArr, nvrtrie, nvsim, nwarhk, nwarr, nwArr, nwarrow, nwnear, Oacute, oacute, oast, Ocirc, ocirc, ocir, Ocy, ocy, odash, Odblac, odblac, odiv, odot, odsold, OElig, oelig, ofcir, Ofr, ofr, ogon, Ograve, ograve, ogt, ohbar, ohm, oint, olarr, olcir, olcross, oline, olt, Omacr, omacr, Omega, omega, Omicron, omicron, omid, ominus, Oopf, oopf, opar, OpenCurlyDoubleQuote, OpenCurlyQuote, operp, oplus, orarr, Or, or, ord, order, orderof, ordf, ordm, origof, oror, orslope, orv, oS, Oscr, oscr, Oslash, oslash, osol, Otilde, otilde, otimesas, Otimes, otimes, Ouml, ouml, ovbar, OverBar, OverBrace, OverBracket, OverParenthesis, para, parallel, par, parsim, parsl, part, PartialD, Pcy, pcy, percnt, period, permil, perp, pertenk, Pfr, pfr, Phi, phi, phiv, phmmat, phone, Pi, pi, pitchfork, piv, planck, planckh, plankv, plusacir, plusb, pluscir, plus, plusdo, plusdu, pluse, PlusMinus, plusmn, plussim, plustwo, pm, Poincareplane, pointint, popf, Popf, pound, prap, Pr, pr, prcue, precapprox, prec, preccurlyeq, Precedes, PrecedesEqual, PrecedesSlantEqual, PrecedesTilde, preceq, precnapprox, precneqq, precnsim, pre, prE, precsim, prime, Prime, primes, prnap, prnE, prnsim, prod, Product, profalar, profline, profsurf, prop, Proportional, Proportion, propto, prsim, prurel, Pscr, pscr, Psi, psi, puncsp, Qfr, qfr, qint, qopf, Qopf, qprime, Qscr, qscr, quaternions, quatint, quest, questeq, quot, QUOT, rAarr, race, Racute, racute, radic, raemptyv, rang, Rang, rangd, range, rangle, raquo, rarrap, rarrb, rarrbfs, rarrc, rarr, Rarr, rArr, rarrfs, rarrhk, rarrlp, rarrpl, rarrsim, Rarrtl, rarrtl, rarrw, ratail, rAtail, ratio, rationals, rbarr, rBarr, RBarr, rbbrk, rbrace, rbrack, rbrke, rbrksld, rbrkslu, Rcaron, rcaron, Rcedil, rcedil, rceil, rcub, Rcy, rcy, rdca, rdldhar, rdquo, rdquor, rdsh, real, realine, realpart, reals, Re, rect, reg, REG, ReverseElement, ReverseEquilibrium, ReverseUpEquilibrium, rfisht, rfloor, rfr, Rfr, rHar, rhard, rharu, rharul, Rho, rho, rhov, RightAngleBracket, RightArrowBar, rightarrow, RightArrow, Rightarrow, RightArrowLeftArrow, rightarrowtail, RightCeiling, RightDoubleBracket, RightDownTeeVector, RightDownVectorBar, RightDownVector, RightFloor, rightharpoondown, rightharpoonup, rightleftarrows, rightleftharpoons, rightrightarrows, rightsquigarrow, RightTeeArrow, RightTee, RightTeeVector, rightthreetimes, RightTriangleBar, RightTriangle, RightTriangleEqual, RightUpDownVector, RightUpTeeVector, RightUpVectorBar, RightUpVector, RightVectorBar, RightVector, ring, risingdotseq, rlarr, rlhar, rlm, rmoustache, rmoust, rnmid, roang, roarr, robrk, ropar, ropf, Ropf, roplus, rotimes, RoundImplies, rpar, rpargt, rppolint, rrarr, Rrightarrow, rsaquo, rscr, Rscr, rsh, Rsh, rsqb, rsquo, rsquor, rthree, rtimes, rtri, rtrie, rtrif, rtriltri, RuleDelayed, ruluhar, rx, Sacute, sacute, sbquo, scap, Scaron, scaron, Sc, sc, sccue, sce, scE, Scedil, scedil, Scirc, scirc, scnap, scnE, scnsim, scpolint, scsim, Scy, scy, sdotb, sdot, sdote, searhk, searr, seArr, searrow, sect, semi, seswar, setminus, setmn, sext, Sfr, sfr, sfrown, sharp, SHCHcy, shchcy, SHcy, shcy, ShortDownArrow, ShortLeftArrow, shortmid, shortparallel, ShortRightArrow, ShortUpArrow, shy, Sigma, sigma, sigmaf, sigmav, sim, simdot, sime, simeq, simg, simgE, siml, simlE, simne, simplus, simrarr, slarr, SmallCircle, smallsetminus, smashp, smeparsl, smid, smile, smt, smte, smtes, SOFTcy, softcy, solbar, solb, sol, Sopf, sopf, spades, spadesuit, spar, sqcap, sqcaps, sqcup, sqcups, Sqrt, sqsub, sqsube, sqsubset, sqsubseteq, sqsup, sqsupe, sqsupset, sqsupseteq, square, Square, SquareIntersection, SquareSubset, SquareSubsetEqual, SquareSuperset, SquareSupersetEqual, SquareUnion, squarf, squ, squf, srarr, Sscr, sscr, ssetmn, ssmile, sstarf, Star, star, starf, straightepsilon, straightphi, strns, sub, Sub, subdot, subE, sube, subedot, submult, subnE, subne, subplus, subrarr, subset, Subset, subseteq, subseteqq, SubsetEqual, subsetneq, subsetneqq, subsim, subsub, subsup, succapprox, succ, succcurlyeq, Succeeds, SucceedsEqual, SucceedsSlantEqual, SucceedsTilde, succeq, succnapprox, succneqq, succnsim, succsim, SuchThat, sum, Sum, sung, sup1, sup2, sup3, sup, Sup, supdot, supdsub, supE, supe, supedot, Superset, SupersetEqual, suphsol, suphsub, suplarr, supmult, supnE, supne, supplus, supset, Supset, supseteq, supseteqq, supsetneq, supsetneqq, supsim, supsub, supsup, swarhk, swarr, swArr, swarrow, swnwar, szlig, Tab, target, Tau, tau, tbrk, Tcaron, tcaron, Tcedil, tcedil, Tcy, tcy, tdot, telrec, Tfr, tfr, there4, therefore, Therefore, Theta, theta, thetasym, thetav, thickapprox, thicksim, ThickSpace, ThinSpace, thinsp, thkap, thksim, THORN, thorn, tilde, Tilde, TildeEqual, TildeFullEqual, TildeTilde, timesbar, timesb, times, timesd, tint, toea, topbot, topcir, top, Topf, topf, topfork, tosa, tprime, trade, TRADE, triangle, triangledown, triangleleft, trianglelefteq, triangleq, triangleright, trianglerighteq, tridot, trie, triminus, TripleDot, triplus, trisb, tritime, trpezium, Tscr, tscr, TScy, tscy, TSHcy, tshcy, Tstrok, tstrok, twixt, twoheadleftarrow, twoheadrightarrow, Uacute, uacute, uarr, Uarr, uArr, Uarrocir, Ubrcy, ubrcy, Ubreve, ubreve, Ucirc, ucirc, Ucy, ucy, udarr, Udblac, udblac, udhar, ufisht, Ufr, ufr, Ugrave, ugrave, uHar, uharl, uharr, uhblk, ulcorn, ulcorner, ulcrop, ultri, Umacr, umacr, uml, UnderBar, UnderBrace, UnderBracket, UnderParenthesis, Union, UnionPlus, Uogon, uogon, Uopf, uopf, UpArrowBar, uparrow, UpArrow, Uparrow, UpArrowDownArrow, updownarrow, UpDownArrow, Updownarrow, UpEquilibrium, upharpoonleft, upharpoonright, uplus, UpperLeftArrow, UpperRightArrow, upsi, Upsi, upsih, Upsilon, upsilon, UpTeeArrow, UpTee, upuparrows, urcorn, urcorner, urcrop, Uring, uring, urtri, Uscr, uscr, utdot, Utilde, utilde, utri, utrif, uuarr, Uuml, uuml, uwangle, vangrt, varepsilon, varkappa, varnothing, varphi, varpi, varpropto, varr, vArr, varrho, varsigma, varsubsetneq, varsubsetneqq, varsupsetneq, varsupsetneqq, vartheta, vartriangleleft, vartriangleright, vBar, Vbar, vBarv, Vcy, vcy, vdash, vDash, Vdash, VDash, Vdashl, veebar, vee, Vee, veeeq, vellip, verbar, Verbar, vert, Vert, VerticalBar, VerticalLine, VerticalSeparator, VerticalTilde, VeryThinSpace, Vfr, vfr, vltri, vnsub, vnsup, Vopf, vopf, vprop, vrtri, Vscr, vscr, vsubnE, vsubne, vsupnE, vsupne, Vvdash, vzigzag, Wcirc, wcirc, wedbar, wedge, Wedge, wedgeq, weierp, Wfr, wfr, Wopf, wopf, wp, wr, wreath, Wscr, wscr, xcap, xcirc, xcup, xdtri, Xfr, xfr, xharr, xhArr, Xi, xi, xlarr, xlArr, xmap, xnis, xodot, Xopf, xopf, xoplus, xotime, xrarr, xrArr, Xscr, xscr, xsqcup, xuplus, xutri, xvee, xwedge, Yacute, yacute, YAcy, yacy, Ycirc, ycirc, Ycy, ycy, yen, Yfr, yfr, YIcy, yicy, Yopf, yopf, Yscr, yscr, YUcy, yucy, yuml, Yuml, Zacute, zacute, Zcaron, zcaron, Zcy, zcy, Zdot, zdot, zeetrf, ZeroWidthSpace, Zeta, zeta, zfr, Zfr, ZHcy, zhcy, zigrarr, zopf, Zopf, Zscr, zscr, zwj, zwnj, default */

  /***/
  function node_modulesEntitiesMapsEntitiesJson(module) {
    module.exports = JSON.parse("{\"Aacute\":\"Á\",\"aacute\":\"á\",\"Abreve\":\"Ă\",\"abreve\":\"ă\",\"ac\":\"∾\",\"acd\":\"∿\",\"acE\":\"∾̳\",\"Acirc\":\"Â\",\"acirc\":\"â\",\"acute\":\"´\",\"Acy\":\"А\",\"acy\":\"а\",\"AElig\":\"Æ\",\"aelig\":\"æ\",\"af\":\"⁡\",\"Afr\":\"𝔄\",\"afr\":\"𝔞\",\"Agrave\":\"À\",\"agrave\":\"à\",\"alefsym\":\"ℵ\",\"aleph\":\"ℵ\",\"Alpha\":\"Α\",\"alpha\":\"α\",\"Amacr\":\"Ā\",\"amacr\":\"ā\",\"amalg\":\"⨿\",\"amp\":\"&\",\"AMP\":\"&\",\"andand\":\"⩕\",\"And\":\"⩓\",\"and\":\"∧\",\"andd\":\"⩜\",\"andslope\":\"⩘\",\"andv\":\"⩚\",\"ang\":\"∠\",\"ange\":\"⦤\",\"angle\":\"∠\",\"angmsdaa\":\"⦨\",\"angmsdab\":\"⦩\",\"angmsdac\":\"⦪\",\"angmsdad\":\"⦫\",\"angmsdae\":\"⦬\",\"angmsdaf\":\"⦭\",\"angmsdag\":\"⦮\",\"angmsdah\":\"⦯\",\"angmsd\":\"∡\",\"angrt\":\"∟\",\"angrtvb\":\"⊾\",\"angrtvbd\":\"⦝\",\"angsph\":\"∢\",\"angst\":\"Å\",\"angzarr\":\"⍼\",\"Aogon\":\"Ą\",\"aogon\":\"ą\",\"Aopf\":\"𝔸\",\"aopf\":\"𝕒\",\"apacir\":\"⩯\",\"ap\":\"≈\",\"apE\":\"⩰\",\"ape\":\"≊\",\"apid\":\"≋\",\"apos\":\"'\",\"ApplyFunction\":\"⁡\",\"approx\":\"≈\",\"approxeq\":\"≊\",\"Aring\":\"Å\",\"aring\":\"å\",\"Ascr\":\"𝒜\",\"ascr\":\"𝒶\",\"Assign\":\"≔\",\"ast\":\"*\",\"asymp\":\"≈\",\"asympeq\":\"≍\",\"Atilde\":\"Ã\",\"atilde\":\"ã\",\"Auml\":\"Ä\",\"auml\":\"ä\",\"awconint\":\"∳\",\"awint\":\"⨑\",\"backcong\":\"≌\",\"backepsilon\":\"϶\",\"backprime\":\"‵\",\"backsim\":\"∽\",\"backsimeq\":\"⋍\",\"Backslash\":\"∖\",\"Barv\":\"⫧\",\"barvee\":\"⊽\",\"barwed\":\"⌅\",\"Barwed\":\"⌆\",\"barwedge\":\"⌅\",\"bbrk\":\"⎵\",\"bbrktbrk\":\"⎶\",\"bcong\":\"≌\",\"Bcy\":\"Б\",\"bcy\":\"б\",\"bdquo\":\"„\",\"becaus\":\"∵\",\"because\":\"∵\",\"Because\":\"∵\",\"bemptyv\":\"⦰\",\"bepsi\":\"϶\",\"bernou\":\"ℬ\",\"Bernoullis\":\"ℬ\",\"Beta\":\"Β\",\"beta\":\"β\",\"beth\":\"ℶ\",\"between\":\"≬\",\"Bfr\":\"𝔅\",\"bfr\":\"𝔟\",\"bigcap\":\"⋂\",\"bigcirc\":\"◯\",\"bigcup\":\"⋃\",\"bigodot\":\"⨀\",\"bigoplus\":\"⨁\",\"bigotimes\":\"⨂\",\"bigsqcup\":\"⨆\",\"bigstar\":\"★\",\"bigtriangledown\":\"▽\",\"bigtriangleup\":\"△\",\"biguplus\":\"⨄\",\"bigvee\":\"⋁\",\"bigwedge\":\"⋀\",\"bkarow\":\"⤍\",\"blacklozenge\":\"⧫\",\"blacksquare\":\"▪\",\"blacktriangle\":\"▴\",\"blacktriangledown\":\"▾\",\"blacktriangleleft\":\"◂\",\"blacktriangleright\":\"▸\",\"blank\":\"␣\",\"blk12\":\"▒\",\"blk14\":\"░\",\"blk34\":\"▓\",\"block\":\"█\",\"bne\":\"=⃥\",\"bnequiv\":\"≡⃥\",\"bNot\":\"⫭\",\"bnot\":\"⌐\",\"Bopf\":\"𝔹\",\"bopf\":\"𝕓\",\"bot\":\"⊥\",\"bottom\":\"⊥\",\"bowtie\":\"⋈\",\"boxbox\":\"⧉\",\"boxdl\":\"┐\",\"boxdL\":\"╕\",\"boxDl\":\"╖\",\"boxDL\":\"╗\",\"boxdr\":\"┌\",\"boxdR\":\"╒\",\"boxDr\":\"╓\",\"boxDR\":\"╔\",\"boxh\":\"─\",\"boxH\":\"═\",\"boxhd\":\"┬\",\"boxHd\":\"╤\",\"boxhD\":\"╥\",\"boxHD\":\"╦\",\"boxhu\":\"┴\",\"boxHu\":\"╧\",\"boxhU\":\"╨\",\"boxHU\":\"╩\",\"boxminus\":\"⊟\",\"boxplus\":\"⊞\",\"boxtimes\":\"⊠\",\"boxul\":\"┘\",\"boxuL\":\"╛\",\"boxUl\":\"╜\",\"boxUL\":\"╝\",\"boxur\":\"└\",\"boxuR\":\"╘\",\"boxUr\":\"╙\",\"boxUR\":\"╚\",\"boxv\":\"│\",\"boxV\":\"║\",\"boxvh\":\"┼\",\"boxvH\":\"╪\",\"boxVh\":\"╫\",\"boxVH\":\"╬\",\"boxvl\":\"┤\",\"boxvL\":\"╡\",\"boxVl\":\"╢\",\"boxVL\":\"╣\",\"boxvr\":\"├\",\"boxvR\":\"╞\",\"boxVr\":\"╟\",\"boxVR\":\"╠\",\"bprime\":\"‵\",\"breve\":\"˘\",\"Breve\":\"˘\",\"brvbar\":\"¦\",\"bscr\":\"𝒷\",\"Bscr\":\"ℬ\",\"bsemi\":\"⁏\",\"bsim\":\"∽\",\"bsime\":\"⋍\",\"bsolb\":\"⧅\",\"bsol\":\"\\\\\",\"bsolhsub\":\"⟈\",\"bull\":\"•\",\"bullet\":\"•\",\"bump\":\"≎\",\"bumpE\":\"⪮\",\"bumpe\":\"≏\",\"Bumpeq\":\"≎\",\"bumpeq\":\"≏\",\"Cacute\":\"Ć\",\"cacute\":\"ć\",\"capand\":\"⩄\",\"capbrcup\":\"⩉\",\"capcap\":\"⩋\",\"cap\":\"∩\",\"Cap\":\"⋒\",\"capcup\":\"⩇\",\"capdot\":\"⩀\",\"CapitalDifferentialD\":\"ⅅ\",\"caps\":\"∩︀\",\"caret\":\"⁁\",\"caron\":\"ˇ\",\"Cayleys\":\"ℭ\",\"ccaps\":\"⩍\",\"Ccaron\":\"Č\",\"ccaron\":\"č\",\"Ccedil\":\"Ç\",\"ccedil\":\"ç\",\"Ccirc\":\"Ĉ\",\"ccirc\":\"ĉ\",\"Cconint\":\"∰\",\"ccups\":\"⩌\",\"ccupssm\":\"⩐\",\"Cdot\":\"Ċ\",\"cdot\":\"ċ\",\"cedil\":\"¸\",\"Cedilla\":\"¸\",\"cemptyv\":\"⦲\",\"cent\":\"¢\",\"centerdot\":\"·\",\"CenterDot\":\"·\",\"cfr\":\"𝔠\",\"Cfr\":\"ℭ\",\"CHcy\":\"Ч\",\"chcy\":\"ч\",\"check\":\"✓\",\"checkmark\":\"✓\",\"Chi\":\"Χ\",\"chi\":\"χ\",\"circ\":\"ˆ\",\"circeq\":\"≗\",\"circlearrowleft\":\"↺\",\"circlearrowright\":\"↻\",\"circledast\":\"⊛\",\"circledcirc\":\"⊚\",\"circleddash\":\"⊝\",\"CircleDot\":\"⊙\",\"circledR\":\"®\",\"circledS\":\"Ⓢ\",\"CircleMinus\":\"⊖\",\"CirclePlus\":\"⊕\",\"CircleTimes\":\"⊗\",\"cir\":\"○\",\"cirE\":\"⧃\",\"cire\":\"≗\",\"cirfnint\":\"⨐\",\"cirmid\":\"⫯\",\"cirscir\":\"⧂\",\"ClockwiseContourIntegral\":\"∲\",\"CloseCurlyDoubleQuote\":\"”\",\"CloseCurlyQuote\":\"’\",\"clubs\":\"♣\",\"clubsuit\":\"♣\",\"colon\":\":\",\"Colon\":\"∷\",\"Colone\":\"⩴\",\"colone\":\"≔\",\"coloneq\":\"≔\",\"comma\":\",\",\"commat\":\"@\",\"comp\":\"∁\",\"compfn\":\"∘\",\"complement\":\"∁\",\"complexes\":\"ℂ\",\"cong\":\"≅\",\"congdot\":\"⩭\",\"Congruent\":\"≡\",\"conint\":\"∮\",\"Conint\":\"∯\",\"ContourIntegral\":\"∮\",\"copf\":\"𝕔\",\"Copf\":\"ℂ\",\"coprod\":\"∐\",\"Coproduct\":\"∐\",\"copy\":\"©\",\"COPY\":\"©\",\"copysr\":\"℗\",\"CounterClockwiseContourIntegral\":\"∳\",\"crarr\":\"↵\",\"cross\":\"✗\",\"Cross\":\"⨯\",\"Cscr\":\"𝒞\",\"cscr\":\"𝒸\",\"csub\":\"⫏\",\"csube\":\"⫑\",\"csup\":\"⫐\",\"csupe\":\"⫒\",\"ctdot\":\"⋯\",\"cudarrl\":\"⤸\",\"cudarrr\":\"⤵\",\"cuepr\":\"⋞\",\"cuesc\":\"⋟\",\"cularr\":\"↶\",\"cularrp\":\"⤽\",\"cupbrcap\":\"⩈\",\"cupcap\":\"⩆\",\"CupCap\":\"≍\",\"cup\":\"∪\",\"Cup\":\"⋓\",\"cupcup\":\"⩊\",\"cupdot\":\"⊍\",\"cupor\":\"⩅\",\"cups\":\"∪︀\",\"curarr\":\"↷\",\"curarrm\":\"⤼\",\"curlyeqprec\":\"⋞\",\"curlyeqsucc\":\"⋟\",\"curlyvee\":\"⋎\",\"curlywedge\":\"⋏\",\"curren\":\"¤\",\"curvearrowleft\":\"↶\",\"curvearrowright\":\"↷\",\"cuvee\":\"⋎\",\"cuwed\":\"⋏\",\"cwconint\":\"∲\",\"cwint\":\"∱\",\"cylcty\":\"⌭\",\"dagger\":\"†\",\"Dagger\":\"‡\",\"daleth\":\"ℸ\",\"darr\":\"↓\",\"Darr\":\"↡\",\"dArr\":\"⇓\",\"dash\":\"‐\",\"Dashv\":\"⫤\",\"dashv\":\"⊣\",\"dbkarow\":\"⤏\",\"dblac\":\"˝\",\"Dcaron\":\"Ď\",\"dcaron\":\"ď\",\"Dcy\":\"Д\",\"dcy\":\"д\",\"ddagger\":\"‡\",\"ddarr\":\"⇊\",\"DD\":\"ⅅ\",\"dd\":\"ⅆ\",\"DDotrahd\":\"⤑\",\"ddotseq\":\"⩷\",\"deg\":\"°\",\"Del\":\"∇\",\"Delta\":\"Δ\",\"delta\":\"δ\",\"demptyv\":\"⦱\",\"dfisht\":\"⥿\",\"Dfr\":\"𝔇\",\"dfr\":\"𝔡\",\"dHar\":\"⥥\",\"dharl\":\"⇃\",\"dharr\":\"⇂\",\"DiacriticalAcute\":\"´\",\"DiacriticalDot\":\"˙\",\"DiacriticalDoubleAcute\":\"˝\",\"DiacriticalGrave\":\"`\",\"DiacriticalTilde\":\"˜\",\"diam\":\"⋄\",\"diamond\":\"⋄\",\"Diamond\":\"⋄\",\"diamondsuit\":\"♦\",\"diams\":\"♦\",\"die\":\"¨\",\"DifferentialD\":\"ⅆ\",\"digamma\":\"ϝ\",\"disin\":\"⋲\",\"div\":\"÷\",\"divide\":\"÷\",\"divideontimes\":\"⋇\",\"divonx\":\"⋇\",\"DJcy\":\"Ђ\",\"djcy\":\"ђ\",\"dlcorn\":\"⌞\",\"dlcrop\":\"⌍\",\"dollar\":\"$\",\"Dopf\":\"𝔻\",\"dopf\":\"𝕕\",\"Dot\":\"¨\",\"dot\":\"˙\",\"DotDot\":\"⃜\",\"doteq\":\"≐\",\"doteqdot\":\"≑\",\"DotEqual\":\"≐\",\"dotminus\":\"∸\",\"dotplus\":\"∔\",\"dotsquare\":\"⊡\",\"doublebarwedge\":\"⌆\",\"DoubleContourIntegral\":\"∯\",\"DoubleDot\":\"¨\",\"DoubleDownArrow\":\"⇓\",\"DoubleLeftArrow\":\"⇐\",\"DoubleLeftRightArrow\":\"⇔\",\"DoubleLeftTee\":\"⫤\",\"DoubleLongLeftArrow\":\"⟸\",\"DoubleLongLeftRightArrow\":\"⟺\",\"DoubleLongRightArrow\":\"⟹\",\"DoubleRightArrow\":\"⇒\",\"DoubleRightTee\":\"⊨\",\"DoubleUpArrow\":\"⇑\",\"DoubleUpDownArrow\":\"⇕\",\"DoubleVerticalBar\":\"∥\",\"DownArrowBar\":\"⤓\",\"downarrow\":\"↓\",\"DownArrow\":\"↓\",\"Downarrow\":\"⇓\",\"DownArrowUpArrow\":\"⇵\",\"DownBreve\":\"̑\",\"downdownarrows\":\"⇊\",\"downharpoonleft\":\"⇃\",\"downharpoonright\":\"⇂\",\"DownLeftRightVector\":\"⥐\",\"DownLeftTeeVector\":\"⥞\",\"DownLeftVectorBar\":\"⥖\",\"DownLeftVector\":\"↽\",\"DownRightTeeVector\":\"⥟\",\"DownRightVectorBar\":\"⥗\",\"DownRightVector\":\"⇁\",\"DownTeeArrow\":\"↧\",\"DownTee\":\"⊤\",\"drbkarow\":\"⤐\",\"drcorn\":\"⌟\",\"drcrop\":\"⌌\",\"Dscr\":\"𝒟\",\"dscr\":\"𝒹\",\"DScy\":\"Ѕ\",\"dscy\":\"ѕ\",\"dsol\":\"⧶\",\"Dstrok\":\"Đ\",\"dstrok\":\"đ\",\"dtdot\":\"⋱\",\"dtri\":\"▿\",\"dtrif\":\"▾\",\"duarr\":\"⇵\",\"duhar\":\"⥯\",\"dwangle\":\"⦦\",\"DZcy\":\"Џ\",\"dzcy\":\"џ\",\"dzigrarr\":\"⟿\",\"Eacute\":\"É\",\"eacute\":\"é\",\"easter\":\"⩮\",\"Ecaron\":\"Ě\",\"ecaron\":\"ě\",\"Ecirc\":\"Ê\",\"ecirc\":\"ê\",\"ecir\":\"≖\",\"ecolon\":\"≕\",\"Ecy\":\"Э\",\"ecy\":\"э\",\"eDDot\":\"⩷\",\"Edot\":\"Ė\",\"edot\":\"ė\",\"eDot\":\"≑\",\"ee\":\"ⅇ\",\"efDot\":\"≒\",\"Efr\":\"𝔈\",\"efr\":\"𝔢\",\"eg\":\"⪚\",\"Egrave\":\"È\",\"egrave\":\"è\",\"egs\":\"⪖\",\"egsdot\":\"⪘\",\"el\":\"⪙\",\"Element\":\"∈\",\"elinters\":\"⏧\",\"ell\":\"ℓ\",\"els\":\"⪕\",\"elsdot\":\"⪗\",\"Emacr\":\"Ē\",\"emacr\":\"ē\",\"empty\":\"∅\",\"emptyset\":\"∅\",\"EmptySmallSquare\":\"◻\",\"emptyv\":\"∅\",\"EmptyVerySmallSquare\":\"▫\",\"emsp13\":\" \",\"emsp14\":\" \",\"emsp\":\" \",\"ENG\":\"Ŋ\",\"eng\":\"ŋ\",\"ensp\":\" \",\"Eogon\":\"Ę\",\"eogon\":\"ę\",\"Eopf\":\"𝔼\",\"eopf\":\"𝕖\",\"epar\":\"⋕\",\"eparsl\":\"⧣\",\"eplus\":\"⩱\",\"epsi\":\"ε\",\"Epsilon\":\"Ε\",\"epsilon\":\"ε\",\"epsiv\":\"ϵ\",\"eqcirc\":\"≖\",\"eqcolon\":\"≕\",\"eqsim\":\"≂\",\"eqslantgtr\":\"⪖\",\"eqslantless\":\"⪕\",\"Equal\":\"⩵\",\"equals\":\"=\",\"EqualTilde\":\"≂\",\"equest\":\"≟\",\"Equilibrium\":\"⇌\",\"equiv\":\"≡\",\"equivDD\":\"⩸\",\"eqvparsl\":\"⧥\",\"erarr\":\"⥱\",\"erDot\":\"≓\",\"escr\":\"ℯ\",\"Escr\":\"ℰ\",\"esdot\":\"≐\",\"Esim\":\"⩳\",\"esim\":\"≂\",\"Eta\":\"Η\",\"eta\":\"η\",\"ETH\":\"Ð\",\"eth\":\"ð\",\"Euml\":\"Ë\",\"euml\":\"ë\",\"euro\":\"€\",\"excl\":\"!\",\"exist\":\"∃\",\"Exists\":\"∃\",\"expectation\":\"ℰ\",\"exponentiale\":\"ⅇ\",\"ExponentialE\":\"ⅇ\",\"fallingdotseq\":\"≒\",\"Fcy\":\"Ф\",\"fcy\":\"ф\",\"female\":\"♀\",\"ffilig\":\"ﬃ\",\"fflig\":\"ﬀ\",\"ffllig\":\"ﬄ\",\"Ffr\":\"𝔉\",\"ffr\":\"𝔣\",\"filig\":\"ﬁ\",\"FilledSmallSquare\":\"◼\",\"FilledVerySmallSquare\":\"▪\",\"fjlig\":\"fj\",\"flat\":\"♭\",\"fllig\":\"ﬂ\",\"fltns\":\"▱\",\"fnof\":\"ƒ\",\"Fopf\":\"𝔽\",\"fopf\":\"𝕗\",\"forall\":\"∀\",\"ForAll\":\"∀\",\"fork\":\"⋔\",\"forkv\":\"⫙\",\"Fouriertrf\":\"ℱ\",\"fpartint\":\"⨍\",\"frac12\":\"½\",\"frac13\":\"⅓\",\"frac14\":\"¼\",\"frac15\":\"⅕\",\"frac16\":\"⅙\",\"frac18\":\"⅛\",\"frac23\":\"⅔\",\"frac25\":\"⅖\",\"frac34\":\"¾\",\"frac35\":\"⅗\",\"frac38\":\"⅜\",\"frac45\":\"⅘\",\"frac56\":\"⅚\",\"frac58\":\"⅝\",\"frac78\":\"⅞\",\"frasl\":\"⁄\",\"frown\":\"⌢\",\"fscr\":\"𝒻\",\"Fscr\":\"ℱ\",\"gacute\":\"ǵ\",\"Gamma\":\"Γ\",\"gamma\":\"γ\",\"Gammad\":\"Ϝ\",\"gammad\":\"ϝ\",\"gap\":\"⪆\",\"Gbreve\":\"Ğ\",\"gbreve\":\"ğ\",\"Gcedil\":\"Ģ\",\"Gcirc\":\"Ĝ\",\"gcirc\":\"ĝ\",\"Gcy\":\"Г\",\"gcy\":\"г\",\"Gdot\":\"Ġ\",\"gdot\":\"ġ\",\"ge\":\"≥\",\"gE\":\"≧\",\"gEl\":\"⪌\",\"gel\":\"⋛\",\"geq\":\"≥\",\"geqq\":\"≧\",\"geqslant\":\"⩾\",\"gescc\":\"⪩\",\"ges\":\"⩾\",\"gesdot\":\"⪀\",\"gesdoto\":\"⪂\",\"gesdotol\":\"⪄\",\"gesl\":\"⋛︀\",\"gesles\":\"⪔\",\"Gfr\":\"𝔊\",\"gfr\":\"𝔤\",\"gg\":\"≫\",\"Gg\":\"⋙\",\"ggg\":\"⋙\",\"gimel\":\"ℷ\",\"GJcy\":\"Ѓ\",\"gjcy\":\"ѓ\",\"gla\":\"⪥\",\"gl\":\"≷\",\"glE\":\"⪒\",\"glj\":\"⪤\",\"gnap\":\"⪊\",\"gnapprox\":\"⪊\",\"gne\":\"⪈\",\"gnE\":\"≩\",\"gneq\":\"⪈\",\"gneqq\":\"≩\",\"gnsim\":\"⋧\",\"Gopf\":\"𝔾\",\"gopf\":\"𝕘\",\"grave\":\"`\",\"GreaterEqual\":\"≥\",\"GreaterEqualLess\":\"⋛\",\"GreaterFullEqual\":\"≧\",\"GreaterGreater\":\"⪢\",\"GreaterLess\":\"≷\",\"GreaterSlantEqual\":\"⩾\",\"GreaterTilde\":\"≳\",\"Gscr\":\"𝒢\",\"gscr\":\"ℊ\",\"gsim\":\"≳\",\"gsime\":\"⪎\",\"gsiml\":\"⪐\",\"gtcc\":\"⪧\",\"gtcir\":\"⩺\",\"gt\":\">\",\"GT\":\">\",\"Gt\":\"≫\",\"gtdot\":\"⋗\",\"gtlPar\":\"⦕\",\"gtquest\":\"⩼\",\"gtrapprox\":\"⪆\",\"gtrarr\":\"⥸\",\"gtrdot\":\"⋗\",\"gtreqless\":\"⋛\",\"gtreqqless\":\"⪌\",\"gtrless\":\"≷\",\"gtrsim\":\"≳\",\"gvertneqq\":\"≩︀\",\"gvnE\":\"≩︀\",\"Hacek\":\"ˇ\",\"hairsp\":\" \",\"half\":\"½\",\"hamilt\":\"ℋ\",\"HARDcy\":\"Ъ\",\"hardcy\":\"ъ\",\"harrcir\":\"⥈\",\"harr\":\"↔\",\"hArr\":\"⇔\",\"harrw\":\"↭\",\"Hat\":\"^\",\"hbar\":\"ℏ\",\"Hcirc\":\"Ĥ\",\"hcirc\":\"ĥ\",\"hearts\":\"♥\",\"heartsuit\":\"♥\",\"hellip\":\"…\",\"hercon\":\"⊹\",\"hfr\":\"𝔥\",\"Hfr\":\"ℌ\",\"HilbertSpace\":\"ℋ\",\"hksearow\":\"⤥\",\"hkswarow\":\"⤦\",\"hoarr\":\"⇿\",\"homtht\":\"∻\",\"hookleftarrow\":\"↩\",\"hookrightarrow\":\"↪\",\"hopf\":\"𝕙\",\"Hopf\":\"ℍ\",\"horbar\":\"―\",\"HorizontalLine\":\"─\",\"hscr\":\"𝒽\",\"Hscr\":\"ℋ\",\"hslash\":\"ℏ\",\"Hstrok\":\"Ħ\",\"hstrok\":\"ħ\",\"HumpDownHump\":\"≎\",\"HumpEqual\":\"≏\",\"hybull\":\"⁃\",\"hyphen\":\"‐\",\"Iacute\":\"Í\",\"iacute\":\"í\",\"ic\":\"⁣\",\"Icirc\":\"Î\",\"icirc\":\"î\",\"Icy\":\"И\",\"icy\":\"и\",\"Idot\":\"İ\",\"IEcy\":\"Е\",\"iecy\":\"е\",\"iexcl\":\"¡\",\"iff\":\"⇔\",\"ifr\":\"𝔦\",\"Ifr\":\"ℑ\",\"Igrave\":\"Ì\",\"igrave\":\"ì\",\"ii\":\"ⅈ\",\"iiiint\":\"⨌\",\"iiint\":\"∭\",\"iinfin\":\"⧜\",\"iiota\":\"℩\",\"IJlig\":\"Ĳ\",\"ijlig\":\"ĳ\",\"Imacr\":\"Ī\",\"imacr\":\"ī\",\"image\":\"ℑ\",\"ImaginaryI\":\"ⅈ\",\"imagline\":\"ℐ\",\"imagpart\":\"ℑ\",\"imath\":\"ı\",\"Im\":\"ℑ\",\"imof\":\"⊷\",\"imped\":\"Ƶ\",\"Implies\":\"⇒\",\"incare\":\"℅\",\"in\":\"∈\",\"infin\":\"∞\",\"infintie\":\"⧝\",\"inodot\":\"ı\",\"intcal\":\"⊺\",\"int\":\"∫\",\"Int\":\"∬\",\"integers\":\"ℤ\",\"Integral\":\"∫\",\"intercal\":\"⊺\",\"Intersection\":\"⋂\",\"intlarhk\":\"⨗\",\"intprod\":\"⨼\",\"InvisibleComma\":\"⁣\",\"InvisibleTimes\":\"⁢\",\"IOcy\":\"Ё\",\"iocy\":\"ё\",\"Iogon\":\"Į\",\"iogon\":\"į\",\"Iopf\":\"𝕀\",\"iopf\":\"𝕚\",\"Iota\":\"Ι\",\"iota\":\"ι\",\"iprod\":\"⨼\",\"iquest\":\"¿\",\"iscr\":\"𝒾\",\"Iscr\":\"ℐ\",\"isin\":\"∈\",\"isindot\":\"⋵\",\"isinE\":\"⋹\",\"isins\":\"⋴\",\"isinsv\":\"⋳\",\"isinv\":\"∈\",\"it\":\"⁢\",\"Itilde\":\"Ĩ\",\"itilde\":\"ĩ\",\"Iukcy\":\"І\",\"iukcy\":\"і\",\"Iuml\":\"Ï\",\"iuml\":\"ï\",\"Jcirc\":\"Ĵ\",\"jcirc\":\"ĵ\",\"Jcy\":\"Й\",\"jcy\":\"й\",\"Jfr\":\"𝔍\",\"jfr\":\"𝔧\",\"jmath\":\"ȷ\",\"Jopf\":\"𝕁\",\"jopf\":\"𝕛\",\"Jscr\":\"𝒥\",\"jscr\":\"𝒿\",\"Jsercy\":\"Ј\",\"jsercy\":\"ј\",\"Jukcy\":\"Є\",\"jukcy\":\"є\",\"Kappa\":\"Κ\",\"kappa\":\"κ\",\"kappav\":\"ϰ\",\"Kcedil\":\"Ķ\",\"kcedil\":\"ķ\",\"Kcy\":\"К\",\"kcy\":\"к\",\"Kfr\":\"𝔎\",\"kfr\":\"𝔨\",\"kgreen\":\"ĸ\",\"KHcy\":\"Х\",\"khcy\":\"х\",\"KJcy\":\"Ќ\",\"kjcy\":\"ќ\",\"Kopf\":\"𝕂\",\"kopf\":\"𝕜\",\"Kscr\":\"𝒦\",\"kscr\":\"𝓀\",\"lAarr\":\"⇚\",\"Lacute\":\"Ĺ\",\"lacute\":\"ĺ\",\"laemptyv\":\"⦴\",\"lagran\":\"ℒ\",\"Lambda\":\"Λ\",\"lambda\":\"λ\",\"lang\":\"⟨\",\"Lang\":\"⟪\",\"langd\":\"⦑\",\"langle\":\"⟨\",\"lap\":\"⪅\",\"Laplacetrf\":\"ℒ\",\"laquo\":\"«\",\"larrb\":\"⇤\",\"larrbfs\":\"⤟\",\"larr\":\"←\",\"Larr\":\"↞\",\"lArr\":\"⇐\",\"larrfs\":\"⤝\",\"larrhk\":\"↩\",\"larrlp\":\"↫\",\"larrpl\":\"⤹\",\"larrsim\":\"⥳\",\"larrtl\":\"↢\",\"latail\":\"⤙\",\"lAtail\":\"⤛\",\"lat\":\"⪫\",\"late\":\"⪭\",\"lates\":\"⪭︀\",\"lbarr\":\"⤌\",\"lBarr\":\"⤎\",\"lbbrk\":\"❲\",\"lbrace\":\"{\",\"lbrack\":\"[\",\"lbrke\":\"⦋\",\"lbrksld\":\"⦏\",\"lbrkslu\":\"⦍\",\"Lcaron\":\"Ľ\",\"lcaron\":\"ľ\",\"Lcedil\":\"Ļ\",\"lcedil\":\"ļ\",\"lceil\":\"⌈\",\"lcub\":\"{\",\"Lcy\":\"Л\",\"lcy\":\"л\",\"ldca\":\"⤶\",\"ldquo\":\"“\",\"ldquor\":\"„\",\"ldrdhar\":\"⥧\",\"ldrushar\":\"⥋\",\"ldsh\":\"↲\",\"le\":\"≤\",\"lE\":\"≦\",\"LeftAngleBracket\":\"⟨\",\"LeftArrowBar\":\"⇤\",\"leftarrow\":\"←\",\"LeftArrow\":\"←\",\"Leftarrow\":\"⇐\",\"LeftArrowRightArrow\":\"⇆\",\"leftarrowtail\":\"↢\",\"LeftCeiling\":\"⌈\",\"LeftDoubleBracket\":\"⟦\",\"LeftDownTeeVector\":\"⥡\",\"LeftDownVectorBar\":\"⥙\",\"LeftDownVector\":\"⇃\",\"LeftFloor\":\"⌊\",\"leftharpoondown\":\"↽\",\"leftharpoonup\":\"↼\",\"leftleftarrows\":\"⇇\",\"leftrightarrow\":\"↔\",\"LeftRightArrow\":\"↔\",\"Leftrightarrow\":\"⇔\",\"leftrightarrows\":\"⇆\",\"leftrightharpoons\":\"⇋\",\"leftrightsquigarrow\":\"↭\",\"LeftRightVector\":\"⥎\",\"LeftTeeArrow\":\"↤\",\"LeftTee\":\"⊣\",\"LeftTeeVector\":\"⥚\",\"leftthreetimes\":\"⋋\",\"LeftTriangleBar\":\"⧏\",\"LeftTriangle\":\"⊲\",\"LeftTriangleEqual\":\"⊴\",\"LeftUpDownVector\":\"⥑\",\"LeftUpTeeVector\":\"⥠\",\"LeftUpVectorBar\":\"⥘\",\"LeftUpVector\":\"↿\",\"LeftVectorBar\":\"⥒\",\"LeftVector\":\"↼\",\"lEg\":\"⪋\",\"leg\":\"⋚\",\"leq\":\"≤\",\"leqq\":\"≦\",\"leqslant\":\"⩽\",\"lescc\":\"⪨\",\"les\":\"⩽\",\"lesdot\":\"⩿\",\"lesdoto\":\"⪁\",\"lesdotor\":\"⪃\",\"lesg\":\"⋚︀\",\"lesges\":\"⪓\",\"lessapprox\":\"⪅\",\"lessdot\":\"⋖\",\"lesseqgtr\":\"⋚\",\"lesseqqgtr\":\"⪋\",\"LessEqualGreater\":\"⋚\",\"LessFullEqual\":\"≦\",\"LessGreater\":\"≶\",\"lessgtr\":\"≶\",\"LessLess\":\"⪡\",\"lesssim\":\"≲\",\"LessSlantEqual\":\"⩽\",\"LessTilde\":\"≲\",\"lfisht\":\"⥼\",\"lfloor\":\"⌊\",\"Lfr\":\"𝔏\",\"lfr\":\"𝔩\",\"lg\":\"≶\",\"lgE\":\"⪑\",\"lHar\":\"⥢\",\"lhard\":\"↽\",\"lharu\":\"↼\",\"lharul\":\"⥪\",\"lhblk\":\"▄\",\"LJcy\":\"Љ\",\"ljcy\":\"љ\",\"llarr\":\"⇇\",\"ll\":\"≪\",\"Ll\":\"⋘\",\"llcorner\":\"⌞\",\"Lleftarrow\":\"⇚\",\"llhard\":\"⥫\",\"lltri\":\"◺\",\"Lmidot\":\"Ŀ\",\"lmidot\":\"ŀ\",\"lmoustache\":\"⎰\",\"lmoust\":\"⎰\",\"lnap\":\"⪉\",\"lnapprox\":\"⪉\",\"lne\":\"⪇\",\"lnE\":\"≨\",\"lneq\":\"⪇\",\"lneqq\":\"≨\",\"lnsim\":\"⋦\",\"loang\":\"⟬\",\"loarr\":\"⇽\",\"lobrk\":\"⟦\",\"longleftarrow\":\"⟵\",\"LongLeftArrow\":\"⟵\",\"Longleftarrow\":\"⟸\",\"longleftrightarrow\":\"⟷\",\"LongLeftRightArrow\":\"⟷\",\"Longleftrightarrow\":\"⟺\",\"longmapsto\":\"⟼\",\"longrightarrow\":\"⟶\",\"LongRightArrow\":\"⟶\",\"Longrightarrow\":\"⟹\",\"looparrowleft\":\"↫\",\"looparrowright\":\"↬\",\"lopar\":\"⦅\",\"Lopf\":\"𝕃\",\"lopf\":\"𝕝\",\"loplus\":\"⨭\",\"lotimes\":\"⨴\",\"lowast\":\"∗\",\"lowbar\":\"_\",\"LowerLeftArrow\":\"↙\",\"LowerRightArrow\":\"↘\",\"loz\":\"◊\",\"lozenge\":\"◊\",\"lozf\":\"⧫\",\"lpar\":\"(\",\"lparlt\":\"⦓\",\"lrarr\":\"⇆\",\"lrcorner\":\"⌟\",\"lrhar\":\"⇋\",\"lrhard\":\"⥭\",\"lrm\":\"‎\",\"lrtri\":\"⊿\",\"lsaquo\":\"‹\",\"lscr\":\"𝓁\",\"Lscr\":\"ℒ\",\"lsh\":\"↰\",\"Lsh\":\"↰\",\"lsim\":\"≲\",\"lsime\":\"⪍\",\"lsimg\":\"⪏\",\"lsqb\":\"[\",\"lsquo\":\"‘\",\"lsquor\":\"‚\",\"Lstrok\":\"Ł\",\"lstrok\":\"ł\",\"ltcc\":\"⪦\",\"ltcir\":\"⩹\",\"lt\":\"<\",\"LT\":\"<\",\"Lt\":\"≪\",\"ltdot\":\"⋖\",\"lthree\":\"⋋\",\"ltimes\":\"⋉\",\"ltlarr\":\"⥶\",\"ltquest\":\"⩻\",\"ltri\":\"◃\",\"ltrie\":\"⊴\",\"ltrif\":\"◂\",\"ltrPar\":\"⦖\",\"lurdshar\":\"⥊\",\"luruhar\":\"⥦\",\"lvertneqq\":\"≨︀\",\"lvnE\":\"≨︀\",\"macr\":\"¯\",\"male\":\"♂\",\"malt\":\"✠\",\"maltese\":\"✠\",\"Map\":\"⤅\",\"map\":\"↦\",\"mapsto\":\"↦\",\"mapstodown\":\"↧\",\"mapstoleft\":\"↤\",\"mapstoup\":\"↥\",\"marker\":\"▮\",\"mcomma\":\"⨩\",\"Mcy\":\"М\",\"mcy\":\"м\",\"mdash\":\"—\",\"mDDot\":\"∺\",\"measuredangle\":\"∡\",\"MediumSpace\":\" \",\"Mellintrf\":\"ℳ\",\"Mfr\":\"𝔐\",\"mfr\":\"𝔪\",\"mho\":\"℧\",\"micro\":\"µ\",\"midast\":\"*\",\"midcir\":\"⫰\",\"mid\":\"∣\",\"middot\":\"·\",\"minusb\":\"⊟\",\"minus\":\"−\",\"minusd\":\"∸\",\"minusdu\":\"⨪\",\"MinusPlus\":\"∓\",\"mlcp\":\"⫛\",\"mldr\":\"…\",\"mnplus\":\"∓\",\"models\":\"⊧\",\"Mopf\":\"𝕄\",\"mopf\":\"𝕞\",\"mp\":\"∓\",\"mscr\":\"𝓂\",\"Mscr\":\"ℳ\",\"mstpos\":\"∾\",\"Mu\":\"Μ\",\"mu\":\"μ\",\"multimap\":\"⊸\",\"mumap\":\"⊸\",\"nabla\":\"∇\",\"Nacute\":\"Ń\",\"nacute\":\"ń\",\"nang\":\"∠⃒\",\"nap\":\"≉\",\"napE\":\"⩰̸\",\"napid\":\"≋̸\",\"napos\":\"ŉ\",\"napprox\":\"≉\",\"natural\":\"♮\",\"naturals\":\"ℕ\",\"natur\":\"♮\",\"nbsp\":\" \",\"nbump\":\"≎̸\",\"nbumpe\":\"≏̸\",\"ncap\":\"⩃\",\"Ncaron\":\"Ň\",\"ncaron\":\"ň\",\"Ncedil\":\"Ņ\",\"ncedil\":\"ņ\",\"ncong\":\"≇\",\"ncongdot\":\"⩭̸\",\"ncup\":\"⩂\",\"Ncy\":\"Н\",\"ncy\":\"н\",\"ndash\":\"–\",\"nearhk\":\"⤤\",\"nearr\":\"↗\",\"neArr\":\"⇗\",\"nearrow\":\"↗\",\"ne\":\"≠\",\"nedot\":\"≐̸\",\"NegativeMediumSpace\":\"​\",\"NegativeThickSpace\":\"​\",\"NegativeThinSpace\":\"​\",\"NegativeVeryThinSpace\":\"​\",\"nequiv\":\"≢\",\"nesear\":\"⤨\",\"nesim\":\"≂̸\",\"NestedGreaterGreater\":\"≫\",\"NestedLessLess\":\"≪\",\"NewLine\":\"\\n\",\"nexist\":\"∄\",\"nexists\":\"∄\",\"Nfr\":\"𝔑\",\"nfr\":\"𝔫\",\"ngE\":\"≧̸\",\"nge\":\"≱\",\"ngeq\":\"≱\",\"ngeqq\":\"≧̸\",\"ngeqslant\":\"⩾̸\",\"nges\":\"⩾̸\",\"nGg\":\"⋙̸\",\"ngsim\":\"≵\",\"nGt\":\"≫⃒\",\"ngt\":\"≯\",\"ngtr\":\"≯\",\"nGtv\":\"≫̸\",\"nharr\":\"↮\",\"nhArr\":\"⇎\",\"nhpar\":\"⫲\",\"ni\":\"∋\",\"nis\":\"⋼\",\"nisd\":\"⋺\",\"niv\":\"∋\",\"NJcy\":\"Њ\",\"njcy\":\"њ\",\"nlarr\":\"↚\",\"nlArr\":\"⇍\",\"nldr\":\"‥\",\"nlE\":\"≦̸\",\"nle\":\"≰\",\"nleftarrow\":\"↚\",\"nLeftarrow\":\"⇍\",\"nleftrightarrow\":\"↮\",\"nLeftrightarrow\":\"⇎\",\"nleq\":\"≰\",\"nleqq\":\"≦̸\",\"nleqslant\":\"⩽̸\",\"nles\":\"⩽̸\",\"nless\":\"≮\",\"nLl\":\"⋘̸\",\"nlsim\":\"≴\",\"nLt\":\"≪⃒\",\"nlt\":\"≮\",\"nltri\":\"⋪\",\"nltrie\":\"⋬\",\"nLtv\":\"≪̸\",\"nmid\":\"∤\",\"NoBreak\":\"⁠\",\"NonBreakingSpace\":\" \",\"nopf\":\"𝕟\",\"Nopf\":\"ℕ\",\"Not\":\"⫬\",\"not\":\"¬\",\"NotCongruent\":\"≢\",\"NotCupCap\":\"≭\",\"NotDoubleVerticalBar\":\"∦\",\"NotElement\":\"∉\",\"NotEqual\":\"≠\",\"NotEqualTilde\":\"≂̸\",\"NotExists\":\"∄\",\"NotGreater\":\"≯\",\"NotGreaterEqual\":\"≱\",\"NotGreaterFullEqual\":\"≧̸\",\"NotGreaterGreater\":\"≫̸\",\"NotGreaterLess\":\"≹\",\"NotGreaterSlantEqual\":\"⩾̸\",\"NotGreaterTilde\":\"≵\",\"NotHumpDownHump\":\"≎̸\",\"NotHumpEqual\":\"≏̸\",\"notin\":\"∉\",\"notindot\":\"⋵̸\",\"notinE\":\"⋹̸\",\"notinva\":\"∉\",\"notinvb\":\"⋷\",\"notinvc\":\"⋶\",\"NotLeftTriangleBar\":\"⧏̸\",\"NotLeftTriangle\":\"⋪\",\"NotLeftTriangleEqual\":\"⋬\",\"NotLess\":\"≮\",\"NotLessEqual\":\"≰\",\"NotLessGreater\":\"≸\",\"NotLessLess\":\"≪̸\",\"NotLessSlantEqual\":\"⩽̸\",\"NotLessTilde\":\"≴\",\"NotNestedGreaterGreater\":\"⪢̸\",\"NotNestedLessLess\":\"⪡̸\",\"notni\":\"∌\",\"notniva\":\"∌\",\"notnivb\":\"⋾\",\"notnivc\":\"⋽\",\"NotPrecedes\":\"⊀\",\"NotPrecedesEqual\":\"⪯̸\",\"NotPrecedesSlantEqual\":\"⋠\",\"NotReverseElement\":\"∌\",\"NotRightTriangleBar\":\"⧐̸\",\"NotRightTriangle\":\"⋫\",\"NotRightTriangleEqual\":\"⋭\",\"NotSquareSubset\":\"⊏̸\",\"NotSquareSubsetEqual\":\"⋢\",\"NotSquareSuperset\":\"⊐̸\",\"NotSquareSupersetEqual\":\"⋣\",\"NotSubset\":\"⊂⃒\",\"NotSubsetEqual\":\"⊈\",\"NotSucceeds\":\"⊁\",\"NotSucceedsEqual\":\"⪰̸\",\"NotSucceedsSlantEqual\":\"⋡\",\"NotSucceedsTilde\":\"≿̸\",\"NotSuperset\":\"⊃⃒\",\"NotSupersetEqual\":\"⊉\",\"NotTilde\":\"≁\",\"NotTildeEqual\":\"≄\",\"NotTildeFullEqual\":\"≇\",\"NotTildeTilde\":\"≉\",\"NotVerticalBar\":\"∤\",\"nparallel\":\"∦\",\"npar\":\"∦\",\"nparsl\":\"⫽⃥\",\"npart\":\"∂̸\",\"npolint\":\"⨔\",\"npr\":\"⊀\",\"nprcue\":\"⋠\",\"nprec\":\"⊀\",\"npreceq\":\"⪯̸\",\"npre\":\"⪯̸\",\"nrarrc\":\"⤳̸\",\"nrarr\":\"↛\",\"nrArr\":\"⇏\",\"nrarrw\":\"↝̸\",\"nrightarrow\":\"↛\",\"nRightarrow\":\"⇏\",\"nrtri\":\"⋫\",\"nrtrie\":\"⋭\",\"nsc\":\"⊁\",\"nsccue\":\"⋡\",\"nsce\":\"⪰̸\",\"Nscr\":\"𝒩\",\"nscr\":\"𝓃\",\"nshortmid\":\"∤\",\"nshortparallel\":\"∦\",\"nsim\":\"≁\",\"nsime\":\"≄\",\"nsimeq\":\"≄\",\"nsmid\":\"∤\",\"nspar\":\"∦\",\"nsqsube\":\"⋢\",\"nsqsupe\":\"⋣\",\"nsub\":\"⊄\",\"nsubE\":\"⫅̸\",\"nsube\":\"⊈\",\"nsubset\":\"⊂⃒\",\"nsubseteq\":\"⊈\",\"nsubseteqq\":\"⫅̸\",\"nsucc\":\"⊁\",\"nsucceq\":\"⪰̸\",\"nsup\":\"⊅\",\"nsupE\":\"⫆̸\",\"nsupe\":\"⊉\",\"nsupset\":\"⊃⃒\",\"nsupseteq\":\"⊉\",\"nsupseteqq\":\"⫆̸\",\"ntgl\":\"≹\",\"Ntilde\":\"Ñ\",\"ntilde\":\"ñ\",\"ntlg\":\"≸\",\"ntriangleleft\":\"⋪\",\"ntrianglelefteq\":\"⋬\",\"ntriangleright\":\"⋫\",\"ntrianglerighteq\":\"⋭\",\"Nu\":\"Ν\",\"nu\":\"ν\",\"num\":\"#\",\"numero\":\"№\",\"numsp\":\" \",\"nvap\":\"≍⃒\",\"nvdash\":\"⊬\",\"nvDash\":\"⊭\",\"nVdash\":\"⊮\",\"nVDash\":\"⊯\",\"nvge\":\"≥⃒\",\"nvgt\":\">⃒\",\"nvHarr\":\"⤄\",\"nvinfin\":\"⧞\",\"nvlArr\":\"⤂\",\"nvle\":\"≤⃒\",\"nvlt\":\"<⃒\",\"nvltrie\":\"⊴⃒\",\"nvrArr\":\"⤃\",\"nvrtrie\":\"⊵⃒\",\"nvsim\":\"∼⃒\",\"nwarhk\":\"⤣\",\"nwarr\":\"↖\",\"nwArr\":\"⇖\",\"nwarrow\":\"↖\",\"nwnear\":\"⤧\",\"Oacute\":\"Ó\",\"oacute\":\"ó\",\"oast\":\"⊛\",\"Ocirc\":\"Ô\",\"ocirc\":\"ô\",\"ocir\":\"⊚\",\"Ocy\":\"О\",\"ocy\":\"о\",\"odash\":\"⊝\",\"Odblac\":\"Ő\",\"odblac\":\"ő\",\"odiv\":\"⨸\",\"odot\":\"⊙\",\"odsold\":\"⦼\",\"OElig\":\"Œ\",\"oelig\":\"œ\",\"ofcir\":\"⦿\",\"Ofr\":\"𝔒\",\"ofr\":\"𝔬\",\"ogon\":\"˛\",\"Ograve\":\"Ò\",\"ograve\":\"ò\",\"ogt\":\"⧁\",\"ohbar\":\"⦵\",\"ohm\":\"Ω\",\"oint\":\"∮\",\"olarr\":\"↺\",\"olcir\":\"⦾\",\"olcross\":\"⦻\",\"oline\":\"‾\",\"olt\":\"⧀\",\"Omacr\":\"Ō\",\"omacr\":\"ō\",\"Omega\":\"Ω\",\"omega\":\"ω\",\"Omicron\":\"Ο\",\"omicron\":\"ο\",\"omid\":\"⦶\",\"ominus\":\"⊖\",\"Oopf\":\"𝕆\",\"oopf\":\"𝕠\",\"opar\":\"⦷\",\"OpenCurlyDoubleQuote\":\"“\",\"OpenCurlyQuote\":\"‘\",\"operp\":\"⦹\",\"oplus\":\"⊕\",\"orarr\":\"↻\",\"Or\":\"⩔\",\"or\":\"∨\",\"ord\":\"⩝\",\"order\":\"ℴ\",\"orderof\":\"ℴ\",\"ordf\":\"ª\",\"ordm\":\"º\",\"origof\":\"⊶\",\"oror\":\"⩖\",\"orslope\":\"⩗\",\"orv\":\"⩛\",\"oS\":\"Ⓢ\",\"Oscr\":\"𝒪\",\"oscr\":\"ℴ\",\"Oslash\":\"Ø\",\"oslash\":\"ø\",\"osol\":\"⊘\",\"Otilde\":\"Õ\",\"otilde\":\"õ\",\"otimesas\":\"⨶\",\"Otimes\":\"⨷\",\"otimes\":\"⊗\",\"Ouml\":\"Ö\",\"ouml\":\"ö\",\"ovbar\":\"⌽\",\"OverBar\":\"‾\",\"OverBrace\":\"⏞\",\"OverBracket\":\"⎴\",\"OverParenthesis\":\"⏜\",\"para\":\"¶\",\"parallel\":\"∥\",\"par\":\"∥\",\"parsim\":\"⫳\",\"parsl\":\"⫽\",\"part\":\"∂\",\"PartialD\":\"∂\",\"Pcy\":\"П\",\"pcy\":\"п\",\"percnt\":\"%\",\"period\":\".\",\"permil\":\"‰\",\"perp\":\"⊥\",\"pertenk\":\"‱\",\"Pfr\":\"𝔓\",\"pfr\":\"𝔭\",\"Phi\":\"Φ\",\"phi\":\"φ\",\"phiv\":\"ϕ\",\"phmmat\":\"ℳ\",\"phone\":\"☎\",\"Pi\":\"Π\",\"pi\":\"π\",\"pitchfork\":\"⋔\",\"piv\":\"ϖ\",\"planck\":\"ℏ\",\"planckh\":\"ℎ\",\"plankv\":\"ℏ\",\"plusacir\":\"⨣\",\"plusb\":\"⊞\",\"pluscir\":\"⨢\",\"plus\":\"+\",\"plusdo\":\"∔\",\"plusdu\":\"⨥\",\"pluse\":\"⩲\",\"PlusMinus\":\"±\",\"plusmn\":\"±\",\"plussim\":\"⨦\",\"plustwo\":\"⨧\",\"pm\":\"±\",\"Poincareplane\":\"ℌ\",\"pointint\":\"⨕\",\"popf\":\"𝕡\",\"Popf\":\"ℙ\",\"pound\":\"£\",\"prap\":\"⪷\",\"Pr\":\"⪻\",\"pr\":\"≺\",\"prcue\":\"≼\",\"precapprox\":\"⪷\",\"prec\":\"≺\",\"preccurlyeq\":\"≼\",\"Precedes\":\"≺\",\"PrecedesEqual\":\"⪯\",\"PrecedesSlantEqual\":\"≼\",\"PrecedesTilde\":\"≾\",\"preceq\":\"⪯\",\"precnapprox\":\"⪹\",\"precneqq\":\"⪵\",\"precnsim\":\"⋨\",\"pre\":\"⪯\",\"prE\":\"⪳\",\"precsim\":\"≾\",\"prime\":\"′\",\"Prime\":\"″\",\"primes\":\"ℙ\",\"prnap\":\"⪹\",\"prnE\":\"⪵\",\"prnsim\":\"⋨\",\"prod\":\"∏\",\"Product\":\"∏\",\"profalar\":\"⌮\",\"profline\":\"⌒\",\"profsurf\":\"⌓\",\"prop\":\"∝\",\"Proportional\":\"∝\",\"Proportion\":\"∷\",\"propto\":\"∝\",\"prsim\":\"≾\",\"prurel\":\"⊰\",\"Pscr\":\"𝒫\",\"pscr\":\"𝓅\",\"Psi\":\"Ψ\",\"psi\":\"ψ\",\"puncsp\":\" \",\"Qfr\":\"𝔔\",\"qfr\":\"𝔮\",\"qint\":\"⨌\",\"qopf\":\"𝕢\",\"Qopf\":\"ℚ\",\"qprime\":\"⁗\",\"Qscr\":\"𝒬\",\"qscr\":\"𝓆\",\"quaternions\":\"ℍ\",\"quatint\":\"⨖\",\"quest\":\"?\",\"questeq\":\"≟\",\"quot\":\"\\\"\",\"QUOT\":\"\\\"\",\"rAarr\":\"⇛\",\"race\":\"∽̱\",\"Racute\":\"Ŕ\",\"racute\":\"ŕ\",\"radic\":\"√\",\"raemptyv\":\"⦳\",\"rang\":\"⟩\",\"Rang\":\"⟫\",\"rangd\":\"⦒\",\"range\":\"⦥\",\"rangle\":\"⟩\",\"raquo\":\"»\",\"rarrap\":\"⥵\",\"rarrb\":\"⇥\",\"rarrbfs\":\"⤠\",\"rarrc\":\"⤳\",\"rarr\":\"→\",\"Rarr\":\"↠\",\"rArr\":\"⇒\",\"rarrfs\":\"⤞\",\"rarrhk\":\"↪\",\"rarrlp\":\"↬\",\"rarrpl\":\"⥅\",\"rarrsim\":\"⥴\",\"Rarrtl\":\"⤖\",\"rarrtl\":\"↣\",\"rarrw\":\"↝\",\"ratail\":\"⤚\",\"rAtail\":\"⤜\",\"ratio\":\"∶\",\"rationals\":\"ℚ\",\"rbarr\":\"⤍\",\"rBarr\":\"⤏\",\"RBarr\":\"⤐\",\"rbbrk\":\"❳\",\"rbrace\":\"}\",\"rbrack\":\"]\",\"rbrke\":\"⦌\",\"rbrksld\":\"⦎\",\"rbrkslu\":\"⦐\",\"Rcaron\":\"Ř\",\"rcaron\":\"ř\",\"Rcedil\":\"Ŗ\",\"rcedil\":\"ŗ\",\"rceil\":\"⌉\",\"rcub\":\"}\",\"Rcy\":\"Р\",\"rcy\":\"р\",\"rdca\":\"⤷\",\"rdldhar\":\"⥩\",\"rdquo\":\"”\",\"rdquor\":\"”\",\"rdsh\":\"↳\",\"real\":\"ℜ\",\"realine\":\"ℛ\",\"realpart\":\"ℜ\",\"reals\":\"ℝ\",\"Re\":\"ℜ\",\"rect\":\"▭\",\"reg\":\"®\",\"REG\":\"®\",\"ReverseElement\":\"∋\",\"ReverseEquilibrium\":\"⇋\",\"ReverseUpEquilibrium\":\"⥯\",\"rfisht\":\"⥽\",\"rfloor\":\"⌋\",\"rfr\":\"𝔯\",\"Rfr\":\"ℜ\",\"rHar\":\"⥤\",\"rhard\":\"⇁\",\"rharu\":\"⇀\",\"rharul\":\"⥬\",\"Rho\":\"Ρ\",\"rho\":\"ρ\",\"rhov\":\"ϱ\",\"RightAngleBracket\":\"⟩\",\"RightArrowBar\":\"⇥\",\"rightarrow\":\"→\",\"RightArrow\":\"→\",\"Rightarrow\":\"⇒\",\"RightArrowLeftArrow\":\"⇄\",\"rightarrowtail\":\"↣\",\"RightCeiling\":\"⌉\",\"RightDoubleBracket\":\"⟧\",\"RightDownTeeVector\":\"⥝\",\"RightDownVectorBar\":\"⥕\",\"RightDownVector\":\"⇂\",\"RightFloor\":\"⌋\",\"rightharpoondown\":\"⇁\",\"rightharpoonup\":\"⇀\",\"rightleftarrows\":\"⇄\",\"rightleftharpoons\":\"⇌\",\"rightrightarrows\":\"⇉\",\"rightsquigarrow\":\"↝\",\"RightTeeArrow\":\"↦\",\"RightTee\":\"⊢\",\"RightTeeVector\":\"⥛\",\"rightthreetimes\":\"⋌\",\"RightTriangleBar\":\"⧐\",\"RightTriangle\":\"⊳\",\"RightTriangleEqual\":\"⊵\",\"RightUpDownVector\":\"⥏\",\"RightUpTeeVector\":\"⥜\",\"RightUpVectorBar\":\"⥔\",\"RightUpVector\":\"↾\",\"RightVectorBar\":\"⥓\",\"RightVector\":\"⇀\",\"ring\":\"˚\",\"risingdotseq\":\"≓\",\"rlarr\":\"⇄\",\"rlhar\":\"⇌\",\"rlm\":\"‏\",\"rmoustache\":\"⎱\",\"rmoust\":\"⎱\",\"rnmid\":\"⫮\",\"roang\":\"⟭\",\"roarr\":\"⇾\",\"robrk\":\"⟧\",\"ropar\":\"⦆\",\"ropf\":\"𝕣\",\"Ropf\":\"ℝ\",\"roplus\":\"⨮\",\"rotimes\":\"⨵\",\"RoundImplies\":\"⥰\",\"rpar\":\")\",\"rpargt\":\"⦔\",\"rppolint\":\"⨒\",\"rrarr\":\"⇉\",\"Rrightarrow\":\"⇛\",\"rsaquo\":\"›\",\"rscr\":\"𝓇\",\"Rscr\":\"ℛ\",\"rsh\":\"↱\",\"Rsh\":\"↱\",\"rsqb\":\"]\",\"rsquo\":\"’\",\"rsquor\":\"’\",\"rthree\":\"⋌\",\"rtimes\":\"⋊\",\"rtri\":\"▹\",\"rtrie\":\"⊵\",\"rtrif\":\"▸\",\"rtriltri\":\"⧎\",\"RuleDelayed\":\"⧴\",\"ruluhar\":\"⥨\",\"rx\":\"℞\",\"Sacute\":\"Ś\",\"sacute\":\"ś\",\"sbquo\":\"‚\",\"scap\":\"⪸\",\"Scaron\":\"Š\",\"scaron\":\"š\",\"Sc\":\"⪼\",\"sc\":\"≻\",\"sccue\":\"≽\",\"sce\":\"⪰\",\"scE\":\"⪴\",\"Scedil\":\"Ş\",\"scedil\":\"ş\",\"Scirc\":\"Ŝ\",\"scirc\":\"ŝ\",\"scnap\":\"⪺\",\"scnE\":\"⪶\",\"scnsim\":\"⋩\",\"scpolint\":\"⨓\",\"scsim\":\"≿\",\"Scy\":\"С\",\"scy\":\"с\",\"sdotb\":\"⊡\",\"sdot\":\"⋅\",\"sdote\":\"⩦\",\"searhk\":\"⤥\",\"searr\":\"↘\",\"seArr\":\"⇘\",\"searrow\":\"↘\",\"sect\":\"§\",\"semi\":\";\",\"seswar\":\"⤩\",\"setminus\":\"∖\",\"setmn\":\"∖\",\"sext\":\"✶\",\"Sfr\":\"𝔖\",\"sfr\":\"𝔰\",\"sfrown\":\"⌢\",\"sharp\":\"♯\",\"SHCHcy\":\"Щ\",\"shchcy\":\"щ\",\"SHcy\":\"Ш\",\"shcy\":\"ш\",\"ShortDownArrow\":\"↓\",\"ShortLeftArrow\":\"←\",\"shortmid\":\"∣\",\"shortparallel\":\"∥\",\"ShortRightArrow\":\"→\",\"ShortUpArrow\":\"↑\",\"shy\":\"­\",\"Sigma\":\"Σ\",\"sigma\":\"σ\",\"sigmaf\":\"ς\",\"sigmav\":\"ς\",\"sim\":\"∼\",\"simdot\":\"⩪\",\"sime\":\"≃\",\"simeq\":\"≃\",\"simg\":\"⪞\",\"simgE\":\"⪠\",\"siml\":\"⪝\",\"simlE\":\"⪟\",\"simne\":\"≆\",\"simplus\":\"⨤\",\"simrarr\":\"⥲\",\"slarr\":\"←\",\"SmallCircle\":\"∘\",\"smallsetminus\":\"∖\",\"smashp\":\"⨳\",\"smeparsl\":\"⧤\",\"smid\":\"∣\",\"smile\":\"⌣\",\"smt\":\"⪪\",\"smte\":\"⪬\",\"smtes\":\"⪬︀\",\"SOFTcy\":\"Ь\",\"softcy\":\"ь\",\"solbar\":\"⌿\",\"solb\":\"⧄\",\"sol\":\"/\",\"Sopf\":\"𝕊\",\"sopf\":\"𝕤\",\"spades\":\"♠\",\"spadesuit\":\"♠\",\"spar\":\"∥\",\"sqcap\":\"⊓\",\"sqcaps\":\"⊓︀\",\"sqcup\":\"⊔\",\"sqcups\":\"⊔︀\",\"Sqrt\":\"√\",\"sqsub\":\"⊏\",\"sqsube\":\"⊑\",\"sqsubset\":\"⊏\",\"sqsubseteq\":\"⊑\",\"sqsup\":\"⊐\",\"sqsupe\":\"⊒\",\"sqsupset\":\"⊐\",\"sqsupseteq\":\"⊒\",\"square\":\"□\",\"Square\":\"□\",\"SquareIntersection\":\"⊓\",\"SquareSubset\":\"⊏\",\"SquareSubsetEqual\":\"⊑\",\"SquareSuperset\":\"⊐\",\"SquareSupersetEqual\":\"⊒\",\"SquareUnion\":\"⊔\",\"squarf\":\"▪\",\"squ\":\"□\",\"squf\":\"▪\",\"srarr\":\"→\",\"Sscr\":\"𝒮\",\"sscr\":\"𝓈\",\"ssetmn\":\"∖\",\"ssmile\":\"⌣\",\"sstarf\":\"⋆\",\"Star\":\"⋆\",\"star\":\"☆\",\"starf\":\"★\",\"straightepsilon\":\"ϵ\",\"straightphi\":\"ϕ\",\"strns\":\"¯\",\"sub\":\"⊂\",\"Sub\":\"⋐\",\"subdot\":\"⪽\",\"subE\":\"⫅\",\"sube\":\"⊆\",\"subedot\":\"⫃\",\"submult\":\"⫁\",\"subnE\":\"⫋\",\"subne\":\"⊊\",\"subplus\":\"⪿\",\"subrarr\":\"⥹\",\"subset\":\"⊂\",\"Subset\":\"⋐\",\"subseteq\":\"⊆\",\"subseteqq\":\"⫅\",\"SubsetEqual\":\"⊆\",\"subsetneq\":\"⊊\",\"subsetneqq\":\"⫋\",\"subsim\":\"⫇\",\"subsub\":\"⫕\",\"subsup\":\"⫓\",\"succapprox\":\"⪸\",\"succ\":\"≻\",\"succcurlyeq\":\"≽\",\"Succeeds\":\"≻\",\"SucceedsEqual\":\"⪰\",\"SucceedsSlantEqual\":\"≽\",\"SucceedsTilde\":\"≿\",\"succeq\":\"⪰\",\"succnapprox\":\"⪺\",\"succneqq\":\"⪶\",\"succnsim\":\"⋩\",\"succsim\":\"≿\",\"SuchThat\":\"∋\",\"sum\":\"∑\",\"Sum\":\"∑\",\"sung\":\"♪\",\"sup1\":\"¹\",\"sup2\":\"²\",\"sup3\":\"³\",\"sup\":\"⊃\",\"Sup\":\"⋑\",\"supdot\":\"⪾\",\"supdsub\":\"⫘\",\"supE\":\"⫆\",\"supe\":\"⊇\",\"supedot\":\"⫄\",\"Superset\":\"⊃\",\"SupersetEqual\":\"⊇\",\"suphsol\":\"⟉\",\"suphsub\":\"⫗\",\"suplarr\":\"⥻\",\"supmult\":\"⫂\",\"supnE\":\"⫌\",\"supne\":\"⊋\",\"supplus\":\"⫀\",\"supset\":\"⊃\",\"Supset\":\"⋑\",\"supseteq\":\"⊇\",\"supseteqq\":\"⫆\",\"supsetneq\":\"⊋\",\"supsetneqq\":\"⫌\",\"supsim\":\"⫈\",\"supsub\":\"⫔\",\"supsup\":\"⫖\",\"swarhk\":\"⤦\",\"swarr\":\"↙\",\"swArr\":\"⇙\",\"swarrow\":\"↙\",\"swnwar\":\"⤪\",\"szlig\":\"ß\",\"Tab\":\"\\t\",\"target\":\"⌖\",\"Tau\":\"Τ\",\"tau\":\"τ\",\"tbrk\":\"⎴\",\"Tcaron\":\"Ť\",\"tcaron\":\"ť\",\"Tcedil\":\"Ţ\",\"tcedil\":\"ţ\",\"Tcy\":\"Т\",\"tcy\":\"т\",\"tdot\":\"⃛\",\"telrec\":\"⌕\",\"Tfr\":\"𝔗\",\"tfr\":\"𝔱\",\"there4\":\"∴\",\"therefore\":\"∴\",\"Therefore\":\"∴\",\"Theta\":\"Θ\",\"theta\":\"θ\",\"thetasym\":\"ϑ\",\"thetav\":\"ϑ\",\"thickapprox\":\"≈\",\"thicksim\":\"∼\",\"ThickSpace\":\"  \",\"ThinSpace\":\" \",\"thinsp\":\" \",\"thkap\":\"≈\",\"thksim\":\"∼\",\"THORN\":\"Þ\",\"thorn\":\"þ\",\"tilde\":\"˜\",\"Tilde\":\"∼\",\"TildeEqual\":\"≃\",\"TildeFullEqual\":\"≅\",\"TildeTilde\":\"≈\",\"timesbar\":\"⨱\",\"timesb\":\"⊠\",\"times\":\"×\",\"timesd\":\"⨰\",\"tint\":\"∭\",\"toea\":\"⤨\",\"topbot\":\"⌶\",\"topcir\":\"⫱\",\"top\":\"⊤\",\"Topf\":\"𝕋\",\"topf\":\"𝕥\",\"topfork\":\"⫚\",\"tosa\":\"⤩\",\"tprime\":\"‴\",\"trade\":\"™\",\"TRADE\":\"™\",\"triangle\":\"▵\",\"triangledown\":\"▿\",\"triangleleft\":\"◃\",\"trianglelefteq\":\"⊴\",\"triangleq\":\"≜\",\"triangleright\":\"▹\",\"trianglerighteq\":\"⊵\",\"tridot\":\"◬\",\"trie\":\"≜\",\"triminus\":\"⨺\",\"TripleDot\":\"⃛\",\"triplus\":\"⨹\",\"trisb\":\"⧍\",\"tritime\":\"⨻\",\"trpezium\":\"⏢\",\"Tscr\":\"𝒯\",\"tscr\":\"𝓉\",\"TScy\":\"Ц\",\"tscy\":\"ц\",\"TSHcy\":\"Ћ\",\"tshcy\":\"ћ\",\"Tstrok\":\"Ŧ\",\"tstrok\":\"ŧ\",\"twixt\":\"≬\",\"twoheadleftarrow\":\"↞\",\"twoheadrightarrow\":\"↠\",\"Uacute\":\"Ú\",\"uacute\":\"ú\",\"uarr\":\"↑\",\"Uarr\":\"↟\",\"uArr\":\"⇑\",\"Uarrocir\":\"⥉\",\"Ubrcy\":\"Ў\",\"ubrcy\":\"ў\",\"Ubreve\":\"Ŭ\",\"ubreve\":\"ŭ\",\"Ucirc\":\"Û\",\"ucirc\":\"û\",\"Ucy\":\"У\",\"ucy\":\"у\",\"udarr\":\"⇅\",\"Udblac\":\"Ű\",\"udblac\":\"ű\",\"udhar\":\"⥮\",\"ufisht\":\"⥾\",\"Ufr\":\"𝔘\",\"ufr\":\"𝔲\",\"Ugrave\":\"Ù\",\"ugrave\":\"ù\",\"uHar\":\"⥣\",\"uharl\":\"↿\",\"uharr\":\"↾\",\"uhblk\":\"▀\",\"ulcorn\":\"⌜\",\"ulcorner\":\"⌜\",\"ulcrop\":\"⌏\",\"ultri\":\"◸\",\"Umacr\":\"Ū\",\"umacr\":\"ū\",\"uml\":\"¨\",\"UnderBar\":\"_\",\"UnderBrace\":\"⏟\",\"UnderBracket\":\"⎵\",\"UnderParenthesis\":\"⏝\",\"Union\":\"⋃\",\"UnionPlus\":\"⊎\",\"Uogon\":\"Ų\",\"uogon\":\"ų\",\"Uopf\":\"𝕌\",\"uopf\":\"𝕦\",\"UpArrowBar\":\"⤒\",\"uparrow\":\"↑\",\"UpArrow\":\"↑\",\"Uparrow\":\"⇑\",\"UpArrowDownArrow\":\"⇅\",\"updownarrow\":\"↕\",\"UpDownArrow\":\"↕\",\"Updownarrow\":\"⇕\",\"UpEquilibrium\":\"⥮\",\"upharpoonleft\":\"↿\",\"upharpoonright\":\"↾\",\"uplus\":\"⊎\",\"UpperLeftArrow\":\"↖\",\"UpperRightArrow\":\"↗\",\"upsi\":\"υ\",\"Upsi\":\"ϒ\",\"upsih\":\"ϒ\",\"Upsilon\":\"Υ\",\"upsilon\":\"υ\",\"UpTeeArrow\":\"↥\",\"UpTee\":\"⊥\",\"upuparrows\":\"⇈\",\"urcorn\":\"⌝\",\"urcorner\":\"⌝\",\"urcrop\":\"⌎\",\"Uring\":\"Ů\",\"uring\":\"ů\",\"urtri\":\"◹\",\"Uscr\":\"𝒰\",\"uscr\":\"𝓊\",\"utdot\":\"⋰\",\"Utilde\":\"Ũ\",\"utilde\":\"ũ\",\"utri\":\"▵\",\"utrif\":\"▴\",\"uuarr\":\"⇈\",\"Uuml\":\"Ü\",\"uuml\":\"ü\",\"uwangle\":\"⦧\",\"vangrt\":\"⦜\",\"varepsilon\":\"ϵ\",\"varkappa\":\"ϰ\",\"varnothing\":\"∅\",\"varphi\":\"ϕ\",\"varpi\":\"ϖ\",\"varpropto\":\"∝\",\"varr\":\"↕\",\"vArr\":\"⇕\",\"varrho\":\"ϱ\",\"varsigma\":\"ς\",\"varsubsetneq\":\"⊊︀\",\"varsubsetneqq\":\"⫋︀\",\"varsupsetneq\":\"⊋︀\",\"varsupsetneqq\":\"⫌︀\",\"vartheta\":\"ϑ\",\"vartriangleleft\":\"⊲\",\"vartriangleright\":\"⊳\",\"vBar\":\"⫨\",\"Vbar\":\"⫫\",\"vBarv\":\"⫩\",\"Vcy\":\"В\",\"vcy\":\"в\",\"vdash\":\"⊢\",\"vDash\":\"⊨\",\"Vdash\":\"⊩\",\"VDash\":\"⊫\",\"Vdashl\":\"⫦\",\"veebar\":\"⊻\",\"vee\":\"∨\",\"Vee\":\"⋁\",\"veeeq\":\"≚\",\"vellip\":\"⋮\",\"verbar\":\"|\",\"Verbar\":\"‖\",\"vert\":\"|\",\"Vert\":\"‖\",\"VerticalBar\":\"∣\",\"VerticalLine\":\"|\",\"VerticalSeparator\":\"❘\",\"VerticalTilde\":\"≀\",\"VeryThinSpace\":\" \",\"Vfr\":\"𝔙\",\"vfr\":\"𝔳\",\"vltri\":\"⊲\",\"vnsub\":\"⊂⃒\",\"vnsup\":\"⊃⃒\",\"Vopf\":\"𝕍\",\"vopf\":\"𝕧\",\"vprop\":\"∝\",\"vrtri\":\"⊳\",\"Vscr\":\"𝒱\",\"vscr\":\"𝓋\",\"vsubnE\":\"⫋︀\",\"vsubne\":\"⊊︀\",\"vsupnE\":\"⫌︀\",\"vsupne\":\"⊋︀\",\"Vvdash\":\"⊪\",\"vzigzag\":\"⦚\",\"Wcirc\":\"Ŵ\",\"wcirc\":\"ŵ\",\"wedbar\":\"⩟\",\"wedge\":\"∧\",\"Wedge\":\"⋀\",\"wedgeq\":\"≙\",\"weierp\":\"℘\",\"Wfr\":\"𝔚\",\"wfr\":\"𝔴\",\"Wopf\":\"𝕎\",\"wopf\":\"𝕨\",\"wp\":\"℘\",\"wr\":\"≀\",\"wreath\":\"≀\",\"Wscr\":\"𝒲\",\"wscr\":\"𝓌\",\"xcap\":\"⋂\",\"xcirc\":\"◯\",\"xcup\":\"⋃\",\"xdtri\":\"▽\",\"Xfr\":\"𝔛\",\"xfr\":\"𝔵\",\"xharr\":\"⟷\",\"xhArr\":\"⟺\",\"Xi\":\"Ξ\",\"xi\":\"ξ\",\"xlarr\":\"⟵\",\"xlArr\":\"⟸\",\"xmap\":\"⟼\",\"xnis\":\"⋻\",\"xodot\":\"⨀\",\"Xopf\":\"𝕏\",\"xopf\":\"𝕩\",\"xoplus\":\"⨁\",\"xotime\":\"⨂\",\"xrarr\":\"⟶\",\"xrArr\":\"⟹\",\"Xscr\":\"𝒳\",\"xscr\":\"𝓍\",\"xsqcup\":\"⨆\",\"xuplus\":\"⨄\",\"xutri\":\"△\",\"xvee\":\"⋁\",\"xwedge\":\"⋀\",\"Yacute\":\"Ý\",\"yacute\":\"ý\",\"YAcy\":\"Я\",\"yacy\":\"я\",\"Ycirc\":\"Ŷ\",\"ycirc\":\"ŷ\",\"Ycy\":\"Ы\",\"ycy\":\"ы\",\"yen\":\"¥\",\"Yfr\":\"𝔜\",\"yfr\":\"𝔶\",\"YIcy\":\"Ї\",\"yicy\":\"ї\",\"Yopf\":\"𝕐\",\"yopf\":\"𝕪\",\"Yscr\":\"𝒴\",\"yscr\":\"𝓎\",\"YUcy\":\"Ю\",\"yucy\":\"ю\",\"yuml\":\"ÿ\",\"Yuml\":\"Ÿ\",\"Zacute\":\"Ź\",\"zacute\":\"ź\",\"Zcaron\":\"Ž\",\"zcaron\":\"ž\",\"Zcy\":\"З\",\"zcy\":\"з\",\"Zdot\":\"Ż\",\"zdot\":\"ż\",\"zeetrf\":\"ℨ\",\"ZeroWidthSpace\":\"​\",\"Zeta\":\"Ζ\",\"zeta\":\"ζ\",\"zfr\":\"𝔷\",\"Zfr\":\"ℨ\",\"ZHcy\":\"Ж\",\"zhcy\":\"ж\",\"zigrarr\":\"⇝\",\"zopf\":\"𝕫\",\"Zopf\":\"ℤ\",\"Zscr\":\"𝒵\",\"zscr\":\"𝓏\",\"zwj\":\"‍\",\"zwnj\":\"‌\"}");
    /***/
  },

  /***/
  "./node_modules/entities/maps/legacy.json":
  /*!************************************************!*\
    !*** ./node_modules/entities/maps/legacy.json ***!
    \************************************************/

  /*! exports provided: Aacute, aacute, Acirc, acirc, acute, AElig, aelig, Agrave, agrave, amp, AMP, Aring, aring, Atilde, atilde, Auml, auml, brvbar, Ccedil, ccedil, cedil, cent, copy, COPY, curren, deg, divide, Eacute, eacute, Ecirc, ecirc, Egrave, egrave, ETH, eth, Euml, euml, frac12, frac14, frac34, gt, GT, Iacute, iacute, Icirc, icirc, iexcl, Igrave, igrave, iquest, Iuml, iuml, laquo, lt, LT, macr, micro, middot, nbsp, not, Ntilde, ntilde, Oacute, oacute, Ocirc, ocirc, Ograve, ograve, ordf, ordm, Oslash, oslash, Otilde, otilde, Ouml, ouml, para, plusmn, pound, quot, QUOT, raquo, reg, REG, sect, shy, sup1, sup2, sup3, szlig, THORN, thorn, times, Uacute, uacute, Ucirc, ucirc, Ugrave, ugrave, uml, Uuml, uuml, Yacute, yacute, yen, yuml, default */

  /***/
  function node_modulesEntitiesMapsLegacyJson(module) {
    module.exports = JSON.parse("{\"Aacute\":\"Á\",\"aacute\":\"á\",\"Acirc\":\"Â\",\"acirc\":\"â\",\"acute\":\"´\",\"AElig\":\"Æ\",\"aelig\":\"æ\",\"Agrave\":\"À\",\"agrave\":\"à\",\"amp\":\"&\",\"AMP\":\"&\",\"Aring\":\"Å\",\"aring\":\"å\",\"Atilde\":\"Ã\",\"atilde\":\"ã\",\"Auml\":\"Ä\",\"auml\":\"ä\",\"brvbar\":\"¦\",\"Ccedil\":\"Ç\",\"ccedil\":\"ç\",\"cedil\":\"¸\",\"cent\":\"¢\",\"copy\":\"©\",\"COPY\":\"©\",\"curren\":\"¤\",\"deg\":\"°\",\"divide\":\"÷\",\"Eacute\":\"É\",\"eacute\":\"é\",\"Ecirc\":\"Ê\",\"ecirc\":\"ê\",\"Egrave\":\"È\",\"egrave\":\"è\",\"ETH\":\"Ð\",\"eth\":\"ð\",\"Euml\":\"Ë\",\"euml\":\"ë\",\"frac12\":\"½\",\"frac14\":\"¼\",\"frac34\":\"¾\",\"gt\":\">\",\"GT\":\">\",\"Iacute\":\"Í\",\"iacute\":\"í\",\"Icirc\":\"Î\",\"icirc\":\"î\",\"iexcl\":\"¡\",\"Igrave\":\"Ì\",\"igrave\":\"ì\",\"iquest\":\"¿\",\"Iuml\":\"Ï\",\"iuml\":\"ï\",\"laquo\":\"«\",\"lt\":\"<\",\"LT\":\"<\",\"macr\":\"¯\",\"micro\":\"µ\",\"middot\":\"·\",\"nbsp\":\" \",\"not\":\"¬\",\"Ntilde\":\"Ñ\",\"ntilde\":\"ñ\",\"Oacute\":\"Ó\",\"oacute\":\"ó\",\"Ocirc\":\"Ô\",\"ocirc\":\"ô\",\"Ograve\":\"Ò\",\"ograve\":\"ò\",\"ordf\":\"ª\",\"ordm\":\"º\",\"Oslash\":\"Ø\",\"oslash\":\"ø\",\"Otilde\":\"Õ\",\"otilde\":\"õ\",\"Ouml\":\"Ö\",\"ouml\":\"ö\",\"para\":\"¶\",\"plusmn\":\"±\",\"pound\":\"£\",\"quot\":\"\\\"\",\"QUOT\":\"\\\"\",\"raquo\":\"»\",\"reg\":\"®\",\"REG\":\"®\",\"sect\":\"§\",\"shy\":\"­\",\"sup1\":\"¹\",\"sup2\":\"²\",\"sup3\":\"³\",\"szlig\":\"ß\",\"THORN\":\"Þ\",\"thorn\":\"þ\",\"times\":\"×\",\"Uacute\":\"Ú\",\"uacute\":\"ú\",\"Ucirc\":\"Û\",\"ucirc\":\"û\",\"Ugrave\":\"Ù\",\"ugrave\":\"ù\",\"uml\":\"¨\",\"Uuml\":\"Ü\",\"uuml\":\"ü\",\"Yacute\":\"Ý\",\"yacute\":\"ý\",\"yen\":\"¥\",\"yuml\":\"ÿ\"}");
    /***/
  },

  /***/
  "./node_modules/entities/maps/xml.json":
  /*!*********************************************!*\
    !*** ./node_modules/entities/maps/xml.json ***!
    \*********************************************/

  /*! exports provided: amp, apos, gt, lt, quot, default */

  /***/
  function node_modulesEntitiesMapsXmlJson(module) {
    module.exports = JSON.parse("{\"amp\":\"&\",\"apos\":\"'\",\"gt\":\">\",\"lt\":\"<\",\"quot\":\"\\\"\"}");
    /***/
  },

  /***/
  "./node_modules/events/events.js":
  /*!***************************************!*\
    !*** ./node_modules/events/events.js ***!
    \***************************************/

  /*! no static exports found */

  /***/
  function node_modulesEventsEventsJs(module, exports, __webpack_require__) {
    "use strict"; // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    var R = typeof Reflect === 'object' ? Reflect : null;
    var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;

    if (R && typeof R.ownKeys === 'function') {
      ReflectOwnKeys = R.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target);
      };
    }

    function ProcessEmitWarning(warning) {
      if (console && console.warn) console.warn(warning);
    }

    var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
      return value !== value;
    };

    function EventEmitter() {
      EventEmitter.init.call(this);
    }

    module.exports = EventEmitter; // Backwards-compat with node 0.10.x

    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.

    var defaultMaxListeners = 10;

    function checkListener(listener) {
      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }

    Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
      enumerable: true,
      get: function get() {
        return defaultMaxListeners;
      },
      set: function set(arg) {
        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        }

        defaultMaxListeners = arg;
      }
    });

    EventEmitter.init = function () {
      if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
      }

      this._maxListeners = this._maxListeners || undefined;
    }; // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.


    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
      }

      this._maxListeners = n;
      return this;
    };

    function _getMaxListeners(that) {
      if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }

    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };

    EventEmitter.prototype.emit = function emit(type) {
      var args = [];

      for (var i = 1; i < arguments.length; i++) {
        args.push(arguments[i]);
      }

      var doError = type === 'error';
      var events = this._events;
      if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.

      if (doError) {
        var er;
        if (args.length > 0) er = args[0];

        if (er instanceof Error) {
          // Note: The comments on the `throw` lines are intentional, they show
          // up in Node's output if this results in an unhandled exception.
          throw er; // Unhandled 'error' event
        } // At least give some kind of context to the user


        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
      }

      var handler = events[type];
      if (handler === undefined) return false;

      if (typeof handler === 'function') {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);

        for (var i = 0; i < len; ++i) {
          ReflectApply(listeners[i], this, args);
        }
      }

      return true;
    };

    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;
      checkListener(listener);
      events = target._events;

      if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
      } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
          target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
          // this._events to be assigned to a new object

          events = target._events;
        }

        existing = events[type];
      }

      if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          // Adding the second element, need to change to array.
          existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        } // Check for listener leak


        m = _getMaxListeners(target);

        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true; // No error code for this since it is a Warning
          // eslint-disable-next-line no-restricted-syntax

          var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }

      return target;
    }

    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }

    function _onceWrap(target, type, listener) {
      var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
      };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }

    EventEmitter.prototype.once = function once(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };

    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    }; // Emits a 'removeListener' event if and only if the listener was removed.


    EventEmitter.prototype.removeListener = function removeListener(type, listener) {
      var list, events, position, i, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === undefined) return this;
      list = events[type];
      if (list === undefined) return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);else {
          delete events[type];
          if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0) return this;
        if (position === 0) list.shift();else {
          spliceOne(list, position);
        }
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events, i;
      events = this._events;
      if (events === undefined) return this; // not listening for removeListener, no need to emit

      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
        }

        return this;
      } // emit removeListener for all listeners on all events


      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;

        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }

        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

    function _listeners(target, type, unwrap) {
      var events = target._events;
      if (events === undefined) return [];
      var evlistener = events[type];
      if (evlistener === undefined) return [];
      if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }

    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };

    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };

    EventEmitter.listenerCount = function (emitter, type) {
      if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };

    EventEmitter.prototype.listenerCount = listenerCount;

    function listenerCount(type) {
      var events = this._events;

      if (events !== undefined) {
        var evlistener = events[type];

        if (typeof evlistener === 'function') {
          return 1;
        } else if (evlistener !== undefined) {
          return evlistener.length;
        }
      }

      return 0;
    }

    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };

    function arrayClone(arr, n) {
      var copy = new Array(n);

      for (var i = 0; i < n; ++i) {
        copy[i] = arr[i];
      }

      return copy;
    }

    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++) {
        list[index] = list[index + 1];
      }

      list.pop();
    }

    function unwrapListeners(arr) {
      var ret = new Array(arr.length);

      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }

      return ret;
    }
    /***/

  },

  /***/
  "./node_modules/ieee754/index.js":
  /*!***************************************!*\
    !*** ./node_modules/ieee754/index.js ***!
    \***************************************/

  /*! no static exports found */

  /***/
  function node_modulesIeee754IndexJs(module, exports) {
    exports.read = function (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;

      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;

      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }

      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };

    exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);

        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }

        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }

        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = e << mLen | m;
      eLen += mLen;

      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    };
    /***/

  },

  /***/
  "./node_modules/incremental-dom/dist/incremental-dom-cjs.js":
  /*!******************************************************************!*\
    !*** ./node_modules/incremental-dom/dist/incremental-dom-cjs.js ***!
    \******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesIncrementalDomDistIncrementalDomCjsJs(module, exports, __webpack_require__) {
    "use strict";
    /**
     * @preserve
     * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0.
     */

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    /**
     * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS-IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS-IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * The name of the HTML attribute that holds the element key
     * (e.g. `<div key="foo">`). The attribute value, if it exists, is then used
     * as the default key when importing an element.
     * If null, no attribute value is used as the default key.
     */

    var keyAttributeName = "key";

    function getKeyAttributeName() {
      return keyAttributeName;
    }

    function setKeyAttributeName(name) {
      keyAttributeName = name;
    }
    /**
     * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS-IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * Keeps track whether or not we are in an attributes declaration (after
     * elementOpenStart, but before elementOpenEnd).
     */


    var inAttributes = false;
    /**
     * Keeps track whether or not we are in an element that should not have its
     * children cleared.
     */

    var inSkip = false;
    /**
     * Keeps track of whether or not we are in a patch.
     */

    var inPatch = false;
    /**
     * Asserts that a value exists and is not null or undefined. goog.asserts
     * is not used in order to avoid dependencies on external code.
     * @param val The value to assert is truthy.
     * @returns The value.
     */

    function assert(val) {
      if (!val) {
        throw new Error("Expected value to be defined");
      } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion


      return val;
    }
    /**
     * Makes sure that there is a current patch context.
     * @param functionName The name of the caller, for the error message.
     */


    function assertInPatch(functionName) {
      if (!inPatch) {
        throw new Error("Cannot call " + functionName + "() unless in patch.");
      }
    }
    /**
     * Makes sure that a patch closes every node that it opened.
     * @param openElement
     * @param root
     */


    function assertNoUnclosedTags(openElement, root) {
      if (openElement === root) {
        return;
      }

      var currentElement = openElement;
      var openTags = [];

      while (currentElement && currentElement !== root) {
        openTags.push(currentElement.nodeName.toLowerCase());
        currentElement = currentElement.parentNode;
      }

      throw new Error("One or more tags were not closed:\n" + openTags.join("\n"));
    }
    /**
     * Makes sure that node being outer patched has a parent node.
     * @param parent
     */


    function assertPatchOuterHasParentNode(parent) {
      if (!parent) {
        console.warn("patchOuter requires the node have a parent if there is a key.");
      }
    }
    /**
     * Makes sure that the caller is not where attributes are expected.
     * @param functionName The name of the caller, for the error message.
     */


    function assertNotInAttributes(functionName) {
      if (inAttributes) {
        throw new Error(functionName + "() can not be called between " + "elementOpenStart() and elementOpenEnd().");
      }
    }
    /**
     * Makes sure that the caller is not inside an element that has declared skip.
     * @param functionName The name of the caller, for the error message.
     */


    function assertNotInSkip(functionName) {
      if (inSkip) {
        throw new Error(functionName + "() may not be called inside an element " + "that has called skip().");
      }
    }
    /**
     * Makes sure that the caller is where attributes are expected.
     * @param functionName The name of the caller, for the error message.
     */


    function assertInAttributes(functionName) {
      if (!inAttributes) {
        throw new Error(functionName + "() can only be called after calling " + "elementOpenStart().");
      }
    }
    /**
     * Makes sure the patch closes virtual attributes call
     */


    function assertVirtualAttributesClosed() {
      if (inAttributes) {
        throw new Error("elementOpenEnd() must be called after calling " + "elementOpenStart().");
      }
    }
    /**
     * Makes sure that tags are correctly nested.
     * @param currentNameOrCtor
     * @param nameOrCtor
     */


    function assertCloseMatchesOpenTag(currentNameOrCtor, nameOrCtor) {
      if (currentNameOrCtor !== nameOrCtor) {
        throw new Error('Received a call to close "' + nameOrCtor + '" but "' + currentNameOrCtor + '" was open.');
      }
    }
    /**
     * Makes sure that no children elements have been declared yet in the current
     * element.
     * @param functionName The name of the caller, for the error message.
     * @param previousNode
     */


    function assertNoChildrenDeclaredYet(functionName, previousNode) {
      if (previousNode !== null) {
        throw new Error(functionName + "() must come before any child " + "declarations inside the current element.");
      }
    }
    /**
     * Checks that a call to patchOuter actually patched the element.
     * @param maybeStartNode The value for the currentNode when the patch
     *     started.
     * @param maybeCurrentNode The currentNode when the patch finished.
     * @param expectedNextNode The Node that is expected to follow the
     *    currentNode after the patch;
     * @param expectedPrevNode The Node that is expected to preceed the
     *    currentNode after the patch.
     */


    function assertPatchElementNoExtras(maybeStartNode, maybeCurrentNode, expectedNextNode, expectedPrevNode) {
      var startNode = assert(maybeStartNode);
      var currentNode = assert(maybeCurrentNode);
      var wasUpdated = currentNode.nextSibling === expectedNextNode && currentNode.previousSibling === expectedPrevNode;
      var wasChanged = currentNode.nextSibling === startNode.nextSibling && currentNode.previousSibling === expectedPrevNode;
      var wasRemoved = currentNode === startNode;

      if (!wasUpdated && !wasChanged && !wasRemoved) {
        throw new Error("There must be exactly one top level call corresponding " + "to the patched element.");
      }
    }
    /**
     * @param newContext The current patch context.
     */


    function updatePatchContext(newContext) {
      inPatch = newContext != null;
    }
    /**
     * Updates the state of being in an attribute declaration.
     * @param value Whether or not the patch is in an attribute declaration.
     * @return the previous value.
     */


    function setInAttributes(value) {
      var previous = inAttributes;
      inAttributes = value;
      return previous;
    }
    /**
     * Updates the state of being in a skip element.
     * @param value Whether or not the patch is skipping the children of a
     *    parent node.
     * @return the previous value.
     */


    function setInSkip(value) {
      var previous = inSkip;
      inSkip = value;
      return previous;
    }
    /**
     * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS-IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * A cached reference to the hasOwnProperty function.
     */


    var hasOwnProperty = Object.prototype.hasOwnProperty;
    /**
     * A constructor function that will create blank objects.
     */

    function Blank() {}

    Blank.prototype = Object.create(null);
    /**
     * Used to prevent property collisions between our "map" and its prototype.
     * @param map The map to check.
     * @param property The property to check.
     * @return Whether map has property.
     */

    function has(map, property) {
      return hasOwnProperty.call(map, property);
    }
    /**
     * Creates an map object without a prototype.
     * @returns An Object that can be used as a map.
     */


    function createMap() {
      return new Blank();
    }
    /**
     * Truncates an array, removing items up until length.
     * @param arr The array to truncate.
     * @param length The new length of the array.
     */


    function truncateArray(arr, length) {
      while (arr.length > length) {
        arr.pop();
      }
    }
    /**
     * Creates an array for a desired initial size. Note that the array will still
     * be empty.
     * @param initialAllocationSize The initial size to allocate.
     * @returns An empty array, with an initial allocation for the desired size.
     */


    function createArray(initialAllocationSize) {
      var arr = new Array(initialAllocationSize);
      truncateArray(arr, 0);
      return arr;
    }
    /**
     * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS-IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */


    var symbols = {
      "default": "__default"
    };
    /**
     * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS-IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * @param name The name of the attribute. For example "tabindex" or
     *    "xlink:href".
     * @returns The namespace to use for the attribute, or null if there is
     * no namespace.
     */

    function getNamespace(name) {
      if (name.lastIndexOf("xml:", 0) === 0) {
        return "http://www.w3.org/XML/1998/namespace";
      }

      if (name.lastIndexOf("xlink:", 0) === 0) {
        return "http://www.w3.org/1999/xlink";
      }

      return null;
    }
    /**
     * Applies an attribute or property to a given Element. If the value is null
     * or undefined, it is removed from the Element. Otherwise, the value is set
     * as an attribute.
     * @param el The element to apply the attribute to.
     * @param name The attribute's name.
     * @param value The attribute's value.
     */


    function applyAttr(el, name, value) {
      if (value == null) {
        el.removeAttribute(name);
      } else {
        var attrNS = getNamespace(name);

        if (attrNS) {
          el.setAttributeNS(attrNS, name, String(value));
        } else {
          el.setAttribute(name, String(value));
        }
      }
    }
    /**
     * Applies a property to a given Element.
     * @param el The element to apply the property to.
     * @param name The property's name.
     * @param value The property's value.
     */


    function applyProp(el, name, value) {
      el[name] = value;
    }
    /**
     * Applies a value to a style declaration. Supports CSS custom properties by
     * setting properties containing a dash using CSSStyleDeclaration.setProperty.
     * @param style A style declaration.
     * @param prop The property to apply. This can be either camelcase or dash
     *    separated. For example: "backgroundColor" and "background-color" are both
     *    supported.
     * @param value The value of the property.
     */


    function setStyleValue(style, prop, value) {
      if (prop.indexOf("-") >= 0) {
        style.setProperty(prop, value);
      } else {
        style[prop] = value;
      }
    }
    /**
     * Applies a style to an Element. No vendor prefix expansion is done for
     * property names/values.
     * @param el The Element to apply the style for.
     * @param name The attribute's name.
     * @param  style The style to set. Either a string of css or an object
     *     containing property-value pairs.
     */


    function applyStyle(el, name, style) {
      // MathML elements inherit from Element, which does not have style. We cannot
      // do `instanceof HTMLElement` / `instanceof SVGElement`, since el can belong
      // to a different document, so just check that it has a style.
      assert("style" in el);
      var elStyle = el.style;

      if (typeof style === "string") {
        elStyle.cssText = style;
      } else {
        elStyle.cssText = "";

        for (var prop in style) {
          if (has(style, prop)) {
            setStyleValue(elStyle, prop, style[prop]);
          }
        }
      }
    }
    /**
     * Updates a single attribute on an Element.
     * @param el The Element to apply the attribute to.
     * @param name The attribute's name.
     * @param value The attribute's value. If the value is an object or
     *     function it is set on the Element, otherwise, it is set as an HTML
     *     attribute.
     */


    function applyAttributeTyped(el, name, value) {
      var type = typeof value;

      if (type === "object" || type === "function") {
        applyProp(el, name, value);
      } else {
        applyAttr(el, name, value);
      }
    }
    /**
     * A publicly mutable object to provide custom mutators for attributes.
     * NB: The result of createMap() has to be recast since closure compiler
     * will just assume attributes is "any" otherwise and throws away
     * the type annotation set by tsickle.
     */


    var attributes = createMap(); // Special generic mutator that's called for any attribute that does not
    // have a specific mutator.

    attributes[symbols["default"]] = applyAttributeTyped;
    attributes["style"] = applyStyle;
    /**
     * Calls the appropriate attribute mutator for this attribute.
     * @param el The Element to apply the attribute to.
     * @param name The attribute's name.
     * @param value The attribute's value. If the value is an object or
     *     function it is set on the Element, otherwise, it is set as an HTML
     *     attribute.
     */

    function updateAttribute(el, name, value) {
      var mutator = attributes[name] || attributes[symbols["default"]];
      mutator(el, name, value);
    }
    /**
     * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS-IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */


    var notifications = {
      nodesCreated: null,
      nodesDeleted: null
    };
    /**
     * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS-IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * A context object keeps track of the state of a patch.
     */

    var Context = /*#__PURE__*/function () {
      function Context() {
        _classCallCheck(this, Context);

        this.created = [];
        this.deleted = [];
      }

      _createClass(Context, [{
        key: "markCreated",
        value: function markCreated(node) {
          this.created.push(node);
        }
      }, {
        key: "markDeleted",
        value: function markDeleted(node) {
          this.deleted.push(node);
        }
        /**
         * Notifies about nodes that were created during the patch operation.
         */

      }, {
        key: "notifyChanges",
        value: function notifyChanges() {
          if (notifications.nodesCreated && this.created.length > 0) {
            notifications.nodesCreated(this.created);
          }

          if (notifications.nodesDeleted && this.deleted.length > 0) {
            notifications.nodesDeleted(this.deleted);
          }
        }
      }]);

      return Context;
    }();
    /**
     * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS-IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * Checks if the node is the root of a document. This is either a Document
     * or ShadowRoot. DocumentFragments are included for simplicity of the
     * implementation, though we only want to consider Documents or ShadowRoots.
     * @param node The node to check.
     * @return True if the node the root of a document, false otherwise.
     */


    function isDocumentRoot(node) {
      return node.nodeType === 11 || node.nodeType === 9;
    }
    /**
     * Checks if the node is an Element. This is faster than an instanceof check.
     * @param node The node to check.
     * @return Whether or not the node is an Element.
     */


    function isElement(node) {
      return node.nodeType === 1;
    }
    /**
     * @param  node The node to start at, inclusive.
     * @param  root The root ancestor to get until, exclusive.
     * @return The ancestry of DOM nodes.
     */


    function getAncestry(node, root) {
      var ancestry = [];
      var cur = node;

      while (cur !== root) {
        var n = assert(cur);
        ancestry.push(n);
        cur = n.parentNode;
      }

      return ancestry;
    }
    /**
     * @param this
     * @returns The root node of the DOM tree that contains this node.
     */


    var getRootNode = typeof Node !== "undefined" && Node.prototype.getRootNode || function () {
      var cur = this;
      var prev = cur;

      while (cur) {
        prev = cur;
        cur = cur.parentNode;
      }

      return prev;
    };
    /**
     * @param node The node to get the activeElement for.
     * @returns The activeElement in the Document or ShadowRoot
     *     corresponding to node, if present.
     */


    function getActiveElement(node) {
      var root = getRootNode.call(node);
      return isDocumentRoot(root) ? root.activeElement : null;
    }
    /**
     * Gets the path of nodes that contain the focused node in the same document as
     * a reference node, up until the root.
     * @param node The reference node to get the activeElement for.
     * @param root The root to get the focused path until.
     * @returns The path of focused parents, if any exist.
     */


    function getFocusedPath(node, root) {
      var activeElement = getActiveElement(node);

      if (!activeElement || !node.contains(activeElement)) {
        return [];
      }

      return getAncestry(activeElement, root);
    }
    /**
     * Like insertBefore, but instead instead of moving the desired node, instead
     * moves all the other nodes after.
     * @param parentNode
     * @param node
     * @param referenceNode
     */


    function moveBefore(parentNode, node, referenceNode) {
      var insertReferenceNode = node.nextSibling;
      var cur = referenceNode;

      while (cur !== null && cur !== node) {
        var next = cur.nextSibling;
        parentNode.insertBefore(cur, insertReferenceNode);
        cur = next;
      }
    }
    /**
     * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS-IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * Keeps track of information needed to perform diffs for a given DOM node.
     */


    var NodeData = /*#__PURE__*/function () {
      function NodeData(nameOrCtor, key, text) {
        _classCallCheck(this, NodeData);

        /**
         * An array of attribute name/value pairs, used for quickly diffing the
         * incomming attributes to see if the DOM node's attributes need to be
         * updated.
         */
        this._attrsArr = null;
        /**
         * Whether or not the statics have been applied for the node yet.
         */

        this.staticsApplied = false;
        this.nameOrCtor = nameOrCtor;
        this.key = key;
        this.text = text;
      }

      _createClass(NodeData, [{
        key: "hasEmptyAttrsArr",
        value: function hasEmptyAttrsArr() {
          var attrs = this._attrsArr;
          return !attrs || !attrs.length;
        }
      }, {
        key: "getAttrsArr",
        value: function getAttrsArr(length) {
          return this._attrsArr || (this._attrsArr = createArray(length));
        }
      }]);

      return NodeData;
    }();
    /**
     * Initializes a NodeData object for a Node.
     * @param node The Node to initialized data for.
     * @param nameOrCtor The NameOrCtorDef to use when diffing.
     * @param key The Key for the Node.
     * @param text The data of a Text node, if importing a Text node.
     * @returns A NodeData object with the existing attributes initialized.
     */


    function initData(node, nameOrCtor, key, text) {
      var data = new NodeData(nameOrCtor, key, text);
      node["__incrementalDOMData"] = data;
      return data;
    }
    /**
     * @param node The node to check.
     * @returns True if the NodeData already exists, false otherwise.
     */


    function isDataInitialized(node) {
      return Boolean(node["__incrementalDOMData"]);
    }
    /**
     * Records the element's attributes.
     * @param node The Element that may have attributes
     * @param data The Element's data
     */


    function recordAttributes(node, data) {
      var attributes = node.attributes;
      var length = attributes.length;

      if (!length) {
        return;
      }

      var attrsArr = data.getAttrsArr(length); // Use a cached length. The attributes array is really a live NamedNodeMap,
      // which exists as a DOM "Host Object" (probably as C++ code). This makes the
      // usual constant length iteration very difficult to optimize in JITs.

      for (var i = 0, j = 0; i < length; i += 1, j += 2) {
        var _attr = attributes[i];
        var name = _attr.name;
        var value = _attr.value;
        attrsArr[j] = name;
        attrsArr[j + 1] = value;
      }
    }
    /**
     * Imports single node and its subtree, initializing caches, if it has not
     * already been imported.
     * @param node The node to import.
     * @param fallbackKey A key to use if importing and no key was specified.
     *    Useful when not transmitting keys from serverside render and doing an
     *    immediate no-op diff.
     * @returns The NodeData for the node.
     */


    function importSingleNode(node, fallbackKey) {
      if (node["__incrementalDOMData"]) {
        return node["__incrementalDOMData"];
      }

      var nodeName = isElement(node) ? node.localName : node.nodeName;
      var keyAttrName = getKeyAttributeName();
      var keyAttr = isElement(node) && keyAttrName != null ? node.getAttribute(keyAttrName) : null;
      var key = isElement(node) ? keyAttr || fallbackKey : null;
      var data = initData(node, nodeName, key);

      if (isElement(node)) {
        recordAttributes(node, data);
      }

      return data;
    }
    /**
     * Imports node and its subtree, initializing caches.
     * @param node The Node to import.
     */


    function importNode(node) {
      importSingleNode(node);

      for (var child = node.firstChild; child; child = child.nextSibling) {
        importNode(child);
      }
    }
    /**
     * Retrieves the NodeData object for a Node, creating it if necessary.
     * @param node The node to get data for.
     * @param fallbackKey A key to use if importing and no key was specified.
     *    Useful when not transmitting keys from serverside render and doing an
     *    immediate no-op diff.
     * @returns The NodeData for the node.
     */


    function getData(node, fallbackKey) {
      return importSingleNode(node, fallbackKey);
    }
    /**
     * Gets the key for a Node. note that the Node should have been imported
     * by now.
     * @param node The node to check.
     * @returns The key used to create the node.
     */


    function getKey(node) {
      assert(node["__incrementalDOMData"]);
      return getData(node).key;
    }
    /**
     * Clears all caches from a node and all of its children.
     * @param node The Node to clear the cache for.
     */


    function clearCache(node) {
      node["__incrementalDOMData"] = null;

      for (var child = node.firstChild; child; child = child.nextSibling) {
        clearCache(child);
      }
    }
    /**
     * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS-IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * Gets the namespace to create an element (of a given tag) in.
     * @param tag The tag to get the namespace for.
     * @param parent The current parent Node, if any.
     * @returns The namespace to use,
     */


    function getNamespaceForTag(tag, parent) {
      if (tag === "svg") {
        return "http://www.w3.org/2000/svg";
      }

      if (tag === "math") {
        return "http://www.w3.org/1998/Math/MathML";
      }

      if (parent == null) {
        return null;
      }

      if (getData(parent).nameOrCtor === "foreignObject") {
        return null;
      }

      return parent.namespaceURI;
    }
    /**
     * Creates an Element and initializes the NodeData.
     * @param doc The document with which to create the Element.
     * @param parent The parent of new Element.
     * @param nameOrCtor The tag or constructor for the Element.
     * @param key A key to identify the Element.
     * @returns The newly created Element.
     */


    function createElement(doc, parent, nameOrCtor, key) {
      var el;

      if (typeof nameOrCtor === "function") {
        el = new nameOrCtor();
      } else {
        var namespace = getNamespaceForTag(nameOrCtor, parent);

        if (namespace) {
          el = doc.createElementNS(namespace, nameOrCtor);
        } else {
          el = doc.createElement(nameOrCtor);
        }
      }

      initData(el, nameOrCtor, key);
      return el;
    }
    /**
     * Creates a Text Node.
     * @param doc The document with which to create the Element.
     * @returns The newly created Text.
     */


    function createText(doc) {
      var node = doc.createTextNode("");
      initData(node, "#text", null);
      return node;
    }
    /**
     * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS-IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * The default match function to use, if one was not specified when creating
     * the patcher.
     * @param matchNode The node to match against, unused.
     * @param nameOrCtor The name or constructor as declared.
     * @param expectedNameOrCtor The name or constructor of the existing node.
     * @param key The key as declared.
     * @param expectedKey The key of the existing node.
     * @returns True if the node matches, false otherwise.
     */


    function defaultMatchFn(matchNode, nameOrCtor, expectedNameOrCtor, key, expectedKey) {
      // Key check is done using double equals as we want to treat a null key the
      // same as undefined. This should be okay as the only values allowed are
      // strings, null and undefined so the == semantics are not too weird.
      return nameOrCtor == expectedNameOrCtor && key == expectedKey;
    }

    var context = null;
    var currentNode = null;
    var currentParent = null;
    var doc = null;
    var focusPath = [];
    var matchFn = defaultMatchFn;
    /**
     * Used to build up call arguments. Each patch call gets a separate copy, so
     * this works with nested calls to patch.
     */

    var argsBuilder = [];
    /**
     * Used to build up attrs for the an element.
     */

    var attrsBuilder = [];
    /**
     * TODO(sparhami) We should just export argsBuilder directly when Closure
     * Compiler supports ES6 directly.
     * @returns The Array used for building arguments.
     */

    function getArgsBuilder() {
      return argsBuilder;
    }
    /**
     * TODO(sparhami) We should just export attrsBuilder directly when Closure
     * Compiler supports ES6 directly.
     * @returns The Array used for building arguments.
     */


    function getAttrsBuilder() {
      return attrsBuilder;
    }
    /**
     * Checks whether or not the current node matches the specified nameOrCtor and
     * key. This uses the specified match function when creating the patcher.
     * @param matchNode A node to match the data to.
     * @param nameOrCtor The name or constructor to check for.
     * @param key The key used to identify the Node.
     * @return True if the node matches, false otherwise.
     */


    function matches(matchNode, nameOrCtor, key) {
      var data = getData(matchNode, key);
      return matchFn(matchNode, nameOrCtor, data.nameOrCtor, key, data.key);
    }
    /**
     * Finds the matching node, starting at `node` and looking at the subsequent
     * siblings if a key is used.
     * @param matchNode The node to start looking at.
     * @param nameOrCtor The name or constructor for the Node.
     * @param key The key used to identify the Node.
     * @returns The matching Node, if any exists.
     */


    function getMatchingNode(matchNode, nameOrCtor, key) {
      if (!matchNode) {
        return null;
      }

      var cur = matchNode;

      do {
        if (matches(cur, nameOrCtor, key)) {
          return cur;
        }
      } while (key && (cur = cur.nextSibling));

      return null;
    }
    /**
     * Clears out any unvisited Nodes in a given range.
     * @param maybeParentNode
     * @param startNode The node to start clearing from, inclusive.
     * @param endNode The node to clear until, exclusive.
     */


    function clearUnvisitedDOM(maybeParentNode, startNode, endNode) {
      var parentNode = maybeParentNode;
      var child = startNode;

      while (child !== endNode) {
        var next = child.nextSibling;
        parentNode.removeChild(child);
        context.markDeleted(child);
        child = next;
      }
    }
    /**
     * @return The next Node to be patched.
     */


    function getNextNode() {
      if (currentNode) {
        return currentNode.nextSibling;
      } else {
        return currentParent.firstChild;
      }
    }
    /**
     * Changes to the first child of the current node.
     */


    function enterNode() {
      currentParent = currentNode;
      currentNode = null;
    }
    /**
     * Changes to the parent of the current node, removing any unvisited children.
     */


    function exitNode() {
      clearUnvisitedDOM(currentParent, getNextNode(), null);
      currentNode = currentParent;
      currentParent = currentParent.parentNode;
    }
    /**
     * Changes to the next sibling of the current node.
     */


    function nextNode() {
      currentNode = getNextNode();
    }
    /**
     * Creates a Node and marking it as created.
     * @param nameOrCtor The name or constructor for the Node.
     * @param key The key used to identify the Node.
     * @return The newly created node.
     */


    function createNode(nameOrCtor, key) {
      var node;

      if (nameOrCtor === "#text") {
        node = createText(doc);
      } else {
        node = createElement(doc, currentParent, nameOrCtor, key);
      }

      context.markCreated(node);
      return node;
    }
    /**
     * Aligns the virtual Node definition with the actual DOM, moving the
     * corresponding DOM node to the correct location or creating it if necessary.
     * @param nameOrCtor The name or constructor for the Node.
     * @param key The key used to identify the Node.
     */


    function alignWithDOM(nameOrCtor, key) {
      nextNode();
      var existingNode = getMatchingNode(currentNode, nameOrCtor, key);
      var node = existingNode || createNode(nameOrCtor, key); // If we are at the matching node, then we are done.

      if (node === currentNode) {
        return;
      } // Re-order the node into the right position, preserving focus if either
      // node or currentNode are focused by making sure that they are not detached
      // from the DOM.


      if (focusPath.indexOf(node) >= 0) {
        // Move everything else before the node.
        moveBefore(currentParent, node, currentNode);
      } else {
        currentParent.insertBefore(node, currentNode);
      }

      currentNode = node;
    }
    /**
     * Makes sure that the current node is an Element with a matching nameOrCtor and
     * key.
     *
     * @param nameOrCtor The tag or constructor for the Element.
     * @param key The key used to identify this element. This can be an
     *     empty string, but performance may be better if a unique value is used
     *     when iterating over an array of items.
     * @return The corresponding Element.
     */


    function open(nameOrCtor, key) {
      alignWithDOM(nameOrCtor, key);
      enterNode();
      return currentParent;
    }
    /**
     * Closes the currently open Element, removing any unvisited children if
     * necessary.
     * @returns The Element that was just closed.
     */


    function close() {
      {
        setInSkip(false);
      }
      exitNode();
      return currentNode;
    }
    /**
     * Makes sure the current node is a Text node and creates a Text node if it is
     * not.
     * @returns The Text node that was aligned or created.
     */


    function text() {
      alignWithDOM("#text", null);
      return currentNode;
    }
    /**
     * @returns The current Element being patched.
     */


    function currentElement() {
      {
        assertInPatch("currentElement");
        assertNotInAttributes("currentElement");
      }
      return currentParent;
    }
    /**
     * @return The Node that will be evaluated for the next instruction.
     */


    function currentPointer() {
      {
        assertInPatch("currentPointer");
        assertNotInAttributes("currentPointer");
      } // TODO(tomnguyen): assert that this is not null

      return getNextNode();
    }
    /**
     * Skips the children in a subtree, allowing an Element to be closed without
     * clearing out the children.
     */


    function skip() {
      {
        assertNoChildrenDeclaredYet("skip", currentNode);
        setInSkip(true);
      }
      currentNode = currentParent.lastChild;
    }
    /**
     * Returns a patcher function that sets up and restores a patch context,
     * running the run function with the provided data.
     * @param run The function that will run the patch.
     * @param patchConfig The configuration to use for the patch.
     * @returns The created patch function.
     */


    function createPatcher(run) {
      var patchConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _patchConfig$matches = patchConfig.matches,
          matches = _patchConfig$matches === void 0 ? defaultMatchFn : _patchConfig$matches;

      var f = function f(node, fn, data) {
        var prevContext = context;
        var prevDoc = doc;
        var prevFocusPath = focusPath;
        var prevArgsBuilder = argsBuilder;
        var prevAttrsBuilder = attrsBuilder;
        var prevCurrentNode = currentNode;
        var prevCurrentParent = currentParent;
        var prevMatchFn = matchFn;
        var previousInAttributes = false;
        var previousInSkip = false;
        doc = node.ownerDocument;
        context = new Context();
        matchFn = matches;
        argsBuilder = [];
        attrsBuilder = [];
        currentNode = null;
        currentParent = node.parentNode;
        focusPath = getFocusedPath(node, currentParent);
        {
          previousInAttributes = setInAttributes(false);
          previousInSkip = setInSkip(false);
          updatePatchContext(context);
        }

        try {
          var retVal = run(node, fn, data);
          {
            assertVirtualAttributesClosed();
          }
          return retVal;
        } finally {
          context.notifyChanges();
          doc = prevDoc;
          context = prevContext;
          matchFn = prevMatchFn;
          argsBuilder = prevArgsBuilder;
          attrsBuilder = prevAttrsBuilder;
          currentNode = prevCurrentNode;
          currentParent = prevCurrentParent;
          focusPath = prevFocusPath; // Needs to be done after assertions because assertions rely on state
          // from these methods.

          {
            setInAttributes(previousInAttributes);
            setInSkip(previousInSkip);
            updatePatchContext(context);
          }
        }
      };

      return f;
    }
    /**
     * Creates a patcher that patches the document starting at node with a
     * provided function. This function may be called during an existing patch operation.
     * @param patchConfig The config to use for the patch.
     * @returns The created function for patching an Element's children.
     */


    function createPatchInner(patchConfig) {
      return createPatcher(function (node, fn, data) {
        currentNode = node;
        enterNode();
        fn(data);
        exitNode();
        {
          assertNoUnclosedTags(currentNode, node);
        }
        return node;
      }, patchConfig);
    }
    /**
     * Creates a patcher that patches an Element with the the provided function.
     * Exactly one top level element call should be made corresponding to `node`.
     * @param patchConfig The config to use for the patch.
     * @returns The created function for patching an Element.
     */


    function createPatchOuter(patchConfig) {
      return createPatcher(function (node, fn, data) {
        var startNode = {
          nextSibling: node
        };
        var expectedNextNode = null;
        var expectedPrevNode = null;
        {
          expectedNextNode = node.nextSibling;
          expectedPrevNode = node.previousSibling;
        }
        currentNode = startNode;
        fn(data);
        {
          assertPatchOuterHasParentNode(currentParent);
          assertPatchElementNoExtras(startNode, currentNode, expectedNextNode, expectedPrevNode);
        }

        if (currentParent) {
          clearUnvisitedDOM(currentParent, getNextNode(), node.nextSibling);
        }

        return startNode === currentNode ? null : currentNode;
      }, patchConfig);
    }

    var patchInner = createPatchInner();
    var patchOuter = createPatchOuter();
    /**
     * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS-IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    var buffer = [];
    var bufferStart = 0;
    /**
     * TODO(tomnguyen): This is a bit silly and really needs to be better typed.
     * @param fn A function to call.
     * @param a The first argument to the function.
     * @param b The second argument to the function.
     * @param c The third argument to the function.
     */

    function queueChange(fn, a, b, c) {
      buffer.push(fn);
      buffer.push(a);
      buffer.push(b);
      buffer.push(c);
    }
    /**
     * Flushes the changes buffer, calling the functions for each change.
     */


    function flush() {
      // A change may cause this function to be called re-entrantly. Keep track of
      // the portion of the buffer we are consuming. Updates the start pointer so
      // that the next call knows where to start from.
      var start = bufferStart;
      var end = buffer.length;
      bufferStart = end;

      for (var i = start; i < end; i += 4) {
        var fn = buffer[i];
        fn(buffer[i + 1], buffer[i + 2], buffer[i + 3]);
      }

      bufferStart = start;
      truncateArray(buffer, start);
    }
    /**
     * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS-IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * Used to keep track of the previous values when a 2-way diff is necessary.
     * This object is cleared out and reused.
     */


    var prevValuesMap = createMap();
    /**
     * Calculates the diff between previous and next values, calling the update
     * function when an item has changed value. If an item from the previous values
     * is not present in the the next values, the update function is called with a
     * value of `undefined`.
     * @param prev The previous values, alternating name, value pairs.
     * @param next The next values, alternating name, value pairs.
     * @param updateCtx The context for the updateFn.
     * @param updateFn A function to call when a value has changed.
     */

    function calculateDiff(prev, next, updateCtx, updateFn) {
      var isNew = !prev.length;
      var i = 0;

      for (; i < next.length; i += 2) {
        var name = next[i];

        if (isNew) {
          prev[i] = name;
        } else if (prev[i] !== name) {
          break;
        }

        var value = next[i + 1];

        if (isNew || prev[i + 1] !== value) {
          prev[i + 1] = value;
          queueChange(updateFn, updateCtx, name, value);
        }
      } // Items did not line up exactly as before, need to make sure old items are
      // removed. This should be a rare case.


      if (i < next.length || i < prev.length) {
        var startIndex = i;

        for (i = startIndex; i < prev.length; i += 2) {
          prevValuesMap[prev[i]] = prev[i + 1];
        }

        for (i = startIndex; i < next.length; i += 2) {
          var _name = next[i];
          var _value = next[i + 1];

          if (prevValuesMap[_name] !== _value) {
            queueChange(updateFn, updateCtx, _name, _value);
          }

          prev[i] = _name;
          prev[i + 1] = _value;
          delete prevValuesMap[_name];
        }

        truncateArray(prev, next.length);

        for (var _name2 in prevValuesMap) {
          queueChange(updateFn, updateCtx, _name2, undefined);
          delete prevValuesMap[_name2];
        }
      }

      flush();
    }
    /**
     * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS-IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * The offset in the virtual element declaration where the attributes are
     * specified.
     */


    var ATTRIBUTES_OFFSET = 3;
    /**
     * Used to keep track of the previous values when a 2-way diff is necessary.
     * This object is reused.
     * TODO(sparhamI) Scope this to a patch so you can call patch from an attribute
     * update.
     */

    var prevAttrsMap = createMap();
    /**
     * @param element The Element to diff the attrs for.
     * @param data The NodeData associated with the Element.
     */

    function diffAttrs(element, data) {
      var attrsBuilder = getAttrsBuilder();
      var prevAttrsArr = data.getAttrsArr(attrsBuilder.length);
      calculateDiff(prevAttrsArr, attrsBuilder, element, updateAttribute);
      truncateArray(attrsBuilder, 0);
    }
    /**
     * Applies the statics. When importing an Element, any existing attributes that
     * match a static are converted into a static attribute.
     * @param node The Element to apply statics for.
     * @param data The NodeData associated with the Element.
     * @param statics The statics array.
     */


    function diffStatics(node, data, statics) {
      if (data.staticsApplied) {
        return;
      }

      data.staticsApplied = true;

      if (!statics || !statics.length) {
        return;
      }

      if (data.hasEmptyAttrsArr()) {
        for (var i = 0; i < statics.length; i += 2) {
          updateAttribute(node, statics[i], statics[i + 1]);
        }

        return;
      }

      for (var _i4 = 0; _i4 < statics.length; _i4 += 2) {
        prevAttrsMap[statics[_i4]] = _i4 + 1;
      }

      var attrsArr = data.getAttrsArr(0);
      var j = 0;

      for (var _i5 = 0; _i5 < attrsArr.length; _i5 += 2) {
        var name = attrsArr[_i5];
        var value = attrsArr[_i5 + 1];
        var staticsIndex = prevAttrsMap[name];

        if (staticsIndex) {
          // For any attrs that are static and have the same value, make sure we do
          // not set them again.
          if (statics[staticsIndex] === value) {
            delete prevAttrsMap[name];
          }

          continue;
        } // For any attrs that are dynamic, move them up to the right place.


        attrsArr[j] = name;
        attrsArr[j + 1] = value;
        j += 2;
      } // Anything after `j` was either moved up already or static.


      truncateArray(attrsArr, j);

      for (var _name3 in prevAttrsMap) {
        updateAttribute(node, _name3, statics[prevAttrsMap[_name3]]);
        delete prevAttrsMap[_name3];
      }
    }
    /**
     * Declares a virtual Element at the current location in the document. This
     * corresponds to an opening tag and a elementClose tag is required. This is
     * like elementOpen, but the attributes are defined using the attr function
     * rather than being passed as arguments. Must be folllowed by 0 or more calls
     * to attr, then a call to elementOpenEnd.
     * @param nameOrCtor The Element's tag or constructor.
     * @param key The key used to identify this element. This can be an
     *     empty string, but performance may be better if a unique value is used
     *     when iterating over an array of items.
     * @param statics An array of attribute name/value pairs of the static
     *     attributes for the Element. Attributes will only be set once when the
     *     Element is created.
     */


    function elementOpenStart(nameOrCtor, key, statics) {
      var argsBuilder = getArgsBuilder();
      {
        assertNotInAttributes("elementOpenStart");
        setInAttributes(true);
      }
      argsBuilder[0] = nameOrCtor;
      argsBuilder[1] = key;
      argsBuilder[2] = statics;
    }
    /**
     * Allows you to define a key after an elementOpenStart. This is useful in
     * templates that define key after an element has been opened ie
     * `<div key('foo')></div>`.
     * @param key The key to use for the next call.
     */


    function key(key) {
      var argsBuilder = getArgsBuilder();
      {
        assertInAttributes("key");
        assert(argsBuilder);
      }
      argsBuilder[1] = key;
    }
    /**
     * Buffers an attribute, which will get applied during the next call to
     * `elementOpen`, `elementOpenEnd` or `applyAttrs`.
     * @param name The of the attribute to buffer.
     * @param value The value of the attribute to buffer.
     */


    function attr(name, value) {
      var attrsBuilder = getAttrsBuilder();
      {
        assertInPatch("attr");
      }
      attrsBuilder.push(name);
      attrsBuilder.push(value);
    }
    /**
     * Closes an open tag started with elementOpenStart.
     * @return The corresponding Element.
     */


    function elementOpenEnd() {
      var argsBuilder = getArgsBuilder();
      {
        assertInAttributes("elementOpenEnd");
        setInAttributes(false);
      }
      var node = open(argsBuilder[0], argsBuilder[1]);
      var data = getData(node);
      diffStatics(node, data, argsBuilder[2]);
      diffAttrs(node, data);
      truncateArray(argsBuilder, 0);
      return node;
    }
    /**
     * @param  nameOrCtor The Element's tag or constructor.
     * @param  key The key used to identify this element. This can be an
     *     empty string, but performance may be better if a unique value is used
     *     when iterating over an array of items.
     * @param statics An array of attribute name/value pairs of the static
     *     attributes for the Element. Attributes will only be set once when the
     *     Element is created.
     * @param varArgs, Attribute name/value pairs of the dynamic attributes
     *     for the Element.
     * @return The corresponding Element.
     */


    function elementOpen(nameOrCtor, key, // Ideally we could tag statics and varArgs as an array where every odd
    // element is a string and every even element is any, but this is hard.
    statics) {
      for (var _len = arguments.length, varArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        varArgs[_key - 3] = arguments[_key];
      }

      {
        assertNotInAttributes("elementOpen");
        assertNotInSkip("elementOpen");
      }
      elementOpenStart(nameOrCtor, key, statics);

      for (var i = ATTRIBUTES_OFFSET; i < arguments.length; i += 2) {
        attr(arguments[i], arguments[i + 1]);
      }

      return elementOpenEnd();
    }
    /**
     * Applies the currently buffered attrs to the currently open element. This
     * clears the buffered attributes.
     */


    function applyAttrs() {
      var node = currentElement();
      var data = getData(node);
      diffAttrs(node, data);
    }
    /**
     * Applies the current static attributes to the currently open element. Note:
     * statics should be applied before calling `applyAtrs`.
     * @param statics The statics to apply to the current element.
     */


    function applyStatics(statics) {
      var node = currentElement();
      var data = getData(node);
      diffStatics(node, data, statics);
    }
    /**
     * Closes an open virtual Element.
     *
     * @param nameOrCtor The Element's tag or constructor.
     * @return The corresponding Element.
     */


    function elementClose(nameOrCtor) {
      {
        assertNotInAttributes("elementClose");
      }
      var node = close();
      {
        assertCloseMatchesOpenTag(getData(node).nameOrCtor, nameOrCtor);
      }
      return node;
    }
    /**
     * Declares a virtual Element at the current location in the document that has
     * no children.
     * @param nameOrCtor The Element's tag or constructor.
     * @param key The key used to identify this element. This can be an
     *     empty string, but performance may be better if a unique value is used
     *     when iterating over an array of items.
     * @param statics An array of attribute name/value pairs of the static
     *     attributes for the Element. Attributes will only be set once when the
     *     Element is created.
     * @param varArgs Attribute name/value pairs of the dynamic attributes
     *     for the Element.
     * @return The corresponding Element.
     */


    function elementVoid(nameOrCtor, key, // Ideally we could tag statics and varArgs as an array where every odd
    // element is a string and every even element is any, but this is hard.
    statics) {
      for (var _len2 = arguments.length, varArgs = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
        varArgs[_key2 - 3] = arguments[_key2];
      }

      elementOpen.apply(null, arguments);
      return elementClose(nameOrCtor);
    }
    /**
     * Declares a virtual Text at this point in the document.
     *
     * @param value The value of the Text.
     * @param varArgs
     *     Functions to format the value which are called only when the value has
     *     changed.
     * @return The corresponding text node.
     */


    function text$1(value) {
      for (var _len3 = arguments.length, varArgs = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        varArgs[_key3 - 1] = arguments[_key3];
      }

      {
        assertNotInAttributes("text");
        assertNotInSkip("text");
      }
      var node = text();
      var data = getData(node);

      if (data.text !== value) {
        data.text = value;
        var formatted = value;

        for (var i = 1; i < arguments.length; i += 1) {
          /*
           * Call the formatter function directly to prevent leaking arguments.
           * https://github.com/google/incremental-dom/pull/204#issuecomment-178223574
           */
          var fn = arguments[i];
          formatted = fn(formatted);
        } // Setting node.data resets the cursor in IE/Edge.


        if (node.data !== formatted) {
          node.data = formatted;
        }
      }

      return node;
    }
    /**
     * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS-IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */


    exports.applyAttr = applyAttr;
    exports.applyProp = applyProp;
    exports.attributes = attributes;
    exports.alignWithDOM = alignWithDOM;
    exports.close = close;
    exports.createPatchInner = createPatchInner;
    exports.createPatchOuter = createPatchOuter;
    exports.currentElement = currentElement;
    exports.currentPointer = currentPointer;
    exports.open = open;
    exports.patch = patchInner;
    exports.patchInner = patchInner;
    exports.patchOuter = patchOuter;
    exports.skip = skip;
    exports.skipNode = nextNode;
    exports.setKeyAttributeName = setKeyAttributeName;
    exports.clearCache = clearCache;
    exports.getKey = getKey;
    exports.importNode = importNode;
    exports.isDataInitialized = isDataInitialized;
    exports.notifications = notifications;
    exports.symbols = symbols;
    exports.applyAttrs = applyAttrs;
    exports.applyStatics = applyStatics;
    exports.attr = attr;
    exports.elementClose = elementClose;
    exports.elementOpen = elementOpen;
    exports.elementOpenEnd = elementOpenEnd;
    exports.elementOpenStart = elementOpenStart;
    exports.elementVoid = elementVoid;
    exports.key = key;
    exports.text = text$1; //# sourceMappingURL=bundle.cjs.js.map

    /***/
  },

  /***/
  "./node_modules/isarray/index.js":
  /*!***************************************!*\
    !*** ./node_modules/isarray/index.js ***!
    \***************************************/

  /*! no static exports found */

  /***/
  function node_modulesIsarrayIndexJs(module, exports) {
    var toString = {}.toString;

    module.exports = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };
    /***/

  },

  /***/
  "./node_modules/js-yaml/index.js":
  /*!***************************************!*\
    !*** ./node_modules/js-yaml/index.js ***!
    \***************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlIndexJs(module, exports, __webpack_require__) {
    "use strict";

    var yaml = __webpack_require__(
    /*! ./lib/js-yaml.js */
    "./node_modules/js-yaml/lib/js-yaml.js");

    module.exports = yaml;
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml.js":
  /*!*********************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml.js ***!
    \*********************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlJs(module, exports, __webpack_require__) {
    "use strict";

    var loader = __webpack_require__(
    /*! ./js-yaml/loader */
    "./node_modules/js-yaml/lib/js-yaml/loader.js");

    var dumper = __webpack_require__(
    /*! ./js-yaml/dumper */
    "./node_modules/js-yaml/lib/js-yaml/dumper.js");

    function deprecated(name) {
      return function () {
        throw new Error('Function ' + name + ' is deprecated and cannot be used.');
      };
    }

    module.exports.Type = __webpack_require__(
    /*! ./js-yaml/type */
    "./node_modules/js-yaml/lib/js-yaml/type.js");
    module.exports.Schema = __webpack_require__(
    /*! ./js-yaml/schema */
    "./node_modules/js-yaml/lib/js-yaml/schema.js");
    module.exports.FAILSAFE_SCHEMA = __webpack_require__(
    /*! ./js-yaml/schema/failsafe */
    "./node_modules/js-yaml/lib/js-yaml/schema/failsafe.js");
    module.exports.JSON_SCHEMA = __webpack_require__(
    /*! ./js-yaml/schema/json */
    "./node_modules/js-yaml/lib/js-yaml/schema/json.js");
    module.exports.CORE_SCHEMA = __webpack_require__(
    /*! ./js-yaml/schema/core */
    "./node_modules/js-yaml/lib/js-yaml/schema/core.js");
    module.exports.DEFAULT_SAFE_SCHEMA = __webpack_require__(
    /*! ./js-yaml/schema/default_safe */
    "./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js");
    module.exports.DEFAULT_FULL_SCHEMA = __webpack_require__(
    /*! ./js-yaml/schema/default_full */
    "./node_modules/js-yaml/lib/js-yaml/schema/default_full.js");
    module.exports.load = loader.load;
    module.exports.loadAll = loader.loadAll;
    module.exports.safeLoad = loader.safeLoad;
    module.exports.safeLoadAll = loader.safeLoadAll;
    module.exports.dump = dumper.dump;
    module.exports.safeDump = dumper.safeDump;
    module.exports.YAMLException = __webpack_require__(
    /*! ./js-yaml/exception */
    "./node_modules/js-yaml/lib/js-yaml/exception.js"); // Deprecated schema names from JS-YAML 2.0.x

    module.exports.MINIMAL_SCHEMA = __webpack_require__(
    /*! ./js-yaml/schema/failsafe */
    "./node_modules/js-yaml/lib/js-yaml/schema/failsafe.js");
    module.exports.SAFE_SCHEMA = __webpack_require__(
    /*! ./js-yaml/schema/default_safe */
    "./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js");
    module.exports.DEFAULT_SCHEMA = __webpack_require__(
    /*! ./js-yaml/schema/default_full */
    "./node_modules/js-yaml/lib/js-yaml/schema/default_full.js"); // Deprecated functions from JS-YAML 1.x.x

    module.exports.scan = deprecated('scan');
    module.exports.parse = deprecated('parse');
    module.exports.compose = deprecated('compose');
    module.exports.addConstructor = deprecated('addConstructor');
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/common.js":
  /*!****************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/common.js ***!
    \****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlCommonJs(module, exports, __webpack_require__) {
    "use strict";

    function isNothing(subject) {
      return typeof subject === 'undefined' || subject === null;
    }

    function isObject(subject) {
      return typeof subject === 'object' && subject !== null;
    }

    function toArray(sequence) {
      if (Array.isArray(sequence)) return sequence;else if (isNothing(sequence)) return [];
      return [sequence];
    }

    function extend(target, source) {
      var index, length, key, sourceKeys;

      if (source) {
        sourceKeys = Object.keys(source);

        for (index = 0, length = sourceKeys.length; index < length; index += 1) {
          key = sourceKeys[index];
          target[key] = source[key];
        }
      }

      return target;
    }

    function repeat(string, count) {
      var result = '',
          cycle;

      for (cycle = 0; cycle < count; cycle += 1) {
        result += string;
      }

      return result;
    }

    function isNegativeZero(number) {
      return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
    }

    module.exports.isNothing = isNothing;
    module.exports.isObject = isObject;
    module.exports.toArray = toArray;
    module.exports.repeat = repeat;
    module.exports.isNegativeZero = isNegativeZero;
    module.exports.extend = extend;
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/dumper.js":
  /*!****************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/dumper.js ***!
    \****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlDumperJs(module, exports, __webpack_require__) {
    "use strict";
    /*eslint-disable no-use-before-define*/

    var common = __webpack_require__(
    /*! ./common */
    "./node_modules/js-yaml/lib/js-yaml/common.js");

    var YAMLException = __webpack_require__(
    /*! ./exception */
    "./node_modules/js-yaml/lib/js-yaml/exception.js");

    var DEFAULT_FULL_SCHEMA = __webpack_require__(
    /*! ./schema/default_full */
    "./node_modules/js-yaml/lib/js-yaml/schema/default_full.js");

    var DEFAULT_SAFE_SCHEMA = __webpack_require__(
    /*! ./schema/default_safe */
    "./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js");

    var _toString = Object.prototype.toString;
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CHAR_TAB = 0x09;
    /* Tab */

    var CHAR_LINE_FEED = 0x0A;
    /* LF */

    var CHAR_CARRIAGE_RETURN = 0x0D;
    /* CR */

    var CHAR_SPACE = 0x20;
    /* Space */

    var CHAR_EXCLAMATION = 0x21;
    /* ! */

    var CHAR_DOUBLE_QUOTE = 0x22;
    /* " */

    var CHAR_SHARP = 0x23;
    /* # */

    var CHAR_PERCENT = 0x25;
    /* % */

    var CHAR_AMPERSAND = 0x26;
    /* & */

    var CHAR_SINGLE_QUOTE = 0x27;
    /* ' */

    var CHAR_ASTERISK = 0x2A;
    /* * */

    var CHAR_COMMA = 0x2C;
    /* , */

    var CHAR_MINUS = 0x2D;
    /* - */

    var CHAR_COLON = 0x3A;
    /* : */

    var CHAR_EQUALS = 0x3D;
    /* = */

    var CHAR_GREATER_THAN = 0x3E;
    /* > */

    var CHAR_QUESTION = 0x3F;
    /* ? */

    var CHAR_COMMERCIAL_AT = 0x40;
    /* @ */

    var CHAR_LEFT_SQUARE_BRACKET = 0x5B;
    /* [ */

    var CHAR_RIGHT_SQUARE_BRACKET = 0x5D;
    /* ] */

    var CHAR_GRAVE_ACCENT = 0x60;
    /* ` */

    var CHAR_LEFT_CURLY_BRACKET = 0x7B;
    /* { */

    var CHAR_VERTICAL_LINE = 0x7C;
    /* | */

    var CHAR_RIGHT_CURLY_BRACKET = 0x7D;
    /* } */

    var ESCAPE_SEQUENCES = {};
    ESCAPE_SEQUENCES[0x00] = '\\0';
    ESCAPE_SEQUENCES[0x07] = '\\a';
    ESCAPE_SEQUENCES[0x08] = '\\b';
    ESCAPE_SEQUENCES[0x09] = '\\t';
    ESCAPE_SEQUENCES[0x0A] = '\\n';
    ESCAPE_SEQUENCES[0x0B] = '\\v';
    ESCAPE_SEQUENCES[0x0C] = '\\f';
    ESCAPE_SEQUENCES[0x0D] = '\\r';
    ESCAPE_SEQUENCES[0x1B] = '\\e';
    ESCAPE_SEQUENCES[0x22] = '\\"';
    ESCAPE_SEQUENCES[0x5C] = '\\\\';
    ESCAPE_SEQUENCES[0x85] = '\\N';
    ESCAPE_SEQUENCES[0xA0] = '\\_';
    ESCAPE_SEQUENCES[0x2028] = '\\L';
    ESCAPE_SEQUENCES[0x2029] = '\\P';
    var DEPRECATED_BOOLEANS_SYNTAX = ['y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON', 'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'];

    function compileStyleMap(schema, map) {
      var result, keys, index, length, tag, style, type;
      if (map === null) return {};
      result = {};
      keys = Object.keys(map);

      for (index = 0, length = keys.length; index < length; index += 1) {
        tag = keys[index];
        style = String(map[tag]);

        if (tag.slice(0, 2) === '!!') {
          tag = 'tag:yaml.org,2002:' + tag.slice(2);
        }

        type = schema.compiledTypeMap['fallback'][tag];

        if (type && _hasOwnProperty.call(type.styleAliases, style)) {
          style = type.styleAliases[style];
        }

        result[tag] = style;
      }

      return result;
    }

    function encodeHex(character) {
      var string, handle, length;
      string = character.toString(16).toUpperCase();

      if (character <= 0xFF) {
        handle = 'x';
        length = 2;
      } else if (character <= 0xFFFF) {
        handle = 'u';
        length = 4;
      } else if (character <= 0xFFFFFFFF) {
        handle = 'U';
        length = 8;
      } else {
        throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');
      }

      return '\\' + handle + common.repeat('0', length - string.length) + string;
    }

    function State(options) {
      this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;
      this.indent = Math.max(1, options['indent'] || 2);
      this.noArrayIndent = options['noArrayIndent'] || false;
      this.skipInvalid = options['skipInvalid'] || false;
      this.flowLevel = common.isNothing(options['flowLevel']) ? -1 : options['flowLevel'];
      this.styleMap = compileStyleMap(this.schema, options['styles'] || null);
      this.sortKeys = options['sortKeys'] || false;
      this.lineWidth = options['lineWidth'] || 80;
      this.noRefs = options['noRefs'] || false;
      this.noCompatMode = options['noCompatMode'] || false;
      this.condenseFlow = options['condenseFlow'] || false;
      this.implicitTypes = this.schema.compiledImplicit;
      this.explicitTypes = this.schema.compiledExplicit;
      this.tag = null;
      this.result = '';
      this.duplicates = [];
      this.usedDuplicates = null;
    } // Indents every line in a string. Empty lines (\n only) are not indented.


    function indentString(string, spaces) {
      var ind = common.repeat(' ', spaces),
          position = 0,
          next = -1,
          result = '',
          line,
          length = string.length;

      while (position < length) {
        next = string.indexOf('\n', position);

        if (next === -1) {
          line = string.slice(position);
          position = length;
        } else {
          line = string.slice(position, next + 1);
          position = next + 1;
        }

        if (line.length && line !== '\n') result += ind;
        result += line;
      }

      return result;
    }

    function generateNextLine(state, level) {
      return '\n' + common.repeat(' ', state.indent * level);
    }

    function testImplicitResolving(state, str) {
      var index, length, type;

      for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
        type = state.implicitTypes[index];

        if (type.resolve(str)) {
          return true;
        }
      }

      return false;
    } // [33] s-white ::= s-space | s-tab


    function isWhitespace(c) {
      return c === CHAR_SPACE || c === CHAR_TAB;
    } // Returns true if the character can be printed without escaping.
    // From YAML 1.2: "any allowed characters known to be non-printable
    // should also be escaped. [However,] This isn’t mandatory"
    // Derived from nb-char - \t - #x85 - #xA0 - #x2028 - #x2029.


    function isPrintable(c) {
      return 0x00020 <= c && c <= 0x00007E || 0x000A1 <= c && c <= 0x00D7FF && c !== 0x2028 && c !== 0x2029 || 0x0E000 <= c && c <= 0x00FFFD && c !== 0xFEFF
      /* BOM */
      || 0x10000 <= c && c <= 0x10FFFF;
    } // [34] ns-char ::= nb-char - s-white
    // [27] nb-char ::= c-printable - b-char - c-byte-order-mark
    // [26] b-char  ::= b-line-feed | b-carriage-return
    // [24] b-line-feed       ::=     #xA    /* LF */
    // [25] b-carriage-return ::=     #xD    /* CR */
    // [3]  c-byte-order-mark ::=     #xFEFF


    function isNsChar(c) {
      return isPrintable(c) && !isWhitespace(c) // byte-order-mark
      && c !== 0xFEFF // b-char
      && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
    } // Simplified test for values allowed after the first character in plain style.


    function isPlainSafe(c, prev) {
      // Uses a subset of nb-char - c-flow-indicator - ":" - "#"
      // where nb-char ::= c-printable - b-char - c-byte-order-mark.
      return isPrintable(c) && c !== 0xFEFF // - c-flow-indicator
      && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET // - ":" - "#"
      // /* An ns-char preceding */ "#"
      && c !== CHAR_COLON && (c !== CHAR_SHARP || prev && isNsChar(prev));
    } // Simplified test for values allowed as the first character in plain style.


    function isPlainSafeFirst(c) {
      // Uses a subset of ns-char - c-indicator
      // where ns-char = nb-char - s-white.
      return isPrintable(c) && c !== 0xFEFF && !isWhitespace(c) // - s-white
      // - (c-indicator ::=
      // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”
      && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “"”
      && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE // | “%” | “@” | “`”)
      && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
    } // Determines whether block indentation indicator is required.


    function needIndentIndicator(string) {
      var leadingSpaceRe = /^\n* /;
      return leadingSpaceRe.test(string);
    }

    var STYLE_PLAIN = 1,
        STYLE_SINGLE = 2,
        STYLE_LITERAL = 3,
        STYLE_FOLDED = 4,
        STYLE_DOUBLE = 5; // Determines which scalar styles are possible and returns the preferred style.
    // lineWidth = -1 => no limit.
    // Pre-conditions: str.length > 0.
    // Post-conditions:
    //    STYLE_PLAIN or STYLE_SINGLE => no \n are in the string.
    //    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).
    //    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).

    function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {
      var i;

      var _char3, prev_char;

      var hasLineBreak = false;
      var hasFoldableLine = false; // only checked if shouldTrackWidth

      var shouldTrackWidth = lineWidth !== -1;
      var previousLineBreak = -1; // count the first line correctly

      var plain = isPlainSafeFirst(string.charCodeAt(0)) && !isWhitespace(string.charCodeAt(string.length - 1));

      if (singleLineOnly) {
        // Case: no block styles.
        // Check for disallowed characters to rule out plain and single.
        for (i = 0; i < string.length; i++) {
          _char3 = string.charCodeAt(i);

          if (!isPrintable(_char3)) {
            return STYLE_DOUBLE;
          }

          prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
          plain = plain && isPlainSafe(_char3, prev_char);
        }
      } else {
        // Case: block styles permitted.
        for (i = 0; i < string.length; i++) {
          _char3 = string.charCodeAt(i);

          if (_char3 === CHAR_LINE_FEED) {
            hasLineBreak = true; // Check if any line can be folded.

            if (shouldTrackWidth) {
              hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
              i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';
              previousLineBreak = i;
            }
          } else if (!isPrintable(_char3)) {
            return STYLE_DOUBLE;
          }

          prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
          plain = plain && isPlainSafe(_char3, prev_char);
        } // in case the end is missing a \n


        hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';
      } // Although every style can represent \n without escaping, prefer block styles
      // for multiline, since they're more readable and they don't add empty lines.
      // Also prefer folding a super-long line.


      if (!hasLineBreak && !hasFoldableLine) {
        // Strings interpretable as another type have to be quoted;
        // e.g. the string 'true' vs. the boolean true.
        return plain && !testAmbiguousType(string) ? STYLE_PLAIN : STYLE_SINGLE;
      } // Edge case: block indentation indicator can only have one digit.


      if (indentPerLevel > 9 && needIndentIndicator(string)) {
        return STYLE_DOUBLE;
      } // At this point we know block styles are valid.
      // Prefer literal style unless we want to fold.


      return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
    } // Note: line breaking/folding is implemented for only the folded style.
    // NB. We drop the last trailing newline (if any) of a returned block scalar
    //  since the dumper adds its own newline. This always works:
    //    • No ending newline => unaffected; already using strip "-" chomping.
    //    • Ending newline    => removed then restored.
    //  Importantly, this keeps the "+" chomp indicator from gaining an extra line.


    function writeScalar(state, string, level, iskey) {
      state.dump = function () {
        if (string.length === 0) {
          return "''";
        }

        if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {
          return "'" + string + "'";
        }

        var indent = state.indent * Math.max(1, level); // no 0-indent scalars
        // As indentation gets deeper, let the width decrease monotonically
        // to the lower bound min(state.lineWidth, 40).
        // Note that this implies
        //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.
        //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.
        // This behaves better than a constant minimum width which disallows narrower options,
        // or an indent threshold which causes the width to suddenly increase.

        var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent); // Without knowing if keys are implicit/explicit, assume implicit for safety.

        var singleLineOnly = iskey // No block styles in flow mode.
        || state.flowLevel > -1 && level >= state.flowLevel;

        function testAmbiguity(string) {
          return testImplicitResolving(state, string);
        }

        switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {
          case STYLE_PLAIN:
            return string;

          case STYLE_SINGLE:
            return "'" + string.replace(/'/g, "''") + "'";

          case STYLE_LITERAL:
            return '|' + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));

          case STYLE_FOLDED:
            return '>' + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));

          case STYLE_DOUBLE:
            return '"' + escapeString(string, lineWidth) + '"';

          default:
            throw new YAMLException('impossible error: invalid scalar style');
        }
      }();
    } // Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.


    function blockHeader(string, indentPerLevel) {
      var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : ''; // note the special case: the string '\n' counts as a "trailing" empty line.

      var clip = string[string.length - 1] === '\n';
      var keep = clip && (string[string.length - 2] === '\n' || string === '\n');
      var chomp = keep ? '+' : clip ? '' : '-';
      return indentIndicator + chomp + '\n';
    } // (See the note for writeScalar.)


    function dropEndingNewline(string) {
      return string[string.length - 1] === '\n' ? string.slice(0, -1) : string;
    } // Note: a long line without a suitable break point will exceed the width limit.
    // Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.


    function foldString(string, width) {
      // In folded style, $k$ consecutive newlines output as $k+1$ newlines—
      // unless they're before or after a more-indented line, or at the very
      // beginning or end, in which case $k$ maps to $k$.
      // Therefore, parse each chunk as newline(s) followed by a content line.
      var lineRe = /(\n+)([^\n]*)/g; // first line (possibly an empty line)

      var result = function () {
        var nextLF = string.indexOf('\n');
        nextLF = nextLF !== -1 ? nextLF : string.length;
        lineRe.lastIndex = nextLF;
        return foldLine(string.slice(0, nextLF), width);
      }(); // If we haven't reached the first content line yet, don't add an extra \n.


      var prevMoreIndented = string[0] === '\n' || string[0] === ' ';
      var moreIndented; // rest of the lines

      var match;

      while (match = lineRe.exec(string)) {
        var prefix = match[1],
            line = match[2];
        moreIndented = line[0] === ' ';
        result += prefix + (!prevMoreIndented && !moreIndented && line !== '' ? '\n' : '') + foldLine(line, width);
        prevMoreIndented = moreIndented;
      }

      return result;
    } // Greedy line breaking.
    // Picks the longest line under the limit each time,
    // otherwise settles for the shortest line over the limit.
    // NB. More-indented lines *cannot* be folded, as that would add an extra \n.


    function foldLine(line, width) {
      if (line === '' || line[0] === ' ') return line; // Since a more-indented line adds a \n, breaks can't be followed by a space.

      var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.

      var match; // start is an inclusive index. end, curr, and next are exclusive.

      var start = 0,
          end,
          curr = 0,
          next = 0;
      var result = ''; // Invariants: 0 <= start <= length-1.
      //   0 <= curr <= next <= max(0, length-2). curr - start <= width.
      // Inside the loop:
      //   A match implies length >= 2, so curr and next are <= length-2.

      while (match = breakRe.exec(line)) {
        next = match.index; // maintain invariant: curr - start <= width

        if (next - start > width) {
          end = curr > start ? curr : next; // derive end <= length-2

          result += '\n' + line.slice(start, end); // skip the space that was output as \n

          start = end + 1; // derive start <= length-1
        }

        curr = next;
      } // By the invariants, start <= length-1, so there is something left over.
      // It is either the whole string or a part starting from non-whitespace.


      result += '\n'; // Insert a break if the remainder is too long and there is a break available.

      if (line.length - start > width && curr > start) {
        result += line.slice(start, curr) + '\n' + line.slice(curr + 1);
      } else {
        result += line.slice(start);
      }

      return result.slice(1); // drop extra \n joiner
    } // Escapes a double-quoted string.


    function escapeString(string) {
      var result = '';

      var _char4, nextChar;

      var escapeSeq;

      for (var i = 0; i < string.length; i++) {
        _char4 = string.charCodeAt(i); // Check for surrogate pairs (reference Unicode 3.0 section "3.7 Surrogates").

        if (_char4 >= 0xD800 && _char4 <= 0xDBFF
        /* high surrogate */
        ) {
            nextChar = string.charCodeAt(i + 1);

            if (nextChar >= 0xDC00 && nextChar <= 0xDFFF
            /* low surrogate */
            ) {
                // Combine the surrogate pair and store it escaped.
                result += encodeHex((_char4 - 0xD800) * 0x400 + nextChar - 0xDC00 + 0x10000); // Advance index one extra since we already used that char here.

                i++;
                continue;
              }
          }

        escapeSeq = ESCAPE_SEQUENCES[_char4];
        result += !escapeSeq && isPrintable(_char4) ? string[i] : escapeSeq || encodeHex(_char4);
      }

      return result;
    }

    function writeFlowSequence(state, level, object) {
      var _result = '',
          _tag = state.tag,
          index,
          length;

      for (index = 0, length = object.length; index < length; index += 1) {
        // Write only valid elements.
        if (writeNode(state, level, object[index], false, false)) {
          if (index !== 0) _result += ',' + (!state.condenseFlow ? ' ' : '');
          _result += state.dump;
        }
      }

      state.tag = _tag;
      state.dump = '[' + _result + ']';
    }

    function writeBlockSequence(state, level, object, compact) {
      var _result = '',
          _tag = state.tag,
          index,
          length;

      for (index = 0, length = object.length; index < length; index += 1) {
        // Write only valid elements.
        if (writeNode(state, level + 1, object[index], true, true)) {
          if (!compact || index !== 0) {
            _result += generateNextLine(state, level);
          }

          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            _result += '-';
          } else {
            _result += '- ';
          }

          _result += state.dump;
        }
      }

      state.tag = _tag;
      state.dump = _result || '[]'; // Empty sequence if no valid values.
    }

    function writeFlowMapping(state, level, object) {
      var _result = '',
          _tag = state.tag,
          objectKeyList = Object.keys(object),
          index,
          length,
          objectKey,
          objectValue,
          pairBuffer;

      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = '';
        if (index !== 0) pairBuffer += ', ';
        if (state.condenseFlow) pairBuffer += '"';
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];

        if (!writeNode(state, level, objectKey, false, false)) {
          continue; // Skip this pair because of invalid key;
        }

        if (state.dump.length > 1024) pairBuffer += '? ';
        pairBuffer += state.dump + (state.condenseFlow ? '"' : '') + ':' + (state.condenseFlow ? '' : ' ');

        if (!writeNode(state, level, objectValue, false, false)) {
          continue; // Skip this pair because of invalid value.
        }

        pairBuffer += state.dump; // Both key and value are valid.

        _result += pairBuffer;
      }

      state.tag = _tag;
      state.dump = '{' + _result + '}';
    }

    function writeBlockMapping(state, level, object, compact) {
      var _result = '',
          _tag = state.tag,
          objectKeyList = Object.keys(object),
          index,
          length,
          objectKey,
          objectValue,
          explicitPair,
          pairBuffer; // Allow sorting keys so that the output file is deterministic

      if (state.sortKeys === true) {
        // Default sorting
        objectKeyList.sort();
      } else if (typeof state.sortKeys === 'function') {
        // Custom sort function
        objectKeyList.sort(state.sortKeys);
      } else if (state.sortKeys) {
        // Something is wrong
        throw new YAMLException('sortKeys must be a boolean or a function');
      }

      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = '';

        if (!compact || index !== 0) {
          pairBuffer += generateNextLine(state, level);
        }

        objectKey = objectKeyList[index];
        objectValue = object[objectKey];

        if (!writeNode(state, level + 1, objectKey, true, true, true)) {
          continue; // Skip this pair because of invalid key.
        }

        explicitPair = state.tag !== null && state.tag !== '?' || state.dump && state.dump.length > 1024;

        if (explicitPair) {
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            pairBuffer += '?';
          } else {
            pairBuffer += '? ';
          }
        }

        pairBuffer += state.dump;

        if (explicitPair) {
          pairBuffer += generateNextLine(state, level);
        }

        if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
          continue; // Skip this pair because of invalid value.
        }

        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
          pairBuffer += ':';
        } else {
          pairBuffer += ': ';
        }

        pairBuffer += state.dump; // Both key and value are valid.

        _result += pairBuffer;
      }

      state.tag = _tag;
      state.dump = _result || '{}'; // Empty mapping if no valid pairs.
    }

    function detectType(state, object, explicit) {
      var _result, typeList, index, length, type, style;

      typeList = explicit ? state.explicitTypes : state.implicitTypes;

      for (index = 0, length = typeList.length; index < length; index += 1) {
        type = typeList[index];

        if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === 'object' && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
          state.tag = explicit ? type.tag : '?';

          if (type.represent) {
            style = state.styleMap[type.tag] || type.defaultStyle;

            if (_toString.call(type.represent) === '[object Function]') {
              _result = type.represent(object, style);
            } else if (_hasOwnProperty.call(type.represent, style)) {
              _result = type.represent[style](object, style);
            } else {
              throw new YAMLException('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');
            }

            state.dump = _result;
          }

          return true;
        }
      }

      return false;
    } // Serializes `object` and writes it to global `result`.
    // Returns true on success, or false on invalid object.
    //


    function writeNode(state, level, object, block, compact, iskey) {
      state.tag = null;
      state.dump = object;

      if (!detectType(state, object, false)) {
        detectType(state, object, true);
      }

      var type = _toString.call(state.dump);

      if (block) {
        block = state.flowLevel < 0 || state.flowLevel > level;
      }

      var objectOrArray = type === '[object Object]' || type === '[object Array]',
          duplicateIndex,
          duplicate;

      if (objectOrArray) {
        duplicateIndex = state.duplicates.indexOf(object);
        duplicate = duplicateIndex !== -1;
      }

      if (state.tag !== null && state.tag !== '?' || duplicate || state.indent !== 2 && level > 0) {
        compact = false;
      }

      if (duplicate && state.usedDuplicates[duplicateIndex]) {
        state.dump = '*ref_' + duplicateIndex;
      } else {
        if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
          state.usedDuplicates[duplicateIndex] = true;
        }

        if (type === '[object Object]') {
          if (block && Object.keys(state.dump).length !== 0) {
            writeBlockMapping(state, level, state.dump, compact);

            if (duplicate) {
              state.dump = '&ref_' + duplicateIndex + state.dump;
            }
          } else {
            writeFlowMapping(state, level, state.dump);

            if (duplicate) {
              state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
            }
          }
        } else if (type === '[object Array]') {
          var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level;

          if (block && state.dump.length !== 0) {
            writeBlockSequence(state, arrayLevel, state.dump, compact);

            if (duplicate) {
              state.dump = '&ref_' + duplicateIndex + state.dump;
            }
          } else {
            writeFlowSequence(state, arrayLevel, state.dump);

            if (duplicate) {
              state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
            }
          }
        } else if (type === '[object String]') {
          if (state.tag !== '?') {
            writeScalar(state, state.dump, level, iskey);
          }
        } else {
          if (state.skipInvalid) return false;
          throw new YAMLException('unacceptable kind of an object to dump ' + type);
        }

        if (state.tag !== null && state.tag !== '?') {
          state.dump = '!<' + state.tag + '> ' + state.dump;
        }
      }

      return true;
    }

    function getDuplicateReferences(object, state) {
      var objects = [],
          duplicatesIndexes = [],
          index,
          length;
      inspectNode(object, objects, duplicatesIndexes);

      for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
        state.duplicates.push(objects[duplicatesIndexes[index]]);
      }

      state.usedDuplicates = new Array(length);
    }

    function inspectNode(object, objects, duplicatesIndexes) {
      var objectKeyList, index, length;

      if (object !== null && typeof object === 'object') {
        index = objects.indexOf(object);

        if (index !== -1) {
          if (duplicatesIndexes.indexOf(index) === -1) {
            duplicatesIndexes.push(index);
          }
        } else {
          objects.push(object);

          if (Array.isArray(object)) {
            for (index = 0, length = object.length; index < length; index += 1) {
              inspectNode(object[index], objects, duplicatesIndexes);
            }
          } else {
            objectKeyList = Object.keys(object);

            for (index = 0, length = objectKeyList.length; index < length; index += 1) {
              inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
            }
          }
        }
      }
    }

    function dump(input, options) {
      options = options || {};
      var state = new State(options);
      if (!state.noRefs) getDuplicateReferences(input, state);
      if (writeNode(state, 0, input, true, true)) return state.dump + '\n';
      return '';
    }

    function safeDump(input, options) {
      return dump(input, common.extend({
        schema: DEFAULT_SAFE_SCHEMA
      }, options));
    }

    module.exports.dump = dump;
    module.exports.safeDump = safeDump;
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/exception.js":
  /*!*******************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/exception.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlExceptionJs(module, exports, __webpack_require__) {
    "use strict"; // YAML error class. http://stackoverflow.com/questions/8458984
    //

    function YAMLException(reason, mark) {
      // Super constructor
      Error.call(this);
      this.name = 'YAMLException';
      this.reason = reason;
      this.mark = mark;
      this.message = (this.reason || '(unknown reason)') + (this.mark ? ' ' + this.mark.toString() : ''); // Include stack trace in error object

      if (Error.captureStackTrace) {
        // Chrome and NodeJS
        Error.captureStackTrace(this, this.constructor);
      } else {
        // FF, IE 10+ and Safari 6+. Fallback for others
        this.stack = new Error().stack || '';
      }
    } // Inherit from Error


    YAMLException.prototype = Object.create(Error.prototype);
    YAMLException.prototype.constructor = YAMLException;

    YAMLException.prototype.toString = function toString(compact) {
      var result = this.name + ': ';
      result += this.reason || '(unknown reason)';

      if (!compact && this.mark) {
        result += ' ' + this.mark.toString();
      }

      return result;
    };

    module.exports = YAMLException;
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/loader.js":
  /*!****************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/loader.js ***!
    \****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlLoaderJs(module, exports, __webpack_require__) {
    "use strict";
    /*eslint-disable max-len,no-use-before-define*/

    var common = __webpack_require__(
    /*! ./common */
    "./node_modules/js-yaml/lib/js-yaml/common.js");

    var YAMLException = __webpack_require__(
    /*! ./exception */
    "./node_modules/js-yaml/lib/js-yaml/exception.js");

    var Mark = __webpack_require__(
    /*! ./mark */
    "./node_modules/js-yaml/lib/js-yaml/mark.js");

    var DEFAULT_SAFE_SCHEMA = __webpack_require__(
    /*! ./schema/default_safe */
    "./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js");

    var DEFAULT_FULL_SCHEMA = __webpack_require__(
    /*! ./schema/default_full */
    "./node_modules/js-yaml/lib/js-yaml/schema/default_full.js");

    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CONTEXT_FLOW_IN = 1;
    var CONTEXT_FLOW_OUT = 2;
    var CONTEXT_BLOCK_IN = 3;
    var CONTEXT_BLOCK_OUT = 4;
    var CHOMPING_CLIP = 1;
    var CHOMPING_STRIP = 2;
    var CHOMPING_KEEP = 3;
    var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
    var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
    var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
    var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;

    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }

    function is_EOL(c) {
      return c === 0x0A
      /* LF */
      || c === 0x0D
      /* CR */
      ;
    }

    function is_WHITE_SPACE(c) {
      return c === 0x09
      /* Tab */
      || c === 0x20
      /* Space */
      ;
    }

    function is_WS_OR_EOL(c) {
      return c === 0x09
      /* Tab */
      || c === 0x20
      /* Space */
      || c === 0x0A
      /* LF */
      || c === 0x0D
      /* CR */
      ;
    }

    function is_FLOW_INDICATOR(c) {
      return c === 0x2C
      /* , */
      || c === 0x5B
      /* [ */
      || c === 0x5D
      /* ] */
      || c === 0x7B
      /* { */
      || c === 0x7D
      /* } */
      ;
    }

    function fromHexCode(c) {
      var lc;

      if (0x30
      /* 0 */
      <= c && c <= 0x39
      /* 9 */
      ) {
        return c - 0x30;
      }
      /*eslint-disable no-bitwise*/


      lc = c | 0x20;

      if (0x61
      /* a */
      <= lc && lc <= 0x66
      /* f */
      ) {
        return lc - 0x61 + 10;
      }

      return -1;
    }

    function escapedHexLen(c) {
      if (c === 0x78
      /* x */
      ) {
          return 2;
        }

      if (c === 0x75
      /* u */
      ) {
          return 4;
        }

      if (c === 0x55
      /* U */
      ) {
          return 8;
        }

      return 0;
    }

    function fromDecimalCode(c) {
      if (0x30
      /* 0 */
      <= c && c <= 0x39
      /* 9 */
      ) {
        return c - 0x30;
      }

      return -1;
    }

    function simpleEscapeSequence(c) {
      /* eslint-disable indent */
      return c === 0x30
      /* 0 */
      ? '\x00' : c === 0x61
      /* a */
      ? '\x07' : c === 0x62
      /* b */
      ? '\x08' : c === 0x74
      /* t */
      ? '\x09' : c === 0x09
      /* Tab */
      ? '\x09' : c === 0x6E
      /* n */
      ? '\x0A' : c === 0x76
      /* v */
      ? '\x0B' : c === 0x66
      /* f */
      ? '\x0C' : c === 0x72
      /* r */
      ? '\x0D' : c === 0x65
      /* e */
      ? '\x1B' : c === 0x20
      /* Space */
      ? ' ' : c === 0x22
      /* " */
      ? '\x22' : c === 0x2F
      /* / */
      ? '/' : c === 0x5C
      /* \ */
      ? '\x5C' : c === 0x4E
      /* N */
      ? '\x85' : c === 0x5F
      /* _ */
      ? '\xA0' : c === 0x4C
      /* L */
      ? "\u2028" : c === 0x50
      /* P */
      ? "\u2029" : '';
    }

    function charFromCodepoint(c) {
      if (c <= 0xFFFF) {
        return String.fromCharCode(c);
      } // Encode UTF-16 surrogate pair
      // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF


      return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);
    }

    var simpleEscapeCheck = new Array(256); // integer, for fast access

    var simpleEscapeMap = new Array(256);

    for (var i = 0; i < 256; i++) {
      simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
      simpleEscapeMap[i] = simpleEscapeSequence(i);
    }

    function State(input, options) {
      this.input = input;
      this.filename = options['filename'] || null;
      this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;
      this.onWarning = options['onWarning'] || null;
      this.legacy = options['legacy'] || false;
      this.json = options['json'] || false;
      this.listener = options['listener'] || null;
      this.implicitTypes = this.schema.compiledImplicit;
      this.typeMap = this.schema.compiledTypeMap;
      this.length = input.length;
      this.position = 0;
      this.line = 0;
      this.lineStart = 0;
      this.lineIndent = 0;
      this.documents = [];
      /*
      this.version;
      this.checkLineBreaks;
      this.tagMap;
      this.anchorMap;
      this.tag;
      this.anchor;
      this.kind;
      this.result;*/
    }

    function generateError(state, message) {
      return new YAMLException(message, new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart));
    }

    function throwError(state, message) {
      throw generateError(state, message);
    }

    function throwWarning(state, message) {
      if (state.onWarning) {
        state.onWarning.call(null, generateError(state, message));
      }
    }

    var directiveHandlers = {
      YAML: function handleYamlDirective(state, name, args) {
        var match, major, minor;

        if (state.version !== null) {
          throwError(state, 'duplication of %YAML directive');
        }

        if (args.length !== 1) {
          throwError(state, 'YAML directive accepts exactly one argument');
        }

        match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);

        if (match === null) {
          throwError(state, 'ill-formed argument of the YAML directive');
        }

        major = parseInt(match[1], 10);
        minor = parseInt(match[2], 10);

        if (major !== 1) {
          throwError(state, 'unacceptable YAML version of the document');
        }

        state.version = args[0];
        state.checkLineBreaks = minor < 2;

        if (minor !== 1 && minor !== 2) {
          throwWarning(state, 'unsupported YAML version of the document');
        }
      },
      TAG: function handleTagDirective(state, name, args) {
        var handle, prefix;

        if (args.length !== 2) {
          throwError(state, 'TAG directive accepts exactly two arguments');
        }

        handle = args[0];
        prefix = args[1];

        if (!PATTERN_TAG_HANDLE.test(handle)) {
          throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
        }

        if (_hasOwnProperty.call(state.tagMap, handle)) {
          throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
        }

        if (!PATTERN_TAG_URI.test(prefix)) {
          throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
        }

        state.tagMap[handle] = prefix;
      }
    };

    function captureSegment(state, start, end, checkJson) {
      var _position, _length, _character, _result;

      if (start < end) {
        _result = state.input.slice(start, end);

        if (checkJson) {
          for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
            _character = _result.charCodeAt(_position);

            if (!(_character === 0x09 || 0x20 <= _character && _character <= 0x10FFFF)) {
              throwError(state, 'expected valid JSON character');
            }
          }
        } else if (PATTERN_NON_PRINTABLE.test(_result)) {
          throwError(state, 'the stream contains non-printable characters');
        }

        state.result += _result;
      }
    }

    function mergeMappings(state, destination, source, overridableKeys) {
      var sourceKeys, key, index, quantity;

      if (!common.isObject(source)) {
        throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
      }

      sourceKeys = Object.keys(source);

      for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
        key = sourceKeys[index];

        if (!_hasOwnProperty.call(destination, key)) {
          destination[key] = source[key];
          overridableKeys[key] = true;
        }
      }
    }

    function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
      var index, quantity; // The output is a plain object here, so keys can only be strings.
      // We need to convert keyNode to a string, but doing so can hang the process
      // (deeply nested arrays that explode exponentially using aliases).

      if (Array.isArray(keyNode)) {
        keyNode = Array.prototype.slice.call(keyNode);

        for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
          if (Array.isArray(keyNode[index])) {
            throwError(state, 'nested arrays are not supported inside keys');
          }

          if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {
            keyNode[index] = '[object Object]';
          }
        }
      } // Avoid code execution in load() via toString property
      // (still use its own toString for arrays, timestamps,
      // and whatever user schema extensions happen to have @@toStringTag)


      if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {
        keyNode = '[object Object]';
      }

      keyNode = String(keyNode);

      if (_result === null) {
        _result = {};
      }

      if (keyTag === 'tag:yaml.org,2002:merge') {
        if (Array.isArray(valueNode)) {
          for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
            mergeMappings(state, _result, valueNode[index], overridableKeys);
          }
        } else {
          mergeMappings(state, _result, valueNode, overridableKeys);
        }
      } else {
        if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
          state.line = startLine || state.line;
          state.position = startPos || state.position;
          throwError(state, 'duplicated mapping key');
        }

        _result[keyNode] = valueNode;
        delete overridableKeys[keyNode];
      }

      return _result;
    }

    function readLineBreak(state) {
      var ch;
      ch = state.input.charCodeAt(state.position);

      if (ch === 0x0A
      /* LF */
      ) {
          state.position++;
        } else if (ch === 0x0D
      /* CR */
      ) {
          state.position++;

          if (state.input.charCodeAt(state.position) === 0x0A
          /* LF */
          ) {
              state.position++;
            }
        } else {
        throwError(state, 'a line break is expected');
      }

      state.line += 1;
      state.lineStart = state.position;
    }

    function skipSeparationSpace(state, allowComments, checkIndent) {
      var lineBreaks = 0,
          ch = state.input.charCodeAt(state.position);

      while (ch !== 0) {
        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }

        if (allowComments && ch === 0x23
        /* # */
        ) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (ch !== 0x0A
            /* LF */
            && ch !== 0x0D
            /* CR */
            && ch !== 0);
          }

        if (is_EOL(ch)) {
          readLineBreak(state);
          ch = state.input.charCodeAt(state.position);
          lineBreaks++;
          state.lineIndent = 0;

          while (ch === 0x20
          /* Space */
          ) {
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
          }
        } else {
          break;
        }
      }

      if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
        throwWarning(state, 'deficient indentation');
      }

      return lineBreaks;
    }

    function testDocumentSeparator(state) {
      var _position = state.position,
          ch;
      ch = state.input.charCodeAt(_position); // Condition state.position === state.lineStart is tested
      // in parent on each call, for efficiency. No needs to test here again.

      if ((ch === 0x2D
      /* - */
      || ch === 0x2E
      /* . */
      ) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
        _position += 3;
        ch = state.input.charCodeAt(_position);

        if (ch === 0 || is_WS_OR_EOL(ch)) {
          return true;
        }
      }

      return false;
    }

    function writeFoldedLines(state, count) {
      if (count === 1) {
        state.result += ' ';
      } else if (count > 1) {
        state.result += common.repeat('\n', count - 1);
      }
    }

    function readPlainScalar(state, nodeIndent, withinFlowCollection) {
      var preceding,
          following,
          captureStart,
          captureEnd,
          hasPendingContent,
          _line,
          _lineStart,
          _lineIndent,
          _kind = state.kind,
          _result = state.result,
          ch;

      ch = state.input.charCodeAt(state.position);

      if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 0x23
      /* # */
      || ch === 0x26
      /* & */
      || ch === 0x2A
      /* * */
      || ch === 0x21
      /* ! */
      || ch === 0x7C
      /* | */
      || ch === 0x3E
      /* > */
      || ch === 0x27
      /* ' */
      || ch === 0x22
      /* " */
      || ch === 0x25
      /* % */
      || ch === 0x40
      /* @ */
      || ch === 0x60
      /* ` */
      ) {
          return false;
        }

      if (ch === 0x3F
      /* ? */
      || ch === 0x2D
      /* - */
      ) {
          following = state.input.charCodeAt(state.position + 1);

          if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
            return false;
          }
        }

      state.kind = 'scalar';
      state.result = '';
      captureStart = captureEnd = state.position;
      hasPendingContent = false;

      while (ch !== 0) {
        if (ch === 0x3A
        /* : */
        ) {
            following = state.input.charCodeAt(state.position + 1);

            if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
              break;
            }
          } else if (ch === 0x23
        /* # */
        ) {
            preceding = state.input.charCodeAt(state.position - 1);

            if (is_WS_OR_EOL(preceding)) {
              break;
            }
          } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
          break;
        } else if (is_EOL(ch)) {
          _line = state.line;
          _lineStart = state.lineStart;
          _lineIndent = state.lineIndent;
          skipSeparationSpace(state, false, -1);

          if (state.lineIndent >= nodeIndent) {
            hasPendingContent = true;
            ch = state.input.charCodeAt(state.position);
            continue;
          } else {
            state.position = captureEnd;
            state.line = _line;
            state.lineStart = _lineStart;
            state.lineIndent = _lineIndent;
            break;
          }
        }

        if (hasPendingContent) {
          captureSegment(state, captureStart, captureEnd, false);
          writeFoldedLines(state, state.line - _line);
          captureStart = captureEnd = state.position;
          hasPendingContent = false;
        }

        if (!is_WHITE_SPACE(ch)) {
          captureEnd = state.position + 1;
        }

        ch = state.input.charCodeAt(++state.position);
      }

      captureSegment(state, captureStart, captureEnd, false);

      if (state.result) {
        return true;
      }

      state.kind = _kind;
      state.result = _result;
      return false;
    }

    function readSingleQuotedScalar(state, nodeIndent) {
      var ch, captureStart, captureEnd;
      ch = state.input.charCodeAt(state.position);

      if (ch !== 0x27
      /* ' */
      ) {
          return false;
        }

      state.kind = 'scalar';
      state.result = '';
      state.position++;
      captureStart = captureEnd = state.position;

      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 0x27
        /* ' */
        ) {
            captureSegment(state, captureStart, state.position, true);
            ch = state.input.charCodeAt(++state.position);

            if (ch === 0x27
            /* ' */
            ) {
                captureStart = state.position;
                state.position++;
                captureEnd = state.position;
              } else {
              return true;
            }
          } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, 'unexpected end of the document within a single quoted scalar');
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }

      throwError(state, 'unexpected end of the stream within a single quoted scalar');
    }

    function readDoubleQuotedScalar(state, nodeIndent) {
      var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
      ch = state.input.charCodeAt(state.position);

      if (ch !== 0x22
      /* " */
      ) {
          return false;
        }

      state.kind = 'scalar';
      state.result = '';
      state.position++;
      captureStart = captureEnd = state.position;

      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 0x22
        /* " */
        ) {
            captureSegment(state, captureStart, state.position, true);
            state.position++;
            return true;
          } else if (ch === 0x5C
        /* \ */
        ) {
            captureSegment(state, captureStart, state.position, true);
            ch = state.input.charCodeAt(++state.position);

            if (is_EOL(ch)) {
              skipSeparationSpace(state, false, nodeIndent); // TODO: rework to inline fn with no type cast?
            } else if (ch < 256 && simpleEscapeCheck[ch]) {
              state.result += simpleEscapeMap[ch];
              state.position++;
            } else if ((tmp = escapedHexLen(ch)) > 0) {
              hexLength = tmp;
              hexResult = 0;

              for (; hexLength > 0; hexLength--) {
                ch = state.input.charCodeAt(++state.position);

                if ((tmp = fromHexCode(ch)) >= 0) {
                  hexResult = (hexResult << 4) + tmp;
                } else {
                  throwError(state, 'expected hexadecimal character');
                }
              }

              state.result += charFromCodepoint(hexResult);
              state.position++;
            } else {
              throwError(state, 'unknown escape sequence');
            }

            captureStart = captureEnd = state.position;
          } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, 'unexpected end of the document within a double quoted scalar');
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }

      throwError(state, 'unexpected end of the stream within a double quoted scalar');
    }

    function readFlowCollection(state, nodeIndent) {
      var readNext = true,
          _line,
          _tag = state.tag,
          _result,
          _anchor = state.anchor,
          following,
          terminator,
          isPair,
          isExplicitPair,
          isMapping,
          overridableKeys = {},
          keyNode,
          keyTag,
          valueNode,
          ch;

      ch = state.input.charCodeAt(state.position);

      if (ch === 0x5B
      /* [ */
      ) {
          terminator = 0x5D;
          /* ] */

          isMapping = false;
          _result = [];
        } else if (ch === 0x7B
      /* { */
      ) {
          terminator = 0x7D;
          /* } */

          isMapping = true;
          _result = {};
        } else {
        return false;
      }

      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }

      ch = state.input.charCodeAt(++state.position);

      while (ch !== 0) {
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);

        if (ch === terminator) {
          state.position++;
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = isMapping ? 'mapping' : 'sequence';
          state.result = _result;
          return true;
        } else if (!readNext) {
          throwError(state, 'missed comma between flow collection entries');
        }

        keyTag = keyNode = valueNode = null;
        isPair = isExplicitPair = false;

        if (ch === 0x3F
        /* ? */
        ) {
            following = state.input.charCodeAt(state.position + 1);

            if (is_WS_OR_EOL(following)) {
              isPair = isExplicitPair = true;
              state.position++;
              skipSeparationSpace(state, true, nodeIndent);
            }
          }

        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
        keyTag = state.tag;
        keyNode = state.result;
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);

        if ((isExplicitPair || state.line === _line) && ch === 0x3A
        /* : */
        ) {
            isPair = true;
            ch = state.input.charCodeAt(++state.position);
            skipSeparationSpace(state, true, nodeIndent);
            composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
            valueNode = state.result;
          }

        if (isMapping) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);
        } else if (isPair) {
          _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));
        } else {
          _result.push(keyNode);
        }

        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);

        if (ch === 0x2C
        /* , */
        ) {
            readNext = true;
            ch = state.input.charCodeAt(++state.position);
          } else {
          readNext = false;
        }
      }

      throwError(state, 'unexpected end of the stream within a flow collection');
    }

    function readBlockScalar(state, nodeIndent) {
      var captureStart,
          folding,
          chomping = CHOMPING_CLIP,
          didReadContent = false,
          detectedIndent = false,
          textIndent = nodeIndent,
          emptyLines = 0,
          atMoreIndented = false,
          tmp,
          ch;
      ch = state.input.charCodeAt(state.position);

      if (ch === 0x7C
      /* | */
      ) {
          folding = false;
        } else if (ch === 0x3E
      /* > */
      ) {
          folding = true;
        } else {
        return false;
      }

      state.kind = 'scalar';
      state.result = '';

      while (ch !== 0) {
        ch = state.input.charCodeAt(++state.position);

        if (ch === 0x2B
        /* + */
        || ch === 0x2D
        /* - */
        ) {
            if (CHOMPING_CLIP === chomping) {
              chomping = ch === 0x2B
              /* + */
              ? CHOMPING_KEEP : CHOMPING_STRIP;
            } else {
              throwError(state, 'repeat of a chomping mode identifier');
            }
          } else if ((tmp = fromDecimalCode(ch)) >= 0) {
          if (tmp === 0) {
            throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
          } else if (!detectedIndent) {
            textIndent = nodeIndent + tmp - 1;
            detectedIndent = true;
          } else {
            throwError(state, 'repeat of an indentation width identifier');
          }
        } else {
          break;
        }
      }

      if (is_WHITE_SPACE(ch)) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (is_WHITE_SPACE(ch));

        if (ch === 0x23
        /* # */
        ) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (!is_EOL(ch) && ch !== 0);
          }
      }

      while (ch !== 0) {
        readLineBreak(state);
        state.lineIndent = 0;
        ch = state.input.charCodeAt(state.position);

        while ((!detectedIndent || state.lineIndent < textIndent) && ch === 0x20
        /* Space */
        ) {
          state.lineIndent++;
          ch = state.input.charCodeAt(++state.position);
        }

        if (!detectedIndent && state.lineIndent > textIndent) {
          textIndent = state.lineIndent;
        }

        if (is_EOL(ch)) {
          emptyLines++;
          continue;
        } // End of the scalar.


        if (state.lineIndent < textIndent) {
          // Perform the chomping.
          if (chomping === CHOMPING_KEEP) {
            state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
          } else if (chomping === CHOMPING_CLIP) {
            if (didReadContent) {
              // i.e. only if the scalar is not empty.
              state.result += '\n';
            }
          } // Break this `while` cycle and go to the funciton's epilogue.


          break;
        } // Folded style: use fancy rules to handle line breaks.


        if (folding) {
          // Lines starting with white space characters (more-indented lines) are not folded.
          if (is_WHITE_SPACE(ch)) {
            atMoreIndented = true; // except for the first content line (cf. Example 8.1)

            state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines); // End of more-indented block.
          } else if (atMoreIndented) {
            atMoreIndented = false;
            state.result += common.repeat('\n', emptyLines + 1); // Just one line break - perceive as the same line.
          } else if (emptyLines === 0) {
            if (didReadContent) {
              // i.e. only if we have already read some scalar content.
              state.result += ' ';
            } // Several line breaks - perceive as different lines.

          } else {
            state.result += common.repeat('\n', emptyLines);
          } // Literal style: just add exact number of line breaks between content lines.

        } else {
          // Keep all line breaks except the header line break.
          state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
        }

        didReadContent = true;
        detectedIndent = true;
        emptyLines = 0;
        captureStart = state.position;

        while (!is_EOL(ch) && ch !== 0) {
          ch = state.input.charCodeAt(++state.position);
        }

        captureSegment(state, captureStart, state.position, false);
      }

      return true;
    }

    function readBlockSequence(state, nodeIndent) {
      var _line,
          _tag = state.tag,
          _anchor = state.anchor,
          _result = [],
          following,
          detected = false,
          ch;

      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }

      ch = state.input.charCodeAt(state.position);

      while (ch !== 0) {
        if (ch !== 0x2D
        /* - */
        ) {
            break;
          }

        following = state.input.charCodeAt(state.position + 1);

        if (!is_WS_OR_EOL(following)) {
          break;
        }

        detected = true;
        state.position++;

        if (skipSeparationSpace(state, true, -1)) {
          if (state.lineIndent <= nodeIndent) {
            _result.push(null);

            ch = state.input.charCodeAt(state.position);
            continue;
          }
        }

        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);

        _result.push(state.result);

        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);

        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
          throwError(state, 'bad indentation of a sequence entry');
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }

      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = 'sequence';
        state.result = _result;
        return true;
      }

      return false;
    }

    function readBlockMapping(state, nodeIndent, flowIndent) {
      var following,
          allowCompact,
          _line,
          _pos,
          _tag = state.tag,
          _anchor = state.anchor,
          _result = {},
          overridableKeys = {},
          keyTag = null,
          keyNode = null,
          valueNode = null,
          atExplicitKey = false,
          detected = false,
          ch;

      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }

      ch = state.input.charCodeAt(state.position);

      while (ch !== 0) {
        following = state.input.charCodeAt(state.position + 1);
        _line = state.line; // Save the current line.

        _pos = state.position; //
        // Explicit notation case. There are two separate blocks:
        // first for the key (denoted by "?") and second for the value (denoted by ":")
        //

        if ((ch === 0x3F
        /* ? */
        || ch === 0x3A
        /* : */
        ) && is_WS_OR_EOL(following)) {
          if (ch === 0x3F
          /* ? */
          ) {
              if (atExplicitKey) {
                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
                keyTag = keyNode = valueNode = null;
              }

              detected = true;
              atExplicitKey = true;
              allowCompact = true;
            } else if (atExplicitKey) {
            // i.e. 0x3A/* : */ === character after the explicit key.
            atExplicitKey = false;
            allowCompact = true;
          } else {
            throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');
          }

          state.position += 1;
          ch = following; //
          // Implicit notation case. Flow-style node as the key first, then ":", and the value.
          //
        } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
          if (state.line === _line) {
            ch = state.input.charCodeAt(state.position);

            while (is_WHITE_SPACE(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }

            if (ch === 0x3A
            /* : */
            ) {
                ch = state.input.charCodeAt(++state.position);

                if (!is_WS_OR_EOL(ch)) {
                  throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
                }

                if (atExplicitKey) {
                  storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
                  keyTag = keyNode = valueNode = null;
                }

                detected = true;
                atExplicitKey = false;
                allowCompact = false;
                keyTag = state.tag;
                keyNode = state.result;
              } else if (detected) {
              throwError(state, 'can not read an implicit mapping pair; a colon is missed');
            } else {
              state.tag = _tag;
              state.anchor = _anchor;
              return true; // Keep the result of `composeNode`.
            }
          } else if (detected) {
            throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');
          } else {
            state.tag = _tag;
            state.anchor = _anchor;
            return true; // Keep the result of `composeNode`.
          }
        } else {
            break; // Reading is done. Go to the epilogue.
          } //
        // Common reading code for both explicit and implicit notations.
        //


        if (state.line === _line || state.lineIndent > nodeIndent) {
          if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
            if (atExplicitKey) {
              keyNode = state.result;
            } else {
              valueNode = state.result;
            }
          }

          if (!atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);
            keyTag = keyNode = valueNode = null;
          }

          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
        }

        if (state.lineIndent > nodeIndent && ch !== 0) {
          throwError(state, 'bad indentation of a mapping entry');
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      } //
      // Epilogue.
      //
      // Special case: last mapping's node contains only the key in explicit notation.


      if (atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
      } // Expose the resulting mapping.


      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = 'mapping';
        state.result = _result;
      }

      return detected;
    }

    function readTagProperty(state) {
      var _position,
          isVerbatim = false,
          isNamed = false,
          tagHandle,
          tagName,
          ch;

      ch = state.input.charCodeAt(state.position);
      if (ch !== 0x21
      /* ! */
      ) return false;

      if (state.tag !== null) {
        throwError(state, 'duplication of a tag property');
      }

      ch = state.input.charCodeAt(++state.position);

      if (ch === 0x3C
      /* < */
      ) {
          isVerbatim = true;
          ch = state.input.charCodeAt(++state.position);
        } else if (ch === 0x21
      /* ! */
      ) {
          isNamed = true;
          tagHandle = '!!';
          ch = state.input.charCodeAt(++state.position);
        } else {
        tagHandle = '!';
      }

      _position = state.position;

      if (isVerbatim) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && ch !== 0x3E
        /* > */
        );

        if (state.position < state.length) {
          tagName = state.input.slice(_position, state.position);
          ch = state.input.charCodeAt(++state.position);
        } else {
          throwError(state, 'unexpected end of the stream within a verbatim tag');
        }
      } else {
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          if (ch === 0x21
          /* ! */
          ) {
              if (!isNamed) {
                tagHandle = state.input.slice(_position - 1, state.position + 1);

                if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
                  throwError(state, 'named tag handle cannot contain such characters');
                }

                isNamed = true;
                _position = state.position + 1;
              } else {
                throwError(state, 'tag suffix cannot contain exclamation marks');
              }
            }

          ch = state.input.charCodeAt(++state.position);
        }

        tagName = state.input.slice(_position, state.position);

        if (PATTERN_FLOW_INDICATORS.test(tagName)) {
          throwError(state, 'tag suffix cannot contain flow indicator characters');
        }
      }

      if (tagName && !PATTERN_TAG_URI.test(tagName)) {
        throwError(state, 'tag name cannot contain such characters: ' + tagName);
      }

      if (isVerbatim) {
        state.tag = tagName;
      } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
        state.tag = state.tagMap[tagHandle] + tagName;
      } else if (tagHandle === '!') {
        state.tag = '!' + tagName;
      } else if (tagHandle === '!!') {
        state.tag = 'tag:yaml.org,2002:' + tagName;
      } else {
        throwError(state, 'undeclared tag handle "' + tagHandle + '"');
      }

      return true;
    }

    function readAnchorProperty(state) {
      var _position, ch;

      ch = state.input.charCodeAt(state.position);
      if (ch !== 0x26
      /* & */
      ) return false;

      if (state.anchor !== null) {
        throwError(state, 'duplication of an anchor property');
      }

      ch = state.input.charCodeAt(++state.position);
      _position = state.position;

      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      if (state.position === _position) {
        throwError(state, 'name of an anchor node must contain at least one character');
      }

      state.anchor = state.input.slice(_position, state.position);
      return true;
    }

    function readAlias(state) {
      var _position, alias, ch;

      ch = state.input.charCodeAt(state.position);
      if (ch !== 0x2A
      /* * */
      ) return false;
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;

      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      if (state.position === _position) {
        throwError(state, 'name of an alias node must contain at least one character');
      }

      alias = state.input.slice(_position, state.position);

      if (!state.anchorMap.hasOwnProperty(alias)) {
        throwError(state, 'unidentified alias "' + alias + '"');
      }

      state.result = state.anchorMap[alias];
      skipSeparationSpace(state, true, -1);
      return true;
    }

    function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
      var allowBlockStyles,
          allowBlockScalars,
          allowBlockCollections,
          indentStatus = 1,
          // 1: this>parent, 0: this=parent, -1: this<parent
      atNewLine = false,
          hasContent = false,
          typeIndex,
          typeQuantity,
          type,
          flowIndent,
          blockIndent;

      if (state.listener !== null) {
        state.listener('open', state);
      }

      state.tag = null;
      state.anchor = null;
      state.kind = null;
      state.result = null;
      allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;

      if (allowToSeek) {
        if (skipSeparationSpace(state, true, -1)) {
          atNewLine = true;

          if (state.lineIndent > parentIndent) {
            indentStatus = 1;
          } else if (state.lineIndent === parentIndent) {
            indentStatus = 0;
          } else if (state.lineIndent < parentIndent) {
            indentStatus = -1;
          }
        }
      }

      if (indentStatus === 1) {
        while (readTagProperty(state) || readAnchorProperty(state)) {
          if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            allowBlockCollections = allowBlockStyles;

            if (state.lineIndent > parentIndent) {
              indentStatus = 1;
            } else if (state.lineIndent === parentIndent) {
              indentStatus = 0;
            } else if (state.lineIndent < parentIndent) {
              indentStatus = -1;
            }
          } else {
            allowBlockCollections = false;
          }
        }
      }

      if (allowBlockCollections) {
        allowBlockCollections = atNewLine || allowCompact;
      }

      if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
        if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
          flowIndent = parentIndent;
        } else {
          flowIndent = parentIndent + 1;
        }

        blockIndent = state.position - state.lineStart;

        if (indentStatus === 1) {
          if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
            hasContent = true;
          } else {
            if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
              hasContent = true;
            } else if (readAlias(state)) {
              hasContent = true;

              if (state.tag !== null || state.anchor !== null) {
                throwError(state, 'alias node should not have any properties');
              }
            } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
              hasContent = true;

              if (state.tag === null) {
                state.tag = '?';
              }
            }

            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        } else if (indentStatus === 0) {
          // Special case: block sequences are allowed to have same indentation level as the parent.
          // http://www.yaml.org/spec/1.2/spec.html#id2799784
          hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
        }
      }

      if (state.tag !== null && state.tag !== '!') {
        if (state.tag === '?') {
          // Implicit resolving is not allowed for non-scalar types, and '?'
          // non-specific tag is only automatically assigned to plain scalars.
          //
          // We only need to check kind conformity in case user explicitly assigns '?'
          // tag, for example like this: "!<?> [0]"
          //
          if (state.result !== null && state.kind !== 'scalar') {
            throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
          }

          for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
            type = state.implicitTypes[typeIndex];

            if (type.resolve(state.result)) {
              // `state.result` updated in resolver if matched
              state.result = type.construct(state.result);
              state.tag = type.tag;

              if (state.anchor !== null) {
                state.anchorMap[state.anchor] = state.result;
              }

              break;
            }
          }
        } else if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) {
          type = state.typeMap[state.kind || 'fallback'][state.tag];

          if (state.result !== null && type.kind !== state.kind) {
            throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
          }

          if (!type.resolve(state.result)) {
            // `state.result` updated in resolver if matched
            throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
          } else {
            state.result = type.construct(state.result);

            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        } else {
          throwError(state, 'unknown tag !<' + state.tag + '>');
        }
      }

      if (state.listener !== null) {
        state.listener('close', state);
      }

      return state.tag !== null || state.anchor !== null || hasContent;
    }

    function readDocument(state) {
      var documentStart = state.position,
          _position,
          directiveName,
          directiveArgs,
          hasDirectives = false,
          ch;

      state.version = null;
      state.checkLineBreaks = state.legacy;
      state.tagMap = {};
      state.anchorMap = {};

      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);

        if (state.lineIndent > 0 || ch !== 0x25
        /* % */
        ) {
            break;
          }

        hasDirectives = true;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;

        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }

        directiveName = state.input.slice(_position, state.position);
        directiveArgs = [];

        if (directiveName.length < 1) {
          throwError(state, 'directive name must not be less than one character in length');
        }

        while (ch !== 0) {
          while (is_WHITE_SPACE(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }

          if (ch === 0x23
          /* # */
          ) {
              do {
                ch = state.input.charCodeAt(++state.position);
              } while (ch !== 0 && !is_EOL(ch));

              break;
            }

          if (is_EOL(ch)) break;
          _position = state.position;

          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }

          directiveArgs.push(state.input.slice(_position, state.position));
        }

        if (ch !== 0) readLineBreak(state);

        if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
          directiveHandlers[directiveName](state, directiveName, directiveArgs);
        } else {
          throwWarning(state, 'unknown document directive "' + directiveName + '"');
        }
      }

      skipSeparationSpace(state, true, -1);

      if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 0x2D
      /* - */
      && state.input.charCodeAt(state.position + 1) === 0x2D
      /* - */
      && state.input.charCodeAt(state.position + 2) === 0x2D
      /* - */
      ) {
          state.position += 3;
          skipSeparationSpace(state, true, -1);
        } else if (hasDirectives) {
        throwError(state, 'directives end mark is expected');
      }

      composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
      skipSeparationSpace(state, true, -1);

      if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
        throwWarning(state, 'non-ASCII line breaks are interpreted as content');
      }

      state.documents.push(state.result);

      if (state.position === state.lineStart && testDocumentSeparator(state)) {
        if (state.input.charCodeAt(state.position) === 0x2E
        /* . */
        ) {
            state.position += 3;
            skipSeparationSpace(state, true, -1);
          }

        return;
      }

      if (state.position < state.length - 1) {
        throwError(state, 'end of the stream or a document separator is expected');
      } else {
        return;
      }
    }

    function loadDocuments(input, options) {
      input = String(input);
      options = options || {};

      if (input.length !== 0) {
        // Add tailing `\n` if not exists
        if (input.charCodeAt(input.length - 1) !== 0x0A
        /* LF */
        && input.charCodeAt(input.length - 1) !== 0x0D
        /* CR */
        ) {
            input += '\n';
          } // Strip BOM


        if (input.charCodeAt(0) === 0xFEFF) {
          input = input.slice(1);
        }
      }

      var state = new State(input, options);
      var nullpos = input.indexOf('\0');

      if (nullpos !== -1) {
        state.position = nullpos;
        throwError(state, 'null byte is not allowed in input');
      } // Use 0 as string terminator. That significantly simplifies bounds check.


      state.input += '\0';

      while (state.input.charCodeAt(state.position) === 0x20
      /* Space */
      ) {
        state.lineIndent += 1;
        state.position += 1;
      }

      while (state.position < state.length - 1) {
        readDocument(state);
      }

      return state.documents;
    }

    function loadAll(input, iterator, options) {
      if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {
        options = iterator;
        iterator = null;
      }

      var documents = loadDocuments(input, options);

      if (typeof iterator !== 'function') {
        return documents;
      }

      for (var index = 0, length = documents.length; index < length; index += 1) {
        iterator(documents[index]);
      }
    }

    function load(input, options) {
      var documents = loadDocuments(input, options);

      if (documents.length === 0) {
        /*eslint-disable no-undefined*/
        return undefined;
      } else if (documents.length === 1) {
        return documents[0];
      }

      throw new YAMLException('expected a single document in the stream, but found more');
    }

    function safeLoadAll(input, iterator, options) {
      if (typeof iterator === 'object' && iterator !== null && typeof options === 'undefined') {
        options = iterator;
        iterator = null;
      }

      return loadAll(input, iterator, common.extend({
        schema: DEFAULT_SAFE_SCHEMA
      }, options));
    }

    function safeLoad(input, options) {
      return load(input, common.extend({
        schema: DEFAULT_SAFE_SCHEMA
      }, options));
    }

    module.exports.loadAll = loadAll;
    module.exports.load = load;
    module.exports.safeLoadAll = safeLoadAll;
    module.exports.safeLoad = safeLoad;
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/mark.js":
  /*!**************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/mark.js ***!
    \**************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlMarkJs(module, exports, __webpack_require__) {
    "use strict";

    var common = __webpack_require__(
    /*! ./common */
    "./node_modules/js-yaml/lib/js-yaml/common.js");

    function Mark(name, buffer, position, line, column) {
      this.name = name;
      this.buffer = buffer;
      this.position = position;
      this.line = line;
      this.column = column;
    }

    Mark.prototype.getSnippet = function getSnippet(indent, maxLength) {
      var head, start, tail, end, snippet;
      if (!this.buffer) return null;
      indent = indent || 4;
      maxLength = maxLength || 75;
      head = '';
      start = this.position;

      while (start > 0 && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(start - 1)) === -1) {
        start -= 1;

        if (this.position - start > maxLength / 2 - 1) {
          head = ' ... ';
          start += 5;
          break;
        }
      }

      tail = '';
      end = this.position;

      while (end < this.buffer.length && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(end)) === -1) {
        end += 1;

        if (end - this.position > maxLength / 2 - 1) {
          tail = ' ... ';
          end -= 5;
          break;
        }
      }

      snippet = this.buffer.slice(start, end);
      return common.repeat(' ', indent) + head + snippet + tail + '\n' + common.repeat(' ', indent + this.position - start + head.length) + '^';
    };

    Mark.prototype.toString = function toString(compact) {
      var snippet,
          where = '';

      if (this.name) {
        where += 'in "' + this.name + '" ';
      }

      where += 'at line ' + (this.line + 1) + ', column ' + (this.column + 1);

      if (!compact) {
        snippet = this.getSnippet();

        if (snippet) {
          where += ':\n' + snippet;
        }
      }

      return where;
    };

    module.exports = Mark;
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/schema.js":
  /*!****************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/schema.js ***!
    \****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlSchemaJs(module, exports, __webpack_require__) {
    "use strict";
    /*eslint-disable max-len*/

    var common = __webpack_require__(
    /*! ./common */
    "./node_modules/js-yaml/lib/js-yaml/common.js");

    var YAMLException = __webpack_require__(
    /*! ./exception */
    "./node_modules/js-yaml/lib/js-yaml/exception.js");

    var Type = __webpack_require__(
    /*! ./type */
    "./node_modules/js-yaml/lib/js-yaml/type.js");

    function compileList(schema, name, result) {
      var exclude = [];
      schema.include.forEach(function (includedSchema) {
        result = compileList(includedSchema, name, result);
      });
      schema[name].forEach(function (currentType) {
        result.forEach(function (previousType, previousIndex) {
          if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {
            exclude.push(previousIndex);
          }
        });
        result.push(currentType);
      });
      return result.filter(function (type, index) {
        return exclude.indexOf(index) === -1;
      });
    }

    function compileMap()
    /* lists... */
    {
      var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {}
      },
          index,
          length;

      function collectType(type) {
        result[type.kind][type.tag] = result['fallback'][type.tag] = type;
      }

      for (index = 0, length = arguments.length; index < length; index += 1) {
        arguments[index].forEach(collectType);
      }

      return result;
    }

    function Schema(definition) {
      this.include = definition.include || [];
      this.implicit = definition.implicit || [];
      this.explicit = definition.explicit || [];
      this.implicit.forEach(function (type) {
        if (type.loadKind && type.loadKind !== 'scalar') {
          throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
        }
      });
      this.compiledImplicit = compileList(this, 'implicit', []);
      this.compiledExplicit = compileList(this, 'explicit', []);
      this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);
    }

    Schema.DEFAULT = null;

    Schema.create = function createSchema() {
      var schemas, types;

      switch (arguments.length) {
        case 1:
          schemas = Schema.DEFAULT;
          types = arguments[0];
          break;

        case 2:
          schemas = arguments[0];
          types = arguments[1];
          break;

        default:
          throw new YAMLException('Wrong number of arguments for Schema.create function');
      }

      schemas = common.toArray(schemas);
      types = common.toArray(types);

      if (!schemas.every(function (schema) {
        return schema instanceof Schema;
      })) {
        throw new YAMLException('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');
      }

      if (!types.every(function (type) {
        return type instanceof Type;
      })) {
        throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');
      }

      return new Schema({
        include: schemas,
        explicit: types
      });
    };

    module.exports = Schema;
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/schema/core.js":
  /*!*********************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/schema/core.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlSchemaCoreJs(module, exports, __webpack_require__) {
    "use strict"; // Standard YAML's Core schema.
    // http://www.yaml.org/spec/1.2/spec.html#id2804923
    //
    // NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
    // So, Core schema has no distinctions from JSON schema is JS-YAML.

    var Schema = __webpack_require__(
    /*! ../schema */
    "./node_modules/js-yaml/lib/js-yaml/schema.js");

    module.exports = new Schema({
      include: [__webpack_require__(
      /*! ./json */
      "./node_modules/js-yaml/lib/js-yaml/schema/json.js")]
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/schema/default_full.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/schema/default_full.js ***!
    \*****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlSchemaDefault_fullJs(module, exports, __webpack_require__) {
    "use strict"; // JS-YAML's default schema for `load` function.
    // It is not described in the YAML specification.
    //
    // This schema is based on JS-YAML's default safe schema and includes
    // JavaScript-specific types: !!js/undefined, !!js/regexp and !!js/function.
    //
    // Also this schema is used as default base schema at `Schema.create` function.

    var Schema = __webpack_require__(
    /*! ../schema */
    "./node_modules/js-yaml/lib/js-yaml/schema.js");

    module.exports = Schema.DEFAULT = new Schema({
      include: [__webpack_require__(
      /*! ./default_safe */
      "./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js")],
      explicit: [__webpack_require__(
      /*! ../type/js/undefined */
      "./node_modules/js-yaml/lib/js-yaml/type/js/undefined.js"), __webpack_require__(
      /*! ../type/js/regexp */
      "./node_modules/js-yaml/lib/js-yaml/type/js/regexp.js"), __webpack_require__(
      /*! ../type/js/function */
      "./node_modules/js-yaml/lib/js-yaml/type/js/function.js")]
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js ***!
    \*****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlSchemaDefault_safeJs(module, exports, __webpack_require__) {
    "use strict"; // JS-YAML's default schema for `safeLoad` function.
    // It is not described in the YAML specification.
    //
    // This schema is based on standard YAML's Core schema and includes most of
    // extra types described at YAML tag repository. (http://yaml.org/type/)

    var Schema = __webpack_require__(
    /*! ../schema */
    "./node_modules/js-yaml/lib/js-yaml/schema.js");

    module.exports = new Schema({
      include: [__webpack_require__(
      /*! ./core */
      "./node_modules/js-yaml/lib/js-yaml/schema/core.js")],
      implicit: [__webpack_require__(
      /*! ../type/timestamp */
      "./node_modules/js-yaml/lib/js-yaml/type/timestamp.js"), __webpack_require__(
      /*! ../type/merge */
      "./node_modules/js-yaml/lib/js-yaml/type/merge.js")],
      explicit: [__webpack_require__(
      /*! ../type/binary */
      "./node_modules/js-yaml/lib/js-yaml/type/binary.js"), __webpack_require__(
      /*! ../type/omap */
      "./node_modules/js-yaml/lib/js-yaml/type/omap.js"), __webpack_require__(
      /*! ../type/pairs */
      "./node_modules/js-yaml/lib/js-yaml/type/pairs.js"), __webpack_require__(
      /*! ../type/set */
      "./node_modules/js-yaml/lib/js-yaml/type/set.js")]
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/schema/failsafe.js":
  /*!*************************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/schema/failsafe.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlSchemaFailsafeJs(module, exports, __webpack_require__) {
    "use strict"; // Standard YAML's Failsafe schema.
    // http://www.yaml.org/spec/1.2/spec.html#id2802346

    var Schema = __webpack_require__(
    /*! ../schema */
    "./node_modules/js-yaml/lib/js-yaml/schema.js");

    module.exports = new Schema({
      explicit: [__webpack_require__(
      /*! ../type/str */
      "./node_modules/js-yaml/lib/js-yaml/type/str.js"), __webpack_require__(
      /*! ../type/seq */
      "./node_modules/js-yaml/lib/js-yaml/type/seq.js"), __webpack_require__(
      /*! ../type/map */
      "./node_modules/js-yaml/lib/js-yaml/type/map.js")]
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/schema/json.js":
  /*!*********************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/schema/json.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlSchemaJsonJs(module, exports, __webpack_require__) {
    "use strict"; // Standard YAML's JSON schema.
    // http://www.yaml.org/spec/1.2/spec.html#id2803231
    //
    // NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
    // So, this schema is not such strict as defined in the YAML specification.
    // It allows numbers in binary notaion, use `Null` and `NULL` as `null`, etc.

    var Schema = __webpack_require__(
    /*! ../schema */
    "./node_modules/js-yaml/lib/js-yaml/schema.js");

    module.exports = new Schema({
      include: [__webpack_require__(
      /*! ./failsafe */
      "./node_modules/js-yaml/lib/js-yaml/schema/failsafe.js")],
      implicit: [__webpack_require__(
      /*! ../type/null */
      "./node_modules/js-yaml/lib/js-yaml/type/null.js"), __webpack_require__(
      /*! ../type/bool */
      "./node_modules/js-yaml/lib/js-yaml/type/bool.js"), __webpack_require__(
      /*! ../type/int */
      "./node_modules/js-yaml/lib/js-yaml/type/int.js"), __webpack_require__(
      /*! ../type/float */
      "./node_modules/js-yaml/lib/js-yaml/type/float.js")]
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/type.js":
  /*!**************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/type.js ***!
    \**************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlTypeJs(module, exports, __webpack_require__) {
    "use strict";

    var YAMLException = __webpack_require__(
    /*! ./exception */
    "./node_modules/js-yaml/lib/js-yaml/exception.js");

    var TYPE_CONSTRUCTOR_OPTIONS = ['kind', 'resolve', 'construct', 'instanceOf', 'predicate', 'represent', 'defaultStyle', 'styleAliases'];
    var YAML_NODE_KINDS = ['scalar', 'sequence', 'mapping'];

    function compileStyleAliases(map) {
      var result = {};

      if (map !== null) {
        Object.keys(map).forEach(function (style) {
          map[style].forEach(function (alias) {
            result[String(alias)] = style;
          });
        });
      }

      return result;
    }

    function Type(tag, options) {
      options = options || {};
      Object.keys(options).forEach(function (name) {
        if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
          throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
        }
      }); // TODO: Add tag format check.

      this.tag = tag;
      this.kind = options['kind'] || null;

      this.resolve = options['resolve'] || function () {
        return true;
      };

      this.construct = options['construct'] || function (data) {
        return data;
      };

      this.instanceOf = options['instanceOf'] || null;
      this.predicate = options['predicate'] || null;
      this.represent = options['represent'] || null;
      this.defaultStyle = options['defaultStyle'] || null;
      this.styleAliases = compileStyleAliases(options['styleAliases'] || null);

      if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
        throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
      }
    }

    module.exports = Type;
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/type/binary.js":
  /*!*********************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/type/binary.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlTypeBinaryJs(module, exports, __webpack_require__) {
    "use strict";

    var require;
    /*eslint-disable no-bitwise*/


    var NodeBuffer;

    try {
      // A trick for browserified version, to not include `Buffer` shim
      var _require = require;
      NodeBuffer = __webpack_require__(
      /*! buffer */
      "./node_modules/buffer/index.js").Buffer;
    } catch (__) {}

    var Type = __webpack_require__(
    /*! ../type */
    "./node_modules/js-yaml/lib/js-yaml/type.js"); // [ 64, 65, 66 ] -> [ padding, CR, LF ]


    var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';

    function resolveYamlBinary(data) {
      if (data === null) return false;
      var code,
          idx,
          bitlen = 0,
          max = data.length,
          map = BASE64_MAP; // Convert one by one.

      for (idx = 0; idx < max; idx++) {
        code = map.indexOf(data.charAt(idx)); // Skip CR/LF

        if (code > 64) continue; // Fail on illegal characters

        if (code < 0) return false;
        bitlen += 6;
      } // If there are any bits left, source was corrupted


      return bitlen % 8 === 0;
    }

    function constructYamlBinary(data) {
      var idx,
          tailbits,
          input = data.replace(/[\r\n=]/g, ''),
          // remove CR/LF & padding to simplify scan
      max = input.length,
          map = BASE64_MAP,
          bits = 0,
          result = []; // Collect by 6*4 bits (3 bytes)

      for (idx = 0; idx < max; idx++) {
        if (idx % 4 === 0 && idx) {
          result.push(bits >> 16 & 0xFF);
          result.push(bits >> 8 & 0xFF);
          result.push(bits & 0xFF);
        }

        bits = bits << 6 | map.indexOf(input.charAt(idx));
      } // Dump tail


      tailbits = max % 4 * 6;

      if (tailbits === 0) {
        result.push(bits >> 16 & 0xFF);
        result.push(bits >> 8 & 0xFF);
        result.push(bits & 0xFF);
      } else if (tailbits === 18) {
        result.push(bits >> 10 & 0xFF);
        result.push(bits >> 2 & 0xFF);
      } else if (tailbits === 12) {
        result.push(bits >> 4 & 0xFF);
      } // Wrap into Buffer for NodeJS and leave Array for browser


      if (NodeBuffer) {
        // Support node 6.+ Buffer API when available
        return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);
      }

      return result;
    }

    function representYamlBinary(object
    /*, style*/
    ) {
      var result = '',
          bits = 0,
          idx,
          tail,
          max = object.length,
          map = BASE64_MAP; // Convert every three bytes to 4 ASCII characters.

      for (idx = 0; idx < max; idx++) {
        if (idx % 3 === 0 && idx) {
          result += map[bits >> 18 & 0x3F];
          result += map[bits >> 12 & 0x3F];
          result += map[bits >> 6 & 0x3F];
          result += map[bits & 0x3F];
        }

        bits = (bits << 8) + object[idx];
      } // Dump tail


      tail = max % 3;

      if (tail === 0) {
        result += map[bits >> 18 & 0x3F];
        result += map[bits >> 12 & 0x3F];
        result += map[bits >> 6 & 0x3F];
        result += map[bits & 0x3F];
      } else if (tail === 2) {
        result += map[bits >> 10 & 0x3F];
        result += map[bits >> 4 & 0x3F];
        result += map[bits << 2 & 0x3F];
        result += map[64];
      } else if (tail === 1) {
        result += map[bits >> 2 & 0x3F];
        result += map[bits << 4 & 0x3F];
        result += map[64];
        result += map[64];
      }

      return result;
    }

    function isBinary(object) {
      return NodeBuffer && NodeBuffer.isBuffer(object);
    }

    module.exports = new Type('tag:yaml.org,2002:binary', {
      kind: 'scalar',
      resolve: resolveYamlBinary,
      construct: constructYamlBinary,
      predicate: isBinary,
      represent: representYamlBinary
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/type/bool.js":
  /*!*******************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/type/bool.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlTypeBoolJs(module, exports, __webpack_require__) {
    "use strict";

    var Type = __webpack_require__(
    /*! ../type */
    "./node_modules/js-yaml/lib/js-yaml/type.js");

    function resolveYamlBoolean(data) {
      if (data === null) return false;
      var max = data.length;
      return max === 4 && (data === 'true' || data === 'True' || data === 'TRUE') || max === 5 && (data === 'false' || data === 'False' || data === 'FALSE');
    }

    function constructYamlBoolean(data) {
      return data === 'true' || data === 'True' || data === 'TRUE';
    }

    function isBoolean(object) {
      return Object.prototype.toString.call(object) === '[object Boolean]';
    }

    module.exports = new Type('tag:yaml.org,2002:bool', {
      kind: 'scalar',
      resolve: resolveYamlBoolean,
      construct: constructYamlBoolean,
      predicate: isBoolean,
      represent: {
        lowercase: function lowercase(object) {
          return object ? 'true' : 'false';
        },
        uppercase: function uppercase(object) {
          return object ? 'TRUE' : 'FALSE';
        },
        camelcase: function camelcase(object) {
          return object ? 'True' : 'False';
        }
      },
      defaultStyle: 'lowercase'
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/type/float.js":
  /*!********************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/type/float.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlTypeFloatJs(module, exports, __webpack_require__) {
    "use strict";

    var common = __webpack_require__(
    /*! ../common */
    "./node_modules/js-yaml/lib/js-yaml/common.js");

    var Type = __webpack_require__(
    /*! ../type */
    "./node_modules/js-yaml/lib/js-yaml/type.js");

    var YAML_FLOAT_PATTERN = new RegExp( // 2.5e4, 2.5 and integers
    '^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' + // .2e4, .2
    // special case, seems not from spec
    '|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' + // 20:59
    '|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*' + // .inf
    '|[-+]?\\.(?:inf|Inf|INF)' + // .nan
    '|\\.(?:nan|NaN|NAN))$');

    function resolveYamlFloat(data) {
      if (data === null) return false;

      if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
      // Probably should update regexp & check speed
      data[data.length - 1] === '_') {
        return false;
      }

      return true;
    }

    function constructYamlFloat(data) {
      var value, sign, base, digits;
      value = data.replace(/_/g, '').toLowerCase();
      sign = value[0] === '-' ? -1 : 1;
      digits = [];

      if ('+-'.indexOf(value[0]) >= 0) {
        value = value.slice(1);
      }

      if (value === '.inf') {
        return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
      } else if (value === '.nan') {
        return NaN;
      } else if (value.indexOf(':') >= 0) {
        value.split(':').forEach(function (v) {
          digits.unshift(parseFloat(v, 10));
        });
        value = 0.0;
        base = 1;
        digits.forEach(function (d) {
          value += d * base;
          base *= 60;
        });
        return sign * value;
      }

      return sign * parseFloat(value, 10);
    }

    var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;

    function representYamlFloat(object, style) {
      var res;

      if (isNaN(object)) {
        switch (style) {
          case 'lowercase':
            return '.nan';

          case 'uppercase':
            return '.NAN';

          case 'camelcase':
            return '.NaN';
        }
      } else if (Number.POSITIVE_INFINITY === object) {
        switch (style) {
          case 'lowercase':
            return '.inf';

          case 'uppercase':
            return '.INF';

          case 'camelcase':
            return '.Inf';
        }
      } else if (Number.NEGATIVE_INFINITY === object) {
        switch (style) {
          case 'lowercase':
            return '-.inf';

          case 'uppercase':
            return '-.INF';

          case 'camelcase':
            return '-.Inf';
        }
      } else if (common.isNegativeZero(object)) {
        return '-0.0';
      }

      res = object.toString(10); // JS stringifier can build scientific format without dots: 5e-100,
      // while YAML requres dot: 5.e-100. Fix it with simple hack

      return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
    }

    function isFloat(object) {
      return Object.prototype.toString.call(object) === '[object Number]' && (object % 1 !== 0 || common.isNegativeZero(object));
    }

    module.exports = new Type('tag:yaml.org,2002:float', {
      kind: 'scalar',
      resolve: resolveYamlFloat,
      construct: constructYamlFloat,
      predicate: isFloat,
      represent: representYamlFloat,
      defaultStyle: 'lowercase'
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/type/int.js":
  /*!******************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/type/int.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlTypeIntJs(module, exports, __webpack_require__) {
    "use strict";

    var common = __webpack_require__(
    /*! ../common */
    "./node_modules/js-yaml/lib/js-yaml/common.js");

    var Type = __webpack_require__(
    /*! ../type */
    "./node_modules/js-yaml/lib/js-yaml/type.js");

    function isHexCode(c) {
      return 0x30
      /* 0 */
      <= c && c <= 0x39
      /* 9 */
      || 0x41
      /* A */
      <= c && c <= 0x46
      /* F */
      || 0x61
      /* a */
      <= c && c <= 0x66
      /* f */
      ;
    }

    function isOctCode(c) {
      return 0x30
      /* 0 */
      <= c && c <= 0x37
      /* 7 */
      ;
    }

    function isDecCode(c) {
      return 0x30
      /* 0 */
      <= c && c <= 0x39
      /* 9 */
      ;
    }

    function resolveYamlInteger(data) {
      if (data === null) return false;
      var max = data.length,
          index = 0,
          hasDigits = false,
          ch;
      if (!max) return false;
      ch = data[index]; // sign

      if (ch === '-' || ch === '+') {
        ch = data[++index];
      }

      if (ch === '0') {
        // 0
        if (index + 1 === max) return true;
        ch = data[++index]; // base 2, base 8, base 16

        if (ch === 'b') {
          // base 2
          index++;

          for (; index < max; index++) {
            ch = data[index];
            if (ch === '_') continue;
            if (ch !== '0' && ch !== '1') return false;
            hasDigits = true;
          }

          return hasDigits && ch !== '_';
        }

        if (ch === 'x') {
          // base 16
          index++;

          for (; index < max; index++) {
            ch = data[index];
            if (ch === '_') continue;
            if (!isHexCode(data.charCodeAt(index))) return false;
            hasDigits = true;
          }

          return hasDigits && ch !== '_';
        } // base 8


        for (; index < max; index++) {
          ch = data[index];
          if (ch === '_') continue;
          if (!isOctCode(data.charCodeAt(index))) return false;
          hasDigits = true;
        }

        return hasDigits && ch !== '_';
      } // base 10 (except 0) or base 60
      // value should not start with `_`;


      if (ch === '_') return false;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (ch === ':') break;

        if (!isDecCode(data.charCodeAt(index))) {
          return false;
        }

        hasDigits = true;
      } // Should have digits and should not end with `_`


      if (!hasDigits || ch === '_') return false; // if !base60 - done;

      if (ch !== ':') return true; // base60 almost not used, no needs to optimize

      return /^(:[0-5]?[0-9])+$/.test(data.slice(index));
    }

    function constructYamlInteger(data) {
      var value = data,
          sign = 1,
          ch,
          base,
          digits = [];

      if (value.indexOf('_') !== -1) {
        value = value.replace(/_/g, '');
      }

      ch = value[0];

      if (ch === '-' || ch === '+') {
        if (ch === '-') sign = -1;
        value = value.slice(1);
        ch = value[0];
      }

      if (value === '0') return 0;

      if (ch === '0') {
        if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);
        if (value[1] === 'x') return sign * parseInt(value, 16);
        return sign * parseInt(value, 8);
      }

      if (value.indexOf(':') !== -1) {
        value.split(':').forEach(function (v) {
          digits.unshift(parseInt(v, 10));
        });
        value = 0;
        base = 1;
        digits.forEach(function (d) {
          value += d * base;
          base *= 60;
        });
        return sign * value;
      }

      return sign * parseInt(value, 10);
    }

    function isInteger(object) {
      return Object.prototype.toString.call(object) === '[object Number]' && object % 1 === 0 && !common.isNegativeZero(object);
    }

    module.exports = new Type('tag:yaml.org,2002:int', {
      kind: 'scalar',
      resolve: resolveYamlInteger,
      construct: constructYamlInteger,
      predicate: isInteger,
      represent: {
        binary: function binary(obj) {
          return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1);
        },
        octal: function octal(obj) {
          return obj >= 0 ? '0' + obj.toString(8) : '-0' + obj.toString(8).slice(1);
        },
        decimal: function decimal(obj) {
          return obj.toString(10);
        },

        /* eslint-disable max-len */
        hexadecimal: function hexadecimal(obj) {
          return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() : '-0x' + obj.toString(16).toUpperCase().slice(1);
        }
      },
      defaultStyle: 'decimal',
      styleAliases: {
        binary: [2, 'bin'],
        octal: [8, 'oct'],
        decimal: [10, 'dec'],
        hexadecimal: [16, 'hex']
      }
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/type/js/function.js":
  /*!**************************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/type/js/function.js ***!
    \**************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlTypeJsFunctionJs(module, exports, __webpack_require__) {
    "use strict";

    var require;

    var esprima; // Browserified version does not have esprima
    //
    // 1. For node.js just require module as deps
    // 2. For browser try to require mudule via external AMD system.
    //    If not found - try to fallback to window.esprima. If not
    //    found too - then fail to parse.
    //

    try {
      // workaround to exclude package from browserify list.
      var _require = require;
      esprima = __webpack_require__(
      /*! esprima */
      "./node_modules/js-yaml/node_modules/esprima/dist/esprima.js");
    } catch (_) {
      /* eslint-disable no-redeclare */

      /* global window */
      if (typeof window !== 'undefined') esprima = window.esprima;
    }

    var Type = __webpack_require__(
    /*! ../../type */
    "./node_modules/js-yaml/lib/js-yaml/type.js");

    function resolveJavascriptFunction(data) {
      if (data === null) return false;

      try {
        var source = '(' + data + ')',
            ast = esprima.parse(source, {
          range: true
        });

        if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {
          return false;
        }

        return true;
      } catch (err) {
        return false;
      }
    }

    function constructJavascriptFunction(data) {
      /*jslint evil:true*/
      var source = '(' + data + ')',
          ast = esprima.parse(source, {
        range: true
      }),
          params = [],
          body;

      if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {
        throw new Error('Failed to resolve function');
      }

      ast.body[0].expression.params.forEach(function (param) {
        params.push(param.name);
      });
      body = ast.body[0].expression.body.range; // Esprima's ranges include the first '{' and the last '}' characters on
      // function expressions. So cut them out.

      if (ast.body[0].expression.body.type === 'BlockStatement') {
        /*eslint-disable no-new-func*/
        return new Function(params, source.slice(body[0] + 1, body[1] - 1));
      } // ES6 arrow functions can omit the BlockStatement. In that case, just return
      // the body.

      /*eslint-disable no-new-func*/


      return new Function(params, 'return ' + source.slice(body[0], body[1]));
    }

    function representJavascriptFunction(object
    /*, style*/
    ) {
      return object.toString();
    }

    function isFunction(object) {
      return Object.prototype.toString.call(object) === '[object Function]';
    }

    module.exports = new Type('tag:yaml.org,2002:js/function', {
      kind: 'scalar',
      resolve: resolveJavascriptFunction,
      construct: constructJavascriptFunction,
      predicate: isFunction,
      represent: representJavascriptFunction
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/type/js/regexp.js":
  /*!************************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/type/js/regexp.js ***!
    \************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlTypeJsRegexpJs(module, exports, __webpack_require__) {
    "use strict";

    var Type = __webpack_require__(
    /*! ../../type */
    "./node_modules/js-yaml/lib/js-yaml/type.js");

    function resolveJavascriptRegExp(data) {
      if (data === null) return false;
      if (data.length === 0) return false;
      var regexp = data,
          tail = /\/([gim]*)$/.exec(data),
          modifiers = ''; // if regexp starts with '/' it can have modifiers and must be properly closed
      // `/foo/gim` - modifiers tail can be maximum 3 chars

      if (regexp[0] === '/') {
        if (tail) modifiers = tail[1];
        if (modifiers.length > 3) return false; // if expression starts with /, is should be properly terminated

        if (regexp[regexp.length - modifiers.length - 1] !== '/') return false;
      }

      return true;
    }

    function constructJavascriptRegExp(data) {
      var regexp = data,
          tail = /\/([gim]*)$/.exec(data),
          modifiers = ''; // `/foo/gim` - tail can be maximum 4 chars

      if (regexp[0] === '/') {
        if (tail) modifiers = tail[1];
        regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
      }

      return new RegExp(regexp, modifiers);
    }

    function representJavascriptRegExp(object
    /*, style*/
    ) {
      var result = '/' + object.source + '/';
      if (object.global) result += 'g';
      if (object.multiline) result += 'm';
      if (object.ignoreCase) result += 'i';
      return result;
    }

    function isRegExp(object) {
      return Object.prototype.toString.call(object) === '[object RegExp]';
    }

    module.exports = new Type('tag:yaml.org,2002:js/regexp', {
      kind: 'scalar',
      resolve: resolveJavascriptRegExp,
      construct: constructJavascriptRegExp,
      predicate: isRegExp,
      represent: representJavascriptRegExp
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/type/js/undefined.js":
  /*!***************************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/type/js/undefined.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlTypeJsUndefinedJs(module, exports, __webpack_require__) {
    "use strict";

    var Type = __webpack_require__(
    /*! ../../type */
    "./node_modules/js-yaml/lib/js-yaml/type.js");

    function resolveJavascriptUndefined() {
      return true;
    }

    function constructJavascriptUndefined() {
      /*eslint-disable no-undefined*/
      return undefined;
    }

    function representJavascriptUndefined() {
      return '';
    }

    function isUndefined(object) {
      return typeof object === 'undefined';
    }

    module.exports = new Type('tag:yaml.org,2002:js/undefined', {
      kind: 'scalar',
      resolve: resolveJavascriptUndefined,
      construct: constructJavascriptUndefined,
      predicate: isUndefined,
      represent: representJavascriptUndefined
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/type/map.js":
  /*!******************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/type/map.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlTypeMapJs(module, exports, __webpack_require__) {
    "use strict";

    var Type = __webpack_require__(
    /*! ../type */
    "./node_modules/js-yaml/lib/js-yaml/type.js");

    module.exports = new Type('tag:yaml.org,2002:map', {
      kind: 'mapping',
      construct: function construct(data) {
        return data !== null ? data : {};
      }
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/type/merge.js":
  /*!********************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/type/merge.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlTypeMergeJs(module, exports, __webpack_require__) {
    "use strict";

    var Type = __webpack_require__(
    /*! ../type */
    "./node_modules/js-yaml/lib/js-yaml/type.js");

    function resolveYamlMerge(data) {
      return data === '<<' || data === null;
    }

    module.exports = new Type('tag:yaml.org,2002:merge', {
      kind: 'scalar',
      resolve: resolveYamlMerge
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/type/null.js":
  /*!*******************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/type/null.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlTypeNullJs(module, exports, __webpack_require__) {
    "use strict";

    var Type = __webpack_require__(
    /*! ../type */
    "./node_modules/js-yaml/lib/js-yaml/type.js");

    function resolveYamlNull(data) {
      if (data === null) return true;
      var max = data.length;
      return max === 1 && data === '~' || max === 4 && (data === 'null' || data === 'Null' || data === 'NULL');
    }

    function constructYamlNull() {
      return null;
    }

    function isNull(object) {
      return object === null;
    }

    module.exports = new Type('tag:yaml.org,2002:null', {
      kind: 'scalar',
      resolve: resolveYamlNull,
      construct: constructYamlNull,
      predicate: isNull,
      represent: {
        canonical: function canonical() {
          return '~';
        },
        lowercase: function lowercase() {
          return 'null';
        },
        uppercase: function uppercase() {
          return 'NULL';
        },
        camelcase: function camelcase() {
          return 'Null';
        }
      },
      defaultStyle: 'lowercase'
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/type/omap.js":
  /*!*******************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/type/omap.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlTypeOmapJs(module, exports, __webpack_require__) {
    "use strict";

    var Type = __webpack_require__(
    /*! ../type */
    "./node_modules/js-yaml/lib/js-yaml/type.js");

    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var _toString = Object.prototype.toString;

    function resolveYamlOmap(data) {
      if (data === null) return true;
      var objectKeys = [],
          index,
          length,
          pair,
          pairKey,
          pairHasKey,
          object = data;

      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        pairHasKey = false;
        if (_toString.call(pair) !== '[object Object]') return false;

        for (pairKey in pair) {
          if (_hasOwnProperty.call(pair, pairKey)) {
            if (!pairHasKey) pairHasKey = true;else return false;
          }
        }

        if (!pairHasKey) return false;
        if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);else return false;
      }

      return true;
    }

    function constructYamlOmap(data) {
      return data !== null ? data : [];
    }

    module.exports = new Type('tag:yaml.org,2002:omap', {
      kind: 'sequence',
      resolve: resolveYamlOmap,
      construct: constructYamlOmap
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/type/pairs.js":
  /*!********************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/type/pairs.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlTypePairsJs(module, exports, __webpack_require__) {
    "use strict";

    var Type = __webpack_require__(
    /*! ../type */
    "./node_modules/js-yaml/lib/js-yaml/type.js");

    var _toString = Object.prototype.toString;

    function resolveYamlPairs(data) {
      if (data === null) return true;
      var index,
          length,
          pair,
          keys,
          result,
          object = data;
      result = new Array(object.length);

      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        if (_toString.call(pair) !== '[object Object]') return false;
        keys = Object.keys(pair);
        if (keys.length !== 1) return false;
        result[index] = [keys[0], pair[keys[0]]];
      }

      return true;
    }

    function constructYamlPairs(data) {
      if (data === null) return [];
      var index,
          length,
          pair,
          keys,
          result,
          object = data;
      result = new Array(object.length);

      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        keys = Object.keys(pair);
        result[index] = [keys[0], pair[keys[0]]];
      }

      return result;
    }

    module.exports = new Type('tag:yaml.org,2002:pairs', {
      kind: 'sequence',
      resolve: resolveYamlPairs,
      construct: constructYamlPairs
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/type/seq.js":
  /*!******************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/type/seq.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlTypeSeqJs(module, exports, __webpack_require__) {
    "use strict";

    var Type = __webpack_require__(
    /*! ../type */
    "./node_modules/js-yaml/lib/js-yaml/type.js");

    module.exports = new Type('tag:yaml.org,2002:seq', {
      kind: 'sequence',
      construct: function construct(data) {
        return data !== null ? data : [];
      }
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/type/set.js":
  /*!******************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/type/set.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlTypeSetJs(module, exports, __webpack_require__) {
    "use strict";

    var Type = __webpack_require__(
    /*! ../type */
    "./node_modules/js-yaml/lib/js-yaml/type.js");

    var _hasOwnProperty = Object.prototype.hasOwnProperty;

    function resolveYamlSet(data) {
      if (data === null) return true;
      var key,
          object = data;

      for (key in object) {
        if (_hasOwnProperty.call(object, key)) {
          if (object[key] !== null) return false;
        }
      }

      return true;
    }

    function constructYamlSet(data) {
      return data !== null ? data : {};
    }

    module.exports = new Type('tag:yaml.org,2002:set', {
      kind: 'mapping',
      resolve: resolveYamlSet,
      construct: constructYamlSet
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/type/str.js":
  /*!******************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/type/str.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlTypeStrJs(module, exports, __webpack_require__) {
    "use strict";

    var Type = __webpack_require__(
    /*! ../type */
    "./node_modules/js-yaml/lib/js-yaml/type.js");

    module.exports = new Type('tag:yaml.org,2002:str', {
      kind: 'scalar',
      construct: function construct(data) {
        return data !== null ? data : '';
      }
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/lib/js-yaml/type/timestamp.js":
  /*!************************************************************!*\
    !*** ./node_modules/js-yaml/lib/js-yaml/type/timestamp.js ***!
    \************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlLibJsYamlTypeTimestampJs(module, exports, __webpack_require__) {
    "use strict";

    var Type = __webpack_require__(
    /*! ../type */
    "./node_modules/js-yaml/lib/js-yaml/type.js");

    var YAML_DATE_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year
    '-([0-9][0-9])' + // [2] month
    '-([0-9][0-9])$'); // [3] day

    var YAML_TIMESTAMP_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year
    '-([0-9][0-9]?)' + // [2] month
    '-([0-9][0-9]?)' + // [3] day
    '(?:[Tt]|[ \\t]+)' + // ...
    '([0-9][0-9]?)' + // [4] hour
    ':([0-9][0-9])' + // [5] minute
    ':([0-9][0-9])' + // [6] second
    '(?:\\.([0-9]*))?' + // [7] fraction
    '(?:[ \\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour
    '(?::([0-9][0-9]))?))?$'); // [11] tz_minute

    function resolveYamlTimestamp(data) {
      if (data === null) return false;
      if (YAML_DATE_REGEXP.exec(data) !== null) return true;
      if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
      return false;
    }

    function constructYamlTimestamp(data) {
      var match,
          year,
          month,
          day,
          hour,
          minute,
          second,
          fraction = 0,
          delta = null,
          tz_hour,
          tz_minute,
          date;
      match = YAML_DATE_REGEXP.exec(data);
      if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);
      if (match === null) throw new Error('Date resolve error'); // match: [1] year [2] month [3] day

      year = +match[1];
      month = +match[2] - 1; // JS month starts with 0

      day = +match[3];

      if (!match[4]) {
        // no hour
        return new Date(Date.UTC(year, month, day));
      } // match: [4] hour [5] minute [6] second [7] fraction


      hour = +match[4];
      minute = +match[5];
      second = +match[6];

      if (match[7]) {
        fraction = match[7].slice(0, 3);

        while (fraction.length < 3) {
          // milli-seconds
          fraction += '0';
        }

        fraction = +fraction;
      } // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute


      if (match[9]) {
        tz_hour = +match[10];
        tz_minute = +(match[11] || 0);
        delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds

        if (match[9] === '-') delta = -delta;
      }

      date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
      if (delta) date.setTime(date.getTime() - delta);
      return date;
    }

    function representYamlTimestamp(object
    /*, style*/
    ) {
      return object.toISOString();
    }

    module.exports = new Type('tag:yaml.org,2002:timestamp', {
      kind: 'scalar',
      resolve: resolveYamlTimestamp,
      construct: constructYamlTimestamp,
      instanceOf: Date,
      represent: representYamlTimestamp
    });
    /***/
  },

  /***/
  "./node_modules/js-yaml/node_modules/esprima/dist/esprima.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/js-yaml/node_modules/esprima/dist/esprima.js ***!
    \*******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesJsYamlNode_modulesEsprimaDistEsprimaJs(module, exports, __webpack_require__) {
    (function webpackUniversalModuleDefinition(root, factory) {
      /* istanbul ignore next */
      if (true) module.exports = factory();else {}
    })(this, function () {
      return (
        /******/
        function (modules) {
          // webpackBootstrap

          /******/
          // The module cache

          /******/
          var installedModules = {};
          /******/
          // The require function

          /******/

          function __webpack_require__(moduleId) {
            /******/
            // Check if module is in cache

            /* istanbul ignore if */

            /******/
            if (installedModules[moduleId])
              /******/
              return installedModules[moduleId].exports;
            /******/
            // Create a new module (and put it into the cache)

            /******/

            var module = installedModules[moduleId] = {
              /******/
              exports: {},

              /******/
              id: moduleId,

              /******/
              loaded: false
              /******/

            };
            /******/
            // Execute the module function

            /******/

            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            /******/
            // Flag the module as loaded

            /******/

            module.loaded = true;
            /******/
            // Return the exports of the module

            /******/

            return module.exports;
            /******/
          }
          /******/
          // expose the modules object (__webpack_modules__)

          /******/


          __webpack_require__.m = modules;
          /******/
          // expose the module cache

          /******/

          __webpack_require__.c = installedModules;
          /******/
          // __webpack_public_path__

          /******/

          __webpack_require__.p = "";
          /******/
          // Load entry module and return exports

          /******/

          return __webpack_require__(0);
          /******/
        }(
        /************************************************************************/

        /******/
        [
        /* 0 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict";
          /*
            Copyright JS Foundation and other contributors, https://js.foundation/
          	  Redistribution and use in source and binary forms, with or without
            modification, are permitted provided that the following conditions are met:
          	    * Redistributions of source code must retain the above copyright
                notice, this list of conditions and the following disclaimer.
              * Redistributions in binary form must reproduce the above copyright
                notice, this list of conditions and the following disclaimer in the
                documentation and/or other materials provided with the distribution.
          	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
            AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
            IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
            ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
            DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
            (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
            ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
            (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
            THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
          */

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var comment_handler_1 = __webpack_require__(1);

          var jsx_parser_1 = __webpack_require__(3);

          var parser_1 = __webpack_require__(8);

          var tokenizer_1 = __webpack_require__(15);

          function parse(code, options, delegate) {
            var commentHandler = null;

            var proxyDelegate = function proxyDelegate(node, metadata) {
              if (delegate) {
                delegate(node, metadata);
              }

              if (commentHandler) {
                commentHandler.visit(node, metadata);
              }
            };

            var parserDelegate = typeof delegate === 'function' ? proxyDelegate : null;
            var collectComment = false;

            if (options) {
              collectComment = typeof options.comment === 'boolean' && options.comment;
              var attachComment = typeof options.attachComment === 'boolean' && options.attachComment;

              if (collectComment || attachComment) {
                commentHandler = new comment_handler_1.CommentHandler();
                commentHandler.attach = attachComment;
                options.comment = true;
                parserDelegate = proxyDelegate;
              }
            }

            var isModule = false;

            if (options && typeof options.sourceType === 'string') {
              isModule = options.sourceType === 'module';
            }

            var parser;

            if (options && typeof options.jsx === 'boolean' && options.jsx) {
              parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);
            } else {
              parser = new parser_1.Parser(code, options, parserDelegate);
            }

            var program = isModule ? parser.parseModule() : parser.parseScript();
            var ast = program;

            if (collectComment && commentHandler) {
              ast.comments = commentHandler.comments;
            }

            if (parser.config.tokens) {
              ast.tokens = parser.tokens;
            }

            if (parser.config.tolerant) {
              ast.errors = parser.errorHandler.errors;
            }

            return ast;
          }

          exports.parse = parse;

          function parseModule(code, options, delegate) {
            var parsingOptions = options || {};
            parsingOptions.sourceType = 'module';
            return parse(code, parsingOptions, delegate);
          }

          exports.parseModule = parseModule;

          function parseScript(code, options, delegate) {
            var parsingOptions = options || {};
            parsingOptions.sourceType = 'script';
            return parse(code, parsingOptions, delegate);
          }

          exports.parseScript = parseScript;

          function tokenize(code, options, delegate) {
            var tokenizer = new tokenizer_1.Tokenizer(code, options);
            var tokens;
            tokens = [];

            try {
              while (true) {
                var token = tokenizer.getNextToken();

                if (!token) {
                  break;
                }

                if (delegate) {
                  token = delegate(token);
                }

                tokens.push(token);
              }
            } catch (e) {
              tokenizer.errorHandler.tolerate(e);
            }

            if (tokenizer.errorHandler.tolerant) {
              tokens.errors = tokenizer.errors();
            }

            return tokens;
          }

          exports.tokenize = tokenize;

          var syntax_1 = __webpack_require__(2);

          exports.Syntax = syntax_1.Syntax; // Sync with *.json manifests.

          exports.version = '4.0.1';
          /***/
        },
        /* 1 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var syntax_1 = __webpack_require__(2);

          var CommentHandler = function () {
            function CommentHandler() {
              this.attach = false;
              this.comments = [];
              this.stack = [];
              this.leading = [];
              this.trailing = [];
            }

            CommentHandler.prototype.insertInnerComments = function (node, metadata) {
              //  innnerComments for properties empty block
              //  `function a() {/** comments **\/}`
              if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {
                var innerComments = [];

                for (var i = this.leading.length - 1; i >= 0; --i) {
                  var entry = this.leading[i];

                  if (metadata.end.offset >= entry.start) {
                    innerComments.unshift(entry.comment);
                    this.leading.splice(i, 1);
                    this.trailing.splice(i, 1);
                  }
                }

                if (innerComments.length) {
                  node.innerComments = innerComments;
                }
              }
            };

            CommentHandler.prototype.findTrailingComments = function (metadata) {
              var trailingComments = [];

              if (this.trailing.length > 0) {
                for (var i = this.trailing.length - 1; i >= 0; --i) {
                  var entry_1 = this.trailing[i];

                  if (entry_1.start >= metadata.end.offset) {
                    trailingComments.unshift(entry_1.comment);
                  }
                }

                this.trailing.length = 0;
                return trailingComments;
              }

              var entry = this.stack[this.stack.length - 1];

              if (entry && entry.node.trailingComments) {
                var firstComment = entry.node.trailingComments[0];

                if (firstComment && firstComment.range[0] >= metadata.end.offset) {
                  trailingComments = entry.node.trailingComments;
                  delete entry.node.trailingComments;
                }
              }

              return trailingComments;
            };

            CommentHandler.prototype.findLeadingComments = function (metadata) {
              var leadingComments = [];
              var target;

              while (this.stack.length > 0) {
                var entry = this.stack[this.stack.length - 1];

                if (entry && entry.start >= metadata.start.offset) {
                  target = entry.node;
                  this.stack.pop();
                } else {
                  break;
                }
              }

              if (target) {
                var count = target.leadingComments ? target.leadingComments.length : 0;

                for (var i = count - 1; i >= 0; --i) {
                  var comment = target.leadingComments[i];

                  if (comment.range[1] <= metadata.start.offset) {
                    leadingComments.unshift(comment);
                    target.leadingComments.splice(i, 1);
                  }
                }

                if (target.leadingComments && target.leadingComments.length === 0) {
                  delete target.leadingComments;
                }

                return leadingComments;
              }

              for (var i = this.leading.length - 1; i >= 0; --i) {
                var entry = this.leading[i];

                if (entry.start <= metadata.start.offset) {
                  leadingComments.unshift(entry.comment);
                  this.leading.splice(i, 1);
                }
              }

              return leadingComments;
            };

            CommentHandler.prototype.visitNode = function (node, metadata) {
              if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {
                return;
              }

              this.insertInnerComments(node, metadata);
              var trailingComments = this.findTrailingComments(metadata);
              var leadingComments = this.findLeadingComments(metadata);

              if (leadingComments.length > 0) {
                node.leadingComments = leadingComments;
              }

              if (trailingComments.length > 0) {
                node.trailingComments = trailingComments;
              }

              this.stack.push({
                node: node,
                start: metadata.start.offset
              });
            };

            CommentHandler.prototype.visitComment = function (node, metadata) {
              var type = node.type[0] === 'L' ? 'Line' : 'Block';
              var comment = {
                type: type,
                value: node.value
              };

              if (node.range) {
                comment.range = node.range;
              }

              if (node.loc) {
                comment.loc = node.loc;
              }

              this.comments.push(comment);

              if (this.attach) {
                var entry = {
                  comment: {
                    type: type,
                    value: node.value,
                    range: [metadata.start.offset, metadata.end.offset]
                  },
                  start: metadata.start.offset
                };

                if (node.loc) {
                  entry.comment.loc = node.loc;
                }

                node.type = type;
                this.leading.push(entry);
                this.trailing.push(entry);
              }
            };

            CommentHandler.prototype.visit = function (node, metadata) {
              if (node.type === 'LineComment') {
                this.visitComment(node, metadata);
              } else if (node.type === 'BlockComment') {
                this.visitComment(node, metadata);
              } else if (this.attach) {
                this.visitNode(node, metadata);
              }
            };

            return CommentHandler;
          }();

          exports.CommentHandler = CommentHandler;
          /***/
        },
        /* 2 */

        /***/
        function (module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.Syntax = {
            AssignmentExpression: 'AssignmentExpression',
            AssignmentPattern: 'AssignmentPattern',
            ArrayExpression: 'ArrayExpression',
            ArrayPattern: 'ArrayPattern',
            ArrowFunctionExpression: 'ArrowFunctionExpression',
            AwaitExpression: 'AwaitExpression',
            BlockStatement: 'BlockStatement',
            BinaryExpression: 'BinaryExpression',
            BreakStatement: 'BreakStatement',
            CallExpression: 'CallExpression',
            CatchClause: 'CatchClause',
            ClassBody: 'ClassBody',
            ClassDeclaration: 'ClassDeclaration',
            ClassExpression: 'ClassExpression',
            ConditionalExpression: 'ConditionalExpression',
            ContinueStatement: 'ContinueStatement',
            DoWhileStatement: 'DoWhileStatement',
            DebuggerStatement: 'DebuggerStatement',
            EmptyStatement: 'EmptyStatement',
            ExportAllDeclaration: 'ExportAllDeclaration',
            ExportDefaultDeclaration: 'ExportDefaultDeclaration',
            ExportNamedDeclaration: 'ExportNamedDeclaration',
            ExportSpecifier: 'ExportSpecifier',
            ExpressionStatement: 'ExpressionStatement',
            ForStatement: 'ForStatement',
            ForOfStatement: 'ForOfStatement',
            ForInStatement: 'ForInStatement',
            FunctionDeclaration: 'FunctionDeclaration',
            FunctionExpression: 'FunctionExpression',
            Identifier: 'Identifier',
            IfStatement: 'IfStatement',
            ImportDeclaration: 'ImportDeclaration',
            ImportDefaultSpecifier: 'ImportDefaultSpecifier',
            ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
            ImportSpecifier: 'ImportSpecifier',
            Literal: 'Literal',
            LabeledStatement: 'LabeledStatement',
            LogicalExpression: 'LogicalExpression',
            MemberExpression: 'MemberExpression',
            MetaProperty: 'MetaProperty',
            MethodDefinition: 'MethodDefinition',
            NewExpression: 'NewExpression',
            ObjectExpression: 'ObjectExpression',
            ObjectPattern: 'ObjectPattern',
            Program: 'Program',
            Property: 'Property',
            RestElement: 'RestElement',
            ReturnStatement: 'ReturnStatement',
            SequenceExpression: 'SequenceExpression',
            SpreadElement: 'SpreadElement',
            Super: 'Super',
            SwitchCase: 'SwitchCase',
            SwitchStatement: 'SwitchStatement',
            TaggedTemplateExpression: 'TaggedTemplateExpression',
            TemplateElement: 'TemplateElement',
            TemplateLiteral: 'TemplateLiteral',
            ThisExpression: 'ThisExpression',
            ThrowStatement: 'ThrowStatement',
            TryStatement: 'TryStatement',
            UnaryExpression: 'UnaryExpression',
            UpdateExpression: 'UpdateExpression',
            VariableDeclaration: 'VariableDeclaration',
            VariableDeclarator: 'VariableDeclarator',
            WhileStatement: 'WhileStatement',
            WithStatement: 'WithStatement',
            YieldExpression: 'YieldExpression'
          };
          /***/
        },
        /* 3 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict";
          /* istanbul ignore next */

          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
              }
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var character_1 = __webpack_require__(4);

          var JSXNode = __webpack_require__(5);

          var jsx_syntax_1 = __webpack_require__(6);

          var Node = __webpack_require__(7);

          var parser_1 = __webpack_require__(8);

          var token_1 = __webpack_require__(13);

          var xhtml_entities_1 = __webpack_require__(14);

          token_1.TokenName[100
          /* Identifier */
          ] = 'JSXIdentifier';
          token_1.TokenName[101
          /* Text */
          ] = 'JSXText'; // Fully qualified element name, e.g. <svg:path> returns "svg:path"

          function getQualifiedElementName(elementName) {
            var qualifiedName;

            switch (elementName.type) {
              case jsx_syntax_1.JSXSyntax.JSXIdentifier:
                var id = elementName;
                qualifiedName = id.name;
                break;

              case jsx_syntax_1.JSXSyntax.JSXNamespacedName:
                var ns = elementName;
                qualifiedName = getQualifiedElementName(ns.namespace) + ':' + getQualifiedElementName(ns.name);
                break;

              case jsx_syntax_1.JSXSyntax.JSXMemberExpression:
                var expr = elementName;
                qualifiedName = getQualifiedElementName(expr.object) + '.' + getQualifiedElementName(expr.property);
                break;

              /* istanbul ignore next */

              default:
                break;
            }

            return qualifiedName;
          }

          var JSXParser = function (_super) {
            __extends(JSXParser, _super);

            function JSXParser(code, options, delegate) {
              return _super.call(this, code, options, delegate) || this;
            }

            JSXParser.prototype.parsePrimaryExpression = function () {
              return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);
            };

            JSXParser.prototype.startJSX = function () {
              // Unwind the scanner before the lookahead token.
              this.scanner.index = this.startMarker.index;
              this.scanner.lineNumber = this.startMarker.line;
              this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
            };

            JSXParser.prototype.finishJSX = function () {
              // Prime the next lookahead.
              this.nextToken();
            };

            JSXParser.prototype.reenterJSX = function () {
              this.startJSX();
              this.expectJSX('}'); // Pop the closing '}' added from the lookahead.

              if (this.config.tokens) {
                this.tokens.pop();
              }
            };

            JSXParser.prototype.createJSXNode = function () {
              this.collectComments();
              return {
                index: this.scanner.index,
                line: this.scanner.lineNumber,
                column: this.scanner.index - this.scanner.lineStart
              };
            };

            JSXParser.prototype.createJSXChildNode = function () {
              return {
                index: this.scanner.index,
                line: this.scanner.lineNumber,
                column: this.scanner.index - this.scanner.lineStart
              };
            };

            JSXParser.prototype.scanXHTMLEntity = function (quote) {
              var result = '&';
              var valid = true;
              var terminated = false;
              var numeric = false;
              var hex = false;

              while (!this.scanner.eof() && valid && !terminated) {
                var ch = this.scanner.source[this.scanner.index];

                if (ch === quote) {
                  break;
                }

                terminated = ch === ';';
                result += ch;
                ++this.scanner.index;

                if (!terminated) {
                  switch (result.length) {
                    case 2:
                      // e.g. '&#123;'
                      numeric = ch === '#';
                      break;

                    case 3:
                      if (numeric) {
                        // e.g. '&#x41;'
                        hex = ch === 'x';
                        valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));
                        numeric = numeric && !hex;
                      }

                      break;

                    default:
                      valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));
                      valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));
                      break;
                  }
                }
              }

              if (valid && terminated && result.length > 2) {
                // e.g. '&#x41;' becomes just '#x41'
                var str = result.substr(1, result.length - 2);

                if (numeric && str.length > 1) {
                  result = String.fromCharCode(parseInt(str.substr(1), 10));
                } else if (hex && str.length > 2) {
                  result = String.fromCharCode(parseInt('0' + str.substr(1), 16));
                } else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {
                  result = xhtml_entities_1.XHTMLEntities[str];
                }
              }

              return result;
            }; // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.


            JSXParser.prototype.lexJSX = function () {
              var cp = this.scanner.source.charCodeAt(this.scanner.index); // < > / : = { }

              if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {
                var value = this.scanner.source[this.scanner.index++];
                return {
                  type: 7
                  /* Punctuator */
                  ,
                  value: value,
                  lineNumber: this.scanner.lineNumber,
                  lineStart: this.scanner.lineStart,
                  start: this.scanner.index - 1,
                  end: this.scanner.index
                };
              } // " '


              if (cp === 34 || cp === 39) {
                var start = this.scanner.index;
                var quote = this.scanner.source[this.scanner.index++];
                var str = '';

                while (!this.scanner.eof()) {
                  var ch = this.scanner.source[this.scanner.index++];

                  if (ch === quote) {
                    break;
                  } else if (ch === '&') {
                    str += this.scanXHTMLEntity(quote);
                  } else {
                    str += ch;
                  }
                }

                return {
                  type: 8
                  /* StringLiteral */
                  ,
                  value: str,
                  lineNumber: this.scanner.lineNumber,
                  lineStart: this.scanner.lineStart,
                  start: start,
                  end: this.scanner.index
                };
              } // ... or .


              if (cp === 46) {
                var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);
                var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);
                var value = n1 === 46 && n2 === 46 ? '...' : '.';
                var start = this.scanner.index;
                this.scanner.index += value.length;
                return {
                  type: 7
                  /* Punctuator */
                  ,
                  value: value,
                  lineNumber: this.scanner.lineNumber,
                  lineStart: this.scanner.lineStart,
                  start: start,
                  end: this.scanner.index
                };
              } // `


              if (cp === 96) {
                // Only placeholder, since it will be rescanned as a real assignment expression.
                return {
                  type: 10
                  /* Template */
                  ,
                  value: '',
                  lineNumber: this.scanner.lineNumber,
                  lineStart: this.scanner.lineStart,
                  start: this.scanner.index,
                  end: this.scanner.index
                };
              } // Identifer can not contain backslash (char code 92).


              if (character_1.Character.isIdentifierStart(cp) && cp !== 92) {
                var start = this.scanner.index;
                ++this.scanner.index;

                while (!this.scanner.eof()) {
                  var ch = this.scanner.source.charCodeAt(this.scanner.index);

                  if (character_1.Character.isIdentifierPart(ch) && ch !== 92) {
                    ++this.scanner.index;
                  } else if (ch === 45) {
                    // Hyphen (char code 45) can be part of an identifier.
                    ++this.scanner.index;
                  } else {
                    break;
                  }
                }

                var id = this.scanner.source.slice(start, this.scanner.index);
                return {
                  type: 100
                  /* Identifier */
                  ,
                  value: id,
                  lineNumber: this.scanner.lineNumber,
                  lineStart: this.scanner.lineStart,
                  start: start,
                  end: this.scanner.index
                };
              }

              return this.scanner.lex();
            };

            JSXParser.prototype.nextJSXToken = function () {
              this.collectComments();
              this.startMarker.index = this.scanner.index;
              this.startMarker.line = this.scanner.lineNumber;
              this.startMarker.column = this.scanner.index - this.scanner.lineStart;
              var token = this.lexJSX();
              this.lastMarker.index = this.scanner.index;
              this.lastMarker.line = this.scanner.lineNumber;
              this.lastMarker.column = this.scanner.index - this.scanner.lineStart;

              if (this.config.tokens) {
                this.tokens.push(this.convertToken(token));
              }

              return token;
            };

            JSXParser.prototype.nextJSXText = function () {
              this.startMarker.index = this.scanner.index;
              this.startMarker.line = this.scanner.lineNumber;
              this.startMarker.column = this.scanner.index - this.scanner.lineStart;
              var start = this.scanner.index;
              var text = '';

              while (!this.scanner.eof()) {
                var ch = this.scanner.source[this.scanner.index];

                if (ch === '{' || ch === '<') {
                  break;
                }

                ++this.scanner.index;
                text += ch;

                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                  ++this.scanner.lineNumber;

                  if (ch === '\r' && this.scanner.source[this.scanner.index] === '\n') {
                    ++this.scanner.index;
                  }

                  this.scanner.lineStart = this.scanner.index;
                }
              }

              this.lastMarker.index = this.scanner.index;
              this.lastMarker.line = this.scanner.lineNumber;
              this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
              var token = {
                type: 101
                /* Text */
                ,
                value: text,
                lineNumber: this.scanner.lineNumber,
                lineStart: this.scanner.lineStart,
                start: start,
                end: this.scanner.index
              };

              if (text.length > 0 && this.config.tokens) {
                this.tokens.push(this.convertToken(token));
              }

              return token;
            };

            JSXParser.prototype.peekJSXToken = function () {
              var state = this.scanner.saveState();
              this.scanner.scanComments();
              var next = this.lexJSX();
              this.scanner.restoreState(state);
              return next;
            }; // Expect the next JSX token to match the specified punctuator.
            // If not, an exception will be thrown.


            JSXParser.prototype.expectJSX = function (value) {
              var token = this.nextJSXToken();

              if (token.type !== 7
              /* Punctuator */
              || token.value !== value) {
                this.throwUnexpectedToken(token);
              }
            }; // Return true if the next JSX token matches the specified punctuator.


            JSXParser.prototype.matchJSX = function (value) {
              var next = this.peekJSXToken();
              return next.type === 7
              /* Punctuator */
              && next.value === value;
            };

            JSXParser.prototype.parseJSXIdentifier = function () {
              var node = this.createJSXNode();
              var token = this.nextJSXToken();

              if (token.type !== 100
              /* Identifier */
              ) {
                  this.throwUnexpectedToken(token);
                }

              return this.finalize(node, new JSXNode.JSXIdentifier(token.value));
            };

            JSXParser.prototype.parseJSXElementName = function () {
              var node = this.createJSXNode();
              var elementName = this.parseJSXIdentifier();

              if (this.matchJSX(':')) {
                var namespace = elementName;
                this.expectJSX(':');
                var name_1 = this.parseJSXIdentifier();
                elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));
              } else if (this.matchJSX('.')) {
                while (this.matchJSX('.')) {
                  var object = elementName;
                  this.expectJSX('.');
                  var property = this.parseJSXIdentifier();
                  elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));
                }
              }

              return elementName;
            };

            JSXParser.prototype.parseJSXAttributeName = function () {
              var node = this.createJSXNode();
              var attributeName;
              var identifier = this.parseJSXIdentifier();

              if (this.matchJSX(':')) {
                var namespace = identifier;
                this.expectJSX(':');
                var name_2 = this.parseJSXIdentifier();
                attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));
              } else {
                attributeName = identifier;
              }

              return attributeName;
            };

            JSXParser.prototype.parseJSXStringLiteralAttribute = function () {
              var node = this.createJSXNode();
              var token = this.nextJSXToken();

              if (token.type !== 8
              /* StringLiteral */
              ) {
                  this.throwUnexpectedToken(token);
                }

              var raw = this.getTokenRaw(token);
              return this.finalize(node, new Node.Literal(token.value, raw));
            };

            JSXParser.prototype.parseJSXExpressionAttribute = function () {
              var node = this.createJSXNode();
              this.expectJSX('{');
              this.finishJSX();

              if (this.match('}')) {
                this.tolerateError('JSX attributes must only be assigned a non-empty expression');
              }

              var expression = this.parseAssignmentExpression();
              this.reenterJSX();
              return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
            };

            JSXParser.prototype.parseJSXAttributeValue = function () {
              return this.matchJSX('{') ? this.parseJSXExpressionAttribute() : this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
            };

            JSXParser.prototype.parseJSXNameValueAttribute = function () {
              var node = this.createJSXNode();
              var name = this.parseJSXAttributeName();
              var value = null;

              if (this.matchJSX('=')) {
                this.expectJSX('=');
                value = this.parseJSXAttributeValue();
              }

              return this.finalize(node, new JSXNode.JSXAttribute(name, value));
            };

            JSXParser.prototype.parseJSXSpreadAttribute = function () {
              var node = this.createJSXNode();
              this.expectJSX('{');
              this.expectJSX('...');
              this.finishJSX();
              var argument = this.parseAssignmentExpression();
              this.reenterJSX();
              return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));
            };

            JSXParser.prototype.parseJSXAttributes = function () {
              var attributes = [];

              while (!this.matchJSX('/') && !this.matchJSX('>')) {
                var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() : this.parseJSXNameValueAttribute();
                attributes.push(attribute);
              }

              return attributes;
            };

            JSXParser.prototype.parseJSXOpeningElement = function () {
              var node = this.createJSXNode();
              this.expectJSX('<');
              var name = this.parseJSXElementName();
              var attributes = this.parseJSXAttributes();
              var selfClosing = this.matchJSX('/');

              if (selfClosing) {
                this.expectJSX('/');
              }

              this.expectJSX('>');
              return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
            };

            JSXParser.prototype.parseJSXBoundaryElement = function () {
              var node = this.createJSXNode();
              this.expectJSX('<');

              if (this.matchJSX('/')) {
                this.expectJSX('/');
                var name_3 = this.parseJSXElementName();
                this.expectJSX('>');
                return this.finalize(node, new JSXNode.JSXClosingElement(name_3));
              }

              var name = this.parseJSXElementName();
              var attributes = this.parseJSXAttributes();
              var selfClosing = this.matchJSX('/');

              if (selfClosing) {
                this.expectJSX('/');
              }

              this.expectJSX('>');
              return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
            };

            JSXParser.prototype.parseJSXEmptyExpression = function () {
              var node = this.createJSXChildNode();
              this.collectComments();
              this.lastMarker.index = this.scanner.index;
              this.lastMarker.line = this.scanner.lineNumber;
              this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
              return this.finalize(node, new JSXNode.JSXEmptyExpression());
            };

            JSXParser.prototype.parseJSXExpressionContainer = function () {
              var node = this.createJSXNode();
              this.expectJSX('{');
              var expression;

              if (this.matchJSX('}')) {
                expression = this.parseJSXEmptyExpression();
                this.expectJSX('}');
              } else {
                this.finishJSX();
                expression = this.parseAssignmentExpression();
                this.reenterJSX();
              }

              return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
            };

            JSXParser.prototype.parseJSXChildren = function () {
              var children = [];

              while (!this.scanner.eof()) {
                var node = this.createJSXChildNode();
                var token = this.nextJSXText();

                if (token.start < token.end) {
                  var raw = this.getTokenRaw(token);
                  var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));
                  children.push(child);
                }

                if (this.scanner.source[this.scanner.index] === '{') {
                  var container = this.parseJSXExpressionContainer();
                  children.push(container);
                } else {
                  break;
                }
              }

              return children;
            };

            JSXParser.prototype.parseComplexJSXElement = function (el) {
              var stack = [];

              while (!this.scanner.eof()) {
                el.children = el.children.concat(this.parseJSXChildren());
                var node = this.createJSXChildNode();
                var element = this.parseJSXBoundaryElement();

                if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {
                  var opening = element;

                  if (opening.selfClosing) {
                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));
                    el.children.push(child);
                  } else {
                    stack.push(el);
                    el = {
                      node: node,
                      opening: opening,
                      closing: null,
                      children: []
                    };
                  }
                }

                if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {
                  el.closing = element;
                  var open_1 = getQualifiedElementName(el.opening.name);
                  var close_1 = getQualifiedElementName(el.closing.name);

                  if (open_1 !== close_1) {
                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);
                  }

                  if (stack.length > 0) {
                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));
                    el = stack[stack.length - 1];
                    el.children.push(child);
                    stack.pop();
                  } else {
                    break;
                  }
                }
              }

              return el;
            };

            JSXParser.prototype.parseJSXElement = function () {
              var node = this.createJSXNode();
              var opening = this.parseJSXOpeningElement();
              var children = [];
              var closing = null;

              if (!opening.selfClosing) {
                var el = this.parseComplexJSXElement({
                  node: node,
                  opening: opening,
                  closing: closing,
                  children: children
                });
                children = el.children;
                closing = el.closing;
              }

              return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));
            };

            JSXParser.prototype.parseJSXRoot = function () {
              // Pop the opening '<' added from the lookahead.
              if (this.config.tokens) {
                this.tokens.pop();
              }

              this.startJSX();
              var element = this.parseJSXElement();
              this.finishJSX();
              return element;
            };

            JSXParser.prototype.isStartOfExpression = function () {
              return _super.prototype.isStartOfExpression.call(this) || this.match('<');
            };

            return JSXParser;
          }(parser_1.Parser);

          exports.JSXParser = JSXParser;
          /***/
        },
        /* 4 */

        /***/
        function (module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          }); // See also tools/generate-unicode-regex.js.

          var Regex = {
            // Unicode v8.0.0 NonAsciiIdentifierStart:
            NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
            // Unicode v8.0.0 NonAsciiIdentifierPart:
            NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
          };
          exports.Character = {
            /* tslint:disable:no-bitwise */
            fromCodePoint: function fromCodePoint(cp) {
              return cp < 0x10000 ? String.fromCharCode(cp) : String.fromCharCode(0xD800 + (cp - 0x10000 >> 10)) + String.fromCharCode(0xDC00 + (cp - 0x10000 & 1023));
            },
            // https://tc39.github.io/ecma262/#sec-white-space
            isWhiteSpace: function isWhiteSpace(cp) {
              return cp === 0x20 || cp === 0x09 || cp === 0x0B || cp === 0x0C || cp === 0xA0 || cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0;
            },
            // https://tc39.github.io/ecma262/#sec-line-terminators
            isLineTerminator: function isLineTerminator(cp) {
              return cp === 0x0A || cp === 0x0D || cp === 0x2028 || cp === 0x2029;
            },
            // https://tc39.github.io/ecma262/#sec-names-and-keywords
            isIdentifierStart: function isIdentifierStart(cp) {
              return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp));
            },
            isIdentifierPart: function isIdentifierPart(cp) {
              return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp >= 0x30 && cp <= 0x39 || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp));
            },
            // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
            isDecimalDigit: function isDecimalDigit(cp) {
              return cp >= 0x30 && cp <= 0x39; // 0..9
            },
            isHexDigit: function isHexDigit(cp) {
              return cp >= 0x30 && cp <= 0x39 || cp >= 0x41 && cp <= 0x46 || cp >= 0x61 && cp <= 0x66; // a..f
            },
            isOctalDigit: function isOctalDigit(cp) {
              return cp >= 0x30 && cp <= 0x37; // 0..7
            }
          };
          /***/
        },
        /* 5 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var jsx_syntax_1 = __webpack_require__(6);
          /* tslint:disable:max-classes-per-file */


          var JSXClosingElement = function () {
            function JSXClosingElement(name) {
              this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;
              this.name = name;
            }

            return JSXClosingElement;
          }();

          exports.JSXClosingElement = JSXClosingElement;

          var JSXElement = function () {
            function JSXElement(openingElement, children, closingElement) {
              this.type = jsx_syntax_1.JSXSyntax.JSXElement;
              this.openingElement = openingElement;
              this.children = children;
              this.closingElement = closingElement;
            }

            return JSXElement;
          }();

          exports.JSXElement = JSXElement;

          var JSXEmptyExpression = function () {
            function JSXEmptyExpression() {
              this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;
            }

            return JSXEmptyExpression;
          }();

          exports.JSXEmptyExpression = JSXEmptyExpression;

          var JSXExpressionContainer = function () {
            function JSXExpressionContainer(expression) {
              this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;
              this.expression = expression;
            }

            return JSXExpressionContainer;
          }();

          exports.JSXExpressionContainer = JSXExpressionContainer;

          var JSXIdentifier = function () {
            function JSXIdentifier(name) {
              this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;
              this.name = name;
            }

            return JSXIdentifier;
          }();

          exports.JSXIdentifier = JSXIdentifier;

          var JSXMemberExpression = function () {
            function JSXMemberExpression(object, property) {
              this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;
              this.object = object;
              this.property = property;
            }

            return JSXMemberExpression;
          }();

          exports.JSXMemberExpression = JSXMemberExpression;

          var JSXAttribute = function () {
            function JSXAttribute(name, value) {
              this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;
              this.name = name;
              this.value = value;
            }

            return JSXAttribute;
          }();

          exports.JSXAttribute = JSXAttribute;

          var JSXNamespacedName = function () {
            function JSXNamespacedName(namespace, name) {
              this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;
              this.namespace = namespace;
              this.name = name;
            }

            return JSXNamespacedName;
          }();

          exports.JSXNamespacedName = JSXNamespacedName;

          var JSXOpeningElement = function () {
            function JSXOpeningElement(name, selfClosing, attributes) {
              this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;
              this.name = name;
              this.selfClosing = selfClosing;
              this.attributes = attributes;
            }

            return JSXOpeningElement;
          }();

          exports.JSXOpeningElement = JSXOpeningElement;

          var JSXSpreadAttribute = function () {
            function JSXSpreadAttribute(argument) {
              this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;
              this.argument = argument;
            }

            return JSXSpreadAttribute;
          }();

          exports.JSXSpreadAttribute = JSXSpreadAttribute;

          var JSXText = function () {
            function JSXText(value, raw) {
              this.type = jsx_syntax_1.JSXSyntax.JSXText;
              this.value = value;
              this.raw = raw;
            }

            return JSXText;
          }();

          exports.JSXText = JSXText;
          /***/
        },
        /* 6 */

        /***/
        function (module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.JSXSyntax = {
            JSXAttribute: 'JSXAttribute',
            JSXClosingElement: 'JSXClosingElement',
            JSXElement: 'JSXElement',
            JSXEmptyExpression: 'JSXEmptyExpression',
            JSXExpressionContainer: 'JSXExpressionContainer',
            JSXIdentifier: 'JSXIdentifier',
            JSXMemberExpression: 'JSXMemberExpression',
            JSXNamespacedName: 'JSXNamespacedName',
            JSXOpeningElement: 'JSXOpeningElement',
            JSXSpreadAttribute: 'JSXSpreadAttribute',
            JSXText: 'JSXText'
          };
          /***/
        },
        /* 7 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var syntax_1 = __webpack_require__(2);
          /* tslint:disable:max-classes-per-file */


          var ArrayExpression = function () {
            function ArrayExpression(elements) {
              this.type = syntax_1.Syntax.ArrayExpression;
              this.elements = elements;
            }

            return ArrayExpression;
          }();

          exports.ArrayExpression = ArrayExpression;

          var ArrayPattern = function () {
            function ArrayPattern(elements) {
              this.type = syntax_1.Syntax.ArrayPattern;
              this.elements = elements;
            }

            return ArrayPattern;
          }();

          exports.ArrayPattern = ArrayPattern;

          var ArrowFunctionExpression = function () {
            function ArrowFunctionExpression(params, body, expression) {
              this.type = syntax_1.Syntax.ArrowFunctionExpression;
              this.id = null;
              this.params = params;
              this.body = body;
              this.generator = false;
              this.expression = expression;
              this.async = false;
            }

            return ArrowFunctionExpression;
          }();

          exports.ArrowFunctionExpression = ArrowFunctionExpression;

          var AssignmentExpression = function () {
            function AssignmentExpression(operator, left, right) {
              this.type = syntax_1.Syntax.AssignmentExpression;
              this.operator = operator;
              this.left = left;
              this.right = right;
            }

            return AssignmentExpression;
          }();

          exports.AssignmentExpression = AssignmentExpression;

          var AssignmentPattern = function () {
            function AssignmentPattern(left, right) {
              this.type = syntax_1.Syntax.AssignmentPattern;
              this.left = left;
              this.right = right;
            }

            return AssignmentPattern;
          }();

          exports.AssignmentPattern = AssignmentPattern;

          var AsyncArrowFunctionExpression = function () {
            function AsyncArrowFunctionExpression(params, body, expression) {
              this.type = syntax_1.Syntax.ArrowFunctionExpression;
              this.id = null;
              this.params = params;
              this.body = body;
              this.generator = false;
              this.expression = expression;
              this.async = true;
            }

            return AsyncArrowFunctionExpression;
          }();

          exports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;

          var AsyncFunctionDeclaration = function () {
            function AsyncFunctionDeclaration(id, params, body) {
              this.type = syntax_1.Syntax.FunctionDeclaration;
              this.id = id;
              this.params = params;
              this.body = body;
              this.generator = false;
              this.expression = false;
              this.async = true;
            }

            return AsyncFunctionDeclaration;
          }();

          exports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;

          var AsyncFunctionExpression = function () {
            function AsyncFunctionExpression(id, params, body) {
              this.type = syntax_1.Syntax.FunctionExpression;
              this.id = id;
              this.params = params;
              this.body = body;
              this.generator = false;
              this.expression = false;
              this.async = true;
            }

            return AsyncFunctionExpression;
          }();

          exports.AsyncFunctionExpression = AsyncFunctionExpression;

          var AwaitExpression = function () {
            function AwaitExpression(argument) {
              this.type = syntax_1.Syntax.AwaitExpression;
              this.argument = argument;
            }

            return AwaitExpression;
          }();

          exports.AwaitExpression = AwaitExpression;

          var BinaryExpression = function () {
            function BinaryExpression(operator, left, right) {
              var logical = operator === '||' || operator === '&&';
              this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;
              this.operator = operator;
              this.left = left;
              this.right = right;
            }

            return BinaryExpression;
          }();

          exports.BinaryExpression = BinaryExpression;

          var BlockStatement = function () {
            function BlockStatement(body) {
              this.type = syntax_1.Syntax.BlockStatement;
              this.body = body;
            }

            return BlockStatement;
          }();

          exports.BlockStatement = BlockStatement;

          var BreakStatement = function () {
            function BreakStatement(label) {
              this.type = syntax_1.Syntax.BreakStatement;
              this.label = label;
            }

            return BreakStatement;
          }();

          exports.BreakStatement = BreakStatement;

          var CallExpression = function () {
            function CallExpression(callee, args) {
              this.type = syntax_1.Syntax.CallExpression;
              this.callee = callee;
              this.arguments = args;
            }

            return CallExpression;
          }();

          exports.CallExpression = CallExpression;

          var CatchClause = function () {
            function CatchClause(param, body) {
              this.type = syntax_1.Syntax.CatchClause;
              this.param = param;
              this.body = body;
            }

            return CatchClause;
          }();

          exports.CatchClause = CatchClause;

          var ClassBody = function () {
            function ClassBody(body) {
              this.type = syntax_1.Syntax.ClassBody;
              this.body = body;
            }

            return ClassBody;
          }();

          exports.ClassBody = ClassBody;

          var ClassDeclaration = function () {
            function ClassDeclaration(id, superClass, body) {
              this.type = syntax_1.Syntax.ClassDeclaration;
              this.id = id;
              this.superClass = superClass;
              this.body = body;
            }

            return ClassDeclaration;
          }();

          exports.ClassDeclaration = ClassDeclaration;

          var ClassExpression = function () {
            function ClassExpression(id, superClass, body) {
              this.type = syntax_1.Syntax.ClassExpression;
              this.id = id;
              this.superClass = superClass;
              this.body = body;
            }

            return ClassExpression;
          }();

          exports.ClassExpression = ClassExpression;

          var ComputedMemberExpression = function () {
            function ComputedMemberExpression(object, property) {
              this.type = syntax_1.Syntax.MemberExpression;
              this.computed = true;
              this.object = object;
              this.property = property;
            }

            return ComputedMemberExpression;
          }();

          exports.ComputedMemberExpression = ComputedMemberExpression;

          var ConditionalExpression = function () {
            function ConditionalExpression(test, consequent, alternate) {
              this.type = syntax_1.Syntax.ConditionalExpression;
              this.test = test;
              this.consequent = consequent;
              this.alternate = alternate;
            }

            return ConditionalExpression;
          }();

          exports.ConditionalExpression = ConditionalExpression;

          var ContinueStatement = function () {
            function ContinueStatement(label) {
              this.type = syntax_1.Syntax.ContinueStatement;
              this.label = label;
            }

            return ContinueStatement;
          }();

          exports.ContinueStatement = ContinueStatement;

          var DebuggerStatement = function () {
            function DebuggerStatement() {
              this.type = syntax_1.Syntax.DebuggerStatement;
            }

            return DebuggerStatement;
          }();

          exports.DebuggerStatement = DebuggerStatement;

          var Directive = function () {
            function Directive(expression, directive) {
              this.type = syntax_1.Syntax.ExpressionStatement;
              this.expression = expression;
              this.directive = directive;
            }

            return Directive;
          }();

          exports.Directive = Directive;

          var DoWhileStatement = function () {
            function DoWhileStatement(body, test) {
              this.type = syntax_1.Syntax.DoWhileStatement;
              this.body = body;
              this.test = test;
            }

            return DoWhileStatement;
          }();

          exports.DoWhileStatement = DoWhileStatement;

          var EmptyStatement = function () {
            function EmptyStatement() {
              this.type = syntax_1.Syntax.EmptyStatement;
            }

            return EmptyStatement;
          }();

          exports.EmptyStatement = EmptyStatement;

          var ExportAllDeclaration = function () {
            function ExportAllDeclaration(source) {
              this.type = syntax_1.Syntax.ExportAllDeclaration;
              this.source = source;
            }

            return ExportAllDeclaration;
          }();

          exports.ExportAllDeclaration = ExportAllDeclaration;

          var ExportDefaultDeclaration = function () {
            function ExportDefaultDeclaration(declaration) {
              this.type = syntax_1.Syntax.ExportDefaultDeclaration;
              this.declaration = declaration;
            }

            return ExportDefaultDeclaration;
          }();

          exports.ExportDefaultDeclaration = ExportDefaultDeclaration;

          var ExportNamedDeclaration = function () {
            function ExportNamedDeclaration(declaration, specifiers, source) {
              this.type = syntax_1.Syntax.ExportNamedDeclaration;
              this.declaration = declaration;
              this.specifiers = specifiers;
              this.source = source;
            }

            return ExportNamedDeclaration;
          }();

          exports.ExportNamedDeclaration = ExportNamedDeclaration;

          var ExportSpecifier = function () {
            function ExportSpecifier(local, exported) {
              this.type = syntax_1.Syntax.ExportSpecifier;
              this.exported = exported;
              this.local = local;
            }

            return ExportSpecifier;
          }();

          exports.ExportSpecifier = ExportSpecifier;

          var ExpressionStatement = function () {
            function ExpressionStatement(expression) {
              this.type = syntax_1.Syntax.ExpressionStatement;
              this.expression = expression;
            }

            return ExpressionStatement;
          }();

          exports.ExpressionStatement = ExpressionStatement;

          var ForInStatement = function () {
            function ForInStatement(left, right, body) {
              this.type = syntax_1.Syntax.ForInStatement;
              this.left = left;
              this.right = right;
              this.body = body;
              this.each = false;
            }

            return ForInStatement;
          }();

          exports.ForInStatement = ForInStatement;

          var ForOfStatement = function () {
            function ForOfStatement(left, right, body) {
              this.type = syntax_1.Syntax.ForOfStatement;
              this.left = left;
              this.right = right;
              this.body = body;
            }

            return ForOfStatement;
          }();

          exports.ForOfStatement = ForOfStatement;

          var ForStatement = function () {
            function ForStatement(init, test, update, body) {
              this.type = syntax_1.Syntax.ForStatement;
              this.init = init;
              this.test = test;
              this.update = update;
              this.body = body;
            }

            return ForStatement;
          }();

          exports.ForStatement = ForStatement;

          var FunctionDeclaration = function () {
            function FunctionDeclaration(id, params, body, generator) {
              this.type = syntax_1.Syntax.FunctionDeclaration;
              this.id = id;
              this.params = params;
              this.body = body;
              this.generator = generator;
              this.expression = false;
              this.async = false;
            }

            return FunctionDeclaration;
          }();

          exports.FunctionDeclaration = FunctionDeclaration;

          var FunctionExpression = function () {
            function FunctionExpression(id, params, body, generator) {
              this.type = syntax_1.Syntax.FunctionExpression;
              this.id = id;
              this.params = params;
              this.body = body;
              this.generator = generator;
              this.expression = false;
              this.async = false;
            }

            return FunctionExpression;
          }();

          exports.FunctionExpression = FunctionExpression;

          var Identifier = function () {
            function Identifier(name) {
              this.type = syntax_1.Syntax.Identifier;
              this.name = name;
            }

            return Identifier;
          }();

          exports.Identifier = Identifier;

          var IfStatement = function () {
            function IfStatement(test, consequent, alternate) {
              this.type = syntax_1.Syntax.IfStatement;
              this.test = test;
              this.consequent = consequent;
              this.alternate = alternate;
            }

            return IfStatement;
          }();

          exports.IfStatement = IfStatement;

          var ImportDeclaration = function () {
            function ImportDeclaration(specifiers, source) {
              this.type = syntax_1.Syntax.ImportDeclaration;
              this.specifiers = specifiers;
              this.source = source;
            }

            return ImportDeclaration;
          }();

          exports.ImportDeclaration = ImportDeclaration;

          var ImportDefaultSpecifier = function () {
            function ImportDefaultSpecifier(local) {
              this.type = syntax_1.Syntax.ImportDefaultSpecifier;
              this.local = local;
            }

            return ImportDefaultSpecifier;
          }();

          exports.ImportDefaultSpecifier = ImportDefaultSpecifier;

          var ImportNamespaceSpecifier = function () {
            function ImportNamespaceSpecifier(local) {
              this.type = syntax_1.Syntax.ImportNamespaceSpecifier;
              this.local = local;
            }

            return ImportNamespaceSpecifier;
          }();

          exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;

          var ImportSpecifier = function () {
            function ImportSpecifier(local, imported) {
              this.type = syntax_1.Syntax.ImportSpecifier;
              this.local = local;
              this.imported = imported;
            }

            return ImportSpecifier;
          }();

          exports.ImportSpecifier = ImportSpecifier;

          var LabeledStatement = function () {
            function LabeledStatement(label, body) {
              this.type = syntax_1.Syntax.LabeledStatement;
              this.label = label;
              this.body = body;
            }

            return LabeledStatement;
          }();

          exports.LabeledStatement = LabeledStatement;

          var Literal = function () {
            function Literal(value, raw) {
              this.type = syntax_1.Syntax.Literal;
              this.value = value;
              this.raw = raw;
            }

            return Literal;
          }();

          exports.Literal = Literal;

          var MetaProperty = function () {
            function MetaProperty(meta, property) {
              this.type = syntax_1.Syntax.MetaProperty;
              this.meta = meta;
              this.property = property;
            }

            return MetaProperty;
          }();

          exports.MetaProperty = MetaProperty;

          var MethodDefinition = function () {
            function MethodDefinition(key, computed, value, kind, isStatic) {
              this.type = syntax_1.Syntax.MethodDefinition;
              this.key = key;
              this.computed = computed;
              this.value = value;
              this.kind = kind;
              this["static"] = isStatic;
            }

            return MethodDefinition;
          }();

          exports.MethodDefinition = MethodDefinition;

          var Module = function () {
            function Module(body) {
              this.type = syntax_1.Syntax.Program;
              this.body = body;
              this.sourceType = 'module';
            }

            return Module;
          }();

          exports.Module = Module;

          var NewExpression = function () {
            function NewExpression(callee, args) {
              this.type = syntax_1.Syntax.NewExpression;
              this.callee = callee;
              this.arguments = args;
            }

            return NewExpression;
          }();

          exports.NewExpression = NewExpression;

          var ObjectExpression = function () {
            function ObjectExpression(properties) {
              this.type = syntax_1.Syntax.ObjectExpression;
              this.properties = properties;
            }

            return ObjectExpression;
          }();

          exports.ObjectExpression = ObjectExpression;

          var ObjectPattern = function () {
            function ObjectPattern(properties) {
              this.type = syntax_1.Syntax.ObjectPattern;
              this.properties = properties;
            }

            return ObjectPattern;
          }();

          exports.ObjectPattern = ObjectPattern;

          var Property = function () {
            function Property(kind, key, computed, value, method, shorthand) {
              this.type = syntax_1.Syntax.Property;
              this.key = key;
              this.computed = computed;
              this.value = value;
              this.kind = kind;
              this.method = method;
              this.shorthand = shorthand;
            }

            return Property;
          }();

          exports.Property = Property;

          var RegexLiteral = function () {
            function RegexLiteral(value, raw, pattern, flags) {
              this.type = syntax_1.Syntax.Literal;
              this.value = value;
              this.raw = raw;
              this.regex = {
                pattern: pattern,
                flags: flags
              };
            }

            return RegexLiteral;
          }();

          exports.RegexLiteral = RegexLiteral;

          var RestElement = function () {
            function RestElement(argument) {
              this.type = syntax_1.Syntax.RestElement;
              this.argument = argument;
            }

            return RestElement;
          }();

          exports.RestElement = RestElement;

          var ReturnStatement = function () {
            function ReturnStatement(argument) {
              this.type = syntax_1.Syntax.ReturnStatement;
              this.argument = argument;
            }

            return ReturnStatement;
          }();

          exports.ReturnStatement = ReturnStatement;

          var Script = function () {
            function Script(body) {
              this.type = syntax_1.Syntax.Program;
              this.body = body;
              this.sourceType = 'script';
            }

            return Script;
          }();

          exports.Script = Script;

          var SequenceExpression = function () {
            function SequenceExpression(expressions) {
              this.type = syntax_1.Syntax.SequenceExpression;
              this.expressions = expressions;
            }

            return SequenceExpression;
          }();

          exports.SequenceExpression = SequenceExpression;

          var SpreadElement = function () {
            function SpreadElement(argument) {
              this.type = syntax_1.Syntax.SpreadElement;
              this.argument = argument;
            }

            return SpreadElement;
          }();

          exports.SpreadElement = SpreadElement;

          var StaticMemberExpression = function () {
            function StaticMemberExpression(object, property) {
              this.type = syntax_1.Syntax.MemberExpression;
              this.computed = false;
              this.object = object;
              this.property = property;
            }

            return StaticMemberExpression;
          }();

          exports.StaticMemberExpression = StaticMemberExpression;

          var Super = function () {
            function Super() {
              this.type = syntax_1.Syntax.Super;
            }

            return Super;
          }();

          exports.Super = Super;

          var SwitchCase = function () {
            function SwitchCase(test, consequent) {
              this.type = syntax_1.Syntax.SwitchCase;
              this.test = test;
              this.consequent = consequent;
            }

            return SwitchCase;
          }();

          exports.SwitchCase = SwitchCase;

          var SwitchStatement = function () {
            function SwitchStatement(discriminant, cases) {
              this.type = syntax_1.Syntax.SwitchStatement;
              this.discriminant = discriminant;
              this.cases = cases;
            }

            return SwitchStatement;
          }();

          exports.SwitchStatement = SwitchStatement;

          var TaggedTemplateExpression = function () {
            function TaggedTemplateExpression(tag, quasi) {
              this.type = syntax_1.Syntax.TaggedTemplateExpression;
              this.tag = tag;
              this.quasi = quasi;
            }

            return TaggedTemplateExpression;
          }();

          exports.TaggedTemplateExpression = TaggedTemplateExpression;

          var TemplateElement = function () {
            function TemplateElement(value, tail) {
              this.type = syntax_1.Syntax.TemplateElement;
              this.value = value;
              this.tail = tail;
            }

            return TemplateElement;
          }();

          exports.TemplateElement = TemplateElement;

          var TemplateLiteral = function () {
            function TemplateLiteral(quasis, expressions) {
              this.type = syntax_1.Syntax.TemplateLiteral;
              this.quasis = quasis;
              this.expressions = expressions;
            }

            return TemplateLiteral;
          }();

          exports.TemplateLiteral = TemplateLiteral;

          var ThisExpression = function () {
            function ThisExpression() {
              this.type = syntax_1.Syntax.ThisExpression;
            }

            return ThisExpression;
          }();

          exports.ThisExpression = ThisExpression;

          var ThrowStatement = function () {
            function ThrowStatement(argument) {
              this.type = syntax_1.Syntax.ThrowStatement;
              this.argument = argument;
            }

            return ThrowStatement;
          }();

          exports.ThrowStatement = ThrowStatement;

          var TryStatement = function () {
            function TryStatement(block, handler, finalizer) {
              this.type = syntax_1.Syntax.TryStatement;
              this.block = block;
              this.handler = handler;
              this.finalizer = finalizer;
            }

            return TryStatement;
          }();

          exports.TryStatement = TryStatement;

          var UnaryExpression = function () {
            function UnaryExpression(operator, argument) {
              this.type = syntax_1.Syntax.UnaryExpression;
              this.operator = operator;
              this.argument = argument;
              this.prefix = true;
            }

            return UnaryExpression;
          }();

          exports.UnaryExpression = UnaryExpression;

          var UpdateExpression = function () {
            function UpdateExpression(operator, argument, prefix) {
              this.type = syntax_1.Syntax.UpdateExpression;
              this.operator = operator;
              this.argument = argument;
              this.prefix = prefix;
            }

            return UpdateExpression;
          }();

          exports.UpdateExpression = UpdateExpression;

          var VariableDeclaration = function () {
            function VariableDeclaration(declarations, kind) {
              this.type = syntax_1.Syntax.VariableDeclaration;
              this.declarations = declarations;
              this.kind = kind;
            }

            return VariableDeclaration;
          }();

          exports.VariableDeclaration = VariableDeclaration;

          var VariableDeclarator = function () {
            function VariableDeclarator(id, init) {
              this.type = syntax_1.Syntax.VariableDeclarator;
              this.id = id;
              this.init = init;
            }

            return VariableDeclarator;
          }();

          exports.VariableDeclarator = VariableDeclarator;

          var WhileStatement = function () {
            function WhileStatement(test, body) {
              this.type = syntax_1.Syntax.WhileStatement;
              this.test = test;
              this.body = body;
            }

            return WhileStatement;
          }();

          exports.WhileStatement = WhileStatement;

          var WithStatement = function () {
            function WithStatement(object, body) {
              this.type = syntax_1.Syntax.WithStatement;
              this.object = object;
              this.body = body;
            }

            return WithStatement;
          }();

          exports.WithStatement = WithStatement;

          var YieldExpression = function () {
            function YieldExpression(argument, delegate) {
              this.type = syntax_1.Syntax.YieldExpression;
              this.argument = argument;
              this.delegate = delegate;
            }

            return YieldExpression;
          }();

          exports.YieldExpression = YieldExpression;
          /***/
        },
        /* 8 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var assert_1 = __webpack_require__(9);

          var error_handler_1 = __webpack_require__(10);

          var messages_1 = __webpack_require__(11);

          var Node = __webpack_require__(7);

          var scanner_1 = __webpack_require__(12);

          var syntax_1 = __webpack_require__(2);

          var token_1 = __webpack_require__(13);

          var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';

          var Parser = function () {
            function Parser(code, options, delegate) {
              if (options === void 0) {
                options = {};
              }

              this.config = {
                range: typeof options.range === 'boolean' && options.range,
                loc: typeof options.loc === 'boolean' && options.loc,
                source: null,
                tokens: typeof options.tokens === 'boolean' && options.tokens,
                comment: typeof options.comment === 'boolean' && options.comment,
                tolerant: typeof options.tolerant === 'boolean' && options.tolerant
              };

              if (this.config.loc && options.source && options.source !== null) {
                this.config.source = String(options.source);
              }

              this.delegate = delegate;
              this.errorHandler = new error_handler_1.ErrorHandler();
              this.errorHandler.tolerant = this.config.tolerant;
              this.scanner = new scanner_1.Scanner(code, this.errorHandler);
              this.scanner.trackComment = this.config.comment;
              this.operatorPrecedence = {
                ')': 0,
                ';': 0,
                ',': 0,
                '=': 0,
                ']': 0,
                '||': 1,
                '&&': 2,
                '|': 3,
                '^': 4,
                '&': 5,
                '==': 6,
                '!=': 6,
                '===': 6,
                '!==': 6,
                '<': 7,
                '>': 7,
                '<=': 7,
                '>=': 7,
                '<<': 8,
                '>>': 8,
                '>>>': 8,
                '+': 9,
                '-': 9,
                '*': 11,
                '/': 11,
                '%': 11
              };
              this.lookahead = {
                type: 2
                /* EOF */
                ,
                value: '',
                lineNumber: this.scanner.lineNumber,
                lineStart: 0,
                start: 0,
                end: 0
              };
              this.hasLineTerminator = false;
              this.context = {
                isModule: false,
                "await": false,
                allowIn: true,
                allowStrictDirective: true,
                allowYield: true,
                firstCoverInitializedNameError: null,
                isAssignmentTarget: false,
                isBindingElement: false,
                inFunctionBody: false,
                inIteration: false,
                inSwitch: false,
                labelSet: {},
                strict: false
              };
              this.tokens = [];
              this.startMarker = {
                index: 0,
                line: this.scanner.lineNumber,
                column: 0
              };
              this.lastMarker = {
                index: 0,
                line: this.scanner.lineNumber,
                column: 0
              };
              this.nextToken();
              this.lastMarker = {
                index: this.scanner.index,
                line: this.scanner.lineNumber,
                column: this.scanner.index - this.scanner.lineStart
              };
            }

            Parser.prototype.throwError = function (messageFormat) {
              var values = [];

              for (var _i = 1; _i < arguments.length; _i++) {
                values[_i - 1] = arguments[_i];
              }

              var args = Array.prototype.slice.call(arguments, 1);
              var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
                assert_1.assert(idx < args.length, 'Message reference must be in range');
                return args[idx];
              });
              var index = this.lastMarker.index;
              var line = this.lastMarker.line;
              var column = this.lastMarker.column + 1;
              throw this.errorHandler.createError(index, line, column, msg);
            };

            Parser.prototype.tolerateError = function (messageFormat) {
              var values = [];

              for (var _i = 1; _i < arguments.length; _i++) {
                values[_i - 1] = arguments[_i];
              }

              var args = Array.prototype.slice.call(arguments, 1);
              var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
                assert_1.assert(idx < args.length, 'Message reference must be in range');
                return args[idx];
              });
              var index = this.lastMarker.index;
              var line = this.scanner.lineNumber;
              var column = this.lastMarker.column + 1;
              this.errorHandler.tolerateError(index, line, column, msg);
            }; // Throw an exception because of the token.


            Parser.prototype.unexpectedTokenError = function (token, message) {
              var msg = message || messages_1.Messages.UnexpectedToken;
              var value;

              if (token) {
                if (!message) {
                  msg = token.type === 2
                  /* EOF */
                  ? messages_1.Messages.UnexpectedEOS : token.type === 3
                  /* Identifier */
                  ? messages_1.Messages.UnexpectedIdentifier : token.type === 6
                  /* NumericLiteral */
                  ? messages_1.Messages.UnexpectedNumber : token.type === 8
                  /* StringLiteral */
                  ? messages_1.Messages.UnexpectedString : token.type === 10
                  /* Template */
                  ? messages_1.Messages.UnexpectedTemplate : messages_1.Messages.UnexpectedToken;

                  if (token.type === 4
                  /* Keyword */
                  ) {
                      if (this.scanner.isFutureReservedWord(token.value)) {
                        msg = messages_1.Messages.UnexpectedReserved;
                      } else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {
                        msg = messages_1.Messages.StrictReservedWord;
                      }
                    }
                }

                value = token.value;
              } else {
                value = 'ILLEGAL';
              }

              msg = msg.replace('%0', value);

              if (token && typeof token.lineNumber === 'number') {
                var index = token.start;
                var line = token.lineNumber;
                var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;
                var column = token.start - lastMarkerLineStart + 1;
                return this.errorHandler.createError(index, line, column, msg);
              } else {
                var index = this.lastMarker.index;
                var line = this.lastMarker.line;
                var column = this.lastMarker.column + 1;
                return this.errorHandler.createError(index, line, column, msg);
              }
            };

            Parser.prototype.throwUnexpectedToken = function (token, message) {
              throw this.unexpectedTokenError(token, message);
            };

            Parser.prototype.tolerateUnexpectedToken = function (token, message) {
              this.errorHandler.tolerate(this.unexpectedTokenError(token, message));
            };

            Parser.prototype.collectComments = function () {
              if (!this.config.comment) {
                this.scanner.scanComments();
              } else {
                var comments = this.scanner.scanComments();

                if (comments.length > 0 && this.delegate) {
                  for (var i = 0; i < comments.length; ++i) {
                    var e = comments[i];
                    var node = void 0;
                    node = {
                      type: e.multiLine ? 'BlockComment' : 'LineComment',
                      value: this.scanner.source.slice(e.slice[0], e.slice[1])
                    };

                    if (this.config.range) {
                      node.range = e.range;
                    }

                    if (this.config.loc) {
                      node.loc = e.loc;
                    }

                    var metadata = {
                      start: {
                        line: e.loc.start.line,
                        column: e.loc.start.column,
                        offset: e.range[0]
                      },
                      end: {
                        line: e.loc.end.line,
                        column: e.loc.end.column,
                        offset: e.range[1]
                      }
                    };
                    this.delegate(node, metadata);
                  }
                }
              }
            }; // From internal representation to an external structure


            Parser.prototype.getTokenRaw = function (token) {
              return this.scanner.source.slice(token.start, token.end);
            };

            Parser.prototype.convertToken = function (token) {
              var t = {
                type: token_1.TokenName[token.type],
                value: this.getTokenRaw(token)
              };

              if (this.config.range) {
                t.range = [token.start, token.end];
              }

              if (this.config.loc) {
                t.loc = {
                  start: {
                    line: this.startMarker.line,
                    column: this.startMarker.column
                  },
                  end: {
                    line: this.scanner.lineNumber,
                    column: this.scanner.index - this.scanner.lineStart
                  }
                };
              }

              if (token.type === 9
              /* RegularExpression */
              ) {
                  var pattern = token.pattern;
                  var flags = token.flags;
                  t.regex = {
                    pattern: pattern,
                    flags: flags
                  };
                }

              return t;
            };

            Parser.prototype.nextToken = function () {
              var token = this.lookahead;
              this.lastMarker.index = this.scanner.index;
              this.lastMarker.line = this.scanner.lineNumber;
              this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
              this.collectComments();

              if (this.scanner.index !== this.startMarker.index) {
                this.startMarker.index = this.scanner.index;
                this.startMarker.line = this.scanner.lineNumber;
                this.startMarker.column = this.scanner.index - this.scanner.lineStart;
              }

              var next = this.scanner.lex();
              this.hasLineTerminator = token.lineNumber !== next.lineNumber;

              if (next && this.context.strict && next.type === 3
              /* Identifier */
              ) {
                  if (this.scanner.isStrictModeReservedWord(next.value)) {
                    next.type = 4
                    /* Keyword */
                    ;
                  }
                }

              this.lookahead = next;

              if (this.config.tokens && next.type !== 2
              /* EOF */
              ) {
                  this.tokens.push(this.convertToken(next));
                }

              return token;
            };

            Parser.prototype.nextRegexToken = function () {
              this.collectComments();
              var token = this.scanner.scanRegExp();

              if (this.config.tokens) {
                // Pop the previous token, '/' or '/='
                // This is added from the lookahead token.
                this.tokens.pop();
                this.tokens.push(this.convertToken(token));
              } // Prime the next lookahead.


              this.lookahead = token;
              this.nextToken();
              return token;
            };

            Parser.prototype.createNode = function () {
              return {
                index: this.startMarker.index,
                line: this.startMarker.line,
                column: this.startMarker.column
              };
            };

            Parser.prototype.startNode = function (token, lastLineStart) {
              if (lastLineStart === void 0) {
                lastLineStart = 0;
              }

              var column = token.start - token.lineStart;
              var line = token.lineNumber;

              if (column < 0) {
                column += lastLineStart;
                line--;
              }

              return {
                index: token.start,
                line: line,
                column: column
              };
            };

            Parser.prototype.finalize = function (marker, node) {
              if (this.config.range) {
                node.range = [marker.index, this.lastMarker.index];
              }

              if (this.config.loc) {
                node.loc = {
                  start: {
                    line: marker.line,
                    column: marker.column
                  },
                  end: {
                    line: this.lastMarker.line,
                    column: this.lastMarker.column
                  }
                };

                if (this.config.source) {
                  node.loc.source = this.config.source;
                }
              }

              if (this.delegate) {
                var metadata = {
                  start: {
                    line: marker.line,
                    column: marker.column,
                    offset: marker.index
                  },
                  end: {
                    line: this.lastMarker.line,
                    column: this.lastMarker.column,
                    offset: this.lastMarker.index
                  }
                };
                this.delegate(node, metadata);
              }

              return node;
            }; // Expect the next token to match the specified punctuator.
            // If not, an exception will be thrown.


            Parser.prototype.expect = function (value) {
              var token = this.nextToken();

              if (token.type !== 7
              /* Punctuator */
              || token.value !== value) {
                this.throwUnexpectedToken(token);
              }
            }; // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().


            Parser.prototype.expectCommaSeparator = function () {
              if (this.config.tolerant) {
                var token = this.lookahead;

                if (token.type === 7
                /* Punctuator */
                && token.value === ',') {
                  this.nextToken();
                } else if (token.type === 7
                /* Punctuator */
                && token.value === ';') {
                  this.nextToken();
                  this.tolerateUnexpectedToken(token);
                } else {
                  this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);
                }
              } else {
                this.expect(',');
              }
            }; // Expect the next token to match the specified keyword.
            // If not, an exception will be thrown.


            Parser.prototype.expectKeyword = function (keyword) {
              var token = this.nextToken();

              if (token.type !== 4
              /* Keyword */
              || token.value !== keyword) {
                this.throwUnexpectedToken(token);
              }
            }; // Return true if the next token matches the specified punctuator.


            Parser.prototype.match = function (value) {
              return this.lookahead.type === 7
              /* Punctuator */
              && this.lookahead.value === value;
            }; // Return true if the next token matches the specified keyword


            Parser.prototype.matchKeyword = function (keyword) {
              return this.lookahead.type === 4
              /* Keyword */
              && this.lookahead.value === keyword;
            }; // Return true if the next token matches the specified contextual keyword
            // (where an identifier is sometimes a keyword depending on the context)


            Parser.prototype.matchContextualKeyword = function (keyword) {
              return this.lookahead.type === 3
              /* Identifier */
              && this.lookahead.value === keyword;
            }; // Return true if the next token is an assignment operator


            Parser.prototype.matchAssign = function () {
              if (this.lookahead.type !== 7
              /* Punctuator */
              ) {
                  return false;
                }

              var op = this.lookahead.value;
              return op === '=' || op === '*=' || op === '**=' || op === '/=' || op === '%=' || op === '+=' || op === '-=' || op === '<<=' || op === '>>=' || op === '>>>=' || op === '&=' || op === '^=' || op === '|=';
            }; // Cover grammar support.
            //
            // When an assignment expression position starts with an left parenthesis, the determination of the type
            // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
            // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
            //
            // There are three productions that can be parsed in a parentheses pair that needs to be determined
            // after the outermost pair is closed. They are:
            //
            //   1. AssignmentExpression
            //   2. BindingElements
            //   3. AssignmentTargets
            //
            // In order to avoid exponential backtracking, we use two flags to denote if the production can be
            // binding element or assignment target.
            //
            // The three productions have the relationship:
            //
            //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
            //
            // with a single exception that CoverInitializedName when used directly in an Expression, generates
            // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
            // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
            //
            // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
            // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
            // the CoverInitializedName check is conducted.
            //
            // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
            // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
            // pattern. The CoverInitializedName check is deferred.


            Parser.prototype.isolateCoverGrammar = function (parseFunction) {
              var previousIsBindingElement = this.context.isBindingElement;
              var previousIsAssignmentTarget = this.context.isAssignmentTarget;
              var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
              this.context.isBindingElement = true;
              this.context.isAssignmentTarget = true;
              this.context.firstCoverInitializedNameError = null;
              var result = parseFunction.call(this);

              if (this.context.firstCoverInitializedNameError !== null) {
                this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);
              }

              this.context.isBindingElement = previousIsBindingElement;
              this.context.isAssignmentTarget = previousIsAssignmentTarget;
              this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;
              return result;
            };

            Parser.prototype.inheritCoverGrammar = function (parseFunction) {
              var previousIsBindingElement = this.context.isBindingElement;
              var previousIsAssignmentTarget = this.context.isAssignmentTarget;
              var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
              this.context.isBindingElement = true;
              this.context.isAssignmentTarget = true;
              this.context.firstCoverInitializedNameError = null;
              var result = parseFunction.call(this);
              this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;
              this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;
              this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;
              return result;
            };

            Parser.prototype.consumeSemicolon = function () {
              if (this.match(';')) {
                this.nextToken();
              } else if (!this.hasLineTerminator) {
                if (this.lookahead.type !== 2
                /* EOF */
                && !this.match('}')) {
                  this.throwUnexpectedToken(this.lookahead);
                }

                this.lastMarker.index = this.startMarker.index;
                this.lastMarker.line = this.startMarker.line;
                this.lastMarker.column = this.startMarker.column;
              }
            }; // https://tc39.github.io/ecma262/#sec-primary-expression


            Parser.prototype.parsePrimaryExpression = function () {
              var node = this.createNode();
              var expr;
              var token, raw;

              switch (this.lookahead.type) {
                case 3
                /* Identifier */
                :
                  if ((this.context.isModule || this.context["await"]) && this.lookahead.value === 'await') {
                    this.tolerateUnexpectedToken(this.lookahead);
                  }

                  expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));
                  break;

                case 6
                /* NumericLiteral */
                :
                case 8
                /* StringLiteral */
                :
                  if (this.context.strict && this.lookahead.octal) {
                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);
                  }

                  this.context.isAssignmentTarget = false;
                  this.context.isBindingElement = false;
                  token = this.nextToken();
                  raw = this.getTokenRaw(token);
                  expr = this.finalize(node, new Node.Literal(token.value, raw));
                  break;

                case 1
                /* BooleanLiteral */
                :
                  this.context.isAssignmentTarget = false;
                  this.context.isBindingElement = false;
                  token = this.nextToken();
                  raw = this.getTokenRaw(token);
                  expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));
                  break;

                case 5
                /* NullLiteral */
                :
                  this.context.isAssignmentTarget = false;
                  this.context.isBindingElement = false;
                  token = this.nextToken();
                  raw = this.getTokenRaw(token);
                  expr = this.finalize(node, new Node.Literal(null, raw));
                  break;

                case 10
                /* Template */
                :
                  expr = this.parseTemplateLiteral();
                  break;

                case 7
                /* Punctuator */
                :
                  switch (this.lookahead.value) {
                    case '(':
                      this.context.isBindingElement = false;
                      expr = this.inheritCoverGrammar(this.parseGroupExpression);
                      break;

                    case '[':
                      expr = this.inheritCoverGrammar(this.parseArrayInitializer);
                      break;

                    case '{':
                      expr = this.inheritCoverGrammar(this.parseObjectInitializer);
                      break;

                    case '/':
                    case '/=':
                      this.context.isAssignmentTarget = false;
                      this.context.isBindingElement = false;
                      this.scanner.index = this.startMarker.index;
                      token = this.nextRegexToken();
                      raw = this.getTokenRaw(token);
                      expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));
                      break;

                    default:
                      expr = this.throwUnexpectedToken(this.nextToken());
                  }

                  break;

                case 4
                /* Keyword */
                :
                  if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {
                    expr = this.parseIdentifierName();
                  } else if (!this.context.strict && this.matchKeyword('let')) {
                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));
                  } else {
                    this.context.isAssignmentTarget = false;
                    this.context.isBindingElement = false;

                    if (this.matchKeyword('function')) {
                      expr = this.parseFunctionExpression();
                    } else if (this.matchKeyword('this')) {
                      this.nextToken();
                      expr = this.finalize(node, new Node.ThisExpression());
                    } else if (this.matchKeyword('class')) {
                      expr = this.parseClassExpression();
                    } else {
                      expr = this.throwUnexpectedToken(this.nextToken());
                    }
                  }

                  break;

                default:
                  expr = this.throwUnexpectedToken(this.nextToken());
              }

              return expr;
            }; // https://tc39.github.io/ecma262/#sec-array-initializer


            Parser.prototype.parseSpreadElement = function () {
              var node = this.createNode();
              this.expect('...');
              var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);
              return this.finalize(node, new Node.SpreadElement(arg));
            };

            Parser.prototype.parseArrayInitializer = function () {
              var node = this.createNode();
              var elements = [];
              this.expect('[');

              while (!this.match(']')) {
                if (this.match(',')) {
                  this.nextToken();
                  elements.push(null);
                } else if (this.match('...')) {
                  var element = this.parseSpreadElement();

                  if (!this.match(']')) {
                    this.context.isAssignmentTarget = false;
                    this.context.isBindingElement = false;
                    this.expect(',');
                  }

                  elements.push(element);
                } else {
                  elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));

                  if (!this.match(']')) {
                    this.expect(',');
                  }
                }
              }

              this.expect(']');
              return this.finalize(node, new Node.ArrayExpression(elements));
            }; // https://tc39.github.io/ecma262/#sec-object-initializer


            Parser.prototype.parsePropertyMethod = function (params) {
              this.context.isAssignmentTarget = false;
              this.context.isBindingElement = false;
              var previousStrict = this.context.strict;
              var previousAllowStrictDirective = this.context.allowStrictDirective;
              this.context.allowStrictDirective = params.simple;
              var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);

              if (this.context.strict && params.firstRestricted) {
                this.tolerateUnexpectedToken(params.firstRestricted, params.message);
              }

              if (this.context.strict && params.stricted) {
                this.tolerateUnexpectedToken(params.stricted, params.message);
              }

              this.context.strict = previousStrict;
              this.context.allowStrictDirective = previousAllowStrictDirective;
              return body;
            };

            Parser.prototype.parsePropertyMethodFunction = function () {
              var isGenerator = false;
              var node = this.createNode();
              var previousAllowYield = this.context.allowYield;
              this.context.allowYield = true;
              var params = this.parseFormalParameters();
              var method = this.parsePropertyMethod(params);
              this.context.allowYield = previousAllowYield;
              return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
            };

            Parser.prototype.parsePropertyMethodAsyncFunction = function () {
              var node = this.createNode();
              var previousAllowYield = this.context.allowYield;
              var previousAwait = this.context["await"];
              this.context.allowYield = false;
              this.context["await"] = true;
              var params = this.parseFormalParameters();
              var method = this.parsePropertyMethod(params);
              this.context.allowYield = previousAllowYield;
              this.context["await"] = previousAwait;
              return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));
            };

            Parser.prototype.parseObjectPropertyKey = function () {
              var node = this.createNode();
              var token = this.nextToken();
              var key;

              switch (token.type) {
                case 8
                /* StringLiteral */
                :
                case 6
                /* NumericLiteral */
                :
                  if (this.context.strict && token.octal) {
                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);
                  }

                  var raw = this.getTokenRaw(token);
                  key = this.finalize(node, new Node.Literal(token.value, raw));
                  break;

                case 3
                /* Identifier */
                :
                case 1
                /* BooleanLiteral */
                :
                case 5
                /* NullLiteral */
                :
                case 4
                /* Keyword */
                :
                  key = this.finalize(node, new Node.Identifier(token.value));
                  break;

                case 7
                /* Punctuator */
                :
                  if (token.value === '[') {
                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);
                    this.expect(']');
                  } else {
                    key = this.throwUnexpectedToken(token);
                  }

                  break;

                default:
                  key = this.throwUnexpectedToken(token);
              }

              return key;
            };

            Parser.prototype.isPropertyKey = function (key, value) {
              return key.type === syntax_1.Syntax.Identifier && key.name === value || key.type === syntax_1.Syntax.Literal && key.value === value;
            };

            Parser.prototype.parseObjectProperty = function (hasProto) {
              var node = this.createNode();
              var token = this.lookahead;
              var kind;
              var key = null;
              var value = null;
              var computed = false;
              var method = false;
              var shorthand = false;
              var isAsync = false;

              if (token.type === 3
              /* Identifier */
              ) {
                  var id = token.value;
                  this.nextToken();
                  computed = this.match('[');
                  isAsync = !this.hasLineTerminator && id === 'async' && !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');
                  key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));
                } else if (this.match('*')) {
                this.nextToken();
              } else {
                computed = this.match('[');
                key = this.parseObjectPropertyKey();
              }

              var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);

              if (token.type === 3
              /* Identifier */
              && !isAsync && token.value === 'get' && lookaheadPropertyKey) {
                kind = 'get';
                computed = this.match('[');
                key = this.parseObjectPropertyKey();
                this.context.allowYield = false;
                value = this.parseGetterMethod();
              } else if (token.type === 3
              /* Identifier */
              && !isAsync && token.value === 'set' && lookaheadPropertyKey) {
                kind = 'set';
                computed = this.match('[');
                key = this.parseObjectPropertyKey();
                value = this.parseSetterMethod();
              } else if (token.type === 7
              /* Punctuator */
              && token.value === '*' && lookaheadPropertyKey) {
                kind = 'init';
                computed = this.match('[');
                key = this.parseObjectPropertyKey();
                value = this.parseGeneratorMethod();
                method = true;
              } else {
                if (!key) {
                  this.throwUnexpectedToken(this.lookahead);
                }

                kind = 'init';

                if (this.match(':') && !isAsync) {
                  if (!computed && this.isPropertyKey(key, '__proto__')) {
                    if (hasProto.value) {
                      this.tolerateError(messages_1.Messages.DuplicateProtoProperty);
                    }

                    hasProto.value = true;
                  }

                  this.nextToken();
                  value = this.inheritCoverGrammar(this.parseAssignmentExpression);
                } else if (this.match('(')) {
                  value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
                  method = true;
                } else if (token.type === 3
                /* Identifier */
                ) {
                    var id = this.finalize(node, new Node.Identifier(token.value));

                    if (this.match('=')) {
                      this.context.firstCoverInitializedNameError = this.lookahead;
                      this.nextToken();
                      shorthand = true;
                      var init = this.isolateCoverGrammar(this.parseAssignmentExpression);
                      value = this.finalize(node, new Node.AssignmentPattern(id, init));
                    } else {
                      shorthand = true;
                      value = id;
                    }
                  } else {
                  this.throwUnexpectedToken(this.nextToken());
                }
              }

              return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));
            };

            Parser.prototype.parseObjectInitializer = function () {
              var node = this.createNode();
              this.expect('{');
              var properties = [];
              var hasProto = {
                value: false
              };

              while (!this.match('}')) {
                properties.push(this.parseObjectProperty(hasProto));

                if (!this.match('}')) {
                  this.expectCommaSeparator();
                }
              }

              this.expect('}');
              return this.finalize(node, new Node.ObjectExpression(properties));
            }; // https://tc39.github.io/ecma262/#sec-template-literals


            Parser.prototype.parseTemplateHead = function () {
              assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');
              var node = this.createNode();
              var token = this.nextToken();
              var raw = token.value;
              var cooked = token.cooked;
              return this.finalize(node, new Node.TemplateElement({
                raw: raw,
                cooked: cooked
              }, token.tail));
            };

            Parser.prototype.parseTemplateElement = function () {
              if (this.lookahead.type !== 10
              /* Template */
              ) {
                  this.throwUnexpectedToken();
                }

              var node = this.createNode();
              var token = this.nextToken();
              var raw = token.value;
              var cooked = token.cooked;
              return this.finalize(node, new Node.TemplateElement({
                raw: raw,
                cooked: cooked
              }, token.tail));
            };

            Parser.prototype.parseTemplateLiteral = function () {
              var node = this.createNode();
              var expressions = [];
              var quasis = [];
              var quasi = this.parseTemplateHead();
              quasis.push(quasi);

              while (!quasi.tail) {
                expressions.push(this.parseExpression());
                quasi = this.parseTemplateElement();
                quasis.push(quasi);
              }

              return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));
            }; // https://tc39.github.io/ecma262/#sec-grouping-operator


            Parser.prototype.reinterpretExpressionAsPattern = function (expr) {
              switch (expr.type) {
                case syntax_1.Syntax.Identifier:
                case syntax_1.Syntax.MemberExpression:
                case syntax_1.Syntax.RestElement:
                case syntax_1.Syntax.AssignmentPattern:
                  break;

                case syntax_1.Syntax.SpreadElement:
                  expr.type = syntax_1.Syntax.RestElement;
                  this.reinterpretExpressionAsPattern(expr.argument);
                  break;

                case syntax_1.Syntax.ArrayExpression:
                  expr.type = syntax_1.Syntax.ArrayPattern;

                  for (var i = 0; i < expr.elements.length; i++) {
                    if (expr.elements[i] !== null) {
                      this.reinterpretExpressionAsPattern(expr.elements[i]);
                    }
                  }

                  break;

                case syntax_1.Syntax.ObjectExpression:
                  expr.type = syntax_1.Syntax.ObjectPattern;

                  for (var i = 0; i < expr.properties.length; i++) {
                    this.reinterpretExpressionAsPattern(expr.properties[i].value);
                  }

                  break;

                case syntax_1.Syntax.AssignmentExpression:
                  expr.type = syntax_1.Syntax.AssignmentPattern;
                  delete expr.operator;
                  this.reinterpretExpressionAsPattern(expr.left);
                  break;

                default:
                  // Allow other node type for tolerant parsing.
                  break;
              }
            };

            Parser.prototype.parseGroupExpression = function () {
              var expr;
              this.expect('(');

              if (this.match(')')) {
                this.nextToken();

                if (!this.match('=>')) {
                  this.expect('=>');
                }

                expr = {
                  type: ArrowParameterPlaceHolder,
                  params: [],
                  async: false
                };
              } else {
                var startToken = this.lookahead;
                var params = [];

                if (this.match('...')) {
                  expr = this.parseRestElement(params);
                  this.expect(')');

                  if (!this.match('=>')) {
                    this.expect('=>');
                  }

                  expr = {
                    type: ArrowParameterPlaceHolder,
                    params: [expr],
                    async: false
                  };
                } else {
                  var arrow = false;
                  this.context.isBindingElement = true;
                  expr = this.inheritCoverGrammar(this.parseAssignmentExpression);

                  if (this.match(',')) {
                    var expressions = [];
                    this.context.isAssignmentTarget = false;
                    expressions.push(expr);

                    while (this.lookahead.type !== 2
                    /* EOF */
                    ) {
                      if (!this.match(',')) {
                        break;
                      }

                      this.nextToken();

                      if (this.match(')')) {
                        this.nextToken();

                        for (var i = 0; i < expressions.length; i++) {
                          this.reinterpretExpressionAsPattern(expressions[i]);
                        }

                        arrow = true;
                        expr = {
                          type: ArrowParameterPlaceHolder,
                          params: expressions,
                          async: false
                        };
                      } else if (this.match('...')) {
                        if (!this.context.isBindingElement) {
                          this.throwUnexpectedToken(this.lookahead);
                        }

                        expressions.push(this.parseRestElement(params));
                        this.expect(')');

                        if (!this.match('=>')) {
                          this.expect('=>');
                        }

                        this.context.isBindingElement = false;

                        for (var i = 0; i < expressions.length; i++) {
                          this.reinterpretExpressionAsPattern(expressions[i]);
                        }

                        arrow = true;
                        expr = {
                          type: ArrowParameterPlaceHolder,
                          params: expressions,
                          async: false
                        };
                      } else {
                        expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
                      }

                      if (arrow) {
                        break;
                      }
                    }

                    if (!arrow) {
                      expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
                    }
                  }

                  if (!arrow) {
                    this.expect(')');

                    if (this.match('=>')) {
                      if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {
                        arrow = true;
                        expr = {
                          type: ArrowParameterPlaceHolder,
                          params: [expr],
                          async: false
                        };
                      }

                      if (!arrow) {
                        if (!this.context.isBindingElement) {
                          this.throwUnexpectedToken(this.lookahead);
                        }

                        if (expr.type === syntax_1.Syntax.SequenceExpression) {
                          for (var i = 0; i < expr.expressions.length; i++) {
                            this.reinterpretExpressionAsPattern(expr.expressions[i]);
                          }
                        } else {
                          this.reinterpretExpressionAsPattern(expr);
                        }

                        var parameters = expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr];
                        expr = {
                          type: ArrowParameterPlaceHolder,
                          params: parameters,
                          async: false
                        };
                      }
                    }

                    this.context.isBindingElement = false;
                  }
                }
              }

              return expr;
            }; // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions


            Parser.prototype.parseArguments = function () {
              this.expect('(');
              var args = [];

              if (!this.match(')')) {
                while (true) {
                  var expr = this.match('...') ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAssignmentExpression);
                  args.push(expr);

                  if (this.match(')')) {
                    break;
                  }

                  this.expectCommaSeparator();

                  if (this.match(')')) {
                    break;
                  }
                }
              }

              this.expect(')');
              return args;
            };

            Parser.prototype.isIdentifierName = function (token) {
              return token.type === 3
              /* Identifier */
              || token.type === 4
              /* Keyword */
              || token.type === 1
              /* BooleanLiteral */
              || token.type === 5
              /* NullLiteral */
              ;
            };

            Parser.prototype.parseIdentifierName = function () {
              var node = this.createNode();
              var token = this.nextToken();

              if (!this.isIdentifierName(token)) {
                this.throwUnexpectedToken(token);
              }

              return this.finalize(node, new Node.Identifier(token.value));
            };

            Parser.prototype.parseNewExpression = function () {
              var node = this.createNode();
              var id = this.parseIdentifierName();
              assert_1.assert(id.name === 'new', 'New expression must start with `new`');
              var expr;

              if (this.match('.')) {
                this.nextToken();

                if (this.lookahead.type === 3
                /* Identifier */
                && this.context.inFunctionBody && this.lookahead.value === 'target') {
                  var property = this.parseIdentifierName();
                  expr = new Node.MetaProperty(id, property);
                } else {
                  this.throwUnexpectedToken(this.lookahead);
                }
              } else {
                var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);
                var args = this.match('(') ? this.parseArguments() : [];
                expr = new Node.NewExpression(callee, args);
                this.context.isAssignmentTarget = false;
                this.context.isBindingElement = false;
              }

              return this.finalize(node, expr);
            };

            Parser.prototype.parseAsyncArgument = function () {
              var arg = this.parseAssignmentExpression();
              this.context.firstCoverInitializedNameError = null;
              return arg;
            };

            Parser.prototype.parseAsyncArguments = function () {
              this.expect('(');
              var args = [];

              if (!this.match(')')) {
                while (true) {
                  var expr = this.match('...') ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAsyncArgument);
                  args.push(expr);

                  if (this.match(')')) {
                    break;
                  }

                  this.expectCommaSeparator();

                  if (this.match(')')) {
                    break;
                  }
                }
              }

              this.expect(')');
              return args;
            };

            Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {
              var startToken = this.lookahead;
              var maybeAsync = this.matchContextualKeyword('async');
              var previousAllowIn = this.context.allowIn;
              this.context.allowIn = true;
              var expr;

              if (this.matchKeyword('super') && this.context.inFunctionBody) {
                expr = this.createNode();
                this.nextToken();
                expr = this.finalize(expr, new Node.Super());

                if (!this.match('(') && !this.match('.') && !this.match('[')) {
                  this.throwUnexpectedToken(this.lookahead);
                }
              } else {
                expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
              }

              while (true) {
                if (this.match('.')) {
                  this.context.isBindingElement = false;
                  this.context.isAssignmentTarget = true;
                  this.expect('.');
                  var property = this.parseIdentifierName();
                  expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));
                } else if (this.match('(')) {
                  var asyncArrow = maybeAsync && startToken.lineNumber === this.lookahead.lineNumber;
                  this.context.isBindingElement = false;
                  this.context.isAssignmentTarget = false;
                  var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();
                  expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));

                  if (asyncArrow && this.match('=>')) {
                    for (var i = 0; i < args.length; ++i) {
                      this.reinterpretExpressionAsPattern(args[i]);
                    }

                    expr = {
                      type: ArrowParameterPlaceHolder,
                      params: args,
                      async: true
                    };
                  }
                } else if (this.match('[')) {
                  this.context.isBindingElement = false;
                  this.context.isAssignmentTarget = true;
                  this.expect('[');
                  var property = this.isolateCoverGrammar(this.parseExpression);
                  this.expect(']');
                  expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));
                } else if (this.lookahead.type === 10
                /* Template */
                && this.lookahead.head) {
                  var quasi = this.parseTemplateLiteral();
                  expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));
                } else {
                  break;
                }
              }

              this.context.allowIn = previousAllowIn;
              return expr;
            };

            Parser.prototype.parseSuper = function () {
              var node = this.createNode();
              this.expectKeyword('super');

              if (!this.match('[') && !this.match('.')) {
                this.throwUnexpectedToken(this.lookahead);
              }

              return this.finalize(node, new Node.Super());
            };

            Parser.prototype.parseLeftHandSideExpression = function () {
              assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');
              var node = this.startNode(this.lookahead);
              var expr = this.matchKeyword('super') && this.context.inFunctionBody ? this.parseSuper() : this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);

              while (true) {
                if (this.match('[')) {
                  this.context.isBindingElement = false;
                  this.context.isAssignmentTarget = true;
                  this.expect('[');
                  var property = this.isolateCoverGrammar(this.parseExpression);
                  this.expect(']');
                  expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));
                } else if (this.match('.')) {
                  this.context.isBindingElement = false;
                  this.context.isAssignmentTarget = true;
                  this.expect('.');
                  var property = this.parseIdentifierName();
                  expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));
                } else if (this.lookahead.type === 10
                /* Template */
                && this.lookahead.head) {
                  var quasi = this.parseTemplateLiteral();
                  expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));
                } else {
                  break;
                }
              }

              return expr;
            }; // https://tc39.github.io/ecma262/#sec-update-expressions


            Parser.prototype.parseUpdateExpression = function () {
              var expr;
              var startToken = this.lookahead;

              if (this.match('++') || this.match('--')) {
                var node = this.startNode(startToken);
                var token = this.nextToken();
                expr = this.inheritCoverGrammar(this.parseUnaryExpression);

                if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
                  this.tolerateError(messages_1.Messages.StrictLHSPrefix);
                }

                if (!this.context.isAssignmentTarget) {
                  this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
                }

                var prefix = true;
                expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));
                this.context.isAssignmentTarget = false;
                this.context.isBindingElement = false;
              } else {
                expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);

                if (!this.hasLineTerminator && this.lookahead.type === 7
                /* Punctuator */
                ) {
                    if (this.match('++') || this.match('--')) {
                      if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);
                      }

                      if (!this.context.isAssignmentTarget) {
                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
                      }

                      this.context.isAssignmentTarget = false;
                      this.context.isBindingElement = false;
                      var operator = this.nextToken().value;
                      var prefix = false;
                      expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));
                    }
                  }
              }

              return expr;
            }; // https://tc39.github.io/ecma262/#sec-unary-operators


            Parser.prototype.parseAwaitExpression = function () {
              var node = this.createNode();
              this.nextToken();
              var argument = this.parseUnaryExpression();
              return this.finalize(node, new Node.AwaitExpression(argument));
            };

            Parser.prototype.parseUnaryExpression = function () {
              var expr;

              if (this.match('+') || this.match('-') || this.match('~') || this.match('!') || this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {
                var node = this.startNode(this.lookahead);
                var token = this.nextToken();
                expr = this.inheritCoverGrammar(this.parseUnaryExpression);
                expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));

                if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {
                  this.tolerateError(messages_1.Messages.StrictDelete);
                }

                this.context.isAssignmentTarget = false;
                this.context.isBindingElement = false;
              } else if (this.context["await"] && this.matchContextualKeyword('await')) {
                expr = this.parseAwaitExpression();
              } else {
                expr = this.parseUpdateExpression();
              }

              return expr;
            };

            Parser.prototype.parseExponentiationExpression = function () {
              var startToken = this.lookahead;
              var expr = this.inheritCoverGrammar(this.parseUnaryExpression);

              if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {
                this.nextToken();
                this.context.isAssignmentTarget = false;
                this.context.isBindingElement = false;
                var left = expr;
                var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
                expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));
              }

              return expr;
            }; // https://tc39.github.io/ecma262/#sec-exp-operator
            // https://tc39.github.io/ecma262/#sec-multiplicative-operators
            // https://tc39.github.io/ecma262/#sec-additive-operators
            // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators
            // https://tc39.github.io/ecma262/#sec-relational-operators
            // https://tc39.github.io/ecma262/#sec-equality-operators
            // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators
            // https://tc39.github.io/ecma262/#sec-binary-logical-operators


            Parser.prototype.binaryPrecedence = function (token) {
              var op = token.value;
              var precedence;

              if (token.type === 7
              /* Punctuator */
              ) {
                  precedence = this.operatorPrecedence[op] || 0;
                } else if (token.type === 4
              /* Keyword */
              ) {
                  precedence = op === 'instanceof' || this.context.allowIn && op === 'in' ? 7 : 0;
                } else {
                precedence = 0;
              }

              return precedence;
            };

            Parser.prototype.parseBinaryExpression = function () {
              var startToken = this.lookahead;
              var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);
              var token = this.lookahead;
              var prec = this.binaryPrecedence(token);

              if (prec > 0) {
                this.nextToken();
                this.context.isAssignmentTarget = false;
                this.context.isBindingElement = false;
                var markers = [startToken, this.lookahead];
                var left = expr;
                var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
                var stack = [left, token.value, right];
                var precedences = [prec];

                while (true) {
                  prec = this.binaryPrecedence(this.lookahead);

                  if (prec <= 0) {
                    break;
                  } // Reduce: make a binary expression from the three topmost entries.


                  while (stack.length > 2 && prec <= precedences[precedences.length - 1]) {
                    right = stack.pop();
                    var operator = stack.pop();
                    precedences.pop();
                    left = stack.pop();
                    markers.pop();
                    var node = this.startNode(markers[markers.length - 1]);
                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));
                  } // Shift.


                  stack.push(this.nextToken().value);
                  precedences.push(prec);
                  markers.push(this.lookahead);
                  stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
                } // Final reduce to clean-up the stack.


                var i = stack.length - 1;
                expr = stack[i];
                var lastMarker = markers.pop();

                while (i > 1) {
                  var marker = markers.pop();
                  var lastLineStart = lastMarker && lastMarker.lineStart;
                  var node = this.startNode(marker, lastLineStart);
                  var operator = stack[i - 1];
                  expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));
                  i -= 2;
                  lastMarker = marker;
                }
              }

              return expr;
            }; // https://tc39.github.io/ecma262/#sec-conditional-operator


            Parser.prototype.parseConditionalExpression = function () {
              var startToken = this.lookahead;
              var expr = this.inheritCoverGrammar(this.parseBinaryExpression);

              if (this.match('?')) {
                this.nextToken();
                var previousAllowIn = this.context.allowIn;
                this.context.allowIn = true;
                var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);
                this.context.allowIn = previousAllowIn;
                this.expect(':');
                var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);
                expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));
                this.context.isAssignmentTarget = false;
                this.context.isBindingElement = false;
              }

              return expr;
            }; // https://tc39.github.io/ecma262/#sec-assignment-operators


            Parser.prototype.checkPatternParam = function (options, param) {
              switch (param.type) {
                case syntax_1.Syntax.Identifier:
                  this.validateParam(options, param, param.name);
                  break;

                case syntax_1.Syntax.RestElement:
                  this.checkPatternParam(options, param.argument);
                  break;

                case syntax_1.Syntax.AssignmentPattern:
                  this.checkPatternParam(options, param.left);
                  break;

                case syntax_1.Syntax.ArrayPattern:
                  for (var i = 0; i < param.elements.length; i++) {
                    if (param.elements[i] !== null) {
                      this.checkPatternParam(options, param.elements[i]);
                    }
                  }

                  break;

                case syntax_1.Syntax.ObjectPattern:
                  for (var i = 0; i < param.properties.length; i++) {
                    this.checkPatternParam(options, param.properties[i].value);
                  }

                  break;

                default:
                  break;
              }

              options.simple = options.simple && param instanceof Node.Identifier;
            };

            Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {
              var params = [expr];
              var options;
              var asyncArrow = false;

              switch (expr.type) {
                case syntax_1.Syntax.Identifier:
                  break;

                case ArrowParameterPlaceHolder:
                  params = expr.params;
                  asyncArrow = expr.async;
                  break;

                default:
                  return null;
              }

              options = {
                simple: true,
                paramSet: {}
              };

              for (var i = 0; i < params.length; ++i) {
                var param = params[i];

                if (param.type === syntax_1.Syntax.AssignmentPattern) {
                  if (param.right.type === syntax_1.Syntax.YieldExpression) {
                    if (param.right.argument) {
                      this.throwUnexpectedToken(this.lookahead);
                    }

                    param.right.type = syntax_1.Syntax.Identifier;
                    param.right.name = 'yield';
                    delete param.right.argument;
                    delete param.right.delegate;
                  }
                } else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {
                  this.throwUnexpectedToken(this.lookahead);
                }

                this.checkPatternParam(options, param);
                params[i] = param;
              }

              if (this.context.strict || !this.context.allowYield) {
                for (var i = 0; i < params.length; ++i) {
                  var param = params[i];

                  if (param.type === syntax_1.Syntax.YieldExpression) {
                    this.throwUnexpectedToken(this.lookahead);
                  }
                }
              }

              if (options.message === messages_1.Messages.StrictParamDupe) {
                var token = this.context.strict ? options.stricted : options.firstRestricted;
                this.throwUnexpectedToken(token, options.message);
              }

              return {
                simple: options.simple,
                params: params,
                stricted: options.stricted,
                firstRestricted: options.firstRestricted,
                message: options.message
              };
            };

            Parser.prototype.parseAssignmentExpression = function () {
              var expr;

              if (!this.context.allowYield && this.matchKeyword('yield')) {
                expr = this.parseYieldExpression();
              } else {
                var startToken = this.lookahead;
                var token = startToken;
                expr = this.parseConditionalExpression();

                if (token.type === 3
                /* Identifier */
                && token.lineNumber === this.lookahead.lineNumber && token.value === 'async') {
                  if (this.lookahead.type === 3
                  /* Identifier */
                  || this.matchKeyword('yield')) {
                    var arg = this.parsePrimaryExpression();
                    this.reinterpretExpressionAsPattern(arg);
                    expr = {
                      type: ArrowParameterPlaceHolder,
                      params: [arg],
                      async: true
                    };
                  }
                }

                if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {
                  // https://tc39.github.io/ecma262/#sec-arrow-function-definitions
                  this.context.isAssignmentTarget = false;
                  this.context.isBindingElement = false;
                  var isAsync = expr.async;
                  var list = this.reinterpretAsCoverFormalsList(expr);

                  if (list) {
                    if (this.hasLineTerminator) {
                      this.tolerateUnexpectedToken(this.lookahead);
                    }

                    this.context.firstCoverInitializedNameError = null;
                    var previousStrict = this.context.strict;
                    var previousAllowStrictDirective = this.context.allowStrictDirective;
                    this.context.allowStrictDirective = list.simple;
                    var previousAllowYield = this.context.allowYield;
                    var previousAwait = this.context["await"];
                    this.context.allowYield = true;
                    this.context["await"] = isAsync;
                    var node = this.startNode(startToken);
                    this.expect('=>');
                    var body = void 0;

                    if (this.match('{')) {
                      var previousAllowIn = this.context.allowIn;
                      this.context.allowIn = true;
                      body = this.parseFunctionSourceElements();
                      this.context.allowIn = previousAllowIn;
                    } else {
                      body = this.isolateCoverGrammar(this.parseAssignmentExpression);
                    }

                    var expression = body.type !== syntax_1.Syntax.BlockStatement;

                    if (this.context.strict && list.firstRestricted) {
                      this.throwUnexpectedToken(list.firstRestricted, list.message);
                    }

                    if (this.context.strict && list.stricted) {
                      this.tolerateUnexpectedToken(list.stricted, list.message);
                    }

                    expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) : this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));
                    this.context.strict = previousStrict;
                    this.context.allowStrictDirective = previousAllowStrictDirective;
                    this.context.allowYield = previousAllowYield;
                    this.context["await"] = previousAwait;
                  }
                } else {
                  if (this.matchAssign()) {
                    if (!this.context.isAssignmentTarget) {
                      this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
                    }

                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {
                      var id = expr;

                      if (this.scanner.isRestrictedWord(id.name)) {
                        this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);
                      }

                      if (this.scanner.isStrictModeReservedWord(id.name)) {
                        this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
                      }
                    }

                    if (!this.match('=')) {
                      this.context.isAssignmentTarget = false;
                      this.context.isBindingElement = false;
                    } else {
                      this.reinterpretExpressionAsPattern(expr);
                    }

                    token = this.nextToken();
                    var operator = token.value;
                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));
                    this.context.firstCoverInitializedNameError = null;
                  }
                }
              }

              return expr;
            }; // https://tc39.github.io/ecma262/#sec-comma-operator


            Parser.prototype.parseExpression = function () {
              var startToken = this.lookahead;
              var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);

              if (this.match(',')) {
                var expressions = [];
                expressions.push(expr);

                while (this.lookahead.type !== 2
                /* EOF */
                ) {
                  if (!this.match(',')) {
                    break;
                  }

                  this.nextToken();
                  expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                }

                expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
              }

              return expr;
            }; // https://tc39.github.io/ecma262/#sec-block


            Parser.prototype.parseStatementListItem = function () {
              var statement;
              this.context.isAssignmentTarget = true;
              this.context.isBindingElement = true;

              if (this.lookahead.type === 4
              /* Keyword */
              ) {
                  switch (this.lookahead.value) {
                    case 'export':
                      if (!this.context.isModule) {
                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);
                      }

                      statement = this.parseExportDeclaration();
                      break;

                    case 'import':
                      if (!this.context.isModule) {
                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);
                      }

                      statement = this.parseImportDeclaration();
                      break;

                    case 'const':
                      statement = this.parseLexicalDeclaration({
                        inFor: false
                      });
                      break;

                    case 'function':
                      statement = this.parseFunctionDeclaration();
                      break;

                    case 'class':
                      statement = this.parseClassDeclaration();
                      break;

                    case 'let':
                      statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({
                        inFor: false
                      }) : this.parseStatement();
                      break;

                    default:
                      statement = this.parseStatement();
                      break;
                  }
                } else {
                statement = this.parseStatement();
              }

              return statement;
            };

            Parser.prototype.parseBlock = function () {
              var node = this.createNode();
              this.expect('{');
              var block = [];

              while (true) {
                if (this.match('}')) {
                  break;
                }

                block.push(this.parseStatementListItem());
              }

              this.expect('}');
              return this.finalize(node, new Node.BlockStatement(block));
            }; // https://tc39.github.io/ecma262/#sec-let-and-const-declarations


            Parser.prototype.parseLexicalBinding = function (kind, options) {
              var node = this.createNode();
              var params = [];
              var id = this.parsePattern(params, kind);

              if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
                if (this.scanner.isRestrictedWord(id.name)) {
                  this.tolerateError(messages_1.Messages.StrictVarName);
                }
              }

              var init = null;

              if (kind === 'const') {
                if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {
                  if (this.match('=')) {
                    this.nextToken();
                    init = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  } else {
                    this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');
                  }
                }
              } else if (!options.inFor && id.type !== syntax_1.Syntax.Identifier || this.match('=')) {
                this.expect('=');
                init = this.isolateCoverGrammar(this.parseAssignmentExpression);
              }

              return this.finalize(node, new Node.VariableDeclarator(id, init));
            };

            Parser.prototype.parseBindingList = function (kind, options) {
              var list = [this.parseLexicalBinding(kind, options)];

              while (this.match(',')) {
                this.nextToken();
                list.push(this.parseLexicalBinding(kind, options));
              }

              return list;
            };

            Parser.prototype.isLexicalDeclaration = function () {
              var state = this.scanner.saveState();
              this.scanner.scanComments();
              var next = this.scanner.lex();
              this.scanner.restoreState(state);
              return next.type === 3
              /* Identifier */
              || next.type === 7
              /* Punctuator */
              && next.value === '[' || next.type === 7
              /* Punctuator */
              && next.value === '{' || next.type === 4
              /* Keyword */
              && next.value === 'let' || next.type === 4
              /* Keyword */
              && next.value === 'yield';
            };

            Parser.prototype.parseLexicalDeclaration = function (options) {
              var node = this.createNode();
              var kind = this.nextToken().value;
              assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');
              var declarations = this.parseBindingList(kind, options);
              this.consumeSemicolon();
              return this.finalize(node, new Node.VariableDeclaration(declarations, kind));
            }; // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns


            Parser.prototype.parseBindingRestElement = function (params, kind) {
              var node = this.createNode();
              this.expect('...');
              var arg = this.parsePattern(params, kind);
              return this.finalize(node, new Node.RestElement(arg));
            };

            Parser.prototype.parseArrayPattern = function (params, kind) {
              var node = this.createNode();
              this.expect('[');
              var elements = [];

              while (!this.match(']')) {
                if (this.match(',')) {
                  this.nextToken();
                  elements.push(null);
                } else {
                  if (this.match('...')) {
                    elements.push(this.parseBindingRestElement(params, kind));
                    break;
                  } else {
                    elements.push(this.parsePatternWithDefault(params, kind));
                  }

                  if (!this.match(']')) {
                    this.expect(',');
                  }
                }
              }

              this.expect(']');
              return this.finalize(node, new Node.ArrayPattern(elements));
            };

            Parser.prototype.parsePropertyPattern = function (params, kind) {
              var node = this.createNode();
              var computed = false;
              var shorthand = false;
              var method = false;
              var key;
              var value;

              if (this.lookahead.type === 3
              /* Identifier */
              ) {
                  var keyToken = this.lookahead;
                  key = this.parseVariableIdentifier();
                  var init = this.finalize(node, new Node.Identifier(keyToken.value));

                  if (this.match('=')) {
                    params.push(keyToken);
                    shorthand = true;
                    this.nextToken();
                    var expr = this.parseAssignmentExpression();
                    value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));
                  } else if (!this.match(':')) {
                    params.push(keyToken);
                    shorthand = true;
                    value = init;
                  } else {
                    this.expect(':');
                    value = this.parsePatternWithDefault(params, kind);
                  }
                } else {
                computed = this.match('[');
                key = this.parseObjectPropertyKey();
                this.expect(':');
                value = this.parsePatternWithDefault(params, kind);
              }

              return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));
            };

            Parser.prototype.parseObjectPattern = function (params, kind) {
              var node = this.createNode();
              var properties = [];
              this.expect('{');

              while (!this.match('}')) {
                properties.push(this.parsePropertyPattern(params, kind));

                if (!this.match('}')) {
                  this.expect(',');
                }
              }

              this.expect('}');
              return this.finalize(node, new Node.ObjectPattern(properties));
            };

            Parser.prototype.parsePattern = function (params, kind) {
              var pattern;

              if (this.match('[')) {
                pattern = this.parseArrayPattern(params, kind);
              } else if (this.match('{')) {
                pattern = this.parseObjectPattern(params, kind);
              } else {
                if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {
                  this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);
                }

                params.push(this.lookahead);
                pattern = this.parseVariableIdentifier(kind);
              }

              return pattern;
            };

            Parser.prototype.parsePatternWithDefault = function (params, kind) {
              var startToken = this.lookahead;
              var pattern = this.parsePattern(params, kind);

              if (this.match('=')) {
                this.nextToken();
                var previousAllowYield = this.context.allowYield;
                this.context.allowYield = true;
                var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
                this.context.allowYield = previousAllowYield;
                pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));
              }

              return pattern;
            }; // https://tc39.github.io/ecma262/#sec-variable-statement


            Parser.prototype.parseVariableIdentifier = function (kind) {
              var node = this.createNode();
              var token = this.nextToken();

              if (token.type === 4
              /* Keyword */
              && token.value === 'yield') {
                if (this.context.strict) {
                  this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
                } else if (!this.context.allowYield) {
                  this.throwUnexpectedToken(token);
                }
              } else if (token.type !== 3
              /* Identifier */
              ) {
                  if (this.context.strict && token.type === 4
                  /* Keyword */
                  && this.scanner.isStrictModeReservedWord(token.value)) {
                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
                  } else {
                    if (this.context.strict || token.value !== 'let' || kind !== 'var') {
                      this.throwUnexpectedToken(token);
                    }
                  }
                } else if ((this.context.isModule || this.context["await"]) && token.type === 3
              /* Identifier */
              && token.value === 'await') {
                this.tolerateUnexpectedToken(token);
              }

              return this.finalize(node, new Node.Identifier(token.value));
            };

            Parser.prototype.parseVariableDeclaration = function (options) {
              var node = this.createNode();
              var params = [];
              var id = this.parsePattern(params, 'var');

              if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
                if (this.scanner.isRestrictedWord(id.name)) {
                  this.tolerateError(messages_1.Messages.StrictVarName);
                }
              }

              var init = null;

              if (this.match('=')) {
                this.nextToken();
                init = this.isolateCoverGrammar(this.parseAssignmentExpression);
              } else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {
                this.expect('=');
              }

              return this.finalize(node, new Node.VariableDeclarator(id, init));
            };

            Parser.prototype.parseVariableDeclarationList = function (options) {
              var opt = {
                inFor: options.inFor
              };
              var list = [];
              list.push(this.parseVariableDeclaration(opt));

              while (this.match(',')) {
                this.nextToken();
                list.push(this.parseVariableDeclaration(opt));
              }

              return list;
            };

            Parser.prototype.parseVariableStatement = function () {
              var node = this.createNode();
              this.expectKeyword('var');
              var declarations = this.parseVariableDeclarationList({
                inFor: false
              });
              this.consumeSemicolon();
              return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));
            }; // https://tc39.github.io/ecma262/#sec-empty-statement


            Parser.prototype.parseEmptyStatement = function () {
              var node = this.createNode();
              this.expect(';');
              return this.finalize(node, new Node.EmptyStatement());
            }; // https://tc39.github.io/ecma262/#sec-expression-statement


            Parser.prototype.parseExpressionStatement = function () {
              var node = this.createNode();
              var expr = this.parseExpression();
              this.consumeSemicolon();
              return this.finalize(node, new Node.ExpressionStatement(expr));
            }; // https://tc39.github.io/ecma262/#sec-if-statement


            Parser.prototype.parseIfClause = function () {
              if (this.context.strict && this.matchKeyword('function')) {
                this.tolerateError(messages_1.Messages.StrictFunction);
              }

              return this.parseStatement();
            };

            Parser.prototype.parseIfStatement = function () {
              var node = this.createNode();
              var consequent;
              var alternate = null;
              this.expectKeyword('if');
              this.expect('(');
              var test = this.parseExpression();

              if (!this.match(')') && this.config.tolerant) {
                this.tolerateUnexpectedToken(this.nextToken());
                consequent = this.finalize(this.createNode(), new Node.EmptyStatement());
              } else {
                this.expect(')');
                consequent = this.parseIfClause();

                if (this.matchKeyword('else')) {
                  this.nextToken();
                  alternate = this.parseIfClause();
                }
              }

              return this.finalize(node, new Node.IfStatement(test, consequent, alternate));
            }; // https://tc39.github.io/ecma262/#sec-do-while-statement


            Parser.prototype.parseDoWhileStatement = function () {
              var node = this.createNode();
              this.expectKeyword('do');
              var previousInIteration = this.context.inIteration;
              this.context.inIteration = true;
              var body = this.parseStatement();
              this.context.inIteration = previousInIteration;
              this.expectKeyword('while');
              this.expect('(');
              var test = this.parseExpression();

              if (!this.match(')') && this.config.tolerant) {
                this.tolerateUnexpectedToken(this.nextToken());
              } else {
                this.expect(')');

                if (this.match(';')) {
                  this.nextToken();
                }
              }

              return this.finalize(node, new Node.DoWhileStatement(body, test));
            }; // https://tc39.github.io/ecma262/#sec-while-statement


            Parser.prototype.parseWhileStatement = function () {
              var node = this.createNode();
              var body;
              this.expectKeyword('while');
              this.expect('(');
              var test = this.parseExpression();

              if (!this.match(')') && this.config.tolerant) {
                this.tolerateUnexpectedToken(this.nextToken());
                body = this.finalize(this.createNode(), new Node.EmptyStatement());
              } else {
                this.expect(')');
                var previousInIteration = this.context.inIteration;
                this.context.inIteration = true;
                body = this.parseStatement();
                this.context.inIteration = previousInIteration;
              }

              return this.finalize(node, new Node.WhileStatement(test, body));
            }; // https://tc39.github.io/ecma262/#sec-for-statement
            // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements


            Parser.prototype.parseForStatement = function () {
              var init = null;
              var test = null;
              var update = null;
              var forIn = true;
              var left, right;
              var node = this.createNode();
              this.expectKeyword('for');
              this.expect('(');

              if (this.match(';')) {
                this.nextToken();
              } else {
                if (this.matchKeyword('var')) {
                  init = this.createNode();
                  this.nextToken();
                  var previousAllowIn = this.context.allowIn;
                  this.context.allowIn = false;
                  var declarations = this.parseVariableDeclarationList({
                    inFor: true
                  });
                  this.context.allowIn = previousAllowIn;

                  if (declarations.length === 1 && this.matchKeyword('in')) {
                    var decl = declarations[0];

                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {
                      this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');
                    }

                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
                    this.nextToken();
                    left = init;
                    right = this.parseExpression();
                    init = null;
                  } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
                    this.nextToken();
                    left = init;
                    right = this.parseAssignmentExpression();
                    init = null;
                    forIn = false;
                  } else {
                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
                    this.expect(';');
                  }
                } else if (this.matchKeyword('const') || this.matchKeyword('let')) {
                  init = this.createNode();
                  var kind = this.nextToken().value;

                  if (!this.context.strict && this.lookahead.value === 'in') {
                    init = this.finalize(init, new Node.Identifier(kind));
                    this.nextToken();
                    left = init;
                    right = this.parseExpression();
                    init = null;
                  } else {
                    var previousAllowIn = this.context.allowIn;
                    this.context.allowIn = false;
                    var declarations = this.parseBindingList(kind, {
                      inFor: true
                    });
                    this.context.allowIn = previousAllowIn;

                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {
                      init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
                      this.nextToken();
                      left = init;
                      right = this.parseExpression();
                      init = null;
                    } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
                      init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
                      this.nextToken();
                      left = init;
                      right = this.parseAssignmentExpression();
                      init = null;
                      forIn = false;
                    } else {
                      this.consumeSemicolon();
                      init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
                    }
                  }
                } else {
                  var initStartToken = this.lookahead;
                  var previousAllowIn = this.context.allowIn;
                  this.context.allowIn = false;
                  init = this.inheritCoverGrammar(this.parseAssignmentExpression);
                  this.context.allowIn = previousAllowIn;

                  if (this.matchKeyword('in')) {
                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
                      this.tolerateError(messages_1.Messages.InvalidLHSInForIn);
                    }

                    this.nextToken();
                    this.reinterpretExpressionAsPattern(init);
                    left = init;
                    right = this.parseExpression();
                    init = null;
                  } else if (this.matchContextualKeyword('of')) {
                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
                      this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);
                    }

                    this.nextToken();
                    this.reinterpretExpressionAsPattern(init);
                    left = init;
                    right = this.parseAssignmentExpression();
                    init = null;
                    forIn = false;
                  } else {
                    if (this.match(',')) {
                      var initSeq = [init];

                      while (this.match(',')) {
                        this.nextToken();
                        initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                      }

                      init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));
                    }

                    this.expect(';');
                  }
                }
              }

              if (typeof left === 'undefined') {
                if (!this.match(';')) {
                  test = this.parseExpression();
                }

                this.expect(';');

                if (!this.match(')')) {
                  update = this.parseExpression();
                }
              }

              var body;

              if (!this.match(')') && this.config.tolerant) {
                this.tolerateUnexpectedToken(this.nextToken());
                body = this.finalize(this.createNode(), new Node.EmptyStatement());
              } else {
                this.expect(')');
                var previousInIteration = this.context.inIteration;
                this.context.inIteration = true;
                body = this.isolateCoverGrammar(this.parseStatement);
                this.context.inIteration = previousInIteration;
              }

              return typeof left === 'undefined' ? this.finalize(node, new Node.ForStatement(init, test, update, body)) : forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) : this.finalize(node, new Node.ForOfStatement(left, right, body));
            }; // https://tc39.github.io/ecma262/#sec-continue-statement


            Parser.prototype.parseContinueStatement = function () {
              var node = this.createNode();
              this.expectKeyword('continue');
              var label = null;

              if (this.lookahead.type === 3
              /* Identifier */
              && !this.hasLineTerminator) {
                var id = this.parseVariableIdentifier();
                label = id;
                var key = '$' + id.name;

                if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
                  this.throwError(messages_1.Messages.UnknownLabel, id.name);
                }
              }

              this.consumeSemicolon();

              if (label === null && !this.context.inIteration) {
                this.throwError(messages_1.Messages.IllegalContinue);
              }

              return this.finalize(node, new Node.ContinueStatement(label));
            }; // https://tc39.github.io/ecma262/#sec-break-statement


            Parser.prototype.parseBreakStatement = function () {
              var node = this.createNode();
              this.expectKeyword('break');
              var label = null;

              if (this.lookahead.type === 3
              /* Identifier */
              && !this.hasLineTerminator) {
                var id = this.parseVariableIdentifier();
                var key = '$' + id.name;

                if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
                  this.throwError(messages_1.Messages.UnknownLabel, id.name);
                }

                label = id;
              }

              this.consumeSemicolon();

              if (label === null && !this.context.inIteration && !this.context.inSwitch) {
                this.throwError(messages_1.Messages.IllegalBreak);
              }

              return this.finalize(node, new Node.BreakStatement(label));
            }; // https://tc39.github.io/ecma262/#sec-return-statement


            Parser.prototype.parseReturnStatement = function () {
              if (!this.context.inFunctionBody) {
                this.tolerateError(messages_1.Messages.IllegalReturn);
              }

              var node = this.createNode();
              this.expectKeyword('return');
              var hasArgument = !this.match(';') && !this.match('}') && !this.hasLineTerminator && this.lookahead.type !== 2
              /* EOF */
              || this.lookahead.type === 8
              /* StringLiteral */
              || this.lookahead.type === 10
              /* Template */
              ;
              var argument = hasArgument ? this.parseExpression() : null;
              this.consumeSemicolon();
              return this.finalize(node, new Node.ReturnStatement(argument));
            }; // https://tc39.github.io/ecma262/#sec-with-statement


            Parser.prototype.parseWithStatement = function () {
              if (this.context.strict) {
                this.tolerateError(messages_1.Messages.StrictModeWith);
              }

              var node = this.createNode();
              var body;
              this.expectKeyword('with');
              this.expect('(');
              var object = this.parseExpression();

              if (!this.match(')') && this.config.tolerant) {
                this.tolerateUnexpectedToken(this.nextToken());
                body = this.finalize(this.createNode(), new Node.EmptyStatement());
              } else {
                this.expect(')');
                body = this.parseStatement();
              }

              return this.finalize(node, new Node.WithStatement(object, body));
            }; // https://tc39.github.io/ecma262/#sec-switch-statement


            Parser.prototype.parseSwitchCase = function () {
              var node = this.createNode();
              var test;

              if (this.matchKeyword('default')) {
                this.nextToken();
                test = null;
              } else {
                this.expectKeyword('case');
                test = this.parseExpression();
              }

              this.expect(':');
              var consequent = [];

              while (true) {
                if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {
                  break;
                }

                consequent.push(this.parseStatementListItem());
              }

              return this.finalize(node, new Node.SwitchCase(test, consequent));
            };

            Parser.prototype.parseSwitchStatement = function () {
              var node = this.createNode();
              this.expectKeyword('switch');
              this.expect('(');
              var discriminant = this.parseExpression();
              this.expect(')');
              var previousInSwitch = this.context.inSwitch;
              this.context.inSwitch = true;
              var cases = [];
              var defaultFound = false;
              this.expect('{');

              while (true) {
                if (this.match('}')) {
                  break;
                }

                var clause = this.parseSwitchCase();

                if (clause.test === null) {
                  if (defaultFound) {
                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);
                  }

                  defaultFound = true;
                }

                cases.push(clause);
              }

              this.expect('}');
              this.context.inSwitch = previousInSwitch;
              return this.finalize(node, new Node.SwitchStatement(discriminant, cases));
            }; // https://tc39.github.io/ecma262/#sec-labelled-statements


            Parser.prototype.parseLabelledStatement = function () {
              var node = this.createNode();
              var expr = this.parseExpression();
              var statement;

              if (expr.type === syntax_1.Syntax.Identifier && this.match(':')) {
                this.nextToken();
                var id = expr;
                var key = '$' + id.name;

                if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
                  this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);
                }

                this.context.labelSet[key] = true;
                var body = void 0;

                if (this.matchKeyword('class')) {
                  this.tolerateUnexpectedToken(this.lookahead);
                  body = this.parseClassDeclaration();
                } else if (this.matchKeyword('function')) {
                  var token = this.lookahead;
                  var declaration = this.parseFunctionDeclaration();

                  if (this.context.strict) {
                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);
                  } else if (declaration.generator) {
                    this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);
                  }

                  body = declaration;
                } else {
                  body = this.parseStatement();
                }

                delete this.context.labelSet[key];
                statement = new Node.LabeledStatement(id, body);
              } else {
                this.consumeSemicolon();
                statement = new Node.ExpressionStatement(expr);
              }

              return this.finalize(node, statement);
            }; // https://tc39.github.io/ecma262/#sec-throw-statement


            Parser.prototype.parseThrowStatement = function () {
              var node = this.createNode();
              this.expectKeyword('throw');

              if (this.hasLineTerminator) {
                this.throwError(messages_1.Messages.NewlineAfterThrow);
              }

              var argument = this.parseExpression();
              this.consumeSemicolon();
              return this.finalize(node, new Node.ThrowStatement(argument));
            }; // https://tc39.github.io/ecma262/#sec-try-statement


            Parser.prototype.parseCatchClause = function () {
              var node = this.createNode();
              this.expectKeyword('catch');
              this.expect('(');

              if (this.match(')')) {
                this.throwUnexpectedToken(this.lookahead);
              }

              var params = [];
              var param = this.parsePattern(params);
              var paramMap = {};

              for (var i = 0; i < params.length; i++) {
                var key = '$' + params[i].value;

                if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
                  this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);
                }

                paramMap[key] = true;
              }

              if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {
                if (this.scanner.isRestrictedWord(param.name)) {
                  this.tolerateError(messages_1.Messages.StrictCatchVariable);
                }
              }

              this.expect(')');
              var body = this.parseBlock();
              return this.finalize(node, new Node.CatchClause(param, body));
            };

            Parser.prototype.parseFinallyClause = function () {
              this.expectKeyword('finally');
              return this.parseBlock();
            };

            Parser.prototype.parseTryStatement = function () {
              var node = this.createNode();
              this.expectKeyword('try');
              var block = this.parseBlock();
              var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;
              var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;

              if (!handler && !finalizer) {
                this.throwError(messages_1.Messages.NoCatchOrFinally);
              }

              return this.finalize(node, new Node.TryStatement(block, handler, finalizer));
            }; // https://tc39.github.io/ecma262/#sec-debugger-statement


            Parser.prototype.parseDebuggerStatement = function () {
              var node = this.createNode();
              this.expectKeyword('debugger');
              this.consumeSemicolon();
              return this.finalize(node, new Node.DebuggerStatement());
            }; // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations


            Parser.prototype.parseStatement = function () {
              var statement;

              switch (this.lookahead.type) {
                case 1
                /* BooleanLiteral */
                :
                case 5
                /* NullLiteral */
                :
                case 6
                /* NumericLiteral */
                :
                case 8
                /* StringLiteral */
                :
                case 10
                /* Template */
                :
                case 9
                /* RegularExpression */
                :
                  statement = this.parseExpressionStatement();
                  break;

                case 7
                /* Punctuator */
                :
                  var value = this.lookahead.value;

                  if (value === '{') {
                    statement = this.parseBlock();
                  } else if (value === '(') {
                    statement = this.parseExpressionStatement();
                  } else if (value === ';') {
                    statement = this.parseEmptyStatement();
                  } else {
                    statement = this.parseExpressionStatement();
                  }

                  break;

                case 3
                /* Identifier */
                :
                  statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
                  break;

                case 4
                /* Keyword */
                :
                  switch (this.lookahead.value) {
                    case 'break':
                      statement = this.parseBreakStatement();
                      break;

                    case 'continue':
                      statement = this.parseContinueStatement();
                      break;

                    case 'debugger':
                      statement = this.parseDebuggerStatement();
                      break;

                    case 'do':
                      statement = this.parseDoWhileStatement();
                      break;

                    case 'for':
                      statement = this.parseForStatement();
                      break;

                    case 'function':
                      statement = this.parseFunctionDeclaration();
                      break;

                    case 'if':
                      statement = this.parseIfStatement();
                      break;

                    case 'return':
                      statement = this.parseReturnStatement();
                      break;

                    case 'switch':
                      statement = this.parseSwitchStatement();
                      break;

                    case 'throw':
                      statement = this.parseThrowStatement();
                      break;

                    case 'try':
                      statement = this.parseTryStatement();
                      break;

                    case 'var':
                      statement = this.parseVariableStatement();
                      break;

                    case 'while':
                      statement = this.parseWhileStatement();
                      break;

                    case 'with':
                      statement = this.parseWithStatement();
                      break;

                    default:
                      statement = this.parseExpressionStatement();
                      break;
                  }

                  break;

                default:
                  statement = this.throwUnexpectedToken(this.lookahead);
              }

              return statement;
            }; // https://tc39.github.io/ecma262/#sec-function-definitions


            Parser.prototype.parseFunctionSourceElements = function () {
              var node = this.createNode();
              this.expect('{');
              var body = this.parseDirectivePrologues();
              var previousLabelSet = this.context.labelSet;
              var previousInIteration = this.context.inIteration;
              var previousInSwitch = this.context.inSwitch;
              var previousInFunctionBody = this.context.inFunctionBody;
              this.context.labelSet = {};
              this.context.inIteration = false;
              this.context.inSwitch = false;
              this.context.inFunctionBody = true;

              while (this.lookahead.type !== 2
              /* EOF */
              ) {
                if (this.match('}')) {
                  break;
                }

                body.push(this.parseStatementListItem());
              }

              this.expect('}');
              this.context.labelSet = previousLabelSet;
              this.context.inIteration = previousInIteration;
              this.context.inSwitch = previousInSwitch;
              this.context.inFunctionBody = previousInFunctionBody;
              return this.finalize(node, new Node.BlockStatement(body));
            };

            Parser.prototype.validateParam = function (options, param, name) {
              var key = '$' + name;

              if (this.context.strict) {
                if (this.scanner.isRestrictedWord(name)) {
                  options.stricted = param;
                  options.message = messages_1.Messages.StrictParamName;
                }

                if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                  options.stricted = param;
                  options.message = messages_1.Messages.StrictParamDupe;
                }
              } else if (!options.firstRestricted) {
                if (this.scanner.isRestrictedWord(name)) {
                  options.firstRestricted = param;
                  options.message = messages_1.Messages.StrictParamName;
                } else if (this.scanner.isStrictModeReservedWord(name)) {
                  options.firstRestricted = param;
                  options.message = messages_1.Messages.StrictReservedWord;
                } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                  options.stricted = param;
                  options.message = messages_1.Messages.StrictParamDupe;
                }
              }
              /* istanbul ignore next */


              if (typeof Object.defineProperty === 'function') {
                Object.defineProperty(options.paramSet, key, {
                  value: true,
                  enumerable: true,
                  writable: true,
                  configurable: true
                });
              } else {
                options.paramSet[key] = true;
              }
            };

            Parser.prototype.parseRestElement = function (params) {
              var node = this.createNode();
              this.expect('...');
              var arg = this.parsePattern(params);

              if (this.match('=')) {
                this.throwError(messages_1.Messages.DefaultRestParameter);
              }

              if (!this.match(')')) {
                this.throwError(messages_1.Messages.ParameterAfterRestParameter);
              }

              return this.finalize(node, new Node.RestElement(arg));
            };

            Parser.prototype.parseFormalParameter = function (options) {
              var params = [];
              var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);

              for (var i = 0; i < params.length; i++) {
                this.validateParam(options, params[i], params[i].value);
              }

              options.simple = options.simple && param instanceof Node.Identifier;
              options.params.push(param);
            };

            Parser.prototype.parseFormalParameters = function (firstRestricted) {
              var options;
              options = {
                simple: true,
                params: [],
                firstRestricted: firstRestricted
              };
              this.expect('(');

              if (!this.match(')')) {
                options.paramSet = {};

                while (this.lookahead.type !== 2
                /* EOF */
                ) {
                  this.parseFormalParameter(options);

                  if (this.match(')')) {
                    break;
                  }

                  this.expect(',');

                  if (this.match(')')) {
                    break;
                  }
                }
              }

              this.expect(')');
              return {
                simple: options.simple,
                params: options.params,
                stricted: options.stricted,
                firstRestricted: options.firstRestricted,
                message: options.message
              };
            };

            Parser.prototype.matchAsyncFunction = function () {
              var match = this.matchContextualKeyword('async');

              if (match) {
                var state = this.scanner.saveState();
                this.scanner.scanComments();
                var next = this.scanner.lex();
                this.scanner.restoreState(state);
                match = state.lineNumber === next.lineNumber && next.type === 4
                /* Keyword */
                && next.value === 'function';
              }

              return match;
            };

            Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {
              var node = this.createNode();
              var isAsync = this.matchContextualKeyword('async');

              if (isAsync) {
                this.nextToken();
              }

              this.expectKeyword('function');
              var isGenerator = isAsync ? false : this.match('*');

              if (isGenerator) {
                this.nextToken();
              }

              var message;
              var id = null;
              var firstRestricted = null;

              if (!identifierIsOptional || !this.match('(')) {
                var token = this.lookahead;
                id = this.parseVariableIdentifier();

                if (this.context.strict) {
                  if (this.scanner.isRestrictedWord(token.value)) {
                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
                  }
                } else {
                  if (this.scanner.isRestrictedWord(token.value)) {
                    firstRestricted = token;
                    message = messages_1.Messages.StrictFunctionName;
                  } else if (this.scanner.isStrictModeReservedWord(token.value)) {
                    firstRestricted = token;
                    message = messages_1.Messages.StrictReservedWord;
                  }
                }
              }

              var previousAllowAwait = this.context["await"];
              var previousAllowYield = this.context.allowYield;
              this.context["await"] = isAsync;
              this.context.allowYield = !isGenerator;
              var formalParameters = this.parseFormalParameters(firstRestricted);
              var params = formalParameters.params;
              var stricted = formalParameters.stricted;
              firstRestricted = formalParameters.firstRestricted;

              if (formalParameters.message) {
                message = formalParameters.message;
              }

              var previousStrict = this.context.strict;
              var previousAllowStrictDirective = this.context.allowStrictDirective;
              this.context.allowStrictDirective = formalParameters.simple;
              var body = this.parseFunctionSourceElements();

              if (this.context.strict && firstRestricted) {
                this.throwUnexpectedToken(firstRestricted, message);
              }

              if (this.context.strict && stricted) {
                this.tolerateUnexpectedToken(stricted, message);
              }

              this.context.strict = previousStrict;
              this.context.allowStrictDirective = previousAllowStrictDirective;
              this.context["await"] = previousAllowAwait;
              this.context.allowYield = previousAllowYield;
              return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) : this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));
            };

            Parser.prototype.parseFunctionExpression = function () {
              var node = this.createNode();
              var isAsync = this.matchContextualKeyword('async');

              if (isAsync) {
                this.nextToken();
              }

              this.expectKeyword('function');
              var isGenerator = isAsync ? false : this.match('*');

              if (isGenerator) {
                this.nextToken();
              }

              var message;
              var id = null;
              var firstRestricted;
              var previousAllowAwait = this.context["await"];
              var previousAllowYield = this.context.allowYield;
              this.context["await"] = isAsync;
              this.context.allowYield = !isGenerator;

              if (!this.match('(')) {
                var token = this.lookahead;
                id = !this.context.strict && !isGenerator && this.matchKeyword('yield') ? this.parseIdentifierName() : this.parseVariableIdentifier();

                if (this.context.strict) {
                  if (this.scanner.isRestrictedWord(token.value)) {
                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
                  }
                } else {
                  if (this.scanner.isRestrictedWord(token.value)) {
                    firstRestricted = token;
                    message = messages_1.Messages.StrictFunctionName;
                  } else if (this.scanner.isStrictModeReservedWord(token.value)) {
                    firstRestricted = token;
                    message = messages_1.Messages.StrictReservedWord;
                  }
                }
              }

              var formalParameters = this.parseFormalParameters(firstRestricted);
              var params = formalParameters.params;
              var stricted = formalParameters.stricted;
              firstRestricted = formalParameters.firstRestricted;

              if (formalParameters.message) {
                message = formalParameters.message;
              }

              var previousStrict = this.context.strict;
              var previousAllowStrictDirective = this.context.allowStrictDirective;
              this.context.allowStrictDirective = formalParameters.simple;
              var body = this.parseFunctionSourceElements();

              if (this.context.strict && firstRestricted) {
                this.throwUnexpectedToken(firstRestricted, message);
              }

              if (this.context.strict && stricted) {
                this.tolerateUnexpectedToken(stricted, message);
              }

              this.context.strict = previousStrict;
              this.context.allowStrictDirective = previousAllowStrictDirective;
              this.context["await"] = previousAllowAwait;
              this.context.allowYield = previousAllowYield;
              return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) : this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));
            }; // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive


            Parser.prototype.parseDirective = function () {
              var token = this.lookahead;
              var node = this.createNode();
              var expr = this.parseExpression();
              var directive = expr.type === syntax_1.Syntax.Literal ? this.getTokenRaw(token).slice(1, -1) : null;
              this.consumeSemicolon();
              return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));
            };

            Parser.prototype.parseDirectivePrologues = function () {
              var firstRestricted = null;
              var body = [];

              while (true) {
                var token = this.lookahead;

                if (token.type !== 8
                /* StringLiteral */
                ) {
                    break;
                  }

                var statement = this.parseDirective();
                body.push(statement);
                var directive = statement.directive;

                if (typeof directive !== 'string') {
                  break;
                }

                if (directive === 'use strict') {
                  this.context.strict = true;

                  if (firstRestricted) {
                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);
                  }

                  if (!this.context.allowStrictDirective) {
                    this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);
                  }
                } else {
                  if (!firstRestricted && token.octal) {
                    firstRestricted = token;
                  }
                }
              }

              return body;
            }; // https://tc39.github.io/ecma262/#sec-method-definitions


            Parser.prototype.qualifiedPropertyName = function (token) {
              switch (token.type) {
                case 3
                /* Identifier */
                :
                case 8
                /* StringLiteral */
                :
                case 1
                /* BooleanLiteral */
                :
                case 5
                /* NullLiteral */
                :
                case 6
                /* NumericLiteral */
                :
                case 4
                /* Keyword */
                :
                  return true;

                case 7
                /* Punctuator */
                :
                  return token.value === '[';

                default:
                  break;
              }

              return false;
            };

            Parser.prototype.parseGetterMethod = function () {
              var node = this.createNode();
              var isGenerator = false;
              var previousAllowYield = this.context.allowYield;
              this.context.allowYield = !isGenerator;
              var formalParameters = this.parseFormalParameters();

              if (formalParameters.params.length > 0) {
                this.tolerateError(messages_1.Messages.BadGetterArity);
              }

              var method = this.parsePropertyMethod(formalParameters);
              this.context.allowYield = previousAllowYield;
              return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
            };

            Parser.prototype.parseSetterMethod = function () {
              var node = this.createNode();
              var isGenerator = false;
              var previousAllowYield = this.context.allowYield;
              this.context.allowYield = !isGenerator;
              var formalParameters = this.parseFormalParameters();

              if (formalParameters.params.length !== 1) {
                this.tolerateError(messages_1.Messages.BadSetterArity);
              } else if (formalParameters.params[0] instanceof Node.RestElement) {
                this.tolerateError(messages_1.Messages.BadSetterRestParameter);
              }

              var method = this.parsePropertyMethod(formalParameters);
              this.context.allowYield = previousAllowYield;
              return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
            };

            Parser.prototype.parseGeneratorMethod = function () {
              var node = this.createNode();
              var isGenerator = true;
              var previousAllowYield = this.context.allowYield;
              this.context.allowYield = true;
              var params = this.parseFormalParameters();
              this.context.allowYield = false;
              var method = this.parsePropertyMethod(params);
              this.context.allowYield = previousAllowYield;
              return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
            }; // https://tc39.github.io/ecma262/#sec-generator-function-definitions


            Parser.prototype.isStartOfExpression = function () {
              var start = true;
              var value = this.lookahead.value;

              switch (this.lookahead.type) {
                case 7
                /* Punctuator */
                :
                  start = value === '[' || value === '(' || value === '{' || value === '+' || value === '-' || value === '!' || value === '~' || value === '++' || value === '--' || value === '/' || value === '/='; // regular expression literal

                  break;

                case 4
                /* Keyword */
                :
                  start = value === 'class' || value === 'delete' || value === 'function' || value === 'let' || value === 'new' || value === 'super' || value === 'this' || value === 'typeof' || value === 'void' || value === 'yield';
                  break;

                default:
                  break;
              }

              return start;
            };

            Parser.prototype.parseYieldExpression = function () {
              var node = this.createNode();
              this.expectKeyword('yield');
              var argument = null;
              var delegate = false;

              if (!this.hasLineTerminator) {
                var previousAllowYield = this.context.allowYield;
                this.context.allowYield = false;
                delegate = this.match('*');

                if (delegate) {
                  this.nextToken();
                  argument = this.parseAssignmentExpression();
                } else if (this.isStartOfExpression()) {
                  argument = this.parseAssignmentExpression();
                }

                this.context.allowYield = previousAllowYield;
              }

              return this.finalize(node, new Node.YieldExpression(argument, delegate));
            }; // https://tc39.github.io/ecma262/#sec-class-definitions


            Parser.prototype.parseClassElement = function (hasConstructor) {
              var token = this.lookahead;
              var node = this.createNode();
              var kind = '';
              var key = null;
              var value = null;
              var computed = false;
              var method = false;
              var isStatic = false;
              var isAsync = false;

              if (this.match('*')) {
                this.nextToken();
              } else {
                computed = this.match('[');
                key = this.parseObjectPropertyKey();
                var id = key;

                if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {
                  token = this.lookahead;
                  isStatic = true;
                  computed = this.match('[');

                  if (this.match('*')) {
                    this.nextToken();
                  } else {
                    key = this.parseObjectPropertyKey();
                  }
                }

                if (token.type === 3
                /* Identifier */
                && !this.hasLineTerminator && token.value === 'async') {
                  var punctuator = this.lookahead.value;

                  if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {
                    isAsync = true;
                    token = this.lookahead;
                    key = this.parseObjectPropertyKey();

                    if (token.type === 3
                    /* Identifier */
                    && token.value === 'constructor') {
                      this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);
                    }
                  }
                }
              }

              var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);

              if (token.type === 3
              /* Identifier */
              ) {
                  if (token.value === 'get' && lookaheadPropertyKey) {
                    kind = 'get';
                    computed = this.match('[');
                    key = this.parseObjectPropertyKey();
                    this.context.allowYield = false;
                    value = this.parseGetterMethod();
                  } else if (token.value === 'set' && lookaheadPropertyKey) {
                    kind = 'set';
                    computed = this.match('[');
                    key = this.parseObjectPropertyKey();
                    value = this.parseSetterMethod();
                  }
                } else if (token.type === 7
              /* Punctuator */
              && token.value === '*' && lookaheadPropertyKey) {
                kind = 'init';
                computed = this.match('[');
                key = this.parseObjectPropertyKey();
                value = this.parseGeneratorMethod();
                method = true;
              }

              if (!kind && key && this.match('(')) {
                kind = 'init';
                value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
                method = true;
              }

              if (!kind) {
                this.throwUnexpectedToken(this.lookahead);
              }

              if (kind === 'init') {
                kind = 'method';
              }

              if (!computed) {
                if (isStatic && this.isPropertyKey(key, 'prototype')) {
                  this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);
                }

                if (!isStatic && this.isPropertyKey(key, 'constructor')) {
                  if (kind !== 'method' || !method || value && value.generator) {
                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);
                  }

                  if (hasConstructor.value) {
                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);
                  } else {
                    hasConstructor.value = true;
                  }

                  kind = 'constructor';
                }
              }

              return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));
            };

            Parser.prototype.parseClassElementList = function () {
              var body = [];
              var hasConstructor = {
                value: false
              };
              this.expect('{');

              while (!this.match('}')) {
                if (this.match(';')) {
                  this.nextToken();
                } else {
                  body.push(this.parseClassElement(hasConstructor));
                }
              }

              this.expect('}');
              return body;
            };

            Parser.prototype.parseClassBody = function () {
              var node = this.createNode();
              var elementList = this.parseClassElementList();
              return this.finalize(node, new Node.ClassBody(elementList));
            };

            Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {
              var node = this.createNode();
              var previousStrict = this.context.strict;
              this.context.strict = true;
              this.expectKeyword('class');
              var id = identifierIsOptional && this.lookahead.type !== 3
              /* Identifier */
              ? null : this.parseVariableIdentifier();
              var superClass = null;

              if (this.matchKeyword('extends')) {
                this.nextToken();
                superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
              }

              var classBody = this.parseClassBody();
              this.context.strict = previousStrict;
              return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));
            };

            Parser.prototype.parseClassExpression = function () {
              var node = this.createNode();
              var previousStrict = this.context.strict;
              this.context.strict = true;
              this.expectKeyword('class');
              var id = this.lookahead.type === 3
              /* Identifier */
              ? this.parseVariableIdentifier() : null;
              var superClass = null;

              if (this.matchKeyword('extends')) {
                this.nextToken();
                superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
              }

              var classBody = this.parseClassBody();
              this.context.strict = previousStrict;
              return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));
            }; // https://tc39.github.io/ecma262/#sec-scripts
            // https://tc39.github.io/ecma262/#sec-modules


            Parser.prototype.parseModule = function () {
              this.context.strict = true;
              this.context.isModule = true;
              this.scanner.isModule = true;
              var node = this.createNode();
              var body = this.parseDirectivePrologues();

              while (this.lookahead.type !== 2
              /* EOF */
              ) {
                body.push(this.parseStatementListItem());
              }

              return this.finalize(node, new Node.Module(body));
            };

            Parser.prototype.parseScript = function () {
              var node = this.createNode();
              var body = this.parseDirectivePrologues();

              while (this.lookahead.type !== 2
              /* EOF */
              ) {
                body.push(this.parseStatementListItem());
              }

              return this.finalize(node, new Node.Script(body));
            }; // https://tc39.github.io/ecma262/#sec-imports


            Parser.prototype.parseModuleSpecifier = function () {
              var node = this.createNode();

              if (this.lookahead.type !== 8
              /* StringLiteral */
              ) {
                  this.throwError(messages_1.Messages.InvalidModuleSpecifier);
                }

              var token = this.nextToken();
              var raw = this.getTokenRaw(token);
              return this.finalize(node, new Node.Literal(token.value, raw));
            }; // import {<foo as bar>} ...;


            Parser.prototype.parseImportSpecifier = function () {
              var node = this.createNode();
              var imported;
              var local;

              if (this.lookahead.type === 3
              /* Identifier */
              ) {
                  imported = this.parseVariableIdentifier();
                  local = imported;

                  if (this.matchContextualKeyword('as')) {
                    this.nextToken();
                    local = this.parseVariableIdentifier();
                  }
                } else {
                imported = this.parseIdentifierName();
                local = imported;

                if (this.matchContextualKeyword('as')) {
                  this.nextToken();
                  local = this.parseVariableIdentifier();
                } else {
                  this.throwUnexpectedToken(this.nextToken());
                }
              }

              return this.finalize(node, new Node.ImportSpecifier(local, imported));
            }; // {foo, bar as bas}


            Parser.prototype.parseNamedImports = function () {
              this.expect('{');
              var specifiers = [];

              while (!this.match('}')) {
                specifiers.push(this.parseImportSpecifier());

                if (!this.match('}')) {
                  this.expect(',');
                }
              }

              this.expect('}');
              return specifiers;
            }; // import <foo> ...;


            Parser.prototype.parseImportDefaultSpecifier = function () {
              var node = this.createNode();
              var local = this.parseIdentifierName();
              return this.finalize(node, new Node.ImportDefaultSpecifier(local));
            }; // import <* as foo> ...;


            Parser.prototype.parseImportNamespaceSpecifier = function () {
              var node = this.createNode();
              this.expect('*');

              if (!this.matchContextualKeyword('as')) {
                this.throwError(messages_1.Messages.NoAsAfterImportNamespace);
              }

              this.nextToken();
              var local = this.parseIdentifierName();
              return this.finalize(node, new Node.ImportNamespaceSpecifier(local));
            };

            Parser.prototype.parseImportDeclaration = function () {
              if (this.context.inFunctionBody) {
                this.throwError(messages_1.Messages.IllegalImportDeclaration);
              }

              var node = this.createNode();
              this.expectKeyword('import');
              var src;
              var specifiers = [];

              if (this.lookahead.type === 8
              /* StringLiteral */
              ) {
                  // import 'foo';
                  src = this.parseModuleSpecifier();
                } else {
                if (this.match('{')) {
                  // import {bar}
                  specifiers = specifiers.concat(this.parseNamedImports());
                } else if (this.match('*')) {
                  // import * as foo
                  specifiers.push(this.parseImportNamespaceSpecifier());
                } else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {
                  // import foo
                  specifiers.push(this.parseImportDefaultSpecifier());

                  if (this.match(',')) {
                    this.nextToken();

                    if (this.match('*')) {
                      // import foo, * as foo
                      specifiers.push(this.parseImportNamespaceSpecifier());
                    } else if (this.match('{')) {
                      // import foo, {bar}
                      specifiers = specifiers.concat(this.parseNamedImports());
                    } else {
                      this.throwUnexpectedToken(this.lookahead);
                    }
                  }
                } else {
                  this.throwUnexpectedToken(this.nextToken());
                }

                if (!this.matchContextualKeyword('from')) {
                  var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
                  this.throwError(message, this.lookahead.value);
                }

                this.nextToken();
                src = this.parseModuleSpecifier();
              }

              this.consumeSemicolon();
              return this.finalize(node, new Node.ImportDeclaration(specifiers, src));
            }; // https://tc39.github.io/ecma262/#sec-exports


            Parser.prototype.parseExportSpecifier = function () {
              var node = this.createNode();
              var local = this.parseIdentifierName();
              var exported = local;

              if (this.matchContextualKeyword('as')) {
                this.nextToken();
                exported = this.parseIdentifierName();
              }

              return this.finalize(node, new Node.ExportSpecifier(local, exported));
            };

            Parser.prototype.parseExportDeclaration = function () {
              if (this.context.inFunctionBody) {
                this.throwError(messages_1.Messages.IllegalExportDeclaration);
              }

              var node = this.createNode();
              this.expectKeyword('export');
              var exportDeclaration;

              if (this.matchKeyword('default')) {
                // export default ...
                this.nextToken();

                if (this.matchKeyword('function')) {
                  // export default function foo () {}
                  // export default function () {}
                  var declaration = this.parseFunctionDeclaration(true);
                  exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
                } else if (this.matchKeyword('class')) {
                  // export default class foo {}
                  var declaration = this.parseClassDeclaration(true);
                  exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
                } else if (this.matchContextualKeyword('async')) {
                  // export default async function f () {}
                  // export default async function () {}
                  // export default async x => x
                  var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();
                  exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
                } else {
                  if (this.matchContextualKeyword('from')) {
                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);
                  } // export default {};
                  // export default [];
                  // export default (1 + 2);


                  var declaration = this.match('{') ? this.parseObjectInitializer() : this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();
                  this.consumeSemicolon();
                  exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
                }
              } else if (this.match('*')) {
                // export * from 'foo';
                this.nextToken();

                if (!this.matchContextualKeyword('from')) {
                  var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
                  this.throwError(message, this.lookahead.value);
                }

                this.nextToken();
                var src = this.parseModuleSpecifier();
                this.consumeSemicolon();
                exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));
              } else if (this.lookahead.type === 4
              /* Keyword */
              ) {
                  // export var f = 1;
                  var declaration = void 0;

                  switch (this.lookahead.value) {
                    case 'let':
                    case 'const':
                      declaration = this.parseLexicalDeclaration({
                        inFor: false
                      });
                      break;

                    case 'var':
                    case 'class':
                    case 'function':
                      declaration = this.parseStatementListItem();
                      break;

                    default:
                      this.throwUnexpectedToken(this.lookahead);
                  }

                  exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
                } else if (this.matchAsyncFunction()) {
                var declaration = this.parseFunctionDeclaration();
                exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
              } else {
                var specifiers = [];
                var source = null;
                var isExportFromIdentifier = false;
                this.expect('{');

                while (!this.match('}')) {
                  isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');
                  specifiers.push(this.parseExportSpecifier());

                  if (!this.match('}')) {
                    this.expect(',');
                  }
                }

                this.expect('}');

                if (this.matchContextualKeyword('from')) {
                  // export {default} from 'foo';
                  // export {foo} from 'foo';
                  this.nextToken();
                  source = this.parseModuleSpecifier();
                  this.consumeSemicolon();
                } else if (isExportFromIdentifier) {
                  // export {default}; // missing fromClause
                  var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
                  this.throwError(message, this.lookahead.value);
                } else {
                  // export {foo};
                  this.consumeSemicolon();
                }

                exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));
              }

              return exportDeclaration;
            };

            return Parser;
          }();

          exports.Parser = Parser;
          /***/
        },
        /* 9 */

        /***/
        function (module, exports) {
          "use strict"; // Ensure the condition is true, otherwise throw an error.
          // This is only to have a better contract semantic, i.e. another safety net
          // to catch a logic error. The condition shall be fulfilled in normal case.
          // Do NOT use this to enforce a certain condition on any user input.

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          function assert(condition, message) {
            /* istanbul ignore if */
            if (!condition) {
              throw new Error('ASSERT: ' + message);
            }
          }

          exports.assert = assert;
          /***/
        },
        /* 10 */

        /***/
        function (module, exports) {
          "use strict";
          /* tslint:disable:max-classes-per-file */

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var ErrorHandler = function () {
            function ErrorHandler() {
              this.errors = [];
              this.tolerant = false;
            }

            ErrorHandler.prototype.recordError = function (error) {
              this.errors.push(error);
            };

            ErrorHandler.prototype.tolerate = function (error) {
              if (this.tolerant) {
                this.recordError(error);
              } else {
                throw error;
              }
            };

            ErrorHandler.prototype.constructError = function (msg, column) {
              var error = new Error(msg);

              try {
                throw error;
              } catch (base) {
                /* istanbul ignore else */
                if (Object.create && Object.defineProperty) {
                  error = Object.create(base);
                  Object.defineProperty(error, 'column', {
                    value: column
                  });
                }
              }
              /* istanbul ignore next */


              return error;
            };

            ErrorHandler.prototype.createError = function (index, line, col, description) {
              var msg = 'Line ' + line + ': ' + description;
              var error = this.constructError(msg, col);
              error.index = index;
              error.lineNumber = line;
              error.description = description;
              return error;
            };

            ErrorHandler.prototype.throwError = function (index, line, col, description) {
              throw this.createError(index, line, col, description);
            };

            ErrorHandler.prototype.tolerateError = function (index, line, col, description) {
              var error = this.createError(index, line, col, description);

              if (this.tolerant) {
                this.recordError(error);
              } else {
                throw error;
              }
            };

            return ErrorHandler;
          }();

          exports.ErrorHandler = ErrorHandler;
          /***/
        },
        /* 11 */

        /***/
        function (module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          }); // Error messages should be identical to V8.

          exports.Messages = {
            BadGetterArity: 'Getter must not have any formal parameters',
            BadSetterArity: 'Setter must have exactly one formal parameter',
            BadSetterRestParameter: 'Setter function argument must not be a rest parameter',
            ConstructorIsAsync: 'Class constructor may not be an async method',
            ConstructorSpecialMethod: 'Class constructor may not be an accessor',
            DeclarationMissingInitializer: 'Missing initializer in %0 declaration',
            DefaultRestParameter: 'Unexpected token =',
            DuplicateBinding: 'Duplicate binding %0',
            DuplicateConstructor: 'A class may only have one constructor',
            DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
            ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',
            GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',
            IllegalBreak: 'Illegal break statement',
            IllegalContinue: 'Illegal continue statement',
            IllegalExportDeclaration: 'Unexpected token',
            IllegalImportDeclaration: 'Unexpected token',
            IllegalLanguageModeDirective: 'Illegal \'use strict\' directive in function with non-simple parameter list',
            IllegalReturn: 'Illegal return statement',
            InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',
            InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',
            InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
            InvalidLHSInForIn: 'Invalid left-hand side in for-in',
            InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
            InvalidModuleSpecifier: 'Unexpected token',
            InvalidRegExp: 'Invalid regular expression',
            LetInLexicalBinding: 'let is disallowed as a lexically bound name',
            MissingFromClause: 'Unexpected token',
            MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
            NewlineAfterThrow: 'Illegal newline after throw',
            NoAsAfterImportNamespace: 'Unexpected token',
            NoCatchOrFinally: 'Missing catch or finally after try',
            ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
            Redeclaration: '%0 \'%1\' has already been declared',
            StaticPrototype: 'Classes may not have static property named prototype',
            StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
            StrictDelete: 'Delete of an unqualified identifier in strict mode.',
            StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',
            StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
            StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
            StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
            StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
            StrictModeWith: 'Strict mode code may not include a with statement',
            StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
            StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
            StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
            StrictReservedWord: 'Use of future reserved word in strict mode',
            StrictVarName: 'Variable name may not be eval or arguments in strict mode',
            TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
            UnexpectedEOS: 'Unexpected end of input',
            UnexpectedIdentifier: 'Unexpected identifier',
            UnexpectedNumber: 'Unexpected number',
            UnexpectedReserved: 'Unexpected reserved word',
            UnexpectedString: 'Unexpected string',
            UnexpectedTemplate: 'Unexpected quasi %0',
            UnexpectedToken: 'Unexpected token %0',
            UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',
            UnknownLabel: 'Undefined label \'%0\'',
            UnterminatedRegExp: 'Invalid regular expression: missing /'
          };
          /***/
        },
        /* 12 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var assert_1 = __webpack_require__(9);

          var character_1 = __webpack_require__(4);

          var messages_1 = __webpack_require__(11);

          function hexValue(ch) {
            return '0123456789abcdef'.indexOf(ch.toLowerCase());
          }

          function octalValue(ch) {
            return '01234567'.indexOf(ch);
          }

          var Scanner = function () {
            function Scanner(code, handler) {
              this.source = code;
              this.errorHandler = handler;
              this.trackComment = false;
              this.isModule = false;
              this.length = code.length;
              this.index = 0;
              this.lineNumber = code.length > 0 ? 1 : 0;
              this.lineStart = 0;
              this.curlyStack = [];
            }

            Scanner.prototype.saveState = function () {
              return {
                index: this.index,
                lineNumber: this.lineNumber,
                lineStart: this.lineStart
              };
            };

            Scanner.prototype.restoreState = function (state) {
              this.index = state.index;
              this.lineNumber = state.lineNumber;
              this.lineStart = state.lineStart;
            };

            Scanner.prototype.eof = function () {
              return this.index >= this.length;
            };

            Scanner.prototype.throwUnexpectedToken = function (message) {
              if (message === void 0) {
                message = messages_1.Messages.UnexpectedTokenIllegal;
              }

              return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
            };

            Scanner.prototype.tolerateUnexpectedToken = function (message) {
              if (message === void 0) {
                message = messages_1.Messages.UnexpectedTokenIllegal;
              }

              this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
            }; // https://tc39.github.io/ecma262/#sec-comments


            Scanner.prototype.skipSingleLineComment = function (offset) {
              var comments = [];
              var start, loc;

              if (this.trackComment) {
                comments = [];
                start = this.index - offset;
                loc = {
                  start: {
                    line: this.lineNumber,
                    column: this.index - this.lineStart - offset
                  },
                  end: {}
                };
              }

              while (!this.eof()) {
                var ch = this.source.charCodeAt(this.index);
                ++this.index;

                if (character_1.Character.isLineTerminator(ch)) {
                  if (this.trackComment) {
                    loc.end = {
                      line: this.lineNumber,
                      column: this.index - this.lineStart - 1
                    };
                    var entry = {
                      multiLine: false,
                      slice: [start + offset, this.index - 1],
                      range: [start, this.index - 1],
                      loc: loc
                    };
                    comments.push(entry);
                  }

                  if (ch === 13 && this.source.charCodeAt(this.index) === 10) {
                    ++this.index;
                  }

                  ++this.lineNumber;
                  this.lineStart = this.index;
                  return comments;
                }
              }

              if (this.trackComment) {
                loc.end = {
                  line: this.lineNumber,
                  column: this.index - this.lineStart
                };
                var entry = {
                  multiLine: false,
                  slice: [start + offset, this.index],
                  range: [start, this.index],
                  loc: loc
                };
                comments.push(entry);
              }

              return comments;
            };

            Scanner.prototype.skipMultiLineComment = function () {
              var comments = [];
              var start, loc;

              if (this.trackComment) {
                comments = [];
                start = this.index - 2;
                loc = {
                  start: {
                    line: this.lineNumber,
                    column: this.index - this.lineStart - 2
                  },
                  end: {}
                };
              }

              while (!this.eof()) {
                var ch = this.source.charCodeAt(this.index);

                if (character_1.Character.isLineTerminator(ch)) {
                  if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {
                    ++this.index;
                  }

                  ++this.lineNumber;
                  ++this.index;
                  this.lineStart = this.index;
                } else if (ch === 0x2A) {
                  // Block comment ends with '*/'.
                  if (this.source.charCodeAt(this.index + 1) === 0x2F) {
                    this.index += 2;

                    if (this.trackComment) {
                      loc.end = {
                        line: this.lineNumber,
                        column: this.index - this.lineStart
                      };
                      var entry = {
                        multiLine: true,
                        slice: [start + 2, this.index - 2],
                        range: [start, this.index],
                        loc: loc
                      };
                      comments.push(entry);
                    }

                    return comments;
                  }

                  ++this.index;
                } else {
                  ++this.index;
                }
              } // Ran off the end of the file - the whole thing is a comment


              if (this.trackComment) {
                loc.end = {
                  line: this.lineNumber,
                  column: this.index - this.lineStart
                };
                var entry = {
                  multiLine: true,
                  slice: [start + 2, this.index],
                  range: [start, this.index],
                  loc: loc
                };
                comments.push(entry);
              }

              this.tolerateUnexpectedToken();
              return comments;
            };

            Scanner.prototype.scanComments = function () {
              var comments;

              if (this.trackComment) {
                comments = [];
              }

              var start = this.index === 0;

              while (!this.eof()) {
                var ch = this.source.charCodeAt(this.index);

                if (character_1.Character.isWhiteSpace(ch)) {
                  ++this.index;
                } else if (character_1.Character.isLineTerminator(ch)) {
                  ++this.index;

                  if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {
                    ++this.index;
                  }

                  ++this.lineNumber;
                  this.lineStart = this.index;
                  start = true;
                } else if (ch === 0x2F) {
                  ch = this.source.charCodeAt(this.index + 1);

                  if (ch === 0x2F) {
                    this.index += 2;
                    var comment = this.skipSingleLineComment(2);

                    if (this.trackComment) {
                      comments = comments.concat(comment);
                    }

                    start = true;
                  } else if (ch === 0x2A) {
                    this.index += 2;
                    var comment = this.skipMultiLineComment();

                    if (this.trackComment) {
                      comments = comments.concat(comment);
                    }
                  } else {
                    break;
                  }
                } else if (start && ch === 0x2D) {
                  // U+003E is '>'
                  if (this.source.charCodeAt(this.index + 1) === 0x2D && this.source.charCodeAt(this.index + 2) === 0x3E) {
                    // '-->' is a single-line comment
                    this.index += 3;
                    var comment = this.skipSingleLineComment(3);

                    if (this.trackComment) {
                      comments = comments.concat(comment);
                    }
                  } else {
                    break;
                  }
                } else if (ch === 0x3C && !this.isModule) {
                  if (this.source.slice(this.index + 1, this.index + 4) === '!--') {
                    this.index += 4; // `<!--`

                    var comment = this.skipSingleLineComment(4);

                    if (this.trackComment) {
                      comments = comments.concat(comment);
                    }
                  } else {
                    break;
                  }
                } else {
                  break;
                }
              }

              return comments;
            }; // https://tc39.github.io/ecma262/#sec-future-reserved-words


            Scanner.prototype.isFutureReservedWord = function (id) {
              switch (id) {
                case 'enum':
                case 'export':
                case 'import':
                case 'super':
                  return true;

                default:
                  return false;
              }
            };

            Scanner.prototype.isStrictModeReservedWord = function (id) {
              switch (id) {
                case 'implements':
                case 'interface':
                case 'package':
                case 'private':
                case 'protected':
                case 'public':
                case 'static':
                case 'yield':
                case 'let':
                  return true;

                default:
                  return false;
              }
            };

            Scanner.prototype.isRestrictedWord = function (id) {
              return id === 'eval' || id === 'arguments';
            }; // https://tc39.github.io/ecma262/#sec-keywords


            Scanner.prototype.isKeyword = function (id) {
              switch (id.length) {
                case 2:
                  return id === 'if' || id === 'in' || id === 'do';

                case 3:
                  return id === 'var' || id === 'for' || id === 'new' || id === 'try' || id === 'let';

                case 4:
                  return id === 'this' || id === 'else' || id === 'case' || id === 'void' || id === 'with' || id === 'enum';

                case 5:
                  return id === 'while' || id === 'break' || id === 'catch' || id === 'throw' || id === 'const' || id === 'yield' || id === 'class' || id === 'super';

                case 6:
                  return id === 'return' || id === 'typeof' || id === 'delete' || id === 'switch' || id === 'export' || id === 'import';

                case 7:
                  return id === 'default' || id === 'finally' || id === 'extends';

                case 8:
                  return id === 'function' || id === 'continue' || id === 'debugger';

                case 10:
                  return id === 'instanceof';

                default:
                  return false;
              }
            };

            Scanner.prototype.codePointAt = function (i) {
              var cp = this.source.charCodeAt(i);

              if (cp >= 0xD800 && cp <= 0xDBFF) {
                var second = this.source.charCodeAt(i + 1);

                if (second >= 0xDC00 && second <= 0xDFFF) {
                  var first = cp;
                  cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
                }
              }

              return cp;
            };

            Scanner.prototype.scanHexEscape = function (prefix) {
              var len = prefix === 'u' ? 4 : 2;
              var code = 0;

              for (var i = 0; i < len; ++i) {
                if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
                  code = code * 16 + hexValue(this.source[this.index++]);
                } else {
                  return null;
                }
              }

              return String.fromCharCode(code);
            };

            Scanner.prototype.scanUnicodeCodePointEscape = function () {
              var ch = this.source[this.index];
              var code = 0; // At least, one hex digit is required.

              if (ch === '}') {
                this.throwUnexpectedToken();
              }

              while (!this.eof()) {
                ch = this.source[this.index++];

                if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {
                  break;
                }

                code = code * 16 + hexValue(ch);
              }

              if (code > 0x10FFFF || ch !== '}') {
                this.throwUnexpectedToken();
              }

              return character_1.Character.fromCodePoint(code);
            };

            Scanner.prototype.getIdentifier = function () {
              var start = this.index++;

              while (!this.eof()) {
                var ch = this.source.charCodeAt(this.index);

                if (ch === 0x5C) {
                  // Blackslash (U+005C) marks Unicode escape sequence.
                  this.index = start;
                  return this.getComplexIdentifier();
                } else if (ch >= 0xD800 && ch < 0xDFFF) {
                  // Need to handle surrogate pairs.
                  this.index = start;
                  return this.getComplexIdentifier();
                }

                if (character_1.Character.isIdentifierPart(ch)) {
                  ++this.index;
                } else {
                  break;
                }
              }

              return this.source.slice(start, this.index);
            };

            Scanner.prototype.getComplexIdentifier = function () {
              var cp = this.codePointAt(this.index);
              var id = character_1.Character.fromCodePoint(cp);
              this.index += id.length; // '\u' (U+005C, U+0075) denotes an escaped character.

              var ch;

              if (cp === 0x5C) {
                if (this.source.charCodeAt(this.index) !== 0x75) {
                  this.throwUnexpectedToken();
                }

                ++this.index;

                if (this.source[this.index] === '{') {
                  ++this.index;
                  ch = this.scanUnicodeCodePointEscape();
                } else {
                  ch = this.scanHexEscape('u');

                  if (ch === null || ch === '\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {
                    this.throwUnexpectedToken();
                  }
                }

                id = ch;
              }

              while (!this.eof()) {
                cp = this.codePointAt(this.index);

                if (!character_1.Character.isIdentifierPart(cp)) {
                  break;
                }

                ch = character_1.Character.fromCodePoint(cp);
                id += ch;
                this.index += ch.length; // '\u' (U+005C, U+0075) denotes an escaped character.

                if (cp === 0x5C) {
                  id = id.substr(0, id.length - 1);

                  if (this.source.charCodeAt(this.index) !== 0x75) {
                    this.throwUnexpectedToken();
                  }

                  ++this.index;

                  if (this.source[this.index] === '{') {
                    ++this.index;
                    ch = this.scanUnicodeCodePointEscape();
                  } else {
                    ch = this.scanHexEscape('u');

                    if (ch === null || ch === '\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
                      this.throwUnexpectedToken();
                    }
                  }

                  id += ch;
                }
              }

              return id;
            };

            Scanner.prototype.octalToDecimal = function (ch) {
              // \0 is not octal escape sequence
              var octal = ch !== '0';
              var code = octalValue(ch);

              if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
                octal = true;
                code = code * 8 + octalValue(this.source[this.index++]); // 3 digits are only allowed when string starts
                // with 0, 1, 2, 3

                if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
                  code = code * 8 + octalValue(this.source[this.index++]);
                }
              }

              return {
                code: code,
                octal: octal
              };
            }; // https://tc39.github.io/ecma262/#sec-names-and-keywords


            Scanner.prototype.scanIdentifier = function () {
              var type;
              var start = this.index; // Backslash (U+005C) starts an escaped character.

              var id = this.source.charCodeAt(start) === 0x5C ? this.getComplexIdentifier() : this.getIdentifier(); // There is no keyword or literal with only one character.
              // Thus, it must be an identifier.

              if (id.length === 1) {
                type = 3
                /* Identifier */
                ;
              } else if (this.isKeyword(id)) {
                type = 4
                /* Keyword */
                ;
              } else if (id === 'null') {
                type = 5
                /* NullLiteral */
                ;
              } else if (id === 'true' || id === 'false') {
                type = 1
                /* BooleanLiteral */
                ;
              } else {
                type = 3
                /* Identifier */
                ;
              }

              if (type !== 3
              /* Identifier */
              && start + id.length !== this.index) {
                var restore = this.index;
                this.index = start;
                this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);
                this.index = restore;
              }

              return {
                type: type,
                value: id,
                lineNumber: this.lineNumber,
                lineStart: this.lineStart,
                start: start,
                end: this.index
              };
            }; // https://tc39.github.io/ecma262/#sec-punctuators


            Scanner.prototype.scanPunctuator = function () {
              var start = this.index; // Check for most common single-character punctuators.

              var str = this.source[this.index];

              switch (str) {
                case '(':
                case '{':
                  if (str === '{') {
                    this.curlyStack.push('{');
                  }

                  ++this.index;
                  break;

                case '.':
                  ++this.index;

                  if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {
                    // Spread operator: ...
                    this.index += 2;
                    str = '...';
                  }

                  break;

                case '}':
                  ++this.index;
                  this.curlyStack.pop();
                  break;

                case ')':
                case ';':
                case ',':
                case '[':
                case ']':
                case ':':
                case '?':
                case '~':
                  ++this.index;
                  break;

                default:
                  // 4-character punctuator.
                  str = this.source.substr(this.index, 4);

                  if (str === '>>>=') {
                    this.index += 4;
                  } else {
                    // 3-character punctuators.
                    str = str.substr(0, 3);

                    if (str === '===' || str === '!==' || str === '>>>' || str === '<<=' || str === '>>=' || str === '**=') {
                      this.index += 3;
                    } else {
                      // 2-character punctuators.
                      str = str.substr(0, 2);

                      if (str === '&&' || str === '||' || str === '==' || str === '!=' || str === '+=' || str === '-=' || str === '*=' || str === '/=' || str === '++' || str === '--' || str === '<<' || str === '>>' || str === '&=' || str === '|=' || str === '^=' || str === '%=' || str === '<=' || str === '>=' || str === '=>' || str === '**') {
                        this.index += 2;
                      } else {
                        // 1-character punctuators.
                        str = this.source[this.index];

                        if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
                          ++this.index;
                        }
                      }
                    }
                  }

              }

              if (this.index === start) {
                this.throwUnexpectedToken();
              }

              return {
                type: 7
                /* Punctuator */
                ,
                value: str,
                lineNumber: this.lineNumber,
                lineStart: this.lineStart,
                start: start,
                end: this.index
              };
            }; // https://tc39.github.io/ecma262/#sec-literals-numeric-literals


            Scanner.prototype.scanHexLiteral = function (start) {
              var num = '';

              while (!this.eof()) {
                if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
                  break;
                }

                num += this.source[this.index++];
              }

              if (num.length === 0) {
                this.throwUnexpectedToken();
              }

              if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
                this.throwUnexpectedToken();
              }

              return {
                type: 6
                /* NumericLiteral */
                ,
                value: parseInt('0x' + num, 16),
                lineNumber: this.lineNumber,
                lineStart: this.lineStart,
                start: start,
                end: this.index
              };
            };

            Scanner.prototype.scanBinaryLiteral = function (start) {
              var num = '';
              var ch;

              while (!this.eof()) {
                ch = this.source[this.index];

                if (ch !== '0' && ch !== '1') {
                  break;
                }

                num += this.source[this.index++];
              }

              if (num.length === 0) {
                // only 0b or 0B
                this.throwUnexpectedToken();
              }

              if (!this.eof()) {
                ch = this.source.charCodeAt(this.index);
                /* istanbul ignore else */

                if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {
                  this.throwUnexpectedToken();
                }
              }

              return {
                type: 6
                /* NumericLiteral */
                ,
                value: parseInt(num, 2),
                lineNumber: this.lineNumber,
                lineStart: this.lineStart,
                start: start,
                end: this.index
              };
            };

            Scanner.prototype.scanOctalLiteral = function (prefix, start) {
              var num = '';
              var octal = false;

              if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {
                octal = true;
                num = '0' + this.source[this.index++];
              } else {
                ++this.index;
              }

              while (!this.eof()) {
                if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
                  break;
                }

                num += this.source[this.index++];
              }

              if (!octal && num.length === 0) {
                // only 0o or 0O
                this.throwUnexpectedToken();
              }

              if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                this.throwUnexpectedToken();
              }

              return {
                type: 6
                /* NumericLiteral */
                ,
                value: parseInt(num, 8),
                octal: octal,
                lineNumber: this.lineNumber,
                lineStart: this.lineStart,
                start: start,
                end: this.index
              };
            };

            Scanner.prototype.isImplicitOctalLiteral = function () {
              // Implicit octal, unless there is a non-octal digit.
              // (Annex B.1.1 on Numeric Literals)
              for (var i = this.index + 1; i < this.length; ++i) {
                var ch = this.source[i];

                if (ch === '8' || ch === '9') {
                  return false;
                }

                if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
                  return true;
                }
              }

              return true;
            };

            Scanner.prototype.scanNumericLiteral = function () {
              var start = this.index;
              var ch = this.source[start];
              assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');
              var num = '';

              if (ch !== '.') {
                num = this.source[this.index++];
                ch = this.source[this.index]; // Hex number starts with '0x'.
                // Octal number starts with '0'.
                // Octal number in ES6 starts with '0o'.
                // Binary number in ES6 starts with '0b'.

                if (num === '0') {
                  if (ch === 'x' || ch === 'X') {
                    ++this.index;
                    return this.scanHexLiteral(start);
                  }

                  if (ch === 'b' || ch === 'B') {
                    ++this.index;
                    return this.scanBinaryLiteral(start);
                  }

                  if (ch === 'o' || ch === 'O') {
                    return this.scanOctalLiteral(ch, start);
                  }

                  if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
                    if (this.isImplicitOctalLiteral()) {
                      return this.scanOctalLiteral(ch, start);
                    }
                  }
                }

                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                  num += this.source[this.index++];
                }

                ch = this.source[this.index];
              }

              if (ch === '.') {
                num += this.source[this.index++];

                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                  num += this.source[this.index++];
                }

                ch = this.source[this.index];
              }

              if (ch === 'e' || ch === 'E') {
                num += this.source[this.index++];
                ch = this.source[this.index];

                if (ch === '+' || ch === '-') {
                  num += this.source[this.index++];
                }

                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                  while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                    num += this.source[this.index++];
                  }
                } else {
                  this.throwUnexpectedToken();
                }
              }

              if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
                this.throwUnexpectedToken();
              }

              return {
                type: 6
                /* NumericLiteral */
                ,
                value: parseFloat(num),
                lineNumber: this.lineNumber,
                lineStart: this.lineStart,
                start: start,
                end: this.index
              };
            }; // https://tc39.github.io/ecma262/#sec-literals-string-literals


            Scanner.prototype.scanStringLiteral = function () {
              var start = this.index;
              var quote = this.source[start];
              assert_1.assert(quote === '\'' || quote === '"', 'String literal must starts with a quote');
              ++this.index;
              var octal = false;
              var str = '';

              while (!this.eof()) {
                var ch = this.source[this.index++];

                if (ch === quote) {
                  quote = '';
                  break;
                } else if (ch === '\\') {
                  ch = this.source[this.index++];

                  if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                    switch (ch) {
                      case 'u':
                        if (this.source[this.index] === '{') {
                          ++this.index;
                          str += this.scanUnicodeCodePointEscape();
                        } else {
                          var unescaped_1 = this.scanHexEscape(ch);

                          if (unescaped_1 === null) {
                            this.throwUnexpectedToken();
                          }

                          str += unescaped_1;
                        }

                        break;

                      case 'x':
                        var unescaped = this.scanHexEscape(ch);

                        if (unescaped === null) {
                          this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
                        }

                        str += unescaped;
                        break;

                      case 'n':
                        str += '\n';
                        break;

                      case 'r':
                        str += '\r';
                        break;

                      case 't':
                        str += '\t';
                        break;

                      case 'b':
                        str += '\b';
                        break;

                      case 'f':
                        str += '\f';
                        break;

                      case 'v':
                        str += '\x0B';
                        break;

                      case '8':
                      case '9':
                        str += ch;
                        this.tolerateUnexpectedToken();
                        break;

                      default:
                        if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
                          var octToDec = this.octalToDecimal(ch);
                          octal = octToDec.octal || octal;
                          str += String.fromCharCode(octToDec.code);
                        } else {
                          str += ch;
                        }

                        break;
                    }
                  } else {
                    ++this.lineNumber;

                    if (ch === '\r' && this.source[this.index] === '\n') {
                      ++this.index;
                    }

                    this.lineStart = this.index;
                  }
                } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                  break;
                } else {
                  str += ch;
                }
              }

              if (quote !== '') {
                this.index = start;
                this.throwUnexpectedToken();
              }

              return {
                type: 8
                /* StringLiteral */
                ,
                value: str,
                octal: octal,
                lineNumber: this.lineNumber,
                lineStart: this.lineStart,
                start: start,
                end: this.index
              };
            }; // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components


            Scanner.prototype.scanTemplate = function () {
              var cooked = '';
              var terminated = false;
              var start = this.index;
              var head = this.source[start] === '`';
              var tail = false;
              var rawOffset = 2;
              ++this.index;

              while (!this.eof()) {
                var ch = this.source[this.index++];

                if (ch === '`') {
                  rawOffset = 1;
                  tail = true;
                  terminated = true;
                  break;
                } else if (ch === '$') {
                  if (this.source[this.index] === '{') {
                    this.curlyStack.push('${');
                    ++this.index;
                    terminated = true;
                    break;
                  }

                  cooked += ch;
                } else if (ch === '\\') {
                  ch = this.source[this.index++];

                  if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                    switch (ch) {
                      case 'n':
                        cooked += '\n';
                        break;

                      case 'r':
                        cooked += '\r';
                        break;

                      case 't':
                        cooked += '\t';
                        break;

                      case 'u':
                        if (this.source[this.index] === '{') {
                          ++this.index;
                          cooked += this.scanUnicodeCodePointEscape();
                        } else {
                          var restore = this.index;
                          var unescaped_2 = this.scanHexEscape(ch);

                          if (unescaped_2 !== null) {
                            cooked += unescaped_2;
                          } else {
                            this.index = restore;
                            cooked += ch;
                          }
                        }

                        break;

                      case 'x':
                        var unescaped = this.scanHexEscape(ch);

                        if (unescaped === null) {
                          this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
                        }

                        cooked += unescaped;
                        break;

                      case 'b':
                        cooked += '\b';
                        break;

                      case 'f':
                        cooked += '\f';
                        break;

                      case 'v':
                        cooked += '\v';
                        break;

                      default:
                        if (ch === '0') {
                          if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                            // Illegal: \01 \02 and so on
                            this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
                          }

                          cooked += '\0';
                        } else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
                          // Illegal: \1 \2
                          this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
                        } else {
                          cooked += ch;
                        }

                        break;
                    }
                  } else {
                    ++this.lineNumber;

                    if (ch === '\r' && this.source[this.index] === '\n') {
                      ++this.index;
                    }

                    this.lineStart = this.index;
                  }
                } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                  ++this.lineNumber;

                  if (ch === '\r' && this.source[this.index] === '\n') {
                    ++this.index;
                  }

                  this.lineStart = this.index;
                  cooked += '\n';
                } else {
                  cooked += ch;
                }
              }

              if (!terminated) {
                this.throwUnexpectedToken();
              }

              if (!head) {
                this.curlyStack.pop();
              }

              return {
                type: 10
                /* Template */
                ,
                value: this.source.slice(start + 1, this.index - rawOffset),
                cooked: cooked,
                head: head,
                tail: tail,
                lineNumber: this.lineNumber,
                lineStart: this.lineStart,
                start: start,
                end: this.index
              };
            }; // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals


            Scanner.prototype.testRegExp = function (pattern, flags) {
              // The BMP character to use as a replacement for astral symbols when
              // translating an ES6 "u"-flagged pattern to an ES5-compatible
              // approximation.
              // Note: replacing with '\uFFFF' enables false positives in unlikely
              // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
              // pattern that would not be detected by this substitution.
              var astralSubstitute = "\uFFFF";
              var tmp = pattern;
              var self = this;

              if (flags.indexOf('u') >= 0) {
                tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
                  var codePoint = parseInt($1 || $2, 16);

                  if (codePoint > 0x10FFFF) {
                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
                  }

                  if (codePoint <= 0xFFFF) {
                    return String.fromCharCode(codePoint);
                  }

                  return astralSubstitute;
                }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, astralSubstitute);
              } // First, detect invalid regular expressions.


              try {
                RegExp(tmp);
              } catch (e) {
                this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
              } // Return a regular expression object for this pattern-flag pair, or
              // `null` in case the current environment doesn't support the flags it
              // uses.


              try {
                return new RegExp(pattern, flags);
              } catch (exception) {
                /* istanbul ignore next */
                return null;
              }
            };

            Scanner.prototype.scanRegExpBody = function () {
              var ch = this.source[this.index];
              assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');
              var str = this.source[this.index++];
              var classMarker = false;
              var terminated = false;

              while (!this.eof()) {
                ch = this.source[this.index++];
                str += ch;

                if (ch === '\\') {
                  ch = this.source[this.index++]; // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals

                  if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
                  }

                  str += ch;
                } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                  this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
                } else if (classMarker) {
                  if (ch === ']') {
                    classMarker = false;
                  }
                } else {
                  if (ch === '/') {
                    terminated = true;
                    break;
                  } else if (ch === '[') {
                    classMarker = true;
                  }
                }
              }

              if (!terminated) {
                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
              } // Exclude leading and trailing slash.


              return str.substr(1, str.length - 2);
            };

            Scanner.prototype.scanRegExpFlags = function () {
              var str = '';
              var flags = '';

              while (!this.eof()) {
                var ch = this.source[this.index];

                if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
                  break;
                }

                ++this.index;

                if (ch === '\\' && !this.eof()) {
                  ch = this.source[this.index];

                  if (ch === 'u') {
                    ++this.index;
                    var restore = this.index;

                    var _char5 = this.scanHexEscape('u');

                    if (_char5 !== null) {
                      flags += _char5;

                      for (str += "\\u"; restore < this.index; ++restore) {
                        str += this.source[restore];
                      }
                    } else {
                      this.index = restore;
                      flags += 'u';
                      str += "\\u";
                    }

                    this.tolerateUnexpectedToken();
                  } else {
                    str += '\\';
                    this.tolerateUnexpectedToken();
                  }
                } else {
                  flags += ch;
                  str += ch;
                }
              }

              return flags;
            };

            Scanner.prototype.scanRegExp = function () {
              var start = this.index;
              var pattern = this.scanRegExpBody();
              var flags = this.scanRegExpFlags();
              var value = this.testRegExp(pattern, flags);
              return {
                type: 9
                /* RegularExpression */
                ,
                value: '',
                pattern: pattern,
                flags: flags,
                regex: value,
                lineNumber: this.lineNumber,
                lineStart: this.lineStart,
                start: start,
                end: this.index
              };
            };

            Scanner.prototype.lex = function () {
              if (this.eof()) {
                return {
                  type: 2
                  /* EOF */
                  ,
                  value: '',
                  lineNumber: this.lineNumber,
                  lineStart: this.lineStart,
                  start: this.index,
                  end: this.index
                };
              }

              var cp = this.source.charCodeAt(this.index);

              if (character_1.Character.isIdentifierStart(cp)) {
                return this.scanIdentifier();
              } // Very common: ( and ) and ;


              if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
                return this.scanPunctuator();
              } // String literal starts with single quote (U+0027) or double quote (U+0022).


              if (cp === 0x27 || cp === 0x22) {
                return this.scanStringLiteral();
              } // Dot (.) U+002E can also start a floating-point number, hence the need
              // to check the next character.


              if (cp === 0x2E) {
                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {
                  return this.scanNumericLiteral();
                }

                return this.scanPunctuator();
              }

              if (character_1.Character.isDecimalDigit(cp)) {
                return this.scanNumericLiteral();
              } // Template literals start with ` (U+0060) for template head
              // or } (U+007D) for template middle or template tail.


              if (cp === 0x60 || cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${') {
                return this.scanTemplate();
              } // Possible identifier start in a surrogate pair.


              if (cp >= 0xD800 && cp < 0xDFFF) {
                if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {
                  return this.scanIdentifier();
                }
              }

              return this.scanPunctuator();
            };

            return Scanner;
          }();

          exports.Scanner = Scanner;
          /***/
        },
        /* 13 */

        /***/
        function (module, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.TokenName = {};
          exports.TokenName[1
          /* BooleanLiteral */
          ] = 'Boolean';
          exports.TokenName[2
          /* EOF */
          ] = '<end>';
          exports.TokenName[3
          /* Identifier */
          ] = 'Identifier';
          exports.TokenName[4
          /* Keyword */
          ] = 'Keyword';
          exports.TokenName[5
          /* NullLiteral */
          ] = 'Null';
          exports.TokenName[6
          /* NumericLiteral */
          ] = 'Numeric';
          exports.TokenName[7
          /* Punctuator */
          ] = 'Punctuator';
          exports.TokenName[8
          /* StringLiteral */
          ] = 'String';
          exports.TokenName[9
          /* RegularExpression */
          ] = 'RegularExpression';
          exports.TokenName[10
          /* Template */
          ] = 'Template';
          /***/
        },
        /* 14 */

        /***/
        function (module, exports) {
          "use strict"; // Generated by generate-xhtml-entities.js. DO NOT MODIFY!

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.XHTMLEntities = {
            quot: "\"",
            amp: "&",
            apos: "'",
            gt: ">",
            nbsp: "\xA0",
            iexcl: "\xA1",
            cent: "\xA2",
            pound: "\xA3",
            curren: "\xA4",
            yen: "\xA5",
            brvbar: "\xA6",
            sect: "\xA7",
            uml: "\xA8",
            copy: "\xA9",
            ordf: "\xAA",
            laquo: "\xAB",
            not: "\xAC",
            shy: "\xAD",
            reg: "\xAE",
            macr: "\xAF",
            deg: "\xB0",
            plusmn: "\xB1",
            sup2: "\xB2",
            sup3: "\xB3",
            acute: "\xB4",
            micro: "\xB5",
            para: "\xB6",
            middot: "\xB7",
            cedil: "\xB8",
            sup1: "\xB9",
            ordm: "\xBA",
            raquo: "\xBB",
            frac14: "\xBC",
            frac12: "\xBD",
            frac34: "\xBE",
            iquest: "\xBF",
            Agrave: "\xC0",
            Aacute: "\xC1",
            Acirc: "\xC2",
            Atilde: "\xC3",
            Auml: "\xC4",
            Aring: "\xC5",
            AElig: "\xC6",
            Ccedil: "\xC7",
            Egrave: "\xC8",
            Eacute: "\xC9",
            Ecirc: "\xCA",
            Euml: "\xCB",
            Igrave: "\xCC",
            Iacute: "\xCD",
            Icirc: "\xCE",
            Iuml: "\xCF",
            ETH: "\xD0",
            Ntilde: "\xD1",
            Ograve: "\xD2",
            Oacute: "\xD3",
            Ocirc: "\xD4",
            Otilde: "\xD5",
            Ouml: "\xD6",
            times: "\xD7",
            Oslash: "\xD8",
            Ugrave: "\xD9",
            Uacute: "\xDA",
            Ucirc: "\xDB",
            Uuml: "\xDC",
            Yacute: "\xDD",
            THORN: "\xDE",
            szlig: "\xDF",
            agrave: "\xE0",
            aacute: "\xE1",
            acirc: "\xE2",
            atilde: "\xE3",
            auml: "\xE4",
            aring: "\xE5",
            aelig: "\xE6",
            ccedil: "\xE7",
            egrave: "\xE8",
            eacute: "\xE9",
            ecirc: "\xEA",
            euml: "\xEB",
            igrave: "\xEC",
            iacute: "\xED",
            icirc: "\xEE",
            iuml: "\xEF",
            eth: "\xF0",
            ntilde: "\xF1",
            ograve: "\xF2",
            oacute: "\xF3",
            ocirc: "\xF4",
            otilde: "\xF5",
            ouml: "\xF6",
            divide: "\xF7",
            oslash: "\xF8",
            ugrave: "\xF9",
            uacute: "\xFA",
            ucirc: "\xFB",
            uuml: "\xFC",
            yacute: "\xFD",
            thorn: "\xFE",
            yuml: "\xFF",
            OElig: "\u0152",
            oelig: "\u0153",
            Scaron: "\u0160",
            scaron: "\u0161",
            Yuml: "\u0178",
            fnof: "\u0192",
            circ: "\u02C6",
            tilde: "\u02DC",
            Alpha: "\u0391",
            Beta: "\u0392",
            Gamma: "\u0393",
            Delta: "\u0394",
            Epsilon: "\u0395",
            Zeta: "\u0396",
            Eta: "\u0397",
            Theta: "\u0398",
            Iota: "\u0399",
            Kappa: "\u039A",
            Lambda: "\u039B",
            Mu: "\u039C",
            Nu: "\u039D",
            Xi: "\u039E",
            Omicron: "\u039F",
            Pi: "\u03A0",
            Rho: "\u03A1",
            Sigma: "\u03A3",
            Tau: "\u03A4",
            Upsilon: "\u03A5",
            Phi: "\u03A6",
            Chi: "\u03A7",
            Psi: "\u03A8",
            Omega: "\u03A9",
            alpha: "\u03B1",
            beta: "\u03B2",
            gamma: "\u03B3",
            delta: "\u03B4",
            epsilon: "\u03B5",
            zeta: "\u03B6",
            eta: "\u03B7",
            theta: "\u03B8",
            iota: "\u03B9",
            kappa: "\u03BA",
            lambda: "\u03BB",
            mu: "\u03BC",
            nu: "\u03BD",
            xi: "\u03BE",
            omicron: "\u03BF",
            pi: "\u03C0",
            rho: "\u03C1",
            sigmaf: "\u03C2",
            sigma: "\u03C3",
            tau: "\u03C4",
            upsilon: "\u03C5",
            phi: "\u03C6",
            chi: "\u03C7",
            psi: "\u03C8",
            omega: "\u03C9",
            thetasym: "\u03D1",
            upsih: "\u03D2",
            piv: "\u03D6",
            ensp: "\u2002",
            emsp: "\u2003",
            thinsp: "\u2009",
            zwnj: "\u200C",
            zwj: "\u200D",
            lrm: "\u200E",
            rlm: "\u200F",
            ndash: "\u2013",
            mdash: "\u2014",
            lsquo: "\u2018",
            rsquo: "\u2019",
            sbquo: "\u201A",
            ldquo: "\u201C",
            rdquo: "\u201D",
            bdquo: "\u201E",
            dagger: "\u2020",
            Dagger: "\u2021",
            bull: "\u2022",
            hellip: "\u2026",
            permil: "\u2030",
            prime: "\u2032",
            Prime: "\u2033",
            lsaquo: "\u2039",
            rsaquo: "\u203A",
            oline: "\u203E",
            frasl: "\u2044",
            euro: "\u20AC",
            image: "\u2111",
            weierp: "\u2118",
            real: "\u211C",
            trade: "\u2122",
            alefsym: "\u2135",
            larr: "\u2190",
            uarr: "\u2191",
            rarr: "\u2192",
            darr: "\u2193",
            harr: "\u2194",
            crarr: "\u21B5",
            lArr: "\u21D0",
            uArr: "\u21D1",
            rArr: "\u21D2",
            dArr: "\u21D3",
            hArr: "\u21D4",
            forall: "\u2200",
            part: "\u2202",
            exist: "\u2203",
            empty: "\u2205",
            nabla: "\u2207",
            isin: "\u2208",
            notin: "\u2209",
            ni: "\u220B",
            prod: "\u220F",
            sum: "\u2211",
            minus: "\u2212",
            lowast: "\u2217",
            radic: "\u221A",
            prop: "\u221D",
            infin: "\u221E",
            ang: "\u2220",
            and: "\u2227",
            or: "\u2228",
            cap: "\u2229",
            cup: "\u222A",
            "int": "\u222B",
            there4: "\u2234",
            sim: "\u223C",
            cong: "\u2245",
            asymp: "\u2248",
            ne: "\u2260",
            equiv: "\u2261",
            le: "\u2264",
            ge: "\u2265",
            sub: "\u2282",
            sup: "\u2283",
            nsub: "\u2284",
            sube: "\u2286",
            supe: "\u2287",
            oplus: "\u2295",
            otimes: "\u2297",
            perp: "\u22A5",
            sdot: "\u22C5",
            lceil: "\u2308",
            rceil: "\u2309",
            lfloor: "\u230A",
            rfloor: "\u230B",
            loz: "\u25CA",
            spades: "\u2660",
            clubs: "\u2663",
            hearts: "\u2665",
            diams: "\u2666",
            lang: "\u27E8",
            rang: "\u27E9"
          };
          /***/
        },
        /* 15 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var error_handler_1 = __webpack_require__(10);

          var scanner_1 = __webpack_require__(12);

          var token_1 = __webpack_require__(13);

          var Reader = function () {
            function Reader() {
              this.values = [];
              this.curly = this.paren = -1;
            } // A function following one of those tokens is an expression.


            Reader.prototype.beforeFunctionExpression = function (t) {
              return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new', 'return', 'case', 'delete', 'throw', 'void', // assignment operators
              '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=', '^=', ',', // binary/unary operators
              '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&', '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=', '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;
            }; // Determine if forward slash (/) is an operator or part of a regular expression
            // https://github.com/mozilla/sweet.js/wiki/design


            Reader.prototype.isRegexStart = function () {
              var previous = this.values[this.values.length - 1];
              var regex = previous !== null;

              switch (previous) {
                case 'this':
                case ']':
                  regex = false;
                  break;

                case ')':
                  var keyword = this.values[this.paren - 1];
                  regex = keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with';
                  break;

                case '}':
                  // Dividing a function by anything makes little sense,
                  // but we have to check for that.
                  regex = false;

                  if (this.values[this.curly - 3] === 'function') {
                    // Anonymous function, e.g. function(){} /42
                    var check = this.values[this.curly - 4];
                    regex = check ? !this.beforeFunctionExpression(check) : false;
                  } else if (this.values[this.curly - 4] === 'function') {
                    // Named function, e.g. function f(){} /42/
                    var check = this.values[this.curly - 5];
                    regex = check ? !this.beforeFunctionExpression(check) : true;
                  }

                  break;

                default:
                  break;
              }

              return regex;
            };

            Reader.prototype.push = function (token) {
              if (token.type === 7
              /* Punctuator */
              || token.type === 4
              /* Keyword */
              ) {
                  if (token.value === '{') {
                    this.curly = this.values.length;
                  } else if (token.value === '(') {
                    this.paren = this.values.length;
                  }

                  this.values.push(token.value);
                } else {
                this.values.push(null);
              }
            };

            return Reader;
          }();

          var Tokenizer = function () {
            function Tokenizer(code, config) {
              this.errorHandler = new error_handler_1.ErrorHandler();
              this.errorHandler.tolerant = config ? typeof config.tolerant === 'boolean' && config.tolerant : false;
              this.scanner = new scanner_1.Scanner(code, this.errorHandler);
              this.scanner.trackComment = config ? typeof config.comment === 'boolean' && config.comment : false;
              this.trackRange = config ? typeof config.range === 'boolean' && config.range : false;
              this.trackLoc = config ? typeof config.loc === 'boolean' && config.loc : false;
              this.buffer = [];
              this.reader = new Reader();
            }

            Tokenizer.prototype.errors = function () {
              return this.errorHandler.errors;
            };

            Tokenizer.prototype.getNextToken = function () {
              if (this.buffer.length === 0) {
                var comments = this.scanner.scanComments();

                if (this.scanner.trackComment) {
                  for (var i = 0; i < comments.length; ++i) {
                    var e = comments[i];
                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);
                    var comment = {
                      type: e.multiLine ? 'BlockComment' : 'LineComment',
                      value: value
                    };

                    if (this.trackRange) {
                      comment.range = e.range;
                    }

                    if (this.trackLoc) {
                      comment.loc = e.loc;
                    }

                    this.buffer.push(comment);
                  }
                }

                if (!this.scanner.eof()) {
                  var loc = void 0;

                  if (this.trackLoc) {
                    loc = {
                      start: {
                        line: this.scanner.lineNumber,
                        column: this.scanner.index - this.scanner.lineStart
                      },
                      end: {}
                    };
                  }

                  var startRegex = this.scanner.source[this.scanner.index] === '/' && this.reader.isRegexStart();
                  var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();
                  this.reader.push(token);
                  var entry = {
                    type: token_1.TokenName[token.type],
                    value: this.scanner.source.slice(token.start, token.end)
                  };

                  if (this.trackRange) {
                    entry.range = [token.start, token.end];
                  }

                  if (this.trackLoc) {
                    loc.end = {
                      line: this.scanner.lineNumber,
                      column: this.scanner.index - this.scanner.lineStart
                    };
                    entry.loc = loc;
                  }

                  if (token.type === 9
                  /* RegularExpression */
                  ) {
                      var pattern = token.pattern;
                      var flags = token.flags;
                      entry.regex = {
                        pattern: pattern,
                        flags: flags
                      };
                    }

                  this.buffer.push(entry);
                }
              }

              return this.buffer.shift();
            };

            return Tokenizer;
          }();

          exports.Tokenizer = Tokenizer;
          /***/
        }
        /******/
        ])
      );
    });

    ;
    /***/
  },

  /***/
  "./node_modules/linkify-it/index.js":
  /*!******************************************!*\
    !*** ./node_modules/linkify-it/index.js ***!
    \******************************************/

  /*! no static exports found */

  /***/
  function node_modulesLinkifyItIndexJs(module, exports, __webpack_require__) {
    "use strict"; ////////////////////////////////////////////////////////////////////////////////
    // Helpers
    // Merge objects
    //

    function assign(obj
    /*from1, from2, from3, ...*/
    ) {
      var sources = Array.prototype.slice.call(arguments, 1);
      sources.forEach(function (source) {
        if (!source) {
          return;
        }

        Object.keys(source).forEach(function (key) {
          obj[key] = source[key];
        });
      });
      return obj;
    }

    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }

    function isString(obj) {
      return _class(obj) === '[object String]';
    }

    function isObject(obj) {
      return _class(obj) === '[object Object]';
    }

    function isRegExp(obj) {
      return _class(obj) === '[object RegExp]';
    }

    function isFunction(obj) {
      return _class(obj) === '[object Function]';
    }

    function escapeRE(str) {
      return str.replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&');
    } ////////////////////////////////////////////////////////////////////////////////


    var defaultOptions = {
      fuzzyLink: true,
      fuzzyEmail: true,
      fuzzyIP: false
    };

    function isOptionsObj(obj) {
      return Object.keys(obj || {}).reduce(function (acc, k) {
        return acc || defaultOptions.hasOwnProperty(k);
      }, false);
    }

    var defaultSchemas = {
      'http:': {
        validate: function validate(text, pos, self) {
          var tail = text.slice(pos);

          if (!self.re.http) {
            // compile lazily, because "host"-containing variables can change on tlds update.
            self.re.http = new RegExp('^\\/\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i');
          }

          if (self.re.http.test(tail)) {
            return tail.match(self.re.http)[0].length;
          }

          return 0;
        }
      },
      'https:': 'http:',
      'ftp:': 'http:',
      '//': {
        validate: function validate(text, pos, self) {
          var tail = text.slice(pos);

          if (!self.re.no_http) {
            // compile lazily, because "host"-containing variables can change on tlds update.
            self.re.no_http = new RegExp('^' + self.re.src_auth + // Don't allow single-level domains, because of false positives like '//test'
            // with code comments
            '(?:localhost|(?:(?:' + self.re.src_domain + ')\\.)+' + self.re.src_domain_root + ')' + self.re.src_port + self.re.src_host_terminator + self.re.src_path, 'i');
          }

          if (self.re.no_http.test(tail)) {
            // should not be `://` & `///`, that protects from errors in protocol name
            if (pos >= 3 && text[pos - 3] === ':') {
              return 0;
            }

            if (pos >= 3 && text[pos - 3] === '/') {
              return 0;
            }

            return tail.match(self.re.no_http)[0].length;
          }

          return 0;
        }
      },
      'mailto:': {
        validate: function validate(text, pos, self) {
          var tail = text.slice(pos);

          if (!self.re.mailto) {
            self.re.mailto = new RegExp('^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i');
          }

          if (self.re.mailto.test(tail)) {
            return tail.match(self.re.mailto)[0].length;
          }

          return 0;
        }
      }
    };
    /*eslint-disable max-len*/
    // RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)

    var tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]'; // DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead

    var tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');
    /*eslint-enable max-len*/
    ////////////////////////////////////////////////////////////////////////////////

    function resetScanCache(self) {
      self.__index__ = -1;
      self.__text_cache__ = '';
    }

    function createValidator(re) {
      return function (text, pos) {
        var tail = text.slice(pos);

        if (re.test(tail)) {
          return tail.match(re)[0].length;
        }

        return 0;
      };
    }

    function createNormalizer() {
      return function (match, self) {
        self.normalize(match);
      };
    } // Schemas compiler. Build regexps.
    //


    function compile(self) {
      // Load & clone RE patterns.
      var re = self.re = __webpack_require__(
      /*! ./lib/re */
      "./node_modules/linkify-it/lib/re.js")(self.__opts__); // Define dynamic patterns


      var tlds = self.__tlds__.slice();

      self.onCompile();

      if (!self.__tlds_replaced__) {
        tlds.push(tlds_2ch_src_re);
      }

      tlds.push(re.src_xn);
      re.src_tlds = tlds.join('|');

      function untpl(tpl) {
        return tpl.replace('%TLDS%', re.src_tlds);
      }

      re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), 'i');
      re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), 'i');
      re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');
      re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), 'i'); //
      // Compile each schema
      //

      var aliases = [];
      self.__compiled__ = {}; // Reset compiled data

      function schemaError(name, val) {
        throw new Error('(LinkifyIt) Invalid schema "' + name + '": ' + val);
      }

      Object.keys(self.__schemas__).forEach(function (name) {
        var val = self.__schemas__[name]; // skip disabled methods

        if (val === null) {
          return;
        }

        var compiled = {
          validate: null,
          link: null
        };
        self.__compiled__[name] = compiled;

        if (isObject(val)) {
          if (isRegExp(val.validate)) {
            compiled.validate = createValidator(val.validate);
          } else if (isFunction(val.validate)) {
            compiled.validate = val.validate;
          } else {
            schemaError(name, val);
          }

          if (isFunction(val.normalize)) {
            compiled.normalize = val.normalize;
          } else if (!val.normalize) {
            compiled.normalize = createNormalizer();
          } else {
            schemaError(name, val);
          }

          return;
        }

        if (isString(val)) {
          aliases.push(name);
          return;
        }

        schemaError(name, val);
      }); //
      // Compile postponed aliases
      //

      aliases.forEach(function (alias) {
        if (!self.__compiled__[self.__schemas__[alias]]) {
          // Silently fail on missed schemas to avoid errons on disable.
          // schemaError(alias, self.__schemas__[alias]);
          return;
        }

        self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;
        self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;
      }); //
      // Fake record for guessed links
      //

      self.__compiled__[''] = {
        validate: null,
        normalize: createNormalizer()
      }; //
      // Build schema condition
      //

      var slist = Object.keys(self.__compiled__).filter(function (name) {
        // Filter disabled & fake schemas
        return name.length > 0 && self.__compiled__[name];
      }).map(escapeRE).join('|'); // (?!_) cause 1.5x slowdown

      self.re.schema_test = RegExp("(^|(?!_)(?:[><\uFF5C]|" + re.src_ZPCc + '))(' + slist + ')', 'i');
      self.re.schema_search = RegExp("(^|(?!_)(?:[><\uFF5C]|" + re.src_ZPCc + '))(' + slist + ')', 'ig');
      self.re.pretest = RegExp('(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@', 'i'); //
      // Cleanup
      //

      resetScanCache(self);
    }
    /**
     * class Match
     *
     * Match result. Single element of array, returned by [[LinkifyIt#match]]
     **/


    function Match(self, shift) {
      var start = self.__index__,
          end = self.__last_index__,
          text = self.__text_cache__.slice(start, end);
      /**
       * Match#schema -> String
       *
       * Prefix (protocol) for matched string.
       **/


      this.schema = self.__schema__.toLowerCase();
      /**
       * Match#index -> Number
       *
       * First position of matched string.
       **/

      this.index = start + shift;
      /**
       * Match#lastIndex -> Number
       *
       * Next position after matched string.
       **/

      this.lastIndex = end + shift;
      /**
       * Match#raw -> String
       *
       * Matched string.
       **/

      this.raw = text;
      /**
       * Match#text -> String
       *
       * Notmalized text of matched string.
       **/

      this.text = text;
      /**
       * Match#url -> String
       *
       * Normalized url of matched string.
       **/

      this.url = text;
    }

    function createMatch(self, shift) {
      var match = new Match(self, shift);

      self.__compiled__[match.schema].normalize(match, self);

      return match;
    }
    /**
     * class LinkifyIt
     **/

    /**
     * new LinkifyIt(schemas, options)
     * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)
     * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
     *
     * Creates new linkifier instance with optional additional schemas.
     * Can be called without `new` keyword for convenience.
     *
     * By default understands:
     *
     * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links
     * - "fuzzy" links and emails (example.com, foo@bar.com).
     *
     * `schemas` is an object, where each key/value describes protocol/rule:
     *
     * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`
     *   for example). `linkify-it` makes shure that prefix is not preceeded with
     *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.
     * - __value__ - rule to check tail after link prefix
     *   - _String_ - just alias to existing rule
     *   - _Object_
     *     - _validate_ - validator function (should return matched length on success),
     *       or `RegExp`.
     *     - _normalize_ - optional function to normalize text & url of matched result
     *       (for example, for @twitter mentions).
     *
     * `options`:
     *
     * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.
     * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts
     *   like version numbers. Default `false`.
     * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.
     *
     **/


    function LinkifyIt(schemas, options) {
      if (!(this instanceof LinkifyIt)) {
        return new LinkifyIt(schemas, options);
      }

      if (!options) {
        if (isOptionsObj(schemas)) {
          options = schemas;
          schemas = {};
        }
      }

      this.__opts__ = assign({}, defaultOptions, options); // Cache last tested result. Used to skip repeating steps on next `match` call.

      this.__index__ = -1;
      this.__last_index__ = -1; // Next scan position

      this.__schema__ = '';
      this.__text_cache__ = '';
      this.__schemas__ = assign({}, defaultSchemas, schemas);
      this.__compiled__ = {};
      this.__tlds__ = tlds_default;
      this.__tlds_replaced__ = false;
      this.re = {};
      compile(this);
    }
    /** chainable
     * LinkifyIt#add(schema, definition)
     * - schema (String): rule name (fixed pattern prefix)
     * - definition (String|RegExp|Object): schema definition
     *
     * Add new rule definition. See constructor description for details.
     **/


    LinkifyIt.prototype.add = function add(schema, definition) {
      this.__schemas__[schema] = definition;
      compile(this);
      return this;
    };
    /** chainable
     * LinkifyIt#set(options)
     * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
     *
     * Set recognition options for links without schema.
     **/


    LinkifyIt.prototype.set = function set(options) {
      this.__opts__ = assign(this.__opts__, options);
      return this;
    };
    /**
     * LinkifyIt#test(text) -> Boolean
     *
     * Searches linkifiable pattern and returns `true` on success or `false` on fail.
     **/


    LinkifyIt.prototype.test = function test(text) {
      // Reset scan cache
      this.__text_cache__ = text;
      this.__index__ = -1;

      if (!text.length) {
        return false;
      }

      var m, ml, me, len, shift, next, re, tld_pos, at_pos; // try to scan for link with schema - that's the most simple rule

      if (this.re.schema_test.test(text)) {
        re = this.re.schema_search;
        re.lastIndex = 0;

        while ((m = re.exec(text)) !== null) {
          len = this.testSchemaAt(text, m[2], re.lastIndex);

          if (len) {
            this.__schema__ = m[2];
            this.__index__ = m.index + m[1].length;
            this.__last_index__ = m.index + m[0].length + len;
            break;
          }
        }
      }

      if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {
        // guess schemaless links
        tld_pos = text.search(this.re.host_fuzzy_test);

        if (tld_pos >= 0) {
          // if tld is located after found link - no need to check fuzzy pattern
          if (this.__index__ < 0 || tld_pos < this.__index__) {
            if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {
              shift = ml.index + ml[1].length;

              if (this.__index__ < 0 || shift < this.__index__) {
                this.__schema__ = '';
                this.__index__ = shift;
                this.__last_index__ = ml.index + ml[0].length;
              }
            }
          }
        }
      }

      if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {
        // guess schemaless emails
        at_pos = text.indexOf('@');

        if (at_pos >= 0) {
          // We can't skip this check, because this cases are possible:
          // 192.168.1.1@gmail.com, my.in@example.com
          if ((me = text.match(this.re.email_fuzzy)) !== null) {
            shift = me.index + me[1].length;
            next = me.index + me[0].length;

            if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {
              this.__schema__ = 'mailto:';
              this.__index__ = shift;
              this.__last_index__ = next;
            }
          }
        }
      }

      return this.__index__ >= 0;
    };
    /**
     * LinkifyIt#pretest(text) -> Boolean
     *
     * Very quick check, that can give false positives. Returns true if link MAY BE
     * can exists. Can be used for speed optimization, when you need to check that
     * link NOT exists.
     **/


    LinkifyIt.prototype.pretest = function pretest(text) {
      return this.re.pretest.test(text);
    };
    /**
     * LinkifyIt#testSchemaAt(text, name, position) -> Number
     * - text (String): text to scan
     * - name (String): rule (schema) name
     * - position (Number): text offset to check from
     *
     * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly
     * at given position. Returns length of found pattern (0 on fail).
     **/


    LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {
      // If not supported schema check requested - terminate
      if (!this.__compiled__[schema.toLowerCase()]) {
        return 0;
      }

      return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);
    };
    /**
     * LinkifyIt#match(text) -> Array|null
     *
     * Returns array of found link descriptions or `null` on fail. We strongly
     * recommend to use [[LinkifyIt#test]] first, for best speed.
     *
     * ##### Result match description
     *
     * - __schema__ - link schema, can be empty for fuzzy links, or `//` for
     *   protocol-neutral  links.
     * - __index__ - offset of matched text
     * - __lastIndex__ - index of next char after mathch end
     * - __raw__ - matched text
     * - __text__ - normalized text
     * - __url__ - link, generated from matched text
     **/


    LinkifyIt.prototype.match = function match(text) {
      var shift = 0,
          result = []; // Try to take previous element from cache, if .test() called before

      if (this.__index__ >= 0 && this.__text_cache__ === text) {
        result.push(createMatch(this, shift));
        shift = this.__last_index__;
      } // Cut head if cache was used


      var tail = shift ? text.slice(shift) : text; // Scan string until end reached

      while (this.test(tail)) {
        result.push(createMatch(this, shift));
        tail = tail.slice(this.__last_index__);
        shift += this.__last_index__;
      }

      if (result.length) {
        return result;
      }

      return null;
    };
    /** chainable
     * LinkifyIt#tlds(list [, keepOld]) -> this
     * - list (Array): list of tlds
     * - keepOld (Boolean): merge with current list if `true` (`false` by default)
     *
     * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)
     * to avoid false positives. By default this algorythm used:
     *
     * - hostname with any 2-letter root zones are ok.
     * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф
     *   are ok.
     * - encoded (`xn--...`) root zones are ok.
     *
     * If list is replaced, then exact match for 2-chars root zones will be checked.
     **/


    LinkifyIt.prototype.tlds = function tlds(list, keepOld) {
      list = Array.isArray(list) ? list : [list];

      if (!keepOld) {
        this.__tlds__ = list.slice();
        this.__tlds_replaced__ = true;
        compile(this);
        return this;
      }

      this.__tlds__ = this.__tlds__.concat(list).sort().filter(function (el, idx, arr) {
        return el !== arr[idx - 1];
      }).reverse();
      compile(this);
      return this;
    };
    /**
     * LinkifyIt#normalize(match)
     *
     * Default normalizer (if schema does not define it's own).
     **/


    LinkifyIt.prototype.normalize = function normalize(match) {
      // Do minimal possible changes by default. Need to collect feedback prior
      // to move forward https://github.com/markdown-it/linkify-it/issues/1
      if (!match.schema) {
        match.url = 'http://' + match.url;
      }

      if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {
        match.url = 'mailto:' + match.url;
      }
    };
    /**
     * LinkifyIt#onCompile()
     *
     * Override to modify basic RegExp-s.
     **/


    LinkifyIt.prototype.onCompile = function onCompile() {};

    module.exports = LinkifyIt;
    /***/
  },

  /***/
  "./node_modules/linkify-it/lib/re.js":
  /*!*******************************************!*\
    !*** ./node_modules/linkify-it/lib/re.js ***!
    \*******************************************/

  /*! no static exports found */

  /***/
  function node_modulesLinkifyItLibReJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (opts) {
      var re = {}; // Use direct extract instead of `regenerate` to reduse browserified size

      re.src_Any = __webpack_require__(
      /*! uc.micro/properties/Any/regex */
      "./node_modules/uc.micro/properties/Any/regex.js").source;
      re.src_Cc = __webpack_require__(
      /*! uc.micro/categories/Cc/regex */
      "./node_modules/uc.micro/categories/Cc/regex.js").source;
      re.src_Z = __webpack_require__(
      /*! uc.micro/categories/Z/regex */
      "./node_modules/uc.micro/categories/Z/regex.js").source;
      re.src_P = __webpack_require__(
      /*! uc.micro/categories/P/regex */
      "./node_modules/uc.micro/categories/P/regex.js").source; // \p{\Z\P\Cc\CF} (white spaces + control + format + punctuation)

      re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join('|'); // \p{\Z\Cc} (white spaces + control)

      re.src_ZCc = [re.src_Z, re.src_Cc].join('|'); // Experimental. List of chars, completely prohibited in links
      // because can separate it from other part of text

      var text_separators = "[><\uFF5C]"; // All possible word characters (everything without punctuation, spaces & controls)
      // Defined via punctuation & spaces to save space
      // Should be something like \p{\L\N\S\M} (\w but without `_`)

      re.src_pseudo_letter = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')'; // The same as abothe but without [0-9]
      // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';
      ////////////////////////////////////////////////////////////////////////////////

      re.src_ip4 = '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'; // Prohibit any of "@/[]()" in user/pass to avoid wrong domain fetch.

      re.src_auth = '(?:(?:(?!' + re.src_ZCc + '|[@/\\[\\]()]).)+@)?';
      re.src_port = '(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?';
      re.src_host_terminator = '(?=$|' + text_separators + '|' + re.src_ZPCc + ')(?!-|_|:\\d|\\.-|\\.(?!$|' + re.src_ZPCc + '))';
      re.src_path = '(?:' + '[/?#]' + '(?:' + '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\]{}.,"\'?!\\-]).|' + '\\[(?:(?!' + re.src_ZCc + '|\\]).)*\\]|' + '\\((?:(?!' + re.src_ZCc + '|[)]).)*\\)|' + '\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\}|' + '\\"(?:(?!' + re.src_ZCc + '|["]).)+\\"|' + "\\'(?:(?!" + re.src_ZCc + "|[']).)+\\'|" + "\\'(?=" + re.src_pseudo_letter + '|[-]).|' + // allow `I'm_king` if no pair found
      '\\.{2,}[a-zA-Z0-9%/&]|' + // google has many dots in "google search" links (#66, #81).
      // github has ... in commit range links,
      // Restrict to
      // - english
      // - percent-encoded
      // - parts of file path
      // - params separator
      // until more examples found.
      '\\.(?!' + re.src_ZCc + '|[.]).|' + (opts && opts['---'] ? '\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate
      : '\\-+|') + '\\,(?!' + re.src_ZCc + ').|' + // allow `,,,` in paths
      '\\!+(?!' + re.src_ZCc + '|[!]).|' + // allow `!!!` in paths, but not at the end
      '\\?(?!' + re.src_ZCc + '|[?]).' + ')+' + '|\\/' + ')?'; // Allow anything in markdown spec, forbid quote (") at the first position
      // because emails enclosed in quotes are far more common

      re.src_email_name = '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*';
      re.src_xn = 'xn--[a-z0-9\\-]{1,59}'; // More to read about domain names
      // http://serverfault.com/questions/638260/

      re.src_domain_root = // Allow letters & digits (http://test1)
      '(?:' + re.src_xn + '|' + re.src_pseudo_letter + '{1,63}' + ')';
      re.src_domain = '(?:' + re.src_xn + '|' + '(?:' + re.src_pseudo_letter + ')' + '|' + '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' + ')';
      re.src_host = '(?:' + // Don't need IP check, because digits are already allowed in normal domain names
      //   src_ip4 +
      // '|' +
      '(?:(?:(?:' + re.src_domain + ')\\.)*' + re.src_domain
      /*_root*/
      + ')' + ')';
      re.tpl_host_fuzzy = '(?:' + re.src_ip4 + '|' + '(?:(?:(?:' + re.src_domain + ')\\.)+(?:%TLDS%))' + ')';
      re.tpl_host_no_ip_fuzzy = '(?:(?:(?:' + re.src_domain + ')\\.)+(?:%TLDS%))';
      re.src_host_strict = re.src_host + re.src_host_terminator;
      re.tpl_host_fuzzy_strict = re.tpl_host_fuzzy + re.src_host_terminator;
      re.src_host_port_strict = re.src_host + re.src_port + re.src_host_terminator;
      re.tpl_host_port_fuzzy_strict = re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;
      re.tpl_host_port_no_ip_fuzzy_strict = re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator; ////////////////////////////////////////////////////////////////////////////////
      // Main rules
      // Rude test fuzzy links by host, for quick deny

      re.tpl_host_fuzzy_test = 'localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';
      re.tpl_email_fuzzy = '(^|' + text_separators + '|"|\\(|' + re.src_ZCc + ')' + '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';
      re.tpl_link_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
      // but can start with > (markdown blockquote)
      "(^|(?![.:/\\-_@])(?:[$+<=>^`|\uFF5C]|" + re.src_ZPCc + '))' + "((?![$+<=>^`|\uFF5C])" + re.tpl_host_port_fuzzy_strict + re.src_path + ')';
      re.tpl_link_no_ip_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
      // but can start with > (markdown blockquote)
      "(^|(?![.:/\\-_@])(?:[$+<=>^`|\uFF5C]|" + re.src_ZPCc + '))' + "((?![$+<=>^`|\uFF5C])" + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';
      return re;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it-abbr/index.js":
  /*!************************************************!*\
    !*** ./node_modules/markdown-it-abbr/index.js ***!
    \************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItAbbrIndexJs(module, exports, __webpack_require__) {
    "use strict"; // Enclose abbreviations in <abbr> tags
    //

    module.exports = function sub_plugin(md) {
      var escapeRE = md.utils.escapeRE,
          arrayReplaceAt = md.utils.arrayReplaceAt; // ASCII characters in Cc, Sc, Sm, Sk categories we should terminate on;
      // you can check character classes here:
      // http://www.unicode.org/Public/UNIDATA/UnicodeData.txt

      var OTHER_CHARS = ' \r\n$+<=>^`|~';
      var UNICODE_PUNCT_RE = md.utils.lib.ucmicro.P.source;
      var UNICODE_SPACE_RE = md.utils.lib.ucmicro.Z.source;

      function abbr_def(state, startLine, endLine, silent) {
        var label,
            title,
            ch,
            labelStart,
            labelEnd,
            pos = state.bMarks[startLine] + state.tShift[startLine],
            max = state.eMarks[startLine];

        if (pos + 2 >= max) {
          return false;
        }

        if (state.src.charCodeAt(pos++) !== 0x2A
        /* * */
        ) {
            return false;
          }

        if (state.src.charCodeAt(pos++) !== 0x5B
        /* [ */
        ) {
            return false;
          }

        labelStart = pos;

        for (; pos < max; pos++) {
          ch = state.src.charCodeAt(pos);

          if (ch === 0x5B
          /* [ */
          ) {
              return false;
            } else if (ch === 0x5D
          /* ] */
          ) {
              labelEnd = pos;
              break;
            } else if (ch === 0x5C
          /* \ */
          ) {
              pos++;
            }
        }

        if (labelEnd < 0 || state.src.charCodeAt(labelEnd + 1) !== 0x3A
        /* : */
        ) {
            return false;
          }

        if (silent) {
          return true;
        }

        label = state.src.slice(labelStart, labelEnd).replace(/\\(.)/g, '$1');
        title = state.src.slice(labelEnd + 2, max).trim();

        if (label.length === 0) {
          return false;
        }

        if (title.length === 0) {
          return false;
        }

        if (!state.env.abbreviations) {
          state.env.abbreviations = {};
        } // prepend ':' to avoid conflict with Object.prototype members


        if (typeof state.env.abbreviations[':' + label] === 'undefined') {
          state.env.abbreviations[':' + label] = title;
        }

        state.line = startLine + 1;
        return true;
      }

      function abbr_replace(state) {
        var i,
            j,
            l,
            tokens,
            token,
            text,
            nodes,
            pos,
            reg,
            m,
            regText,
            regSimple,
            currentToken,
            blockTokens = state.tokens;

        if (!state.env.abbreviations) {
          return;
        }

        regSimple = new RegExp('(?:' + Object.keys(state.env.abbreviations).map(function (x) {
          return x.substr(1);
        }).sort(function (a, b) {
          return b.length - a.length;
        }).map(escapeRE).join('|') + ')');
        regText = '(^|' + UNICODE_PUNCT_RE + '|' + UNICODE_SPACE_RE + '|[' + OTHER_CHARS.split('').map(escapeRE).join('') + '])' + '(' + Object.keys(state.env.abbreviations).map(function (x) {
          return x.substr(1);
        }).sort(function (a, b) {
          return b.length - a.length;
        }).map(escapeRE).join('|') + ')' + '($|' + UNICODE_PUNCT_RE + '|' + UNICODE_SPACE_RE + '|[' + OTHER_CHARS.split('').map(escapeRE).join('') + '])';
        reg = new RegExp(regText, 'g');

        for (j = 0, l = blockTokens.length; j < l; j++) {
          if (blockTokens[j].type !== 'inline') {
            continue;
          }

          tokens = blockTokens[j].children; // We scan from the end, to keep position when new tags added.

          for (i = tokens.length - 1; i >= 0; i--) {
            currentToken = tokens[i];

            if (currentToken.type !== 'text') {
              continue;
            }

            pos = 0;
            text = currentToken.content;
            reg.lastIndex = 0;
            nodes = []; // fast regexp run to determine whether there are any abbreviated words
            // in the current token

            if (!regSimple.test(text)) {
              continue;
            }

            while (m = reg.exec(text)) {
              if (m.index > 0 || m[1].length > 0) {
                token = new state.Token('text', '', 0);
                token.content = text.slice(pos, m.index + m[1].length);
                nodes.push(token);
              }

              token = new state.Token('abbr_open', 'abbr', 1);
              token.attrs = [['title', state.env.abbreviations[':' + m[2]]]];
              nodes.push(token);
              token = new state.Token('text', '', 0);
              token.content = m[2];
              nodes.push(token);
              token = new state.Token('abbr_close', 'abbr', -1);
              nodes.push(token);
              reg.lastIndex -= m[3].length;
              pos = reg.lastIndex;
            }

            if (!nodes.length) {
              continue;
            }

            if (pos < text.length) {
              token = new state.Token('text', '', 0);
              token.content = text.slice(pos);
              nodes.push(token);
            } // replace current node


            blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);
          }
        }
      }

      md.block.ruler.before('reference', 'abbr_def', abbr_def, {
        alt: ['paragraph', 'reference']
      });
      md.core.ruler.after('linkify', 'abbr_replace', abbr_replace);
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it-deflist/index.js":
  /*!***************************************************!*\
    !*** ./node_modules/markdown-it-deflist/index.js ***!
    \***************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItDeflistIndexJs(module, exports, __webpack_require__) {
    "use strict"; // Process definition lists
    //

    module.exports = function deflist_plugin(md) {
      var isSpace = md.utils.isSpace; // Search `[:~][\n ]`, returns next pos after marker on success
      // or -1 on fail.

      function skipMarker(state, line) {
        var pos,
            marker,
            start = state.bMarks[line] + state.tShift[line],
            max = state.eMarks[line];

        if (start >= max) {
          return -1;
        } // Check bullet


        marker = state.src.charCodeAt(start++);

        if (marker !== 0x7E
        /* ~ */
        && marker !== 0x3A
        /* : */
        ) {
            return -1;
          }

        pos = state.skipSpaces(start); // require space after ":"

        if (start === pos) {
          return -1;
        } // no empty definitions, e.g. "  : "


        if (pos >= max) {
          return -1;
        }

        return start;
      }

      function markTightParagraphs(state, idx) {
        var i,
            l,
            level = state.level + 2;

        for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {
          if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {
            state.tokens[i + 2].hidden = true;
            state.tokens[i].hidden = true;
            i += 2;
          }
        }
      }

      function deflist(state, startLine, endLine, silent) {
        var ch, contentStart, ddLine, dtLine, itemLines, listLines, listTokIdx, max, nextLine, offset, oldDDIndent, oldIndent, oldParentType, oldSCount, oldTShift, oldTight, pos, prevEmptyEnd, tight, token;

        if (silent) {
          // quirk: validation mode validates a dd block only, not a whole deflist
          if (state.ddIndent < 0) {
            return false;
          }

          return skipMarker(state, startLine) >= 0;
        }

        nextLine = startLine + 1;

        if (nextLine >= endLine) {
          return false;
        }

        if (state.isEmpty(nextLine)) {
          nextLine++;

          if (nextLine >= endLine) {
            return false;
          }
        }

        if (state.sCount[nextLine] < state.blkIndent) {
          return false;
        }

        contentStart = skipMarker(state, nextLine);

        if (contentStart < 0) {
          return false;
        } // Start list


        listTokIdx = state.tokens.length;
        tight = true;
        token = state.push('dl_open', 'dl', 1);
        token.map = listLines = [startLine, 0]; //
        // Iterate list items
        //

        dtLine = startLine;
        ddLine = nextLine; // One definition list can contain multiple DTs,
        // and one DT can be followed by multiple DDs.
        //
        // Thus, there is two loops here, and label is
        // needed to break out of the second one
        //

        /*eslint no-labels:0,block-scoped-var:0*/

        OUTER: for (;;) {
          prevEmptyEnd = false;
          token = state.push('dt_open', 'dt', 1);
          token.map = [dtLine, dtLine];
          token = state.push('inline', '', 0);
          token.map = [dtLine, dtLine];
          token.content = state.getLines(dtLine, dtLine + 1, state.blkIndent, false).trim();
          token.children = [];
          token = state.push('dt_close', 'dt', -1);

          for (;;) {
            token = state.push('dd_open', 'dd', 1);
            token.map = itemLines = [nextLine, 0];
            pos = contentStart;
            max = state.eMarks[ddLine];
            offset = state.sCount[ddLine] + contentStart - (state.bMarks[ddLine] + state.tShift[ddLine]);

            while (pos < max) {
              ch = state.src.charCodeAt(pos);

              if (isSpace(ch)) {
                if (ch === 0x09) {
                  offset += 4 - offset % 4;
                } else {
                  offset++;
                }
              } else {
                break;
              }

              pos++;
            }

            contentStart = pos;
            oldTight = state.tight;
            oldDDIndent = state.ddIndent;
            oldIndent = state.blkIndent;
            oldTShift = state.tShift[ddLine];
            oldSCount = state.sCount[ddLine];
            oldParentType = state.parentType;
            state.blkIndent = state.ddIndent = state.sCount[ddLine] + 2;
            state.tShift[ddLine] = contentStart - state.bMarks[ddLine];
            state.sCount[ddLine] = offset;
            state.tight = true;
            state.parentType = 'deflist';
            state.md.block.tokenize(state, ddLine, endLine, true); // If any of list item is tight, mark list as tight

            if (!state.tight || prevEmptyEnd) {
              tight = false;
            } // Item become loose if finish with empty line,
            // but we should filter last element, because it means list finish


            prevEmptyEnd = state.line - ddLine > 1 && state.isEmpty(state.line - 1);
            state.tShift[ddLine] = oldTShift;
            state.sCount[ddLine] = oldSCount;
            state.tight = oldTight;
            state.parentType = oldParentType;
            state.blkIndent = oldIndent;
            state.ddIndent = oldDDIndent;
            token = state.push('dd_close', 'dd', -1);
            itemLines[1] = nextLine = state.line;

            if (nextLine >= endLine) {
              break OUTER;
            }

            if (state.sCount[nextLine] < state.blkIndent) {
              break OUTER;
            }

            contentStart = skipMarker(state, nextLine);

            if (contentStart < 0) {
              break;
            }

            ddLine = nextLine; // go to the next loop iteration:
            // insert DD tag and repeat checking
          }

          if (nextLine >= endLine) {
            break;
          }

          dtLine = nextLine;

          if (state.isEmpty(dtLine)) {
            break;
          }

          if (state.sCount[dtLine] < state.blkIndent) {
            break;
          }

          ddLine = dtLine + 1;

          if (ddLine >= endLine) {
            break;
          }

          if (state.isEmpty(ddLine)) {
            ddLine++;
          }

          if (ddLine >= endLine) {
            break;
          }

          if (state.sCount[ddLine] < state.blkIndent) {
            break;
          }

          contentStart = skipMarker(state, ddLine);

          if (contentStart < 0) {
            break;
          } // go to the next loop iteration:
          // insert DT and DD tags and repeat checking

        } // Finilize list


        token = state.push('dl_close', 'dl', -1);
        listLines[1] = nextLine;
        state.line = nextLine; // mark paragraphs tight if needed

        if (tight) {
          markTightParagraphs(state, listTokIdx);
        }

        return true;
      }

      md.block.ruler.before('paragraph', 'deflist', deflist, {
        alt: ['paragraph', 'reference']
      });
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it-emoji/index.js":
  /*!*************************************************!*\
    !*** ./node_modules/markdown-it-emoji/index.js ***!
    \*************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItEmojiIndexJs(module, exports, __webpack_require__) {
    "use strict";

    var emojies_defs = __webpack_require__(
    /*! ./lib/data/full.json */
    "./node_modules/markdown-it-emoji/lib/data/full.json");

    var emojies_shortcuts = __webpack_require__(
    /*! ./lib/data/shortcuts */
    "./node_modules/markdown-it-emoji/lib/data/shortcuts.js");

    var emoji_html = __webpack_require__(
    /*! ./lib/render */
    "./node_modules/markdown-it-emoji/lib/render.js");

    var emoji_replace = __webpack_require__(
    /*! ./lib/replace */
    "./node_modules/markdown-it-emoji/lib/replace.js");

    var normalize_opts = __webpack_require__(
    /*! ./lib/normalize_opts */
    "./node_modules/markdown-it-emoji/lib/normalize_opts.js");

    module.exports = function emoji_plugin(md, options) {
      var defaults = {
        defs: emojies_defs,
        shortcuts: emojies_shortcuts,
        enabled: []
      };
      var opts = normalize_opts(md.utils.assign({}, defaults, options || {}));
      md.renderer.rules.emoji = emoji_html;
      md.core.ruler.push('emoji', emoji_replace(md, opts.defs, opts.shortcuts, opts.scanRE, opts.replaceRE));
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it-emoji/lib/data/full.json":
  /*!***********************************************************!*\
    !*** ./node_modules/markdown-it-emoji/lib/data/full.json ***!
    \***********************************************************/

  /*! exports provided: 100, 1234, grinning, smiley, smile, grin, laughing, satisfied, sweat_smile, joy, rofl, relaxed, blush, innocent, slightly_smiling_face, upside_down_face, wink, relieved, heart_eyes, kissing_heart, kissing, kissing_smiling_eyes, kissing_closed_eyes, yum, stuck_out_tongue_winking_eye, stuck_out_tongue_closed_eyes, stuck_out_tongue, money_mouth_face, hugs, nerd_face, sunglasses, clown_face, cowboy_hat_face, smirk, unamused, disappointed, pensive, worried, confused, slightly_frowning_face, frowning_face, persevere, confounded, tired_face, weary, triumph, angry, rage, pout, no_mouth, neutral_face, expressionless, hushed, frowning, anguished, open_mouth, astonished, dizzy_face, flushed, scream, fearful, cold_sweat, cry, disappointed_relieved, drooling_face, sob, sweat, sleepy, sleeping, roll_eyes, thinking, lying_face, grimacing, zipper_mouth_face, nauseated_face, sneezing_face, mask, face_with_thermometer, face_with_head_bandage, smiling_imp, imp, japanese_ogre, japanese_goblin, hankey, poop, shit, ghost, skull, skull_and_crossbones, alien, space_invader, robot, jack_o_lantern, smiley_cat, smile_cat, joy_cat, heart_eyes_cat, smirk_cat, kissing_cat, scream_cat, crying_cat_face, pouting_cat, open_hands, raised_hands, clap, pray, handshake, +1, thumbsup, -1, thumbsdown, fist_oncoming, facepunch, punch, fist_raised, fist, fist_left, fist_right, crossed_fingers, v, metal, ok_hand, point_left, point_right, point_up_2, point_down, point_up, hand, raised_hand, raised_back_of_hand, raised_hand_with_fingers_splayed, vulcan_salute, wave, call_me_hand, muscle, middle_finger, fu, writing_hand, selfie, nail_care, ring, lipstick, kiss, lips, tongue, ear, nose, footprints, eye, eyes, speaking_head, bust_in_silhouette, busts_in_silhouette, baby, boy, girl, man, woman, blonde_woman, blonde_man, person_with_blond_hair, older_man, older_woman, man_with_gua_pi_mao, woman_with_turban, man_with_turban, policewoman, policeman, cop, construction_worker_woman, construction_worker_man, construction_worker, guardswoman, guardsman, female_detective, male_detective, detective, woman_health_worker, man_health_worker, woman_farmer, man_farmer, woman_cook, man_cook, woman_student, man_student, woman_singer, man_singer, woman_teacher, man_teacher, woman_factory_worker, man_factory_worker, woman_technologist, man_technologist, woman_office_worker, man_office_worker, woman_mechanic, man_mechanic, woman_scientist, man_scientist, woman_artist, man_artist, woman_firefighter, man_firefighter, woman_pilot, man_pilot, woman_astronaut, man_astronaut, woman_judge, man_judge, mrs_claus, santa, princess, prince, bride_with_veil, man_in_tuxedo, angel, pregnant_woman, bowing_woman, bowing_man, bow, tipping_hand_woman, information_desk_person, sassy_woman, tipping_hand_man, sassy_man, no_good_woman, no_good, ng_woman, no_good_man, ng_man, ok_woman, ok_man, raising_hand_woman, raising_hand, raising_hand_man, woman_facepalming, man_facepalming, woman_shrugging, man_shrugging, pouting_woman, person_with_pouting_face, pouting_man, frowning_woman, person_frowning, frowning_man, haircut_woman, haircut, haircut_man, massage_woman, massage, massage_man, business_suit_levitating, dancer, man_dancing, dancing_women, dancers, dancing_men, walking_woman, walking_man, walking, running_woman, running_man, runner, running, couple, two_women_holding_hands, two_men_holding_hands, couple_with_heart_woman_man, couple_with_heart, couple_with_heart_woman_woman, couple_with_heart_man_man, couplekiss_man_woman, couplekiss_woman_woman, couplekiss_man_man, family_man_woman_boy, family, family_man_woman_girl, family_man_woman_girl_boy, family_man_woman_boy_boy, family_man_woman_girl_girl, family_woman_woman_boy, family_woman_woman_girl, family_woman_woman_girl_boy, family_woman_woman_boy_boy, family_woman_woman_girl_girl, family_man_man_boy, family_man_man_girl, family_man_man_girl_boy, family_man_man_boy_boy, family_man_man_girl_girl, family_woman_boy, family_woman_girl, family_woman_girl_boy, family_woman_boy_boy, family_woman_girl_girl, family_man_boy, family_man_girl, family_man_girl_boy, family_man_boy_boy, family_man_girl_girl, womans_clothes, shirt, tshirt, jeans, necktie, dress, bikini, kimono, high_heel, sandal, boot, mans_shoe, shoe, athletic_shoe, womans_hat, tophat, mortar_board, crown, rescue_worker_helmet, school_satchel, pouch, purse, handbag, briefcase, eyeglasses, dark_sunglasses, closed_umbrella, open_umbrella, dog, cat, mouse, hamster, rabbit, fox_face, bear, panda_face, koala, tiger, lion, cow, pig, pig_nose, frog, monkey_face, see_no_evil, hear_no_evil, speak_no_evil, monkey, chicken, penguin, bird, baby_chick, hatching_chick, hatched_chick, duck, eagle, owl, bat, wolf, boar, horse, unicorn, bee, honeybee, bug, butterfly, snail, shell, beetle, ant, spider, spider_web, turtle, snake, lizard, scorpion, crab, squid, octopus, shrimp, tropical_fish, fish, blowfish, dolphin, flipper, shark, whale, whale2, crocodile, leopard, tiger2, water_buffalo, ox, cow2, deer, dromedary_camel, camel, elephant, rhinoceros, gorilla, racehorse, pig2, goat, ram, sheep, dog2, poodle, cat2, rooster, turkey, dove, rabbit2, mouse2, rat, chipmunk, feet, paw_prints, dragon, dragon_face, cactus, christmas_tree, evergreen_tree, deciduous_tree, palm_tree, seedling, herb, shamrock, four_leaf_clover, bamboo, tanabata_tree, leaves, fallen_leaf, maple_leaf, mushroom, ear_of_rice, bouquet, tulip, rose, wilted_flower, sunflower, blossom, cherry_blossom, hibiscus, earth_americas, earth_africa, earth_asia, full_moon, waning_gibbous_moon, last_quarter_moon, waning_crescent_moon, new_moon, waxing_crescent_moon, first_quarter_moon, moon, waxing_gibbous_moon, new_moon_with_face, full_moon_with_face, sun_with_face, first_quarter_moon_with_face, last_quarter_moon_with_face, crescent_moon, dizzy, star, star2, sparkles, zap, fire, boom, collision, comet, sunny, sun_behind_small_cloud, partly_sunny, sun_behind_large_cloud, sun_behind_rain_cloud, rainbow, cloud, cloud_with_rain, cloud_with_lightning_and_rain, cloud_with_lightning, cloud_with_snow, snowman_with_snow, snowman, snowflake, wind_face, dash, tornado, fog, ocean, droplet, sweat_drops, umbrella, green_apple, apple, pear, tangerine, orange, mandarin, lemon, banana, watermelon, grapes, strawberry, melon, cherries, peach, pineapple, kiwi_fruit, avocado, tomato, eggplant, cucumber, carrot, corn, hot_pepper, potato, sweet_potato, chestnut, peanuts, honey_pot, croissant, bread, baguette_bread, cheese, egg, fried_egg, bacon, pancakes, fried_shrimp, poultry_leg, meat_on_bone, pizza, hotdog, hamburger, fries, stuffed_flatbread, taco, burrito, green_salad, shallow_pan_of_food, spaghetti, ramen, stew, fish_cake, sushi, bento, curry, rice, rice_ball, rice_cracker, oden, dango, shaved_ice, ice_cream, icecream, cake, birthday, custard, lollipop, candy, chocolate_bar, popcorn, doughnut, cookie, milk_glass, baby_bottle, coffee, tea, sake, beer, beers, clinking_glasses, wine_glass, tumbler_glass, cocktail, tropical_drink, champagne, spoon, fork_and_knife, plate_with_cutlery, soccer, basketball, football, baseball, tennis, volleyball, rugby_football, 8ball, ping_pong, badminton, goal_net, ice_hockey, field_hockey, cricket, golf, bow_and_arrow, fishing_pole_and_fish, boxing_glove, martial_arts_uniform, ice_skate, ski, skier, snowboarder, weight_lifting_woman, weight_lifting_man, person_fencing, women_wrestling, men_wrestling, woman_cartwheeling, man_cartwheeling, basketball_woman, basketball_man, woman_playing_handball, man_playing_handball, golfing_woman, golfing_man, surfing_woman, surfing_man, surfer, swimming_woman, swimming_man, swimmer, woman_playing_water_polo, man_playing_water_polo, rowing_woman, rowing_man, rowboat, horse_racing, biking_woman, biking_man, bicyclist, mountain_biking_woman, mountain_biking_man, mountain_bicyclist, running_shirt_with_sash, medal_sports, medal_military, 1st_place_medal, 2nd_place_medal, 3rd_place_medal, trophy, rosette, reminder_ribbon, ticket, tickets, circus_tent, woman_juggling, man_juggling, performing_arts, art, clapper, microphone, headphones, musical_score, musical_keyboard, drum, saxophone, trumpet, guitar, violin, game_die, dart, bowling, video_game, slot_machine, car, red_car, taxi, blue_car, bus, trolleybus, racing_car, police_car, ambulance, fire_engine, minibus, truck, articulated_lorry, tractor, kick_scooter, bike, motor_scooter, motorcycle, rotating_light, oncoming_police_car, oncoming_bus, oncoming_automobile, oncoming_taxi, aerial_tramway, mountain_cableway, suspension_railway, railway_car, train, mountain_railway, monorail, bullettrain_side, bullettrain_front, light_rail, steam_locomotive, train2, metro, tram, station, helicopter, small_airplane, airplane, flight_departure, flight_arrival, rocket, artificial_satellite, seat, canoe, boat, sailboat, motor_boat, speedboat, passenger_ship, ferry, ship, anchor, construction, fuelpump, busstop, vertical_traffic_light, traffic_light, world_map, moyai, statue_of_liberty, fountain, tokyo_tower, european_castle, japanese_castle, stadium, ferris_wheel, roller_coaster, carousel_horse, parasol_on_ground, beach_umbrella, desert_island, mountain, mountain_snow, mount_fuji, volcano, desert, camping, tent, railway_track, motorway, building_construction, factory, house, house_with_garden, houses, derelict_house, office, department_store, post_office, european_post_office, hospital, bank, hotel, convenience_store, school, love_hotel, wedding, classical_building, church, mosque, synagogue, kaaba, shinto_shrine, japan, rice_scene, national_park, sunrise, sunrise_over_mountains, stars, sparkler, fireworks, city_sunrise, city_sunset, cityscape, night_with_stars, milky_way, bridge_at_night, foggy, watch, iphone, calling, computer, keyboard, desktop_computer, printer, computer_mouse, trackball, joystick, clamp, minidisc, floppy_disk, cd, dvd, vhs, camera, camera_flash, video_camera, movie_camera, film_projector, film_strip, telephone_receiver, phone, telephone, pager, fax, tv, radio, studio_microphone, level_slider, control_knobs, stopwatch, timer_clock, alarm_clock, mantelpiece_clock, hourglass, hourglass_flowing_sand, satellite, battery, electric_plug, bulb, flashlight, candle, wastebasket, oil_drum, money_with_wings, dollar, yen, euro, pound, moneybag, credit_card, gem, balance_scale, wrench, hammer, hammer_and_pick, hammer_and_wrench, pick, nut_and_bolt, gear, chains, gun, bomb, hocho, knife, dagger, crossed_swords, shield, smoking, coffin, funeral_urn, amphora, crystal_ball, prayer_beads, barber, alembic, telescope, microscope, hole, pill, syringe, thermometer, toilet, potable_water, shower, bathtub, bath, bellhop_bell, key, old_key, door, couch_and_lamp, bed, sleeping_bed, framed_picture, shopping, shopping_cart, gift, balloon, flags, ribbon, confetti_ball, tada, dolls, izakaya_lantern, lantern, wind_chime, email, envelope, envelope_with_arrow, incoming_envelope, e-mail, love_letter, inbox_tray, outbox_tray, package, label, mailbox_closed, mailbox, mailbox_with_mail, mailbox_with_no_mail, postbox, postal_horn, scroll, page_with_curl, page_facing_up, bookmark_tabs, bar_chart, chart_with_upwards_trend, chart_with_downwards_trend, spiral_notepad, spiral_calendar, calendar, date, card_index, card_file_box, ballot_box, file_cabinet, clipboard, file_folder, open_file_folder, card_index_dividers, newspaper_roll, newspaper, notebook, notebook_with_decorative_cover, ledger, closed_book, green_book, blue_book, orange_book, books, book, open_book, bookmark, link, paperclip, paperclips, triangular_ruler, straight_ruler, pushpin, round_pushpin, scissors, pen, fountain_pen, black_nib, paintbrush, crayon, memo, pencil, pencil2, mag, mag_right, lock_with_ink_pen, closed_lock_with_key, lock, unlock, heart, yellow_heart, green_heart, blue_heart, purple_heart, black_heart, broken_heart, heavy_heart_exclamation, two_hearts, revolving_hearts, heartbeat, heartpulse, sparkling_heart, cupid, gift_heart, heart_decoration, peace_symbol, latin_cross, star_and_crescent, om, wheel_of_dharma, star_of_david, six_pointed_star, menorah, yin_yang, orthodox_cross, place_of_worship, ophiuchus, aries, taurus, gemini, cancer, leo, virgo, libra, scorpius, sagittarius, capricorn, aquarius, pisces, id, atom_symbol, accept, radioactive, biohazard, mobile_phone_off, vibration_mode, eight_pointed_black_star, vs, white_flower, ideograph_advantage, secret, congratulations, u6e80, a, b, ab, cl, o2, sos, x, o, stop_sign, no_entry, name_badge, no_entry_sign, anger, hotsprings, no_pedestrians, do_not_litter, no_bicycles, non-potable_water, underage, no_mobile_phones, no_smoking, exclamation, heavy_exclamation_mark, grey_exclamation, question, grey_question, bangbang, interrobang, low_brightness, high_brightness, part_alternation_mark, warning, children_crossing, trident, fleur_de_lis, beginner, recycle, white_check_mark, chart, sparkle, eight_spoked_asterisk, negative_squared_cross_mark, globe_with_meridians, diamond_shape_with_a_dot_inside, m, cyclone, zzz, atm, wc, wheelchair, parking, sa, passport_control, customs, baggage_claim, left_luggage, mens, womens, baby_symbol, restroom, put_litter_in_its_place, cinema, signal_strength, koko, symbols, information_source, abc, abcd, capital_abcd, ng, ok, up, cool, new, free, zero, one, two, three, four, five, six, seven, eight, nine, keycap_ten, hash, asterisk, arrow_forward, pause_button, play_or_pause_button, stop_button, record_button, next_track_button, previous_track_button, fast_forward, rewind, arrow_double_up, arrow_double_down, arrow_backward, arrow_up_small, arrow_down_small, arrow_right, arrow_left, arrow_up, arrow_down, arrow_upper_right, arrow_lower_right, arrow_lower_left, arrow_upper_left, arrow_up_down, left_right_arrow, arrow_right_hook, leftwards_arrow_with_hook, arrow_heading_up, arrow_heading_down, twisted_rightwards_arrows, repeat, repeat_one, arrows_counterclockwise, arrows_clockwise, musical_note, notes, heavy_plus_sign, heavy_minus_sign, heavy_division_sign, heavy_multiplication_x, heavy_dollar_sign, currency_exchange, tm, copyright, registered, wavy_dash, curly_loop, loop, end, back, on, top, soon, heavy_check_mark, ballot_box_with_check, radio_button, white_circle, black_circle, red_circle, large_blue_circle, small_red_triangle, small_red_triangle_down, small_orange_diamond, small_blue_diamond, large_orange_diamond, large_blue_diamond, white_square_button, black_square_button, black_small_square, white_small_square, black_medium_small_square, white_medium_small_square, black_medium_square, white_medium_square, black_large_square, white_large_square, speaker, mute, sound, loud_sound, bell, no_bell, mega, loudspeaker, eye_speech_bubble, speech_balloon, thought_balloon, right_anger_bubble, spades, clubs, hearts, diamonds, black_joker, flower_playing_cards, mahjong, clock1, clock2, clock3, clock4, clock5, clock6, clock7, clock8, clock9, clock10, clock11, clock12, clock130, clock230, clock330, clock430, clock530, clock630, clock730, clock830, clock930, clock1030, clock1130, clock1230, white_flag, black_flag, checkered_flag, triangular_flag_on_post, rainbow_flag, afghanistan, aland_islands, albania, algeria, american_samoa, andorra, angola, anguilla, antarctica, antigua_barbuda, argentina, armenia, aruba, australia, austria, azerbaijan, bahamas, bahrain, bangladesh, barbados, belarus, belgium, belize, benin, bermuda, bhutan, bolivia, caribbean_netherlands, bosnia_herzegovina, botswana, brazil, british_indian_ocean_territory, british_virgin_islands, brunei, bulgaria, burkina_faso, burundi, cape_verde, cambodia, cameroon, canada, canary_islands, cayman_islands, central_african_republic, chad, chile, cn, christmas_island, cocos_islands, colombia, comoros, congo_brazzaville, congo_kinshasa, cook_islands, costa_rica, cote_divoire, croatia, cuba, curacao, cyprus, czech_republic, denmark, djibouti, dominica, dominican_republic, ecuador, egypt, el_salvador, equatorial_guinea, eritrea, estonia, ethiopia, eu, european_union, falkland_islands, faroe_islands, fiji, finland, fr, french_guiana, french_polynesia, french_southern_territories, gabon, gambia, georgia, de, ghana, gibraltar, greece, greenland, grenada, guadeloupe, guam, guatemala, guernsey, guinea, guinea_bissau, guyana, haiti, honduras, hong_kong, hungary, iceland, india, indonesia, iran, iraq, ireland, isle_of_man, israel, it, jamaica, jp, crossed_flags, jersey, jordan, kazakhstan, kenya, kiribati, kosovo, kuwait, kyrgyzstan, laos, latvia, lebanon, lesotho, liberia, libya, liechtenstein, lithuania, luxembourg, macau, macedonia, madagascar, malawi, malaysia, maldives, mali, malta, marshall_islands, martinique, mauritania, mauritius, mayotte, mexico, micronesia, moldova, monaco, mongolia, montenegro, montserrat, morocco, mozambique, myanmar, namibia, nauru, nepal, netherlands, new_caledonia, new_zealand, nicaragua, niger, nigeria, niue, norfolk_island, northern_mariana_islands, north_korea, norway, oman, pakistan, palau, palestinian_territories, panama, papua_new_guinea, paraguay, peru, philippines, pitcairn_islands, poland, portugal, puerto_rico, qatar, reunion, romania, ru, rwanda, st_barthelemy, st_helena, st_kitts_nevis, st_lucia, st_pierre_miquelon, st_vincent_grenadines, samoa, san_marino, sao_tome_principe, saudi_arabia, senegal, serbia, seychelles, sierra_leone, singapore, sint_maarten, slovakia, slovenia, solomon_islands, somalia, south_africa, south_georgia_south_sandwich_islands, kr, south_sudan, es, sri_lanka, sudan, suriname, swaziland, sweden, switzerland, syria, taiwan, tajikistan, tanzania, thailand, timor_leste, togo, tokelau, tonga, trinidad_tobago, tunisia, tr, turkmenistan, turks_caicos_islands, tuvalu, uganda, ukraine, united_arab_emirates, gb, uk, us, us_virgin_islands, uruguay, uzbekistan, vanuatu, vatican_city, venezuela, vietnam, wallis_futuna, western_sahara, yemen, zambia, zimbabwe, default */

  /***/
  function node_modulesMarkdownItEmojiLibDataFullJson(module) {
    module.exports = JSON.parse("{\"100\":\"💯\",\"1234\":\"🔢\",\"grinning\":\"😀\",\"smiley\":\"😃\",\"smile\":\"😄\",\"grin\":\"😁\",\"laughing\":\"😆\",\"satisfied\":\"😆\",\"sweat_smile\":\"😅\",\"joy\":\"😂\",\"rofl\":\"🤣\",\"relaxed\":\"☺️\",\"blush\":\"😊\",\"innocent\":\"😇\",\"slightly_smiling_face\":\"🙂\",\"upside_down_face\":\"🙃\",\"wink\":\"😉\",\"relieved\":\"😌\",\"heart_eyes\":\"😍\",\"kissing_heart\":\"😘\",\"kissing\":\"😗\",\"kissing_smiling_eyes\":\"😙\",\"kissing_closed_eyes\":\"😚\",\"yum\":\"😋\",\"stuck_out_tongue_winking_eye\":\"😜\",\"stuck_out_tongue_closed_eyes\":\"😝\",\"stuck_out_tongue\":\"😛\",\"money_mouth_face\":\"🤑\",\"hugs\":\"🤗\",\"nerd_face\":\"🤓\",\"sunglasses\":\"😎\",\"clown_face\":\"🤡\",\"cowboy_hat_face\":\"🤠\",\"smirk\":\"😏\",\"unamused\":\"😒\",\"disappointed\":\"😞\",\"pensive\":\"😔\",\"worried\":\"😟\",\"confused\":\"😕\",\"slightly_frowning_face\":\"🙁\",\"frowning_face\":\"☹️\",\"persevere\":\"😣\",\"confounded\":\"😖\",\"tired_face\":\"😫\",\"weary\":\"😩\",\"triumph\":\"😤\",\"angry\":\"😠\",\"rage\":\"😡\",\"pout\":\"😡\",\"no_mouth\":\"😶\",\"neutral_face\":\"😐\",\"expressionless\":\"😑\",\"hushed\":\"😯\",\"frowning\":\"😦\",\"anguished\":\"😧\",\"open_mouth\":\"😮\",\"astonished\":\"😲\",\"dizzy_face\":\"😵\",\"flushed\":\"😳\",\"scream\":\"😱\",\"fearful\":\"😨\",\"cold_sweat\":\"😰\",\"cry\":\"😢\",\"disappointed_relieved\":\"😥\",\"drooling_face\":\"🤤\",\"sob\":\"😭\",\"sweat\":\"😓\",\"sleepy\":\"😪\",\"sleeping\":\"😴\",\"roll_eyes\":\"🙄\",\"thinking\":\"🤔\",\"lying_face\":\"🤥\",\"grimacing\":\"😬\",\"zipper_mouth_face\":\"🤐\",\"nauseated_face\":\"🤢\",\"sneezing_face\":\"🤧\",\"mask\":\"😷\",\"face_with_thermometer\":\"🤒\",\"face_with_head_bandage\":\"🤕\",\"smiling_imp\":\"😈\",\"imp\":\"👿\",\"japanese_ogre\":\"👹\",\"japanese_goblin\":\"👺\",\"hankey\":\"💩\",\"poop\":\"💩\",\"shit\":\"💩\",\"ghost\":\"👻\",\"skull\":\"💀\",\"skull_and_crossbones\":\"☠️\",\"alien\":\"👽\",\"space_invader\":\"👾\",\"robot\":\"🤖\",\"jack_o_lantern\":\"🎃\",\"smiley_cat\":\"😺\",\"smile_cat\":\"😸\",\"joy_cat\":\"😹\",\"heart_eyes_cat\":\"😻\",\"smirk_cat\":\"😼\",\"kissing_cat\":\"😽\",\"scream_cat\":\"🙀\",\"crying_cat_face\":\"😿\",\"pouting_cat\":\"😾\",\"open_hands\":\"👐\",\"raised_hands\":\"🙌\",\"clap\":\"👏\",\"pray\":\"🙏\",\"handshake\":\"🤝\",\"+1\":\"👍\",\"thumbsup\":\"👍\",\"-1\":\"👎\",\"thumbsdown\":\"👎\",\"fist_oncoming\":\"👊\",\"facepunch\":\"👊\",\"punch\":\"👊\",\"fist_raised\":\"✊\",\"fist\":\"✊\",\"fist_left\":\"🤛\",\"fist_right\":\"🤜\",\"crossed_fingers\":\"🤞\",\"v\":\"✌️\",\"metal\":\"🤘\",\"ok_hand\":\"👌\",\"point_left\":\"👈\",\"point_right\":\"👉\",\"point_up_2\":\"👆\",\"point_down\":\"👇\",\"point_up\":\"☝️\",\"hand\":\"✋\",\"raised_hand\":\"✋\",\"raised_back_of_hand\":\"🤚\",\"raised_hand_with_fingers_splayed\":\"🖐\",\"vulcan_salute\":\"🖖\",\"wave\":\"👋\",\"call_me_hand\":\"🤙\",\"muscle\":\"💪\",\"middle_finger\":\"🖕\",\"fu\":\"🖕\",\"writing_hand\":\"✍️\",\"selfie\":\"🤳\",\"nail_care\":\"💅\",\"ring\":\"💍\",\"lipstick\":\"💄\",\"kiss\":\"💋\",\"lips\":\"👄\",\"tongue\":\"👅\",\"ear\":\"👂\",\"nose\":\"👃\",\"footprints\":\"👣\",\"eye\":\"👁\",\"eyes\":\"👀\",\"speaking_head\":\"🗣\",\"bust_in_silhouette\":\"👤\",\"busts_in_silhouette\":\"👥\",\"baby\":\"👶\",\"boy\":\"👦\",\"girl\":\"👧\",\"man\":\"👨\",\"woman\":\"👩\",\"blonde_woman\":\"👱‍♀\",\"blonde_man\":\"👱\",\"person_with_blond_hair\":\"👱\",\"older_man\":\"👴\",\"older_woman\":\"👵\",\"man_with_gua_pi_mao\":\"👲\",\"woman_with_turban\":\"👳‍♀\",\"man_with_turban\":\"👳\",\"policewoman\":\"👮‍♀\",\"policeman\":\"👮\",\"cop\":\"👮\",\"construction_worker_woman\":\"👷‍♀\",\"construction_worker_man\":\"👷\",\"construction_worker\":\"👷\",\"guardswoman\":\"💂‍♀\",\"guardsman\":\"💂\",\"female_detective\":\"🕵️‍♀️\",\"male_detective\":\"🕵\",\"detective\":\"🕵\",\"woman_health_worker\":\"👩‍⚕\",\"man_health_worker\":\"👨‍⚕\",\"woman_farmer\":\"👩‍🌾\",\"man_farmer\":\"👨‍🌾\",\"woman_cook\":\"👩‍🍳\",\"man_cook\":\"👨‍🍳\",\"woman_student\":\"👩‍🎓\",\"man_student\":\"👨‍🎓\",\"woman_singer\":\"👩‍🎤\",\"man_singer\":\"👨‍🎤\",\"woman_teacher\":\"👩‍🏫\",\"man_teacher\":\"👨‍🏫\",\"woman_factory_worker\":\"👩‍🏭\",\"man_factory_worker\":\"👨‍🏭\",\"woman_technologist\":\"👩‍💻\",\"man_technologist\":\"👨‍💻\",\"woman_office_worker\":\"👩‍💼\",\"man_office_worker\":\"👨‍💼\",\"woman_mechanic\":\"👩‍🔧\",\"man_mechanic\":\"👨‍🔧\",\"woman_scientist\":\"👩‍🔬\",\"man_scientist\":\"👨‍🔬\",\"woman_artist\":\"👩‍🎨\",\"man_artist\":\"👨‍🎨\",\"woman_firefighter\":\"👩‍🚒\",\"man_firefighter\":\"👨‍🚒\",\"woman_pilot\":\"👩‍✈\",\"man_pilot\":\"👨‍✈\",\"woman_astronaut\":\"👩‍🚀\",\"man_astronaut\":\"👨‍🚀\",\"woman_judge\":\"👩‍⚖\",\"man_judge\":\"👨‍⚖\",\"mrs_claus\":\"🤶\",\"santa\":\"🎅\",\"princess\":\"👸\",\"prince\":\"🤴\",\"bride_with_veil\":\"👰\",\"man_in_tuxedo\":\"🤵\",\"angel\":\"👼\",\"pregnant_woman\":\"🤰\",\"bowing_woman\":\"🙇‍♀\",\"bowing_man\":\"🙇\",\"bow\":\"🙇\",\"tipping_hand_woman\":\"💁\",\"information_desk_person\":\"💁\",\"sassy_woman\":\"💁\",\"tipping_hand_man\":\"💁‍♂\",\"sassy_man\":\"💁‍♂\",\"no_good_woman\":\"🙅\",\"no_good\":\"🙅\",\"ng_woman\":\"🙅\",\"no_good_man\":\"🙅‍♂\",\"ng_man\":\"🙅‍♂\",\"ok_woman\":\"🙆\",\"ok_man\":\"🙆‍♂\",\"raising_hand_woman\":\"🙋\",\"raising_hand\":\"🙋\",\"raising_hand_man\":\"🙋‍♂\",\"woman_facepalming\":\"🤦‍♀\",\"man_facepalming\":\"🤦‍♂\",\"woman_shrugging\":\"🤷‍♀\",\"man_shrugging\":\"🤷‍♂\",\"pouting_woman\":\"🙎\",\"person_with_pouting_face\":\"🙎\",\"pouting_man\":\"🙎‍♂\",\"frowning_woman\":\"🙍\",\"person_frowning\":\"🙍\",\"frowning_man\":\"🙍‍♂\",\"haircut_woman\":\"💇\",\"haircut\":\"💇\",\"haircut_man\":\"💇‍♂\",\"massage_woman\":\"💆\",\"massage\":\"💆\",\"massage_man\":\"💆‍♂\",\"business_suit_levitating\":\"🕴\",\"dancer\":\"💃\",\"man_dancing\":\"🕺\",\"dancing_women\":\"👯\",\"dancers\":\"👯\",\"dancing_men\":\"👯‍♂\",\"walking_woman\":\"🚶‍♀\",\"walking_man\":\"🚶\",\"walking\":\"🚶\",\"running_woman\":\"🏃‍♀\",\"running_man\":\"🏃\",\"runner\":\"🏃\",\"running\":\"🏃\",\"couple\":\"👫\",\"two_women_holding_hands\":\"👭\",\"two_men_holding_hands\":\"👬\",\"couple_with_heart_woman_man\":\"💑\",\"couple_with_heart\":\"💑\",\"couple_with_heart_woman_woman\":\"👩‍❤️‍👩\",\"couple_with_heart_man_man\":\"👨‍❤️‍👨\",\"couplekiss_man_woman\":\"💏\",\"couplekiss_woman_woman\":\"👩‍❤️‍💋‍👩\",\"couplekiss_man_man\":\"👨‍❤️‍💋‍👨\",\"family_man_woman_boy\":\"👪\",\"family\":\"👪\",\"family_man_woman_girl\":\"👨‍👩‍👧\",\"family_man_woman_girl_boy\":\"👨‍👩‍👧‍👦\",\"family_man_woman_boy_boy\":\"👨‍👩‍👦‍👦\",\"family_man_woman_girl_girl\":\"👨‍👩‍👧‍👧\",\"family_woman_woman_boy\":\"👩‍👩‍👦\",\"family_woman_woman_girl\":\"👩‍👩‍👧\",\"family_woman_woman_girl_boy\":\"👩‍👩‍👧‍👦\",\"family_woman_woman_boy_boy\":\"👩‍👩‍👦‍👦\",\"family_woman_woman_girl_girl\":\"👩‍👩‍👧‍👧\",\"family_man_man_boy\":\"👨‍👨‍👦\",\"family_man_man_girl\":\"👨‍👨‍👧\",\"family_man_man_girl_boy\":\"👨‍👨‍👧‍👦\",\"family_man_man_boy_boy\":\"👨‍👨‍👦‍👦\",\"family_man_man_girl_girl\":\"👨‍👨‍👧‍👧\",\"family_woman_boy\":\"👩‍👦\",\"family_woman_girl\":\"👩‍👧\",\"family_woman_girl_boy\":\"👩‍👧‍👦\",\"family_woman_boy_boy\":\"👩‍👦‍👦\",\"family_woman_girl_girl\":\"👩‍👧‍👧\",\"family_man_boy\":\"👨‍👦\",\"family_man_girl\":\"👨‍👧\",\"family_man_girl_boy\":\"👨‍👧‍👦\",\"family_man_boy_boy\":\"👨‍👦‍👦\",\"family_man_girl_girl\":\"👨‍👧‍👧\",\"womans_clothes\":\"👚\",\"shirt\":\"👕\",\"tshirt\":\"👕\",\"jeans\":\"👖\",\"necktie\":\"👔\",\"dress\":\"👗\",\"bikini\":\"👙\",\"kimono\":\"👘\",\"high_heel\":\"👠\",\"sandal\":\"👡\",\"boot\":\"👢\",\"mans_shoe\":\"👞\",\"shoe\":\"👞\",\"athletic_shoe\":\"👟\",\"womans_hat\":\"👒\",\"tophat\":\"🎩\",\"mortar_board\":\"🎓\",\"crown\":\"👑\",\"rescue_worker_helmet\":\"⛑\",\"school_satchel\":\"🎒\",\"pouch\":\"👝\",\"purse\":\"👛\",\"handbag\":\"👜\",\"briefcase\":\"💼\",\"eyeglasses\":\"👓\",\"dark_sunglasses\":\"🕶\",\"closed_umbrella\":\"🌂\",\"open_umbrella\":\"☂️\",\"dog\":\"🐶\",\"cat\":\"🐱\",\"mouse\":\"🐭\",\"hamster\":\"🐹\",\"rabbit\":\"🐰\",\"fox_face\":\"🦊\",\"bear\":\"🐻\",\"panda_face\":\"🐼\",\"koala\":\"🐨\",\"tiger\":\"🐯\",\"lion\":\"🦁\",\"cow\":\"🐮\",\"pig\":\"🐷\",\"pig_nose\":\"🐽\",\"frog\":\"🐸\",\"monkey_face\":\"🐵\",\"see_no_evil\":\"🙈\",\"hear_no_evil\":\"🙉\",\"speak_no_evil\":\"🙊\",\"monkey\":\"🐒\",\"chicken\":\"🐔\",\"penguin\":\"🐧\",\"bird\":\"🐦\",\"baby_chick\":\"🐤\",\"hatching_chick\":\"🐣\",\"hatched_chick\":\"🐥\",\"duck\":\"🦆\",\"eagle\":\"🦅\",\"owl\":\"🦉\",\"bat\":\"🦇\",\"wolf\":\"🐺\",\"boar\":\"🐗\",\"horse\":\"🐴\",\"unicorn\":\"🦄\",\"bee\":\"🐝\",\"honeybee\":\"🐝\",\"bug\":\"🐛\",\"butterfly\":\"🦋\",\"snail\":\"🐌\",\"shell\":\"🐚\",\"beetle\":\"🐞\",\"ant\":\"🐜\",\"spider\":\"🕷\",\"spider_web\":\"🕸\",\"turtle\":\"🐢\",\"snake\":\"🐍\",\"lizard\":\"🦎\",\"scorpion\":\"🦂\",\"crab\":\"🦀\",\"squid\":\"🦑\",\"octopus\":\"🐙\",\"shrimp\":\"🦐\",\"tropical_fish\":\"🐠\",\"fish\":\"🐟\",\"blowfish\":\"🐡\",\"dolphin\":\"🐬\",\"flipper\":\"🐬\",\"shark\":\"🦈\",\"whale\":\"🐳\",\"whale2\":\"🐋\",\"crocodile\":\"🐊\",\"leopard\":\"🐆\",\"tiger2\":\"🐅\",\"water_buffalo\":\"🐃\",\"ox\":\"🐂\",\"cow2\":\"🐄\",\"deer\":\"🦌\",\"dromedary_camel\":\"🐪\",\"camel\":\"🐫\",\"elephant\":\"🐘\",\"rhinoceros\":\"🦏\",\"gorilla\":\"🦍\",\"racehorse\":\"🐎\",\"pig2\":\"🐖\",\"goat\":\"🐐\",\"ram\":\"🐏\",\"sheep\":\"🐑\",\"dog2\":\"🐕\",\"poodle\":\"🐩\",\"cat2\":\"🐈\",\"rooster\":\"🐓\",\"turkey\":\"🦃\",\"dove\":\"🕊\",\"rabbit2\":\"🐇\",\"mouse2\":\"🐁\",\"rat\":\"🐀\",\"chipmunk\":\"🐿\",\"feet\":\"🐾\",\"paw_prints\":\"🐾\",\"dragon\":\"🐉\",\"dragon_face\":\"🐲\",\"cactus\":\"🌵\",\"christmas_tree\":\"🎄\",\"evergreen_tree\":\"🌲\",\"deciduous_tree\":\"🌳\",\"palm_tree\":\"🌴\",\"seedling\":\"🌱\",\"herb\":\"🌿\",\"shamrock\":\"☘️\",\"four_leaf_clover\":\"🍀\",\"bamboo\":\"🎍\",\"tanabata_tree\":\"🎋\",\"leaves\":\"🍃\",\"fallen_leaf\":\"🍂\",\"maple_leaf\":\"🍁\",\"mushroom\":\"🍄\",\"ear_of_rice\":\"🌾\",\"bouquet\":\"💐\",\"tulip\":\"🌷\",\"rose\":\"🌹\",\"wilted_flower\":\"🥀\",\"sunflower\":\"🌻\",\"blossom\":\"🌼\",\"cherry_blossom\":\"🌸\",\"hibiscus\":\"🌺\",\"earth_americas\":\"🌎\",\"earth_africa\":\"🌍\",\"earth_asia\":\"🌏\",\"full_moon\":\"🌕\",\"waning_gibbous_moon\":\"🌖\",\"last_quarter_moon\":\"🌗\",\"waning_crescent_moon\":\"🌘\",\"new_moon\":\"🌑\",\"waxing_crescent_moon\":\"🌒\",\"first_quarter_moon\":\"🌓\",\"moon\":\"🌔\",\"waxing_gibbous_moon\":\"🌔\",\"new_moon_with_face\":\"🌚\",\"full_moon_with_face\":\"🌝\",\"sun_with_face\":\"🌞\",\"first_quarter_moon_with_face\":\"🌛\",\"last_quarter_moon_with_face\":\"🌜\",\"crescent_moon\":\"🌙\",\"dizzy\":\"💫\",\"star\":\"⭐️\",\"star2\":\"🌟\",\"sparkles\":\"✨\",\"zap\":\"⚡️\",\"fire\":\"🔥\",\"boom\":\"💥\",\"collision\":\"💥\",\"comet\":\"☄\",\"sunny\":\"☀️\",\"sun_behind_small_cloud\":\"🌤\",\"partly_sunny\":\"⛅️\",\"sun_behind_large_cloud\":\"🌥\",\"sun_behind_rain_cloud\":\"🌦\",\"rainbow\":\"🌈\",\"cloud\":\"☁️\",\"cloud_with_rain\":\"🌧\",\"cloud_with_lightning_and_rain\":\"⛈\",\"cloud_with_lightning\":\"🌩\",\"cloud_with_snow\":\"🌨\",\"snowman_with_snow\":\"☃️\",\"snowman\":\"⛄️\",\"snowflake\":\"❄️\",\"wind_face\":\"🌬\",\"dash\":\"💨\",\"tornado\":\"🌪\",\"fog\":\"🌫\",\"ocean\":\"🌊\",\"droplet\":\"💧\",\"sweat_drops\":\"💦\",\"umbrella\":\"☔️\",\"green_apple\":\"🍏\",\"apple\":\"🍎\",\"pear\":\"🍐\",\"tangerine\":\"🍊\",\"orange\":\"🍊\",\"mandarin\":\"🍊\",\"lemon\":\"🍋\",\"banana\":\"🍌\",\"watermelon\":\"🍉\",\"grapes\":\"🍇\",\"strawberry\":\"🍓\",\"melon\":\"🍈\",\"cherries\":\"🍒\",\"peach\":\"🍑\",\"pineapple\":\"🍍\",\"kiwi_fruit\":\"🥝\",\"avocado\":\"🥑\",\"tomato\":\"🍅\",\"eggplant\":\"🍆\",\"cucumber\":\"🥒\",\"carrot\":\"🥕\",\"corn\":\"🌽\",\"hot_pepper\":\"🌶\",\"potato\":\"🥔\",\"sweet_potato\":\"🍠\",\"chestnut\":\"🌰\",\"peanuts\":\"🥜\",\"honey_pot\":\"🍯\",\"croissant\":\"🥐\",\"bread\":\"🍞\",\"baguette_bread\":\"🥖\",\"cheese\":\"🧀\",\"egg\":\"🥚\",\"fried_egg\":\"🍳\",\"bacon\":\"🥓\",\"pancakes\":\"🥞\",\"fried_shrimp\":\"🍤\",\"poultry_leg\":\"🍗\",\"meat_on_bone\":\"🍖\",\"pizza\":\"🍕\",\"hotdog\":\"🌭\",\"hamburger\":\"🍔\",\"fries\":\"🍟\",\"stuffed_flatbread\":\"🥙\",\"taco\":\"🌮\",\"burrito\":\"🌯\",\"green_salad\":\"🥗\",\"shallow_pan_of_food\":\"🥘\",\"spaghetti\":\"🍝\",\"ramen\":\"🍜\",\"stew\":\"🍲\",\"fish_cake\":\"🍥\",\"sushi\":\"🍣\",\"bento\":\"🍱\",\"curry\":\"🍛\",\"rice\":\"🍚\",\"rice_ball\":\"🍙\",\"rice_cracker\":\"🍘\",\"oden\":\"🍢\",\"dango\":\"🍡\",\"shaved_ice\":\"🍧\",\"ice_cream\":\"🍨\",\"icecream\":\"🍦\",\"cake\":\"🍰\",\"birthday\":\"🎂\",\"custard\":\"🍮\",\"lollipop\":\"🍭\",\"candy\":\"🍬\",\"chocolate_bar\":\"🍫\",\"popcorn\":\"🍿\",\"doughnut\":\"🍩\",\"cookie\":\"🍪\",\"milk_glass\":\"🥛\",\"baby_bottle\":\"🍼\",\"coffee\":\"☕️\",\"tea\":\"🍵\",\"sake\":\"🍶\",\"beer\":\"🍺\",\"beers\":\"🍻\",\"clinking_glasses\":\"🥂\",\"wine_glass\":\"🍷\",\"tumbler_glass\":\"🥃\",\"cocktail\":\"🍸\",\"tropical_drink\":\"🍹\",\"champagne\":\"🍾\",\"spoon\":\"🥄\",\"fork_and_knife\":\"🍴\",\"plate_with_cutlery\":\"🍽\",\"soccer\":\"⚽️\",\"basketball\":\"🏀\",\"football\":\"🏈\",\"baseball\":\"⚾️\",\"tennis\":\"🎾\",\"volleyball\":\"🏐\",\"rugby_football\":\"🏉\",\"8ball\":\"🎱\",\"ping_pong\":\"🏓\",\"badminton\":\"🏸\",\"goal_net\":\"🥅\",\"ice_hockey\":\"🏒\",\"field_hockey\":\"🏑\",\"cricket\":\"🏏\",\"golf\":\"⛳️\",\"bow_and_arrow\":\"🏹\",\"fishing_pole_and_fish\":\"🎣\",\"boxing_glove\":\"🥊\",\"martial_arts_uniform\":\"🥋\",\"ice_skate\":\"⛸\",\"ski\":\"🎿\",\"skier\":\"⛷\",\"snowboarder\":\"🏂\",\"weight_lifting_woman\":\"🏋️‍♀️\",\"weight_lifting_man\":\"🏋\",\"person_fencing\":\"🤺\",\"women_wrestling\":\"🤼‍♀\",\"men_wrestling\":\"🤼‍♂\",\"woman_cartwheeling\":\"🤸‍♀\",\"man_cartwheeling\":\"🤸‍♂\",\"basketball_woman\":\"⛹️‍♀️\",\"basketball_man\":\"⛹\",\"woman_playing_handball\":\"🤾‍♀\",\"man_playing_handball\":\"🤾‍♂\",\"golfing_woman\":\"🏌️‍♀️\",\"golfing_man\":\"🏌\",\"surfing_woman\":\"🏄‍♀\",\"surfing_man\":\"🏄\",\"surfer\":\"🏄\",\"swimming_woman\":\"🏊‍♀\",\"swimming_man\":\"🏊\",\"swimmer\":\"🏊\",\"woman_playing_water_polo\":\"🤽‍♀\",\"man_playing_water_polo\":\"🤽‍♂\",\"rowing_woman\":\"🚣‍♀\",\"rowing_man\":\"🚣\",\"rowboat\":\"🚣\",\"horse_racing\":\"🏇\",\"biking_woman\":\"🚴‍♀\",\"biking_man\":\"🚴\",\"bicyclist\":\"🚴\",\"mountain_biking_woman\":\"🚵‍♀\",\"mountain_biking_man\":\"🚵\",\"mountain_bicyclist\":\"🚵\",\"running_shirt_with_sash\":\"🎽\",\"medal_sports\":\"🏅\",\"medal_military\":\"🎖\",\"1st_place_medal\":\"🥇\",\"2nd_place_medal\":\"🥈\",\"3rd_place_medal\":\"🥉\",\"trophy\":\"🏆\",\"rosette\":\"🏵\",\"reminder_ribbon\":\"🎗\",\"ticket\":\"🎫\",\"tickets\":\"🎟\",\"circus_tent\":\"🎪\",\"woman_juggling\":\"🤹‍♀\",\"man_juggling\":\"🤹‍♂\",\"performing_arts\":\"🎭\",\"art\":\"🎨\",\"clapper\":\"🎬\",\"microphone\":\"🎤\",\"headphones\":\"🎧\",\"musical_score\":\"🎼\",\"musical_keyboard\":\"🎹\",\"drum\":\"🥁\",\"saxophone\":\"🎷\",\"trumpet\":\"🎺\",\"guitar\":\"🎸\",\"violin\":\"🎻\",\"game_die\":\"🎲\",\"dart\":\"🎯\",\"bowling\":\"🎳\",\"video_game\":\"🎮\",\"slot_machine\":\"🎰\",\"car\":\"🚗\",\"red_car\":\"🚗\",\"taxi\":\"🚕\",\"blue_car\":\"🚙\",\"bus\":\"🚌\",\"trolleybus\":\"🚎\",\"racing_car\":\"🏎\",\"police_car\":\"🚓\",\"ambulance\":\"🚑\",\"fire_engine\":\"🚒\",\"minibus\":\"🚐\",\"truck\":\"🚚\",\"articulated_lorry\":\"🚛\",\"tractor\":\"🚜\",\"kick_scooter\":\"🛴\",\"bike\":\"🚲\",\"motor_scooter\":\"🛵\",\"motorcycle\":\"🏍\",\"rotating_light\":\"🚨\",\"oncoming_police_car\":\"🚔\",\"oncoming_bus\":\"🚍\",\"oncoming_automobile\":\"🚘\",\"oncoming_taxi\":\"🚖\",\"aerial_tramway\":\"🚡\",\"mountain_cableway\":\"🚠\",\"suspension_railway\":\"🚟\",\"railway_car\":\"🚃\",\"train\":\"🚋\",\"mountain_railway\":\"🚞\",\"monorail\":\"🚝\",\"bullettrain_side\":\"🚄\",\"bullettrain_front\":\"🚅\",\"light_rail\":\"🚈\",\"steam_locomotive\":\"🚂\",\"train2\":\"🚆\",\"metro\":\"🚇\",\"tram\":\"🚊\",\"station\":\"🚉\",\"helicopter\":\"🚁\",\"small_airplane\":\"🛩\",\"airplane\":\"✈️\",\"flight_departure\":\"🛫\",\"flight_arrival\":\"🛬\",\"rocket\":\"🚀\",\"artificial_satellite\":\"🛰\",\"seat\":\"💺\",\"canoe\":\"🛶\",\"boat\":\"⛵️\",\"sailboat\":\"⛵️\",\"motor_boat\":\"🛥\",\"speedboat\":\"🚤\",\"passenger_ship\":\"🛳\",\"ferry\":\"⛴\",\"ship\":\"🚢\",\"anchor\":\"⚓️\",\"construction\":\"🚧\",\"fuelpump\":\"⛽️\",\"busstop\":\"🚏\",\"vertical_traffic_light\":\"🚦\",\"traffic_light\":\"🚥\",\"world_map\":\"🗺\",\"moyai\":\"🗿\",\"statue_of_liberty\":\"🗽\",\"fountain\":\"⛲️\",\"tokyo_tower\":\"🗼\",\"european_castle\":\"🏰\",\"japanese_castle\":\"🏯\",\"stadium\":\"🏟\",\"ferris_wheel\":\"🎡\",\"roller_coaster\":\"🎢\",\"carousel_horse\":\"🎠\",\"parasol_on_ground\":\"⛱\",\"beach_umbrella\":\"🏖\",\"desert_island\":\"🏝\",\"mountain\":\"⛰\",\"mountain_snow\":\"🏔\",\"mount_fuji\":\"🗻\",\"volcano\":\"🌋\",\"desert\":\"🏜\",\"camping\":\"🏕\",\"tent\":\"⛺️\",\"railway_track\":\"🛤\",\"motorway\":\"🛣\",\"building_construction\":\"🏗\",\"factory\":\"🏭\",\"house\":\"🏠\",\"house_with_garden\":\"🏡\",\"houses\":\"🏘\",\"derelict_house\":\"🏚\",\"office\":\"🏢\",\"department_store\":\"🏬\",\"post_office\":\"🏣\",\"european_post_office\":\"🏤\",\"hospital\":\"🏥\",\"bank\":\"🏦\",\"hotel\":\"🏨\",\"convenience_store\":\"🏪\",\"school\":\"🏫\",\"love_hotel\":\"🏩\",\"wedding\":\"💒\",\"classical_building\":\"🏛\",\"church\":\"⛪️\",\"mosque\":\"🕌\",\"synagogue\":\"🕍\",\"kaaba\":\"🕋\",\"shinto_shrine\":\"⛩\",\"japan\":\"🗾\",\"rice_scene\":\"🎑\",\"national_park\":\"🏞\",\"sunrise\":\"🌅\",\"sunrise_over_mountains\":\"🌄\",\"stars\":\"🌠\",\"sparkler\":\"🎇\",\"fireworks\":\"🎆\",\"city_sunrise\":\"🌇\",\"city_sunset\":\"🌆\",\"cityscape\":\"🏙\",\"night_with_stars\":\"🌃\",\"milky_way\":\"🌌\",\"bridge_at_night\":\"🌉\",\"foggy\":\"🌁\",\"watch\":\"⌚️\",\"iphone\":\"📱\",\"calling\":\"📲\",\"computer\":\"💻\",\"keyboard\":\"⌨️\",\"desktop_computer\":\"🖥\",\"printer\":\"🖨\",\"computer_mouse\":\"🖱\",\"trackball\":\"🖲\",\"joystick\":\"🕹\",\"clamp\":\"🗜\",\"minidisc\":\"💽\",\"floppy_disk\":\"💾\",\"cd\":\"💿\",\"dvd\":\"📀\",\"vhs\":\"📼\",\"camera\":\"📷\",\"camera_flash\":\"📸\",\"video_camera\":\"📹\",\"movie_camera\":\"🎥\",\"film_projector\":\"📽\",\"film_strip\":\"🎞\",\"telephone_receiver\":\"📞\",\"phone\":\"☎️\",\"telephone\":\"☎️\",\"pager\":\"📟\",\"fax\":\"📠\",\"tv\":\"📺\",\"radio\":\"📻\",\"studio_microphone\":\"🎙\",\"level_slider\":\"🎚\",\"control_knobs\":\"🎛\",\"stopwatch\":\"⏱\",\"timer_clock\":\"⏲\",\"alarm_clock\":\"⏰\",\"mantelpiece_clock\":\"🕰\",\"hourglass\":\"⌛️\",\"hourglass_flowing_sand\":\"⏳\",\"satellite\":\"📡\",\"battery\":\"🔋\",\"electric_plug\":\"🔌\",\"bulb\":\"💡\",\"flashlight\":\"🔦\",\"candle\":\"🕯\",\"wastebasket\":\"🗑\",\"oil_drum\":\"🛢\",\"money_with_wings\":\"💸\",\"dollar\":\"💵\",\"yen\":\"💴\",\"euro\":\"💶\",\"pound\":\"💷\",\"moneybag\":\"💰\",\"credit_card\":\"💳\",\"gem\":\"💎\",\"balance_scale\":\"⚖️\",\"wrench\":\"🔧\",\"hammer\":\"🔨\",\"hammer_and_pick\":\"⚒\",\"hammer_and_wrench\":\"🛠\",\"pick\":\"⛏\",\"nut_and_bolt\":\"🔩\",\"gear\":\"⚙️\",\"chains\":\"⛓\",\"gun\":\"🔫\",\"bomb\":\"💣\",\"hocho\":\"🔪\",\"knife\":\"🔪\",\"dagger\":\"🗡\",\"crossed_swords\":\"⚔️\",\"shield\":\"🛡\",\"smoking\":\"🚬\",\"coffin\":\"⚰️\",\"funeral_urn\":\"⚱️\",\"amphora\":\"🏺\",\"crystal_ball\":\"🔮\",\"prayer_beads\":\"📿\",\"barber\":\"💈\",\"alembic\":\"⚗️\",\"telescope\":\"🔭\",\"microscope\":\"🔬\",\"hole\":\"🕳\",\"pill\":\"💊\",\"syringe\":\"💉\",\"thermometer\":\"🌡\",\"toilet\":\"🚽\",\"potable_water\":\"🚰\",\"shower\":\"🚿\",\"bathtub\":\"🛁\",\"bath\":\"🛀\",\"bellhop_bell\":\"🛎\",\"key\":\"🔑\",\"old_key\":\"🗝\",\"door\":\"🚪\",\"couch_and_lamp\":\"🛋\",\"bed\":\"🛏\",\"sleeping_bed\":\"🛌\",\"framed_picture\":\"🖼\",\"shopping\":\"🛍\",\"shopping_cart\":\"🛒\",\"gift\":\"🎁\",\"balloon\":\"🎈\",\"flags\":\"🎏\",\"ribbon\":\"🎀\",\"confetti_ball\":\"🎊\",\"tada\":\"🎉\",\"dolls\":\"🎎\",\"izakaya_lantern\":\"🏮\",\"lantern\":\"🏮\",\"wind_chime\":\"🎐\",\"email\":\"✉️\",\"envelope\":\"✉️\",\"envelope_with_arrow\":\"📩\",\"incoming_envelope\":\"📨\",\"e-mail\":\"📧\",\"love_letter\":\"💌\",\"inbox_tray\":\"📥\",\"outbox_tray\":\"📤\",\"package\":\"📦\",\"label\":\"🏷\",\"mailbox_closed\":\"📪\",\"mailbox\":\"📫\",\"mailbox_with_mail\":\"📬\",\"mailbox_with_no_mail\":\"📭\",\"postbox\":\"📮\",\"postal_horn\":\"📯\",\"scroll\":\"📜\",\"page_with_curl\":\"📃\",\"page_facing_up\":\"📄\",\"bookmark_tabs\":\"📑\",\"bar_chart\":\"📊\",\"chart_with_upwards_trend\":\"📈\",\"chart_with_downwards_trend\":\"📉\",\"spiral_notepad\":\"🗒\",\"spiral_calendar\":\"🗓\",\"calendar\":\"📆\",\"date\":\"📅\",\"card_index\":\"📇\",\"card_file_box\":\"🗃\",\"ballot_box\":\"🗳\",\"file_cabinet\":\"🗄\",\"clipboard\":\"📋\",\"file_folder\":\"📁\",\"open_file_folder\":\"📂\",\"card_index_dividers\":\"🗂\",\"newspaper_roll\":\"🗞\",\"newspaper\":\"📰\",\"notebook\":\"📓\",\"notebook_with_decorative_cover\":\"📔\",\"ledger\":\"📒\",\"closed_book\":\"📕\",\"green_book\":\"📗\",\"blue_book\":\"📘\",\"orange_book\":\"📙\",\"books\":\"📚\",\"book\":\"📖\",\"open_book\":\"📖\",\"bookmark\":\"🔖\",\"link\":\"🔗\",\"paperclip\":\"📎\",\"paperclips\":\"🖇\",\"triangular_ruler\":\"📐\",\"straight_ruler\":\"📏\",\"pushpin\":\"📌\",\"round_pushpin\":\"📍\",\"scissors\":\"✂️\",\"pen\":\"🖊\",\"fountain_pen\":\"🖋\",\"black_nib\":\"✒️\",\"paintbrush\":\"🖌\",\"crayon\":\"🖍\",\"memo\":\"📝\",\"pencil\":\"📝\",\"pencil2\":\"✏️\",\"mag\":\"🔍\",\"mag_right\":\"🔎\",\"lock_with_ink_pen\":\"🔏\",\"closed_lock_with_key\":\"🔐\",\"lock\":\"🔒\",\"unlock\":\"🔓\",\"heart\":\"❤️\",\"yellow_heart\":\"💛\",\"green_heart\":\"💚\",\"blue_heart\":\"💙\",\"purple_heart\":\"💜\",\"black_heart\":\"🖤\",\"broken_heart\":\"💔\",\"heavy_heart_exclamation\":\"❣️\",\"two_hearts\":\"💕\",\"revolving_hearts\":\"💞\",\"heartbeat\":\"💓\",\"heartpulse\":\"💗\",\"sparkling_heart\":\"💖\",\"cupid\":\"💘\",\"gift_heart\":\"💝\",\"heart_decoration\":\"💟\",\"peace_symbol\":\"☮️\",\"latin_cross\":\"✝️\",\"star_and_crescent\":\"☪️\",\"om\":\"🕉\",\"wheel_of_dharma\":\"☸️\",\"star_of_david\":\"✡️\",\"six_pointed_star\":\"🔯\",\"menorah\":\"🕎\",\"yin_yang\":\"☯️\",\"orthodox_cross\":\"☦️\",\"place_of_worship\":\"🛐\",\"ophiuchus\":\"⛎\",\"aries\":\"♈️\",\"taurus\":\"♉️\",\"gemini\":\"♊️\",\"cancer\":\"♋️\",\"leo\":\"♌️\",\"virgo\":\"♍️\",\"libra\":\"♎️\",\"scorpius\":\"♏️\",\"sagittarius\":\"♐️\",\"capricorn\":\"♑️\",\"aquarius\":\"♒️\",\"pisces\":\"♓️\",\"id\":\"🆔\",\"atom_symbol\":\"⚛️\",\"accept\":\"🉑\",\"radioactive\":\"☢️\",\"biohazard\":\"☣️\",\"mobile_phone_off\":\"📴\",\"vibration_mode\":\"📳\",\"eight_pointed_black_star\":\"✴️\",\"vs\":\"🆚\",\"white_flower\":\"💮\",\"ideograph_advantage\":\"🉐\",\"secret\":\"㊙️\",\"congratulations\":\"㊗️\",\"u6e80\":\"🈵\",\"a\":\"🅰️\",\"b\":\"🅱️\",\"ab\":\"🆎\",\"cl\":\"🆑\",\"o2\":\"🅾️\",\"sos\":\"🆘\",\"x\":\"❌\",\"o\":\"⭕️\",\"stop_sign\":\"🛑\",\"no_entry\":\"⛔️\",\"name_badge\":\"📛\",\"no_entry_sign\":\"🚫\",\"anger\":\"💢\",\"hotsprings\":\"♨️\",\"no_pedestrians\":\"🚷\",\"do_not_litter\":\"🚯\",\"no_bicycles\":\"🚳\",\"non-potable_water\":\"🚱\",\"underage\":\"🔞\",\"no_mobile_phones\":\"📵\",\"no_smoking\":\"🚭\",\"exclamation\":\"❗️\",\"heavy_exclamation_mark\":\"❗️\",\"grey_exclamation\":\"❕\",\"question\":\"❓\",\"grey_question\":\"❔\",\"bangbang\":\"‼️\",\"interrobang\":\"⁉️\",\"low_brightness\":\"🔅\",\"high_brightness\":\"🔆\",\"part_alternation_mark\":\"〽️\",\"warning\":\"⚠️\",\"children_crossing\":\"🚸\",\"trident\":\"🔱\",\"fleur_de_lis\":\"⚜️\",\"beginner\":\"🔰\",\"recycle\":\"♻️\",\"white_check_mark\":\"✅\",\"chart\":\"💹\",\"sparkle\":\"❇️\",\"eight_spoked_asterisk\":\"✳️\",\"negative_squared_cross_mark\":\"❎\",\"globe_with_meridians\":\"🌐\",\"diamond_shape_with_a_dot_inside\":\"💠\",\"m\":\"Ⓜ️\",\"cyclone\":\"🌀\",\"zzz\":\"💤\",\"atm\":\"🏧\",\"wc\":\"🚾\",\"wheelchair\":\"♿️\",\"parking\":\"🅿️\",\"sa\":\"🈂️\",\"passport_control\":\"🛂\",\"customs\":\"🛃\",\"baggage_claim\":\"🛄\",\"left_luggage\":\"🛅\",\"mens\":\"🚹\",\"womens\":\"🚺\",\"baby_symbol\":\"🚼\",\"restroom\":\"🚻\",\"put_litter_in_its_place\":\"🚮\",\"cinema\":\"🎦\",\"signal_strength\":\"📶\",\"koko\":\"🈁\",\"symbols\":\"🔣\",\"information_source\":\"ℹ️\",\"abc\":\"🔤\",\"abcd\":\"🔡\",\"capital_abcd\":\"🔠\",\"ng\":\"🆖\",\"ok\":\"🆗\",\"up\":\"🆙\",\"cool\":\"🆒\",\"new\":\"🆕\",\"free\":\"🆓\",\"zero\":\"0️⃣\",\"one\":\"1️⃣\",\"two\":\"2️⃣\",\"three\":\"3️⃣\",\"four\":\"4️⃣\",\"five\":\"5️⃣\",\"six\":\"6️⃣\",\"seven\":\"7️⃣\",\"eight\":\"8️⃣\",\"nine\":\"9️⃣\",\"keycap_ten\":\"🔟\",\"hash\":\"#️⃣\",\"asterisk\":\"*️⃣\",\"arrow_forward\":\"▶️\",\"pause_button\":\"⏸\",\"play_or_pause_button\":\"⏯\",\"stop_button\":\"⏹\",\"record_button\":\"⏺\",\"next_track_button\":\"⏭\",\"previous_track_button\":\"⏮\",\"fast_forward\":\"⏩\",\"rewind\":\"⏪\",\"arrow_double_up\":\"⏫\",\"arrow_double_down\":\"⏬\",\"arrow_backward\":\"◀️\",\"arrow_up_small\":\"🔼\",\"arrow_down_small\":\"🔽\",\"arrow_right\":\"➡️\",\"arrow_left\":\"⬅️\",\"arrow_up\":\"⬆️\",\"arrow_down\":\"⬇️\",\"arrow_upper_right\":\"↗️\",\"arrow_lower_right\":\"↘️\",\"arrow_lower_left\":\"↙️\",\"arrow_upper_left\":\"↖️\",\"arrow_up_down\":\"↕️\",\"left_right_arrow\":\"↔️\",\"arrow_right_hook\":\"↪️\",\"leftwards_arrow_with_hook\":\"↩️\",\"arrow_heading_up\":\"⤴️\",\"arrow_heading_down\":\"⤵️\",\"twisted_rightwards_arrows\":\"🔀\",\"repeat\":\"🔁\",\"repeat_one\":\"🔂\",\"arrows_counterclockwise\":\"🔄\",\"arrows_clockwise\":\"🔃\",\"musical_note\":\"🎵\",\"notes\":\"🎶\",\"heavy_plus_sign\":\"➕\",\"heavy_minus_sign\":\"➖\",\"heavy_division_sign\":\"➗\",\"heavy_multiplication_x\":\"✖️\",\"heavy_dollar_sign\":\"💲\",\"currency_exchange\":\"💱\",\"tm\":\"™️\",\"copyright\":\"©️\",\"registered\":\"®️\",\"wavy_dash\":\"〰️\",\"curly_loop\":\"➰\",\"loop\":\"➿\",\"end\":\"🔚\",\"back\":\"🔙\",\"on\":\"🔛\",\"top\":\"🔝\",\"soon\":\"🔜\",\"heavy_check_mark\":\"✔️\",\"ballot_box_with_check\":\"☑️\",\"radio_button\":\"🔘\",\"white_circle\":\"⚪️\",\"black_circle\":\"⚫️\",\"red_circle\":\"🔴\",\"large_blue_circle\":\"🔵\",\"small_red_triangle\":\"🔺\",\"small_red_triangle_down\":\"🔻\",\"small_orange_diamond\":\"🔸\",\"small_blue_diamond\":\"🔹\",\"large_orange_diamond\":\"🔶\",\"large_blue_diamond\":\"🔷\",\"white_square_button\":\"🔳\",\"black_square_button\":\"🔲\",\"black_small_square\":\"▪️\",\"white_small_square\":\"▫️\",\"black_medium_small_square\":\"◾️\",\"white_medium_small_square\":\"◽️\",\"black_medium_square\":\"◼️\",\"white_medium_square\":\"◻️\",\"black_large_square\":\"⬛️\",\"white_large_square\":\"⬜️\",\"speaker\":\"🔈\",\"mute\":\"🔇\",\"sound\":\"🔉\",\"loud_sound\":\"🔊\",\"bell\":\"🔔\",\"no_bell\":\"🔕\",\"mega\":\"📣\",\"loudspeaker\":\"📢\",\"eye_speech_bubble\":\"👁‍🗨\",\"speech_balloon\":\"💬\",\"thought_balloon\":\"💭\",\"right_anger_bubble\":\"🗯\",\"spades\":\"♠️\",\"clubs\":\"♣️\",\"hearts\":\"♥️\",\"diamonds\":\"♦️\",\"black_joker\":\"🃏\",\"flower_playing_cards\":\"🎴\",\"mahjong\":\"🀄️\",\"clock1\":\"🕐\",\"clock2\":\"🕑\",\"clock3\":\"🕒\",\"clock4\":\"🕓\",\"clock5\":\"🕔\",\"clock6\":\"🕕\",\"clock7\":\"🕖\",\"clock8\":\"🕗\",\"clock9\":\"🕘\",\"clock10\":\"🕙\",\"clock11\":\"🕚\",\"clock12\":\"🕛\",\"clock130\":\"🕜\",\"clock230\":\"🕝\",\"clock330\":\"🕞\",\"clock430\":\"🕟\",\"clock530\":\"🕠\",\"clock630\":\"🕡\",\"clock730\":\"🕢\",\"clock830\":\"🕣\",\"clock930\":\"🕤\",\"clock1030\":\"🕥\",\"clock1130\":\"🕦\",\"clock1230\":\"🕧\",\"white_flag\":\"🏳️\",\"black_flag\":\"🏴\",\"checkered_flag\":\"🏁\",\"triangular_flag_on_post\":\"🚩\",\"rainbow_flag\":\"🏳️‍🌈\",\"afghanistan\":\"🇦🇫\",\"aland_islands\":\"🇦🇽\",\"albania\":\"🇦🇱\",\"algeria\":\"🇩🇿\",\"american_samoa\":\"🇦🇸\",\"andorra\":\"🇦🇩\",\"angola\":\"🇦🇴\",\"anguilla\":\"🇦🇮\",\"antarctica\":\"🇦🇶\",\"antigua_barbuda\":\"🇦🇬\",\"argentina\":\"🇦🇷\",\"armenia\":\"🇦🇲\",\"aruba\":\"🇦🇼\",\"australia\":\"🇦🇺\",\"austria\":\"🇦🇹\",\"azerbaijan\":\"🇦🇿\",\"bahamas\":\"🇧🇸\",\"bahrain\":\"🇧🇭\",\"bangladesh\":\"🇧🇩\",\"barbados\":\"🇧🇧\",\"belarus\":\"🇧🇾\",\"belgium\":\"🇧🇪\",\"belize\":\"🇧🇿\",\"benin\":\"🇧🇯\",\"bermuda\":\"🇧🇲\",\"bhutan\":\"🇧🇹\",\"bolivia\":\"🇧🇴\",\"caribbean_netherlands\":\"🇧🇶\",\"bosnia_herzegovina\":\"🇧🇦\",\"botswana\":\"🇧🇼\",\"brazil\":\"🇧🇷\",\"british_indian_ocean_territory\":\"🇮🇴\",\"british_virgin_islands\":\"🇻🇬\",\"brunei\":\"🇧🇳\",\"bulgaria\":\"🇧🇬\",\"burkina_faso\":\"🇧🇫\",\"burundi\":\"🇧🇮\",\"cape_verde\":\"🇨🇻\",\"cambodia\":\"🇰🇭\",\"cameroon\":\"🇨🇲\",\"canada\":\"🇨🇦\",\"canary_islands\":\"🇮🇨\",\"cayman_islands\":\"🇰🇾\",\"central_african_republic\":\"🇨🇫\",\"chad\":\"🇹🇩\",\"chile\":\"🇨🇱\",\"cn\":\"🇨🇳\",\"christmas_island\":\"🇨🇽\",\"cocos_islands\":\"🇨🇨\",\"colombia\":\"🇨🇴\",\"comoros\":\"🇰🇲\",\"congo_brazzaville\":\"🇨🇬\",\"congo_kinshasa\":\"🇨🇩\",\"cook_islands\":\"🇨🇰\",\"costa_rica\":\"🇨🇷\",\"cote_divoire\":\"🇨🇮\",\"croatia\":\"🇭🇷\",\"cuba\":\"🇨🇺\",\"curacao\":\"🇨🇼\",\"cyprus\":\"🇨🇾\",\"czech_republic\":\"🇨🇿\",\"denmark\":\"🇩🇰\",\"djibouti\":\"🇩🇯\",\"dominica\":\"🇩🇲\",\"dominican_republic\":\"🇩🇴\",\"ecuador\":\"🇪🇨\",\"egypt\":\"🇪🇬\",\"el_salvador\":\"🇸🇻\",\"equatorial_guinea\":\"🇬🇶\",\"eritrea\":\"🇪🇷\",\"estonia\":\"🇪🇪\",\"ethiopia\":\"🇪🇹\",\"eu\":\"🇪🇺\",\"european_union\":\"🇪🇺\",\"falkland_islands\":\"🇫🇰\",\"faroe_islands\":\"🇫🇴\",\"fiji\":\"🇫🇯\",\"finland\":\"🇫🇮\",\"fr\":\"🇫🇷\",\"french_guiana\":\"🇬🇫\",\"french_polynesia\":\"🇵🇫\",\"french_southern_territories\":\"🇹🇫\",\"gabon\":\"🇬🇦\",\"gambia\":\"🇬🇲\",\"georgia\":\"🇬🇪\",\"de\":\"🇩🇪\",\"ghana\":\"🇬🇭\",\"gibraltar\":\"🇬🇮\",\"greece\":\"🇬🇷\",\"greenland\":\"🇬🇱\",\"grenada\":\"🇬🇩\",\"guadeloupe\":\"🇬🇵\",\"guam\":\"🇬🇺\",\"guatemala\":\"🇬🇹\",\"guernsey\":\"🇬🇬\",\"guinea\":\"🇬🇳\",\"guinea_bissau\":\"🇬🇼\",\"guyana\":\"🇬🇾\",\"haiti\":\"🇭🇹\",\"honduras\":\"🇭🇳\",\"hong_kong\":\"🇭🇰\",\"hungary\":\"🇭🇺\",\"iceland\":\"🇮🇸\",\"india\":\"🇮🇳\",\"indonesia\":\"🇮🇩\",\"iran\":\"🇮🇷\",\"iraq\":\"🇮🇶\",\"ireland\":\"🇮🇪\",\"isle_of_man\":\"🇮🇲\",\"israel\":\"🇮🇱\",\"it\":\"🇮🇹\",\"jamaica\":\"🇯🇲\",\"jp\":\"🇯🇵\",\"crossed_flags\":\"🎌\",\"jersey\":\"🇯🇪\",\"jordan\":\"🇯🇴\",\"kazakhstan\":\"🇰🇿\",\"kenya\":\"🇰🇪\",\"kiribati\":\"🇰🇮\",\"kosovo\":\"🇽🇰\",\"kuwait\":\"🇰🇼\",\"kyrgyzstan\":\"🇰🇬\",\"laos\":\"🇱🇦\",\"latvia\":\"🇱🇻\",\"lebanon\":\"🇱🇧\",\"lesotho\":\"🇱🇸\",\"liberia\":\"🇱🇷\",\"libya\":\"🇱🇾\",\"liechtenstein\":\"🇱🇮\",\"lithuania\":\"🇱🇹\",\"luxembourg\":\"🇱🇺\",\"macau\":\"🇲🇴\",\"macedonia\":\"🇲🇰\",\"madagascar\":\"🇲🇬\",\"malawi\":\"🇲🇼\",\"malaysia\":\"🇲🇾\",\"maldives\":\"🇲🇻\",\"mali\":\"🇲🇱\",\"malta\":\"🇲🇹\",\"marshall_islands\":\"🇲🇭\",\"martinique\":\"🇲🇶\",\"mauritania\":\"🇲🇷\",\"mauritius\":\"🇲🇺\",\"mayotte\":\"🇾🇹\",\"mexico\":\"🇲🇽\",\"micronesia\":\"🇫🇲\",\"moldova\":\"🇲🇩\",\"monaco\":\"🇲🇨\",\"mongolia\":\"🇲🇳\",\"montenegro\":\"🇲🇪\",\"montserrat\":\"🇲🇸\",\"morocco\":\"🇲🇦\",\"mozambique\":\"🇲🇿\",\"myanmar\":\"🇲🇲\",\"namibia\":\"🇳🇦\",\"nauru\":\"🇳🇷\",\"nepal\":\"🇳🇵\",\"netherlands\":\"🇳🇱\",\"new_caledonia\":\"🇳🇨\",\"new_zealand\":\"🇳🇿\",\"nicaragua\":\"🇳🇮\",\"niger\":\"🇳🇪\",\"nigeria\":\"🇳🇬\",\"niue\":\"🇳🇺\",\"norfolk_island\":\"🇳🇫\",\"northern_mariana_islands\":\"🇲🇵\",\"north_korea\":\"🇰🇵\",\"norway\":\"🇳🇴\",\"oman\":\"🇴🇲\",\"pakistan\":\"🇵🇰\",\"palau\":\"🇵🇼\",\"palestinian_territories\":\"🇵🇸\",\"panama\":\"🇵🇦\",\"papua_new_guinea\":\"🇵🇬\",\"paraguay\":\"🇵🇾\",\"peru\":\"🇵🇪\",\"philippines\":\"🇵🇭\",\"pitcairn_islands\":\"🇵🇳\",\"poland\":\"🇵🇱\",\"portugal\":\"🇵🇹\",\"puerto_rico\":\"🇵🇷\",\"qatar\":\"🇶🇦\",\"reunion\":\"🇷🇪\",\"romania\":\"🇷🇴\",\"ru\":\"🇷🇺\",\"rwanda\":\"🇷🇼\",\"st_barthelemy\":\"🇧🇱\",\"st_helena\":\"🇸🇭\",\"st_kitts_nevis\":\"🇰🇳\",\"st_lucia\":\"🇱🇨\",\"st_pierre_miquelon\":\"🇵🇲\",\"st_vincent_grenadines\":\"🇻🇨\",\"samoa\":\"🇼🇸\",\"san_marino\":\"🇸🇲\",\"sao_tome_principe\":\"🇸🇹\",\"saudi_arabia\":\"🇸🇦\",\"senegal\":\"🇸🇳\",\"serbia\":\"🇷🇸\",\"seychelles\":\"🇸🇨\",\"sierra_leone\":\"🇸🇱\",\"singapore\":\"🇸🇬\",\"sint_maarten\":\"🇸🇽\",\"slovakia\":\"🇸🇰\",\"slovenia\":\"🇸🇮\",\"solomon_islands\":\"🇸🇧\",\"somalia\":\"🇸🇴\",\"south_africa\":\"🇿🇦\",\"south_georgia_south_sandwich_islands\":\"🇬🇸\",\"kr\":\"🇰🇷\",\"south_sudan\":\"🇸🇸\",\"es\":\"🇪🇸\",\"sri_lanka\":\"🇱🇰\",\"sudan\":\"🇸🇩\",\"suriname\":\"🇸🇷\",\"swaziland\":\"🇸🇿\",\"sweden\":\"🇸🇪\",\"switzerland\":\"🇨🇭\",\"syria\":\"🇸🇾\",\"taiwan\":\"🇹🇼\",\"tajikistan\":\"🇹🇯\",\"tanzania\":\"🇹🇿\",\"thailand\":\"🇹🇭\",\"timor_leste\":\"🇹🇱\",\"togo\":\"🇹🇬\",\"tokelau\":\"🇹🇰\",\"tonga\":\"🇹🇴\",\"trinidad_tobago\":\"🇹🇹\",\"tunisia\":\"🇹🇳\",\"tr\":\"🇹🇷\",\"turkmenistan\":\"🇹🇲\",\"turks_caicos_islands\":\"🇹🇨\",\"tuvalu\":\"🇹🇻\",\"uganda\":\"🇺🇬\",\"ukraine\":\"🇺🇦\",\"united_arab_emirates\":\"🇦🇪\",\"gb\":\"🇬🇧\",\"uk\":\"🇬🇧\",\"us\":\"🇺🇸\",\"us_virgin_islands\":\"🇻🇮\",\"uruguay\":\"🇺🇾\",\"uzbekistan\":\"🇺🇿\",\"vanuatu\":\"🇻🇺\",\"vatican_city\":\"🇻🇦\",\"venezuela\":\"🇻🇪\",\"vietnam\":\"🇻🇳\",\"wallis_futuna\":\"🇼🇫\",\"western_sahara\":\"🇪🇭\",\"yemen\":\"🇾🇪\",\"zambia\":\"🇿🇲\",\"zimbabwe\":\"🇿🇼\"}");
    /***/
  },

  /***/
  "./node_modules/markdown-it-emoji/lib/data/shortcuts.js":
  /*!**************************************************************!*\
    !*** ./node_modules/markdown-it-emoji/lib/data/shortcuts.js ***!
    \**************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItEmojiLibDataShortcutsJs(module, exports, __webpack_require__) {
    "use strict"; // Emoticons -> Emoji mapping.
    //
    // (!) Some patterns skipped, to avoid collisions
    // without increase matcher complicity. Than can change in future.
    //
    // Places to look for more emoticons info:
    //
    // - http://en.wikipedia.org/wiki/List_of_emoticons#Western
    // - https://github.com/wooorm/emoticon/blob/master/Support.md
    // - http://factoryjoe.com/projects/emoticons/
    //

    module.exports = {
      angry: ['>:(', '>:-('],
      blush: [':")', ':-")'],
      broken_heart: ['</3', '<\\3'],
      // :\ and :-\ not used because of conflict with markdown escaping
      confused: [':/', ':-/'],
      // twemoji shows question
      cry: [":'(", ":'-(", ':,(', ':,-('],
      frowning: [':(', ':-('],
      heart: ['<3'],
      imp: [']:(', ']:-('],
      innocent: ['o:)', 'O:)', 'o:-)', 'O:-)', '0:)', '0:-)'],
      joy: [":')", ":'-)", ':,)', ':,-)', ":'D", ":'-D", ':,D', ':,-D'],
      kissing: [':*', ':-*'],
      laughing: ['x-)', 'X-)'],
      neutral_face: [':|', ':-|'],
      open_mouth: [':o', ':-o', ':O', ':-O'],
      rage: [':@', ':-@'],
      smile: [':D', ':-D'],
      smiley: [':)', ':-)'],
      smiling_imp: [']:)', ']:-)'],
      sob: [":,'(", ":,'-(", ';(', ';-('],
      stuck_out_tongue: [':P', ':-P'],
      sunglasses: ['8-)', 'B-)'],
      sweat: [',:(', ',:-('],
      sweat_smile: [',:)', ',:-)'],
      unamused: [':s', ':-S', ':z', ':-Z', ':$', ':-$'],
      wink: [';)', ';-)']
    };
    /***/
  },

  /***/
  "./node_modules/markdown-it-emoji/lib/normalize_opts.js":
  /*!**************************************************************!*\
    !*** ./node_modules/markdown-it-emoji/lib/normalize_opts.js ***!
    \**************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItEmojiLibNormalize_optsJs(module, exports, __webpack_require__) {
    "use strict"; // Convert input options to more useable format
    // and compile search regexp

    function quoteRE(str) {
      return str.replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&');
    }

    module.exports = function normalize_opts(options) {
      var emojies = options.defs,
          shortcuts; // Filter emojies by whitelist, if needed

      if (options.enabled.length) {
        emojies = Object.keys(emojies).reduce(function (acc, key) {
          if (options.enabled.indexOf(key) >= 0) {
            acc[key] = emojies[key];
          }

          return acc;
        }, {});
      } // Flatten shortcuts to simple object: { alias: emoji_name }


      shortcuts = Object.keys(options.shortcuts).reduce(function (acc, key) {
        // Skip aliases for filtered emojies, to reduce regexp
        if (!emojies[key]) {
          return acc;
        }

        if (Array.isArray(options.shortcuts[key])) {
          options.shortcuts[key].forEach(function (alias) {
            acc[alias] = key;
          });
          return acc;
        }

        acc[options.shortcuts[key]] = key;
        return acc;
      }, {}); // Compile regexp

      var names = Object.keys(emojies).map(function (name) {
        return ':' + name + ':';
      }).concat(Object.keys(shortcuts)).sort().reverse().map(function (name) {
        return quoteRE(name);
      }).join('|');
      var scanRE = RegExp(names);
      var replaceRE = RegExp(names, 'g');
      return {
        defs: emojies,
        shortcuts: shortcuts,
        scanRE: scanRE,
        replaceRE: replaceRE
      };
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it-emoji/lib/render.js":
  /*!******************************************************!*\
    !*** ./node_modules/markdown-it-emoji/lib/render.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItEmojiLibRenderJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function emoji_html(tokens, idx
    /*, options, env */
    ) {
      return tokens[idx].content;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it-emoji/lib/replace.js":
  /*!*******************************************************!*\
    !*** ./node_modules/markdown-it-emoji/lib/replace.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItEmojiLibReplaceJs(module, exports, __webpack_require__) {
    "use strict"; // Emojies & shortcuts replacement logic.
    //
    // Note: In theory, it could be faster to parse :smile: in inline chain and
    // leave only shortcuts here. But, who care...
    //

    module.exports = function create_rule(md, emojies, shortcuts, scanRE, replaceRE) {
      var arrayReplaceAt = md.utils.arrayReplaceAt,
          ucm = md.utils.lib.ucmicro,
          ZPCc = new RegExp([ucm.Z.source, ucm.P.source, ucm.Cc.source].join('|'));

      function splitTextToken(text, level, Token) {
        var token,
            last_pos = 0,
            nodes = [];
        text.replace(replaceRE, function (match, offset, src) {
          var emoji_name; // Validate emoji name

          if (shortcuts.hasOwnProperty(match)) {
            // replace shortcut with full name
            emoji_name = shortcuts[match]; // Don't allow letters before any shortcut (as in no ":/" in http://)

            if (offset > 0 && !ZPCc.test(src[offset - 1])) {
              return;
            } // Don't allow letters after any shortcut


            if (offset + match.length < src.length && !ZPCc.test(src[offset + match.length])) {
              return;
            }
          } else {
            emoji_name = match.slice(1, -1);
          } // Add new tokens to pending list


          if (offset > last_pos) {
            token = new Token('text', '', 0);
            token.content = text.slice(last_pos, offset);
            nodes.push(token);
          }

          token = new Token('emoji', '', 0);
          token.markup = emoji_name;
          token.content = emojies[emoji_name];
          nodes.push(token);
          last_pos = offset + match.length;
        });

        if (last_pos < text.length) {
          token = new Token('text', '', 0);
          token.content = text.slice(last_pos);
          nodes.push(token);
        }

        return nodes;
      }

      return function emoji_replace(state) {
        var i,
            j,
            l,
            tokens,
            token,
            blockTokens = state.tokens,
            autolinkLevel = 0;

        for (j = 0, l = blockTokens.length; j < l; j++) {
          if (blockTokens[j].type !== 'inline') {
            continue;
          }

          tokens = blockTokens[j].children; // We scan from the end, to keep position when new tags added.
          // Use reversed logic in links start/end match

          for (i = tokens.length - 1; i >= 0; i--) {
            token = tokens[i];

            if (token.type === 'link_open' || token.type === 'link_close') {
              if (token.info === 'auto') {
                autolinkLevel -= token.nesting;
              }
            }

            if (token.type === 'text' && autolinkLevel === 0 && scanRE.test(token.content)) {
              // replace current node
              blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, splitTextToken(token.content, token.level, state.Token));
            }
          }
        }
      };
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it-incremental-dom/lib/markdown-it-incremental-dom.js":
  /*!*************************************************************************************!*\
    !*** ./node_modules/markdown-it-incremental-dom/lib/markdown-it-incremental-dom.js ***!
    \*************************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItIncrementalDomLibMarkdownItIncrementalDomJs(module, exports, __webpack_require__) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = _default;

    var _renderer = _interopRequireDefault(__webpack_require__(
    /*! ./mixins/renderer */
    "./node_modules/markdown-it-incremental-dom/lib/mixins/renderer.js"));

    var _rules = _interopRequireDefault(__webpack_require__(
    /*! ./mixins/rules */
    "./node_modules/markdown-it-incremental-dom/lib/mixins/rules.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);

        if (typeof Object.getOwnPropertySymbols === 'function') {
          ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }

        ownKeys.forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      }

      return target;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function _default(md, target) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      var options = _objectSpread({
        incrementalizeDefaultRules: true
      }, opts);

      var incrementalDOM = !target && window ? window.IncrementalDOM : target;
      var mixin = (0, _renderer["default"])(incrementalDOM);
      Object.defineProperty(md, 'IncrementalDOMRenderer', {
        get: function get() {
          var extended = Object.assign(Object.create(Object.getPrototypeOf(md.renderer)), md.renderer, mixin);

          if (options.incrementalizeDefaultRules) {
            extended.rules = _objectSpread({}, extended.rules, (0, _rules["default"])(incrementalDOM));
          }

          return extended;
        }
      });

      md.renderToIncrementalDOM = function (src) {
        var env = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return md.IncrementalDOMRenderer.render(md.parse(src, env), md.options, env);
      };

      md.renderInlineToIncrementalDOM = function (src) {
        var env = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return md.IncrementalDOMRenderer.render(md.parseInline(src, env), md.options, env);
      };
    }
    /***/

  },

  /***/
  "./node_modules/markdown-it-incremental-dom/lib/mixins/renderer.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/markdown-it-incremental-dom/lib/mixins/renderer.js ***!
    \*************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItIncrementalDomLibMixinsRendererJs(module, exports, __webpack_require__) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = _default;

    var _Parser = _interopRequireDefault(__webpack_require__(
    /*! htmlparser2/lib/Parser */
    "./node_modules/markdown-it-incremental-dom/node_modules/htmlparser2/lib/Parser.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function _default(incrementalDom) {
      var autoClosingStack = [];

      var autoClosing = function autoClosing() {
        var stack = autoClosingStack.shift();
        if (!stack) return;
        stack.reverse().forEach(function (tag) {
          return incrementalDom.elementClose(tag);
        });
      };

      var attr = incrementalDom.attr,
          elementOpenEnd = incrementalDom.elementOpenEnd,
          elementVoid = incrementalDom.elementVoid,
          text = incrementalDom.text;

      var elementOpen = function elementOpen(tag) {
        if (autoClosingStack.length > 0) autoClosingStack[0].push(tag);

        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }

        incrementalDom.elementOpen.apply(incrementalDom, [tag].concat(args));
      };

      var elementOpenStart = function elementOpenStart(tag) {
        if (autoClosingStack.length > 0) autoClosingStack[0].push(tag);
        incrementalDom.elementOpenStart(tag);
      };

      var elementClose = function elementClose(tag) {
        if (autoClosingStack.length > 0) autoClosingStack[0].pop();
        incrementalDom.elementClose(tag);
      };

      var sanitizeName = function sanitizeName(name) {
        return name.replace(/[^-:\w]/g, '');
      };

      var iDOMParser = new _Parser["default"]({
        onopentag: function onopentag(name) {
          return elementOpenEnd(sanitizeName(name));
        },
        onopentagname: function onopentagname(name) {
          return elementOpenStart(sanitizeName(name));
        },
        onattribute: function onattribute(name, value) {
          var sanitizedName = sanitizeName(name);
          if (sanitizedName !== '') attr(sanitizedName, value);
        },
        ontext: text,
        onclosetag: function onclosetag(name) {
          return elementClose(sanitizeName(name));
        }
      }, {
        decodeEntities: true,
        lowerCaseAttributeNames: false,
        lowerCaseTags: false
      });

      var wrapIncrementalDOM = function wrapIncrementalDOM(html) {
        return typeof html === 'function' ? html() : iDOMParser.write(html);
      };

      return {
        renderAttrsToArray: function renderAttrsToArray(token) {
          if (!token.attrs) return [];
          return token.attrs.reduce(function (v, a) {
            return v.concat(a);
          }, []);
        },
        renderInline: function renderInline(tokens, options, env) {
          var _this8 = this;

          return function () {
            autoClosingStack.unshift([]);
            tokens.forEach(function (current, i) {
              var type = current.type;

              if (_this8.rules[type] !== undefined) {
                wrapIncrementalDOM(_this8.rules[type](tokens, i, options, env, _this8));
              } else {
                _this8.renderToken(tokens, i, options)();
              }
            });
            autoClosing();
          };
        },
        renderToken: function renderToken(tokens, idx) {
          var _this9 = this;

          return function () {
            var token = tokens[idx];
            if (token.hidden) return;

            if (token.nesting === -1) {
              elementClose(token.tag);
            } else {
              var func = token.nesting === 0 ? elementVoid : elementOpen;
              func.apply(_this9, [token.tag, '', []].concat(_this9.renderAttrsToArray(token)));
            }
          };
        },
        render: function render(tokens, options, env) {
          var _this10 = this;

          return function () {
            autoClosingStack.unshift([]);
            tokens.forEach(function (current, i) {
              var type = current.type;

              if (type === 'inline') {
                _this10.renderInline(current.children, options, env)();
              } else if (_this10.rules[type] !== undefined) {
                wrapIncrementalDOM(_this10.rules[type](tokens, i, options, env, _this10));
              } else {
                _this10.renderToken(tokens, i, options, env)();
              }
            });
            autoClosing();
            iDOMParser.reset();
          };
        }
      };
    }
    /***/

  },

  /***/
  "./node_modules/markdown-it-incremental-dom/lib/mixins/rules.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/markdown-it-incremental-dom/lib/mixins/rules.js ***!
    \**********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItIncrementalDomLibMixinsRulesJs(module, exports, __webpack_require__) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = _default;

    function _default(incrementalDom) {
      var elementClose = incrementalDom.elementClose,
          elementOpen = incrementalDom.elementOpen,
          elementVoid = incrementalDom.elementVoid,
          _text2 = incrementalDom.text;
      return {
        code_inline: function code_inline(tokens, idx, options, env, slf) {
          var _this11 = this;

          return function () {
            elementOpen.apply(_this11, ['code', '', []].concat(slf.renderAttrsToArray(tokens[idx])));

            _text2(tokens[idx].content);

            elementClose('code');
          };
        },
        code_block: function code_block(tokens, idx, options, env, slf) {
          var _this12 = this;

          return function () {
            elementOpen.apply(_this12, ['pre', '', []].concat(slf.renderAttrsToArray(tokens[idx])));
            elementOpen('code');

            _text2(tokens[idx].content);

            elementClose('code');
            elementClose('pre');
          };
        },
        hardbreak: function hardbreak() {
          return function () {
            return elementVoid('br');
          };
        },
        softbreak: function softbreak(tokens, idx, options) {
          return function () {
            return options.breaks ? elementVoid('br') : _text2('\n');
          };
        },
        text: function text(tokens, idx) {
          return function () {
            return _text2(tokens[idx].content);
          };
        }
      };
    }
    /***/

  },

  /***/
  "./node_modules/markdown-it-incremental-dom/node_modules/htmlparser2/lib/Parser.js":
  /*!*****************************************************************************************!*\
    !*** ./node_modules/markdown-it-incremental-dom/node_modules/htmlparser2/lib/Parser.js ***!
    \*****************************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItIncrementalDomNode_modulesHtmlparser2LibParserJs(module, exports, __webpack_require__) {
    var Tokenizer = __webpack_require__(
    /*! ./Tokenizer.js */
    "./node_modules/markdown-it-incremental-dom/node_modules/htmlparser2/lib/Tokenizer.js");
    /*
    	Options:
    
    	xmlMode: Disables the special behavior for script/style tags (false by default)
    	lowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)
    	lowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)
    */

    /*
    	Callbacks:
    
    	oncdataend,
    	oncdatastart,
    	onclosetag,
    	oncomment,
    	oncommentend,
    	onerror,
    	onopentag,
    	onprocessinginstruction,
    	onreset,
    	ontext
    */


    var formTags = {
      input: true,
      option: true,
      optgroup: true,
      select: true,
      button: true,
      datalist: true,
      textarea: true
    };
    var openImpliesClose = {
      tr: {
        tr: true,
        th: true,
        td: true
      },
      th: {
        th: true
      },
      td: {
        thead: true,
        th: true,
        td: true
      },
      body: {
        head: true,
        link: true,
        script: true
      },
      li: {
        li: true
      },
      p: {
        p: true
      },
      h1: {
        p: true
      },
      h2: {
        p: true
      },
      h3: {
        p: true
      },
      h4: {
        p: true
      },
      h5: {
        p: true
      },
      h6: {
        p: true
      },
      select: formTags,
      input: formTags,
      output: formTags,
      button: formTags,
      datalist: formTags,
      textarea: formTags,
      option: {
        option: true
      },
      optgroup: {
        optgroup: true
      }
    };
    var voidElements = {
      __proto__: null,
      area: true,
      base: true,
      basefont: true,
      br: true,
      col: true,
      command: true,
      embed: true,
      frame: true,
      hr: true,
      img: true,
      input: true,
      isindex: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true
    };
    var foreignContextElements = {
      __proto__: null,
      math: true,
      svg: true
    };
    var htmlIntegrationElements = {
      __proto__: null,
      mi: true,
      mo: true,
      mn: true,
      ms: true,
      mtext: true,
      "annotation-xml": true,
      foreignObject: true,
      desc: true,
      title: true
    };
    var re_nameEnd = /\s|\//;

    function Parser(cbs, options) {
      this._options = options || {};
      this._cbs = cbs || {};
      this._tagname = "";
      this._attribname = "";
      this._attribvalue = "";
      this._attribs = null;
      this._stack = [];
      this._foreignContext = [];
      this.startIndex = 0;
      this.endIndex = null;
      this._lowerCaseTagNames = "lowerCaseTags" in this._options ? !!this._options.lowerCaseTags : !this._options.xmlMode;
      this._lowerCaseAttributeNames = "lowerCaseAttributeNames" in this._options ? !!this._options.lowerCaseAttributeNames : !this._options.xmlMode;

      if (this._options.Tokenizer) {
        Tokenizer = this._options.Tokenizer;
      }

      this._tokenizer = new Tokenizer(this._options, this);
      if (this._cbs.onparserinit) this._cbs.onparserinit(this);
    }

    __webpack_require__(
    /*! inherits */
    "./node_modules/inherits/inherits_browser.js")(Parser, __webpack_require__(
    /*! events */
    "./node_modules/events/events.js").EventEmitter);

    Parser.prototype._updatePosition = function (initialOffset) {
      if (this.endIndex === null) {
        if (this._tokenizer._sectionStart <= initialOffset) {
          this.startIndex = 0;
        } else {
          this.startIndex = this._tokenizer._sectionStart - initialOffset;
        }
      } else this.startIndex = this.endIndex + 1;

      this.endIndex = this._tokenizer.getAbsoluteIndex();
    }; //Tokenizer event handlers


    Parser.prototype.ontext = function (data) {
      this._updatePosition(1);

      this.endIndex--;
      if (this._cbs.ontext) this._cbs.ontext(data);
    };

    Parser.prototype.onopentagname = function (name) {
      if (this._lowerCaseTagNames) {
        name = name.toLowerCase();
      }

      this._tagname = name;

      if (!this._options.xmlMode && name in openImpliesClose) {
        for (var el; ((el = this._stack[this._stack.length - 1]) in openImpliesClose[name]); this.onclosetag(el)) {
          ;
        }
      }

      if (this._options.xmlMode || !(name in voidElements)) {
        this._stack.push(name);

        if (name in foreignContextElements) this._foreignContext.push(true);else if (name in htmlIntegrationElements) this._foreignContext.push(false);
      }

      if (this._cbs.onopentagname) this._cbs.onopentagname(name);
      if (this._cbs.onopentag) this._attribs = {};
    };

    Parser.prototype.onopentagend = function () {
      this._updatePosition(1);

      if (this._attribs) {
        if (this._cbs.onopentag) this._cbs.onopentag(this._tagname, this._attribs);
        this._attribs = null;
      }

      if (!this._options.xmlMode && this._cbs.onclosetag && this._tagname in voidElements) {
        this._cbs.onclosetag(this._tagname);
      }

      this._tagname = "";
    };

    Parser.prototype.onclosetag = function (name) {
      this._updatePosition(1);

      if (this._lowerCaseTagNames) {
        name = name.toLowerCase();
      }

      if (name in foreignContextElements || name in htmlIntegrationElements) {
        this._foreignContext.pop();
      }

      if (this._stack.length && (!(name in voidElements) || this._options.xmlMode)) {
        var pos = this._stack.lastIndexOf(name);

        if (pos !== -1) {
          if (this._cbs.onclosetag) {
            pos = this._stack.length - pos;

            while (pos--) {
              this._cbs.onclosetag(this._stack.pop());
            }
          } else this._stack.length = pos;
        } else if (name === "p" && !this._options.xmlMode) {
          this.onopentagname(name);

          this._closeCurrentTag();
        }
      } else if (!this._options.xmlMode && (name === "br" || name === "p")) {
        this.onopentagname(name);

        this._closeCurrentTag();
      }
    };

    Parser.prototype.onselfclosingtag = function () {
      if (this._options.xmlMode || this._options.recognizeSelfClosing || this._foreignContext[this._foreignContext.length - 1]) {
        this._closeCurrentTag();
      } else {
        this.onopentagend();
      }
    };

    Parser.prototype._closeCurrentTag = function () {
      var name = this._tagname;
      this.onopentagend(); //self-closing tags will be on the top of the stack
      //(cheaper check than in onclosetag)

      if (this._stack[this._stack.length - 1] === name) {
        if (this._cbs.onclosetag) {
          this._cbs.onclosetag(name);
        }

        this._stack.pop();
      }
    };

    Parser.prototype.onattribname = function (name) {
      if (this._lowerCaseAttributeNames) {
        name = name.toLowerCase();
      }

      this._attribname = name;
    };

    Parser.prototype.onattribdata = function (value) {
      this._attribvalue += value;
    };

    Parser.prototype.onattribend = function () {
      if (this._cbs.onattribute) this._cbs.onattribute(this._attribname, this._attribvalue);

      if (this._attribs && !Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)) {
        this._attribs[this._attribname] = this._attribvalue;
      }

      this._attribname = "";
      this._attribvalue = "";
    };

    Parser.prototype._getInstructionName = function (value) {
      var idx = value.search(re_nameEnd),
          name = idx < 0 ? value : value.substr(0, idx);

      if (this._lowerCaseTagNames) {
        name = name.toLowerCase();
      }

      return name;
    };

    Parser.prototype.ondeclaration = function (value) {
      if (this._cbs.onprocessinginstruction) {
        var name = this._getInstructionName(value);

        this._cbs.onprocessinginstruction("!" + name, "!" + value);
      }
    };

    Parser.prototype.onprocessinginstruction = function (value) {
      if (this._cbs.onprocessinginstruction) {
        var name = this._getInstructionName(value);

        this._cbs.onprocessinginstruction("?" + name, "?" + value);
      }
    };

    Parser.prototype.oncomment = function (value) {
      this._updatePosition(4);

      if (this._cbs.oncomment) this._cbs.oncomment(value);
      if (this._cbs.oncommentend) this._cbs.oncommentend();
    };

    Parser.prototype.oncdata = function (value) {
      this._updatePosition(1);

      if (this._options.xmlMode || this._options.recognizeCDATA) {
        if (this._cbs.oncdatastart) this._cbs.oncdatastart();
        if (this._cbs.ontext) this._cbs.ontext(value);
        if (this._cbs.oncdataend) this._cbs.oncdataend();
      } else {
        this.oncomment("[CDATA[" + value + "]]");
      }
    };

    Parser.prototype.onerror = function (err) {
      if (this._cbs.onerror) this._cbs.onerror(err);
    };

    Parser.prototype.onend = function () {
      if (this._cbs.onclosetag) {
        for (var i = this._stack.length; i > 0; this._cbs.onclosetag(this._stack[--i])) {
          ;
        }
      }

      if (this._cbs.onend) this._cbs.onend();
    }; //Resets the parser to a blank state, ready to parse a new HTML document


    Parser.prototype.reset = function () {
      if (this._cbs.onreset) this._cbs.onreset();

      this._tokenizer.reset();

      this._tagname = "";
      this._attribname = "";
      this._attribs = null;
      this._stack = [];
      if (this._cbs.onparserinit) this._cbs.onparserinit(this);
    }; //Parses a complete HTML document and pushes it to the handler


    Parser.prototype.parseComplete = function (data) {
      this.reset();
      this.end(data);
    };

    Parser.prototype.write = function (chunk) {
      this._tokenizer.write(chunk);
    };

    Parser.prototype.end = function (chunk) {
      this._tokenizer.end(chunk);
    };

    Parser.prototype.pause = function () {
      this._tokenizer.pause();
    };

    Parser.prototype.resume = function () {
      this._tokenizer.resume();
    }; //alias for backwards compat


    Parser.prototype.parseChunk = Parser.prototype.write;
    Parser.prototype.done = Parser.prototype.end;
    module.exports = Parser;
    /***/
  },

  /***/
  "./node_modules/markdown-it-incremental-dom/node_modules/htmlparser2/lib/Tokenizer.js":
  /*!********************************************************************************************!*\
    !*** ./node_modules/markdown-it-incremental-dom/node_modules/htmlparser2/lib/Tokenizer.js ***!
    \********************************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItIncrementalDomNode_modulesHtmlparser2LibTokenizerJs(module, exports, __webpack_require__) {
    module.exports = Tokenizer;

    var decodeCodePoint = __webpack_require__(
    /*! entities/lib/decode_codepoint.js */
    "./node_modules/entities/lib/decode_codepoint.js");

    var entityMap = __webpack_require__(
    /*! entities/maps/entities.json */
    "./node_modules/entities/maps/entities.json");

    var legacyMap = __webpack_require__(
    /*! entities/maps/legacy.json */
    "./node_modules/entities/maps/legacy.json");

    var xmlMap = __webpack_require__(
    /*! entities/maps/xml.json */
    "./node_modules/entities/maps/xml.json");

    var i = 0;
    var TEXT = i++;
    var BEFORE_TAG_NAME = i++; //after <

    var IN_TAG_NAME = i++;
    var IN_SELF_CLOSING_TAG = i++;
    var BEFORE_CLOSING_TAG_NAME = i++;
    var IN_CLOSING_TAG_NAME = i++;
    var AFTER_CLOSING_TAG_NAME = i++; //attributes

    var BEFORE_ATTRIBUTE_NAME = i++;
    var IN_ATTRIBUTE_NAME = i++;
    var AFTER_ATTRIBUTE_NAME = i++;
    var BEFORE_ATTRIBUTE_VALUE = i++;
    var IN_ATTRIBUTE_VALUE_DQ = i++; // "

    var IN_ATTRIBUTE_VALUE_SQ = i++; // '

    var IN_ATTRIBUTE_VALUE_NQ = i++; //declarations

    var BEFORE_DECLARATION = i++; // !

    var IN_DECLARATION = i++; //processing instructions

    var IN_PROCESSING_INSTRUCTION = i++; // ?
    //comments

    var BEFORE_COMMENT = i++;
    var IN_COMMENT = i++;
    var AFTER_COMMENT_1 = i++;
    var AFTER_COMMENT_2 = i++; //cdata

    var BEFORE_CDATA_1 = i++; // [

    var BEFORE_CDATA_2 = i++; // C

    var BEFORE_CDATA_3 = i++; // D

    var BEFORE_CDATA_4 = i++; // A

    var BEFORE_CDATA_5 = i++; // T

    var BEFORE_CDATA_6 = i++; // A

    var IN_CDATA = i++; // [

    var AFTER_CDATA_1 = i++; // ]

    var AFTER_CDATA_2 = i++; // ]
    //special tags

    var BEFORE_SPECIAL = i++; //S

    var BEFORE_SPECIAL_END = i++; //S

    var BEFORE_SCRIPT_1 = i++; //C

    var BEFORE_SCRIPT_2 = i++; //R

    var BEFORE_SCRIPT_3 = i++; //I

    var BEFORE_SCRIPT_4 = i++; //P

    var BEFORE_SCRIPT_5 = i++; //T

    var AFTER_SCRIPT_1 = i++; //C

    var AFTER_SCRIPT_2 = i++; //R

    var AFTER_SCRIPT_3 = i++; //I

    var AFTER_SCRIPT_4 = i++; //P

    var AFTER_SCRIPT_5 = i++; //T

    var BEFORE_STYLE_1 = i++; //T

    var BEFORE_STYLE_2 = i++; //Y

    var BEFORE_STYLE_3 = i++; //L

    var BEFORE_STYLE_4 = i++; //E

    var AFTER_STYLE_1 = i++; //T

    var AFTER_STYLE_2 = i++; //Y

    var AFTER_STYLE_3 = i++; //L

    var AFTER_STYLE_4 = i++; //E

    var BEFORE_ENTITY = i++; //&

    var BEFORE_NUMERIC_ENTITY = i++; //#

    var IN_NAMED_ENTITY = i++;
    var IN_NUMERIC_ENTITY = i++;
    var IN_HEX_ENTITY = i++; //X

    var j = 0;
    var SPECIAL_NONE = j++;
    var SPECIAL_SCRIPT = j++;
    var SPECIAL_STYLE = j++;

    function whitespace(c) {
      return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
    }

    function ifElseState(upper, SUCCESS, FAILURE) {
      var lower = upper.toLowerCase();

      if (upper === lower) {
        return function (c) {
          if (c === lower) {
            this._state = SUCCESS;
          } else {
            this._state = FAILURE;
            this._index--;
          }
        };
      } else {
        return function (c) {
          if (c === lower || c === upper) {
            this._state = SUCCESS;
          } else {
            this._state = FAILURE;
            this._index--;
          }
        };
      }
    }

    function consumeSpecialNameChar(upper, NEXT_STATE) {
      var lower = upper.toLowerCase();
      return function (c) {
        if (c === lower || c === upper) {
          this._state = NEXT_STATE;
        } else {
          this._state = IN_TAG_NAME;
          this._index--; //consume the token again
        }
      };
    }

    function Tokenizer(options, cbs) {
      this._state = TEXT;
      this._buffer = "";
      this._sectionStart = 0;
      this._index = 0;
      this._bufferOffset = 0; //chars removed from _buffer

      this._baseState = TEXT;
      this._special = SPECIAL_NONE;
      this._cbs = cbs;
      this._running = true;
      this._ended = false;
      this._xmlMode = !!(options && options.xmlMode);
      this._decodeEntities = !!(options && options.decodeEntities);
    }

    Tokenizer.prototype._stateText = function (c) {
      if (c === "<") {
        if (this._index > this._sectionStart) {
          this._cbs.ontext(this._getSection());
        }

        this._state = BEFORE_TAG_NAME;
        this._sectionStart = this._index;
      } else if (this._decodeEntities && this._special === SPECIAL_NONE && c === "&") {
        if (this._index > this._sectionStart) {
          this._cbs.ontext(this._getSection());
        }

        this._baseState = TEXT;
        this._state = BEFORE_ENTITY;
        this._sectionStart = this._index;
      }
    };

    Tokenizer.prototype._stateBeforeTagName = function (c) {
      if (c === "/") {
        this._state = BEFORE_CLOSING_TAG_NAME;
      } else if (c === "<") {
        this._cbs.ontext(this._getSection());

        this._sectionStart = this._index;
      } else if (c === ">" || this._special !== SPECIAL_NONE || whitespace(c)) {
        this._state = TEXT;
      } else if (c === "!") {
        this._state = BEFORE_DECLARATION;
        this._sectionStart = this._index + 1;
      } else if (c === "?") {
        this._state = IN_PROCESSING_INSTRUCTION;
        this._sectionStart = this._index + 1;
      } else {
        this._state = !this._xmlMode && (c === "s" || c === "S") ? BEFORE_SPECIAL : IN_TAG_NAME;
        this._sectionStart = this._index;
      }
    };

    Tokenizer.prototype._stateInTagName = function (c) {
      if (c === "/" || c === ">" || whitespace(c)) {
        this._emitToken("onopentagname");

        this._state = BEFORE_ATTRIBUTE_NAME;
        this._index--;
      }
    };

    Tokenizer.prototype._stateBeforeCloseingTagName = function (c) {
      if (whitespace(c)) ;else if (c === ">") {
        this._state = TEXT;
      } else if (this._special !== SPECIAL_NONE) {
        if (c === "s" || c === "S") {
          this._state = BEFORE_SPECIAL_END;
        } else {
          this._state = TEXT;
          this._index--;
        }
      } else {
        this._state = IN_CLOSING_TAG_NAME;
        this._sectionStart = this._index;
      }
    };

    Tokenizer.prototype._stateInCloseingTagName = function (c) {
      if (c === ">" || whitespace(c)) {
        this._emitToken("onclosetag");

        this._state = AFTER_CLOSING_TAG_NAME;
        this._index--;
      }
    };

    Tokenizer.prototype._stateAfterCloseingTagName = function (c) {
      //skip everything until ">"
      if (c === ">") {
        this._state = TEXT;
        this._sectionStart = this._index + 1;
      }
    };

    Tokenizer.prototype._stateBeforeAttributeName = function (c) {
      if (c === ">") {
        this._cbs.onopentagend();

        this._state = TEXT;
        this._sectionStart = this._index + 1;
      } else if (c === "/") {
        this._state = IN_SELF_CLOSING_TAG;
      } else if (!whitespace(c)) {
        this._state = IN_ATTRIBUTE_NAME;
        this._sectionStart = this._index;
      }
    };

    Tokenizer.prototype._stateInSelfClosingTag = function (c) {
      if (c === ">") {
        this._cbs.onselfclosingtag();

        this._state = TEXT;
        this._sectionStart = this._index + 1;
      } else if (!whitespace(c)) {
        this._state = BEFORE_ATTRIBUTE_NAME;
        this._index--;
      }
    };

    Tokenizer.prototype._stateInAttributeName = function (c) {
      if (c === "=" || c === "/" || c === ">" || whitespace(c)) {
        this._cbs.onattribname(this._getSection());

        this._sectionStart = -1;
        this._state = AFTER_ATTRIBUTE_NAME;
        this._index--;
      }
    };

    Tokenizer.prototype._stateAfterAttributeName = function (c) {
      if (c === "=") {
        this._state = BEFORE_ATTRIBUTE_VALUE;
      } else if (c === "/" || c === ">") {
        this._cbs.onattribend();

        this._state = BEFORE_ATTRIBUTE_NAME;
        this._index--;
      } else if (!whitespace(c)) {
        this._cbs.onattribend();

        this._state = IN_ATTRIBUTE_NAME;
        this._sectionStart = this._index;
      }
    };

    Tokenizer.prototype._stateBeforeAttributeValue = function (c) {
      if (c === '"') {
        this._state = IN_ATTRIBUTE_VALUE_DQ;
        this._sectionStart = this._index + 1;
      } else if (c === "'") {
        this._state = IN_ATTRIBUTE_VALUE_SQ;
        this._sectionStart = this._index + 1;
      } else if (!whitespace(c)) {
        this._state = IN_ATTRIBUTE_VALUE_NQ;
        this._sectionStart = this._index;
        this._index--; //reconsume token
      }
    };

    Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function (c) {
      if (c === '"') {
        this._emitToken("onattribdata");

        this._cbs.onattribend();

        this._state = BEFORE_ATTRIBUTE_NAME;
      } else if (this._decodeEntities && c === "&") {
        this._emitToken("onattribdata");

        this._baseState = this._state;
        this._state = BEFORE_ENTITY;
        this._sectionStart = this._index;
      }
    };

    Tokenizer.prototype._stateInAttributeValueSingleQuotes = function (c) {
      if (c === "'") {
        this._emitToken("onattribdata");

        this._cbs.onattribend();

        this._state = BEFORE_ATTRIBUTE_NAME;
      } else if (this._decodeEntities && c === "&") {
        this._emitToken("onattribdata");

        this._baseState = this._state;
        this._state = BEFORE_ENTITY;
        this._sectionStart = this._index;
      }
    };

    Tokenizer.prototype._stateInAttributeValueNoQuotes = function (c) {
      if (whitespace(c) || c === ">") {
        this._emitToken("onattribdata");

        this._cbs.onattribend();

        this._state = BEFORE_ATTRIBUTE_NAME;
        this._index--;
      } else if (this._decodeEntities && c === "&") {
        this._emitToken("onattribdata");

        this._baseState = this._state;
        this._state = BEFORE_ENTITY;
        this._sectionStart = this._index;
      }
    };

    Tokenizer.prototype._stateBeforeDeclaration = function (c) {
      this._state = c === "[" ? BEFORE_CDATA_1 : c === "-" ? BEFORE_COMMENT : IN_DECLARATION;
    };

    Tokenizer.prototype._stateInDeclaration = function (c) {
      if (c === ">") {
        this._cbs.ondeclaration(this._getSection());

        this._state = TEXT;
        this._sectionStart = this._index + 1;
      }
    };

    Tokenizer.prototype._stateInProcessingInstruction = function (c) {
      if (c === ">") {
        this._cbs.onprocessinginstruction(this._getSection());

        this._state = TEXT;
        this._sectionStart = this._index + 1;
      }
    };

    Tokenizer.prototype._stateBeforeComment = function (c) {
      if (c === "-") {
        this._state = IN_COMMENT;
        this._sectionStart = this._index + 1;
      } else {
        this._state = IN_DECLARATION;
      }
    };

    Tokenizer.prototype._stateInComment = function (c) {
      if (c === "-") this._state = AFTER_COMMENT_1;
    };

    Tokenizer.prototype._stateAfterComment1 = function (c) {
      if (c === "-") {
        this._state = AFTER_COMMENT_2;
      } else {
        this._state = IN_COMMENT;
      }
    };

    Tokenizer.prototype._stateAfterComment2 = function (c) {
      if (c === ">") {
        //remove 2 trailing chars
        this._cbs.oncomment(this._buffer.substring(this._sectionStart, this._index - 2));

        this._state = TEXT;
        this._sectionStart = this._index + 1;
      } else if (c !== "-") {
        this._state = IN_COMMENT;
      } // else: stay in AFTER_COMMENT_2 (`--->`)

    };

    Tokenizer.prototype._stateBeforeCdata1 = ifElseState("C", BEFORE_CDATA_2, IN_DECLARATION);
    Tokenizer.prototype._stateBeforeCdata2 = ifElseState("D", BEFORE_CDATA_3, IN_DECLARATION);
    Tokenizer.prototype._stateBeforeCdata3 = ifElseState("A", BEFORE_CDATA_4, IN_DECLARATION);
    Tokenizer.prototype._stateBeforeCdata4 = ifElseState("T", BEFORE_CDATA_5, IN_DECLARATION);
    Tokenizer.prototype._stateBeforeCdata5 = ifElseState("A", BEFORE_CDATA_6, IN_DECLARATION);

    Tokenizer.prototype._stateBeforeCdata6 = function (c) {
      if (c === "[") {
        this._state = IN_CDATA;
        this._sectionStart = this._index + 1;
      } else {
        this._state = IN_DECLARATION;
        this._index--;
      }
    };

    Tokenizer.prototype._stateInCdata = function (c) {
      if (c === "]") this._state = AFTER_CDATA_1;
    };

    Tokenizer.prototype._stateAfterCdata1 = function (c) {
      if (c === "]") this._state = AFTER_CDATA_2;else this._state = IN_CDATA;
    };

    Tokenizer.prototype._stateAfterCdata2 = function (c) {
      if (c === ">") {
        //remove 2 trailing chars
        this._cbs.oncdata(this._buffer.substring(this._sectionStart, this._index - 2));

        this._state = TEXT;
        this._sectionStart = this._index + 1;
      } else if (c !== "]") {
        this._state = IN_CDATA;
      } //else: stay in AFTER_CDATA_2 (`]]]>`)

    };

    Tokenizer.prototype._stateBeforeSpecial = function (c) {
      if (c === "c" || c === "C") {
        this._state = BEFORE_SCRIPT_1;
      } else if (c === "t" || c === "T") {
        this._state = BEFORE_STYLE_1;
      } else {
        this._state = IN_TAG_NAME;
        this._index--; //consume the token again
      }
    };

    Tokenizer.prototype._stateBeforeSpecialEnd = function (c) {
      if (this._special === SPECIAL_SCRIPT && (c === "c" || c === "C")) {
        this._state = AFTER_SCRIPT_1;
      } else if (this._special === SPECIAL_STYLE && (c === "t" || c === "T")) {
        this._state = AFTER_STYLE_1;
      } else this._state = TEXT;
    };

    Tokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar("R", BEFORE_SCRIPT_2);
    Tokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar("I", BEFORE_SCRIPT_3);
    Tokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar("P", BEFORE_SCRIPT_4);
    Tokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar("T", BEFORE_SCRIPT_5);

    Tokenizer.prototype._stateBeforeScript5 = function (c) {
      if (c === "/" || c === ">" || whitespace(c)) {
        this._special = SPECIAL_SCRIPT;
      }

      this._state = IN_TAG_NAME;
      this._index--; //consume the token again
    };

    Tokenizer.prototype._stateAfterScript1 = ifElseState("R", AFTER_SCRIPT_2, TEXT);
    Tokenizer.prototype._stateAfterScript2 = ifElseState("I", AFTER_SCRIPT_3, TEXT);
    Tokenizer.prototype._stateAfterScript3 = ifElseState("P", AFTER_SCRIPT_4, TEXT);
    Tokenizer.prototype._stateAfterScript4 = ifElseState("T", AFTER_SCRIPT_5, TEXT);

    Tokenizer.prototype._stateAfterScript5 = function (c) {
      if (c === ">" || whitespace(c)) {
        this._special = SPECIAL_NONE;
        this._state = IN_CLOSING_TAG_NAME;
        this._sectionStart = this._index - 6;
        this._index--; //reconsume the token
      } else this._state = TEXT;
    };

    Tokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar("Y", BEFORE_STYLE_2);
    Tokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar("L", BEFORE_STYLE_3);
    Tokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar("E", BEFORE_STYLE_4);

    Tokenizer.prototype._stateBeforeStyle4 = function (c) {
      if (c === "/" || c === ">" || whitespace(c)) {
        this._special = SPECIAL_STYLE;
      }

      this._state = IN_TAG_NAME;
      this._index--; //consume the token again
    };

    Tokenizer.prototype._stateAfterStyle1 = ifElseState("Y", AFTER_STYLE_2, TEXT);
    Tokenizer.prototype._stateAfterStyle2 = ifElseState("L", AFTER_STYLE_3, TEXT);
    Tokenizer.prototype._stateAfterStyle3 = ifElseState("E", AFTER_STYLE_4, TEXT);

    Tokenizer.prototype._stateAfterStyle4 = function (c) {
      if (c === ">" || whitespace(c)) {
        this._special = SPECIAL_NONE;
        this._state = IN_CLOSING_TAG_NAME;
        this._sectionStart = this._index - 5;
        this._index--; //reconsume the token
      } else this._state = TEXT;
    };

    Tokenizer.prototype._stateBeforeEntity = ifElseState("#", BEFORE_NUMERIC_ENTITY, IN_NAMED_ENTITY);
    Tokenizer.prototype._stateBeforeNumericEntity = ifElseState("X", IN_HEX_ENTITY, IN_NUMERIC_ENTITY); //for entities terminated with a semicolon

    Tokenizer.prototype._parseNamedEntityStrict = function () {
      //offset = 1
      if (this._sectionStart + 1 < this._index) {
        var entity = this._buffer.substring(this._sectionStart + 1, this._index),
            map = this._xmlMode ? xmlMap : entityMap;

        if (map.hasOwnProperty(entity)) {
          this._emitPartial(map[entity]);

          this._sectionStart = this._index + 1;
        }
      }
    }; //parses legacy entities (without trailing semicolon)


    Tokenizer.prototype._parseLegacyEntity = function () {
      var start = this._sectionStart + 1,
          limit = this._index - start;
      if (limit > 6) limit = 6; //the max length of legacy entities is 6

      while (limit >= 2) {
        //the min length of legacy entities is 2
        var entity = this._buffer.substr(start, limit);

        if (legacyMap.hasOwnProperty(entity)) {
          this._emitPartial(legacyMap[entity]);

          this._sectionStart += limit + 1;
          return;
        } else {
          limit--;
        }
      }
    };

    Tokenizer.prototype._stateInNamedEntity = function (c) {
      if (c === ";") {
        this._parseNamedEntityStrict();

        if (this._sectionStart + 1 < this._index && !this._xmlMode) {
          this._parseLegacyEntity();
        }

        this._state = this._baseState;
      } else if ((c < "a" || c > "z") && (c < "A" || c > "Z") && (c < "0" || c > "9")) {
        if (this._xmlMode) ;else if (this._sectionStart + 1 === this._index) ;else if (this._baseState !== TEXT) {
          if (c !== "=") {
            this._parseNamedEntityStrict();
          }
        } else {
          this._parseLegacyEntity();
        }
        this._state = this._baseState;
        this._index--;
      }
    };

    Tokenizer.prototype._decodeNumericEntity = function (offset, base) {
      var sectionStart = this._sectionStart + offset;

      if (sectionStart !== this._index) {
        //parse entity
        var entity = this._buffer.substring(sectionStart, this._index);

        var parsed = parseInt(entity, base);

        this._emitPartial(decodeCodePoint(parsed));

        this._sectionStart = this._index;
      } else {
        this._sectionStart--;
      }

      this._state = this._baseState;
    };

    Tokenizer.prototype._stateInNumericEntity = function (c) {
      if (c === ";") {
        this._decodeNumericEntity(2, 10);

        this._sectionStart++;
      } else if (c < "0" || c > "9") {
        if (!this._xmlMode) {
          this._decodeNumericEntity(2, 10);
        } else {
          this._state = this._baseState;
        }

        this._index--;
      }
    };

    Tokenizer.prototype._stateInHexEntity = function (c) {
      if (c === ";") {
        this._decodeNumericEntity(3, 16);

        this._sectionStart++;
      } else if ((c < "a" || c > "f") && (c < "A" || c > "F") && (c < "0" || c > "9")) {
        if (!this._xmlMode) {
          this._decodeNumericEntity(3, 16);
        } else {
          this._state = this._baseState;
        }

        this._index--;
      }
    };

    Tokenizer.prototype._cleanup = function () {
      if (this._sectionStart < 0) {
        this._buffer = "";
        this._bufferOffset += this._index;
        this._index = 0;
      } else if (this._running) {
        if (this._state === TEXT) {
          if (this._sectionStart !== this._index) {
            this._cbs.ontext(this._buffer.substr(this._sectionStart));
          }

          this._buffer = "";
          this._bufferOffset += this._index;
          this._index = 0;
        } else if (this._sectionStart === this._index) {
          //the section just started
          this._buffer = "";
          this._bufferOffset += this._index;
          this._index = 0;
        } else {
          //remove everything unnecessary
          this._buffer = this._buffer.substr(this._sectionStart);
          this._index -= this._sectionStart;
          this._bufferOffset += this._sectionStart;
        }

        this._sectionStart = 0;
      }
    }; //TODO make events conditional


    Tokenizer.prototype.write = function (chunk) {
      if (this._ended) this._cbs.onerror(Error(".write() after done!"));
      this._buffer += chunk;

      this._parse();
    };

    Tokenizer.prototype._parse = function () {
      while (this._index < this._buffer.length && this._running) {
        var c = this._buffer.charAt(this._index);

        if (this._state === TEXT) {
          this._stateText(c);
        } else if (this._state === BEFORE_TAG_NAME) {
          this._stateBeforeTagName(c);
        } else if (this._state === IN_TAG_NAME) {
          this._stateInTagName(c);
        } else if (this._state === BEFORE_CLOSING_TAG_NAME) {
          this._stateBeforeCloseingTagName(c);
        } else if (this._state === IN_CLOSING_TAG_NAME) {
          this._stateInCloseingTagName(c);
        } else if (this._state === AFTER_CLOSING_TAG_NAME) {
          this._stateAfterCloseingTagName(c);
        } else if (this._state === IN_SELF_CLOSING_TAG) {
          this._stateInSelfClosingTag(c);
        } else if (this._state === BEFORE_ATTRIBUTE_NAME) {
          /*
          *	attributes
          */
          this._stateBeforeAttributeName(c);
        } else if (this._state === IN_ATTRIBUTE_NAME) {
          this._stateInAttributeName(c);
        } else if (this._state === AFTER_ATTRIBUTE_NAME) {
          this._stateAfterAttributeName(c);
        } else if (this._state === BEFORE_ATTRIBUTE_VALUE) {
          this._stateBeforeAttributeValue(c);
        } else if (this._state === IN_ATTRIBUTE_VALUE_DQ) {
          this._stateInAttributeValueDoubleQuotes(c);
        } else if (this._state === IN_ATTRIBUTE_VALUE_SQ) {
          this._stateInAttributeValueSingleQuotes(c);
        } else if (this._state === IN_ATTRIBUTE_VALUE_NQ) {
          this._stateInAttributeValueNoQuotes(c);
        } else if (this._state === BEFORE_DECLARATION) {
          /*
          *	declarations
          */
          this._stateBeforeDeclaration(c);
        } else if (this._state === IN_DECLARATION) {
          this._stateInDeclaration(c);
        } else if (this._state === IN_PROCESSING_INSTRUCTION) {
          /*
          *	processing instructions
          */
          this._stateInProcessingInstruction(c);
        } else if (this._state === BEFORE_COMMENT) {
          /*
          *	comments
          */
          this._stateBeforeComment(c);
        } else if (this._state === IN_COMMENT) {
          this._stateInComment(c);
        } else if (this._state === AFTER_COMMENT_1) {
          this._stateAfterComment1(c);
        } else if (this._state === AFTER_COMMENT_2) {
          this._stateAfterComment2(c);
        } else if (this._state === BEFORE_CDATA_1) {
          /*
          *	cdata
          */
          this._stateBeforeCdata1(c);
        } else if (this._state === BEFORE_CDATA_2) {
          this._stateBeforeCdata2(c);
        } else if (this._state === BEFORE_CDATA_3) {
          this._stateBeforeCdata3(c);
        } else if (this._state === BEFORE_CDATA_4) {
          this._stateBeforeCdata4(c);
        } else if (this._state === BEFORE_CDATA_5) {
          this._stateBeforeCdata5(c);
        } else if (this._state === BEFORE_CDATA_6) {
          this._stateBeforeCdata6(c);
        } else if (this._state === IN_CDATA) {
          this._stateInCdata(c);
        } else if (this._state === AFTER_CDATA_1) {
          this._stateAfterCdata1(c);
        } else if (this._state === AFTER_CDATA_2) {
          this._stateAfterCdata2(c);
        } else if (this._state === BEFORE_SPECIAL) {
          /*
          * special tags
          */
          this._stateBeforeSpecial(c);
        } else if (this._state === BEFORE_SPECIAL_END) {
          this._stateBeforeSpecialEnd(c);
        } else if (this._state === BEFORE_SCRIPT_1) {
          /*
          * script
          */
          this._stateBeforeScript1(c);
        } else if (this._state === BEFORE_SCRIPT_2) {
          this._stateBeforeScript2(c);
        } else if (this._state === BEFORE_SCRIPT_3) {
          this._stateBeforeScript3(c);
        } else if (this._state === BEFORE_SCRIPT_4) {
          this._stateBeforeScript4(c);
        } else if (this._state === BEFORE_SCRIPT_5) {
          this._stateBeforeScript5(c);
        } else if (this._state === AFTER_SCRIPT_1) {
          this._stateAfterScript1(c);
        } else if (this._state === AFTER_SCRIPT_2) {
          this._stateAfterScript2(c);
        } else if (this._state === AFTER_SCRIPT_3) {
          this._stateAfterScript3(c);
        } else if (this._state === AFTER_SCRIPT_4) {
          this._stateAfterScript4(c);
        } else if (this._state === AFTER_SCRIPT_5) {
          this._stateAfterScript5(c);
        } else if (this._state === BEFORE_STYLE_1) {
          /*
          * style
          */
          this._stateBeforeStyle1(c);
        } else if (this._state === BEFORE_STYLE_2) {
          this._stateBeforeStyle2(c);
        } else if (this._state === BEFORE_STYLE_3) {
          this._stateBeforeStyle3(c);
        } else if (this._state === BEFORE_STYLE_4) {
          this._stateBeforeStyle4(c);
        } else if (this._state === AFTER_STYLE_1) {
          this._stateAfterStyle1(c);
        } else if (this._state === AFTER_STYLE_2) {
          this._stateAfterStyle2(c);
        } else if (this._state === AFTER_STYLE_3) {
          this._stateAfterStyle3(c);
        } else if (this._state === AFTER_STYLE_4) {
          this._stateAfterStyle4(c);
        } else if (this._state === BEFORE_ENTITY) {
          /*
          * entities
          */
          this._stateBeforeEntity(c);
        } else if (this._state === BEFORE_NUMERIC_ENTITY) {
          this._stateBeforeNumericEntity(c);
        } else if (this._state === IN_NAMED_ENTITY) {
          this._stateInNamedEntity(c);
        } else if (this._state === IN_NUMERIC_ENTITY) {
          this._stateInNumericEntity(c);
        } else if (this._state === IN_HEX_ENTITY) {
          this._stateInHexEntity(c);
        } else {
          this._cbs.onerror(Error("unknown _state"), this._state);
        }

        this._index++;
      }

      this._cleanup();
    };

    Tokenizer.prototype.pause = function () {
      this._running = false;
    };

    Tokenizer.prototype.resume = function () {
      this._running = true;

      if (this._index < this._buffer.length) {
        this._parse();
      }

      if (this._ended) {
        this._finish();
      }
    };

    Tokenizer.prototype.end = function (chunk) {
      if (this._ended) this._cbs.onerror(Error(".end() after done!"));
      if (chunk) this.write(chunk);
      this._ended = true;
      if (this._running) this._finish();
    };

    Tokenizer.prototype._finish = function () {
      //if there is remaining data, emit it in a reasonable way
      if (this._sectionStart < this._index) {
        this._handleTrailingData();
      }

      this._cbs.onend();
    };

    Tokenizer.prototype._handleTrailingData = function () {
      var data = this._buffer.substr(this._sectionStart);

      if (this._state === IN_CDATA || this._state === AFTER_CDATA_1 || this._state === AFTER_CDATA_2) {
        this._cbs.oncdata(data);
      } else if (this._state === IN_COMMENT || this._state === AFTER_COMMENT_1 || this._state === AFTER_COMMENT_2) {
        this._cbs.oncomment(data);
      } else if (this._state === IN_NAMED_ENTITY && !this._xmlMode) {
        this._parseLegacyEntity();

        if (this._sectionStart < this._index) {
          this._state = this._baseState;

          this._handleTrailingData();
        }
      } else if (this._state === IN_NUMERIC_ENTITY && !this._xmlMode) {
        this._decodeNumericEntity(2, 10);

        if (this._sectionStart < this._index) {
          this._state = this._baseState;

          this._handleTrailingData();
        }
      } else if (this._state === IN_HEX_ENTITY && !this._xmlMode) {
        this._decodeNumericEntity(3, 16);

        if (this._sectionStart < this._index) {
          this._state = this._baseState;

          this._handleTrailingData();
        }
      } else if (this._state !== IN_TAG_NAME && this._state !== BEFORE_ATTRIBUTE_NAME && this._state !== BEFORE_ATTRIBUTE_VALUE && this._state !== AFTER_ATTRIBUTE_NAME && this._state !== IN_ATTRIBUTE_NAME && this._state !== IN_ATTRIBUTE_VALUE_SQ && this._state !== IN_ATTRIBUTE_VALUE_DQ && this._state !== IN_ATTRIBUTE_VALUE_NQ && this._state !== IN_CLOSING_TAG_NAME) {
        this._cbs.ontext(data);
      } //else, ignore remaining data
      //TODO add a way to remove current tag

    };

    Tokenizer.prototype.reset = function () {
      Tokenizer.call(this, {
        xmlMode: this._xmlMode,
        decodeEntities: this._decodeEntities
      }, this._cbs);
    };

    Tokenizer.prototype.getAbsoluteIndex = function () {
      return this._bufferOffset + this._index;
    };

    Tokenizer.prototype._getSection = function () {
      return this._buffer.substring(this._sectionStart, this._index);
    };

    Tokenizer.prototype._emitToken = function (name) {
      this._cbs[name](this._getSection());

      this._sectionStart = -1;
    };

    Tokenizer.prototype._emitPartial = function (value) {
      if (this._baseState !== TEXT) {
        this._cbs.onattribdata(value); //TODO implement the new event

      } else {
        this._cbs.ontext(value);
      }
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it-ins/index.js":
  /*!***********************************************!*\
    !*** ./node_modules/markdown-it-ins/index.js ***!
    \***********************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItInsIndexJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function ins_plugin(md) {
      // Insert each marker as a separate text token, and add it to delimiter list
      //
      function tokenize(state, silent) {
        var i,
            scanned,
            token,
            len,
            ch,
            start = state.pos,
            marker = state.src.charCodeAt(start);

        if (silent) {
          return false;
        }

        if (marker !== 0x2B
        /* + */
        ) {
            return false;
          }

        scanned = state.scanDelims(state.pos, true);
        len = scanned.length;
        ch = String.fromCharCode(marker);

        if (len < 2) {
          return false;
        }

        if (len % 2) {
          token = state.push('text', '', 0);
          token.content = ch;
          len--;
        }

        for (i = 0; i < len; i += 2) {
          token = state.push('text', '', 0);
          token.content = ch + ch;

          if (!scanned.can_open && !scanned.can_close) {
            continue;
          }

          state.delimiters.push({
            marker: marker,
            length: 0,
            // disable "rule of 3" length checks meant for emphasis
            jump: i,
            token: state.tokens.length - 1,
            end: -1,
            open: scanned.can_open,
            close: scanned.can_close
          });
        }

        state.pos += scanned.length;
        return true;
      } // Walk through delimiter list and replace text tokens with tags
      //


      function postProcess(state, delimiters) {
        var i,
            j,
            startDelim,
            endDelim,
            token,
            loneMarkers = [],
            max = delimiters.length;

        for (i = 0; i < max; i++) {
          startDelim = delimiters[i];

          if (startDelim.marker !== 0x2B
          /* + */
          ) {
              continue;
            }

          if (startDelim.end === -1) {
            continue;
          }

          endDelim = delimiters[startDelim.end];
          token = state.tokens[startDelim.token];
          token.type = 'ins_open';
          token.tag = 'ins';
          token.nesting = 1;
          token.markup = '++';
          token.content = '';
          token = state.tokens[endDelim.token];
          token.type = 'ins_close';
          token.tag = 'ins';
          token.nesting = -1;
          token.markup = '++';
          token.content = '';

          if (state.tokens[endDelim.token - 1].type === 'text' && state.tokens[endDelim.token - 1].content === '+') {
            loneMarkers.push(endDelim.token - 1);
          }
        } // If a marker sequence has an odd number of characters, it's splitted
        // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the
        // start of the sequence.
        //
        // So, we have to move all those markers after subsequent s_close tags.
        //


        while (loneMarkers.length) {
          i = loneMarkers.pop();
          j = i + 1;

          while (j < state.tokens.length && state.tokens[j].type === 'ins_close') {
            j++;
          }

          j--;

          if (i !== j) {
            token = state.tokens[j];
            state.tokens[j] = state.tokens[i];
            state.tokens[i] = token;
          }
        }
      }

      md.inline.ruler.before('emphasis', 'ins', tokenize);
      md.inline.ruler2.before('emphasis', 'ins', function (state) {
        var curr,
            tokens_meta = state.tokens_meta,
            max = (state.tokens_meta || []).length;
        postProcess(state, state.delimiters);

        for (curr = 0; curr < max; curr++) {
          if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
            postProcess(state, tokens_meta[curr].delimiters);
          }
        }
      });
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it-latex/dist/index.js":
  /*!******************************************************!*\
    !*** ./node_modules/markdown-it-latex/dist/index.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLatexDistIndexJs(module, exports, __webpack_require__) {
    module.exports = function (e) {
      function r(n) {
        if (t[n]) return t[n].exports;
        var u = t[n] = {
          i: n,
          l: !1,
          exports: {}
        };
        return e[n].call(u.exports, u, u.exports, r), u.l = !0, u.exports;
      }

      var t = {};
      return r.m = e, r.c = t, r.d = function (e, t, n) {
        r.o(e, t) || Object.defineProperty(e, t, {
          configurable: !1,
          enumerable: !0,
          get: n
        });
      }, r.n = function (e) {
        var t = e && e.__esModule ? function () {
          return e["default"];
        } : function () {
          return e;
        };
        return r.d(t, "a", t), t;
      }, r.o = function (e, r) {
        return Object.prototype.hasOwnProperty.call(e, r);
      }, r.p = "", r(r.s = 0);
    }([function (e, r, t) {
      "use strict";

      function n(e) {
        return e && e.__esModule ? e : {
          "default": e
        };
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), t(1);

      var u = t(2),
          i = n(u),
          o = t(3),
          c = n(o),
          s = function s(e) {
        var r = "";
        return e.split(/(?:\n\s*){2,}/).forEach(function (e) {
          try {
            r += c["default"].renderToString(e.trim(), {
              displayMode: !0
            });
          } catch (e) {
            r += "<pre>" + e + "</pre>";
          }
        }), "<div>" + r + "</div>";
      },
          a = function a(e) {
        var r = e.renderer.rules.code_inline.bind(e.renderer.rules);

        e.renderer.rules.code_inline = function (e, t, n, u, o) {
          var s = e[t].content;

          if (s.startsWith("@") && s.endsWith("@") && (s = "$" + (0, i["default"])(s.substr(1, s.length - 2)) + "$"), s.startsWith("$") && s.endsWith("$")) {
            s = s.substr(1, s.length - 2);

            try {
              return c["default"].renderToString(s);
            } catch (e) {
              return "<code>" + e + "</code>";
            }
          }

          return r(e, t, n, u, o);
        };

        var t = e.renderer.rules.fence.bind(e.renderer.rules);

        e.renderer.rules.fence = function (e, r, n, u, o) {
          var c = e[r],
              a = c.content.trim();
          return "math" === c.info || "katex" === c.info ? s(a) : /^ascii-?math/i.test(c.info) ? (a = a.split(/(?:\n\s*){2,}/).map(function (e) {
            return (0, i["default"])(e);
          }).join("\n\n"), s(a)) : t(e, r, n, u, o);
        };
      };

      r["default"] = a;
    }, function (e, r) {}, function (e, r) {
      e.exports = __webpack_require__(
      /*! asciimath-to-latex */
      "./node_modules/asciimath-to-latex/index.js");
    }, function (e, r) {
      e.exports = __webpack_require__(
      /*! katex */
      "./node_modules/markdown-it-latex/node_modules/katex/dist/katex.js");
    }]); //# sourceMappingURL=index.js.map

    /***/

  },

  /***/
  "./node_modules/markdown-it-latex/node_modules/katex/dist/katex.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/markdown-it-latex/node_modules/katex/dist/katex.js ***!
    \*************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLatexNode_modulesKatexDistKatexJs(module, exports, __webpack_require__) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (true) module.exports = factory();else {}
    })(this, function () {
      return (
        /******/
        function (modules) {
          // webpackBootstrap

          /******/
          // The module cache

          /******/
          var installedModules = {};
          /******/

          /******/
          // The require function

          /******/

          function __webpack_require__(moduleId) {
            /******/

            /******/
            // Check if module is in cache

            /******/
            if (installedModules[moduleId]) {
              /******/
              return installedModules[moduleId].exports;
              /******/
            }
            /******/
            // Create a new module (and put it into the cache)

            /******/


            var module = installedModules[moduleId] = {
              /******/
              i: moduleId,

              /******/
              l: false,

              /******/
              exports: {}
              /******/

            };
            /******/

            /******/
            // Execute the module function

            /******/

            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            /******/

            /******/
            // Flag the module as loaded

            /******/

            module.l = true;
            /******/

            /******/
            // Return the exports of the module

            /******/

            return module.exports;
            /******/
          }
          /******/

          /******/

          /******/
          // expose the modules object (__webpack_modules__)

          /******/


          __webpack_require__.m = modules;
          /******/

          /******/
          // expose the module cache

          /******/

          __webpack_require__.c = installedModules;
          /******/

          /******/
          // define getter function for harmony exports

          /******/

          __webpack_require__.d = function (exports, name, getter) {
            /******/
            if (!__webpack_require__.o(exports, name)) {
              /******/
              Object.defineProperty(exports, name, {
                /******/
                configurable: false,

                /******/
                enumerable: true,

                /******/
                get: getter
                /******/

              });
              /******/
            }
            /******/

          };
          /******/

          /******/
          // getDefaultExport function for compatibility with non-harmony modules

          /******/


          __webpack_require__.n = function (module) {
            /******/
            var getter = module && module.__esModule ?
            /******/
            function getDefault() {
              return module['default'];
            } :
            /******/
            function getModuleExports() {
              return module;
            };
            /******/

            __webpack_require__.d(getter, 'a', getter);
            /******/


            return getter;
            /******/
          };
          /******/

          /******/
          // Object.prototype.hasOwnProperty.call

          /******/


          __webpack_require__.o = function (object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          /******/

          /******/
          // __webpack_public_path__

          /******/


          __webpack_require__.p = "";
          /******/

          /******/
          // Load entry module and return exports

          /******/

          return __webpack_require__(__webpack_require__.s = 63);
          /******/
        }(
        /************************************************************************/

        /******/
        [
        /* 0 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray__ = __webpack_require__(57);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator__ = __webpack_require__(18);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__domTree__ = __webpack_require__(12);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__fontMetrics__ = __webpack_require__(30);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__symbols__ = __webpack_require__(28);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__utils__ = __webpack_require__(5);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_6__stretchy__ = __webpack_require__(13);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_7__units__ = __webpack_require__(19);
          /* eslint no-console:0 */

          /**
           * This module contains general functions that can be used for building
           * different kinds of domTree nodes in a consistent manner.
           */
          // The following have to be loaded from Main-Italic font, using class mainit


          var mainitLetters = ["\\imath", "ı", // dotless i
          "\\jmath", "ȷ", // dotless j
          "\\pounds", "\\mathsterling", "\\textsterling", "£"];
          /**
           * Looks up the given symbol in fontMetrics, after applying any symbol
           * replacements defined in symbol.js
           */

          var lookupSymbol = function lookupSymbol(value, // TODO(#963): Use a union type for this.
          fontFamily, mode) {
            // Replace the value with its replaced value from symbol.js
            if (__WEBPACK_IMPORTED_MODULE_4__symbols__["a"
            /* default */
            ][mode][value] && __WEBPACK_IMPORTED_MODULE_4__symbols__["a"
            /* default */
            ][mode][value].replace) {
              value = __WEBPACK_IMPORTED_MODULE_4__symbols__["a"
              /* default */
              ][mode][value].replace;
            }

            return {
              value: value,
              metrics: __WEBPACK_IMPORTED_MODULE_3__fontMetrics__["a"
              /* default */
              ].getCharacterMetrics(value, fontFamily, mode)
            };
          };
          /**
           * Makes a symbolNode after translation via the list of symbols in symbols.js.
           * Correctly pulls out metrics for the character, and optionally takes a list of
           * classes to be attached to the node.
           *
           * TODO: make argument order closer to makeSpan
           * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
           * should if present come first in `classes`.
           * TODO(#953): Make `options` mandatory and always pass it in.
           */


          var makeSymbol = function makeSymbol(value, fontFamily, mode, options, classes) {
            var lookup = lookupSymbol(value, fontFamily, mode);
            var metrics = lookup.metrics;
            value = lookup.value;
            var symbolNode = void 0;

            if (metrics) {
              var italic = metrics.italic;

              if (mode === "text") {
                italic = 0;
              }

              symbolNode = new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"
              /* default */
              ].symbolNode(value, metrics.height, metrics.depth, italic, metrics.skew, metrics.width, classes);
            } else {
              // TODO(emily): Figure out a good way to only print this in development
              typeof console !== "undefined" && console.warn("No character metrics for '" + value + "' in style '" + fontFamily + "'");
              symbolNode = new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"
              /* default */
              ].symbolNode(value, 0, 0, 0, 0, 0, classes);
            }

            if (options) {
              symbolNode.maxFontSize = options.sizeMultiplier;

              if (options.style.isTight()) {
                symbolNode.classes.push("mtight");
              }

              var color = options.getColor();

              if (color) {
                symbolNode.style.color = color;
              }
            }

            return symbolNode;
          };
          /**
           * Makes a symbol in Main-Regular or AMS-Regular.
           * Used for rel, bin, open, close, inner, and punct.
           *
           * TODO(#953): Make `options` mandatory and always pass it in.
           */


          var mathsym = function mathsym(value, mode, options) {
            var classes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : []; // Decide what font to render the symbol in by its entry in the symbols
            // table.
            // Have a special case for when the value = \ because the \ is used as a
            // textord in unsupported command errors but cannot be parsed as a regular
            // text ordinal and is therefore not present as a symbol in the symbols
            // table for text, as well as a special case for boldsymbol because it
            // can be used for bold + and -

            if (options && options.fontFamily && options.fontFamily === "boldsymbol" && lookupSymbol(value, "Main-Bold", mode).metrics) {
              return makeSymbol(value, "Main-Bold", mode, options, classes.concat(["mathbf"]));
            } else if (value === "\\" || __WEBPACK_IMPORTED_MODULE_4__symbols__["a"
            /* default */
            ][mode][value].font === "main") {
              return makeSymbol(value, "Main-Regular", mode, options, classes);
            } else {
              return makeSymbol(value, "AMS-Regular", mode, options, classes.concat(["amsrm"]));
            }
          };
          /**
           * Makes a symbol in the default font for mathords and textords.
           */


          var mathDefault = function mathDefault(value, mode, options, classes, type) {
            if (type === "mathord") {
              var fontLookup = mathit(value, mode, options, classes);
              return makeSymbol(value, fontLookup.fontName, mode, options, classes.concat([fontLookup.fontClass]));
            } else if (type === "textord") {
              var font = __WEBPACK_IMPORTED_MODULE_4__symbols__["a"
              /* default */
              ][mode][value] && __WEBPACK_IMPORTED_MODULE_4__symbols__["a"
              /* default */
              ][mode][value].font;

              if (font === "ams") {
                var _fontName = retrieveTextFontName("amsrm", options.fontWeight, options.fontShape);

                return makeSymbol(value, _fontName, mode, options, classes.concat("amsrm", options.fontWeight, options.fontShape));
              } else {
                // if (font === "main") {
                var _fontName2 = retrieveTextFontName("textrm", options.fontWeight, options.fontShape);

                return makeSymbol(value, _fontName2, mode, options, classes.concat(options.fontWeight, options.fontShape));
              }
            } else {
              throw new Error("unexpected type: " + type + " in mathDefault");
            }
          };
          /**
           * Determines which of the two font names (Main-Italic and Math-Italic) and
           * corresponding style tags (mainit or mathit) to use for font "mathit",
           * depending on the symbol.  Use this function instead of fontMap for font
           * "mathit".
           */


          var mathit = function mathit(value, mode, options, classes) {
            if (/[0-9]/.test(value.charAt(0)) || // glyphs for \imath and \jmath do not exist in Math-Italic so we
            // need to use Main-Italic instead
            __WEBPACK_IMPORTED_MODULE_5__utils__["a"
            /* default */
            ].contains(mainitLetters, value)) {
              return {
                fontName: "Main-Italic",
                fontClass: "mainit"
              };
            } else {
              return {
                fontName: "Math-Italic",
                fontClass: "mathit"
              };
            }
          };
          /**
           * Determines which of the two font names (Main-Bold and Math-BoldItalic) and
           * corresponding style tags (mathbf or boldsymbol) to use for font "boldsymbol",
           * depending on the symbol.  Use this function instead of fontMap for font
           * "boldsymbol".
           */


          var boldsymbol = function boldsymbol(value, mode, options, classes) {
            if (lookupSymbol(value, "Math-BoldItalic", mode).metrics) {
              return {
                fontName: "Math-BoldItalic",
                fontClass: "boldsymbol"
              };
            } else {
              // Some glyphs do not exist in Math-BoldItalic so we need to use
              // Main-Bold instead.
              return {
                fontName: "Main-Bold",
                fontClass: "mathbf"
              };
            }
          };
          /**
           * Makes either a mathord or textord in the correct font and color.
           */


          var makeOrd = function makeOrd(group, options, type) {
            var mode = group.mode;
            var value = group.value;
            var classes = ["mord"];
            var fontFamily = options.fontFamily;

            if (fontFamily) {
              var _fontName3 = void 0;

              var fontClasses = void 0;

              if (fontFamily === "boldsymbol") {
                var fontData = boldsymbol(value, mode, options, classes);
                _fontName3 = fontData.fontName;
                fontClasses = [fontData.fontClass];
              } else if (fontFamily === "mathit" || __WEBPACK_IMPORTED_MODULE_5__utils__["a"
              /* default */
              ].contains(mainitLetters, value)) {
                var _fontData = mathit(value, mode, options, classes);

                _fontName3 = _fontData.fontName;
                fontClasses = [_fontData.fontClass];
              } else if (fontFamily.indexOf("math") !== -1 || mode === "math") {
                // To support old font functions (i.e. \rm \sf etc.) or math mode.
                _fontName3 = fontMap[fontFamily].fontName;
                fontClasses = [fontFamily];
              } else {
                _fontName3 = retrieveTextFontName(fontFamily, options.fontWeight, options.fontShape);
                fontClasses = [fontFamily, options.fontWeight, options.fontShape];
              }

              if (lookupSymbol(value, _fontName3, mode).metrics) {
                return makeSymbol(value, _fontName3, mode, options, classes.concat(fontClasses));
              } else {
                return mathDefault(value, mode, options, classes, type);
              }
            } else {
              return mathDefault(value, mode, options, classes, type);
            }
          };
          /**
           * Combine as many characters as possible in the given array of characters
           * via their tryCombine method.
           */


          var tryCombineChars = function tryCombineChars(chars) {
            for (var i = 0; i < chars.length - 1; i++) {
              if (chars[i].tryCombine(chars[i + 1])) {
                chars.splice(i + 1, 1);
                i--;
              }
            }

            return chars;
          };
          /**
           * Calculate the height, depth, and maxFontSize of an element based on its
           * children.
           */


          var sizeElementFromChildren = function sizeElementFromChildren(elem) {
            var height = 0;
            var depth = 0;
            var maxFontSize = 0;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default()(elem.children), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var child = _step.value;

                if (child.height > height) {
                  height = child.height;
                }

                if (child.depth > depth) {
                  depth = child.depth;
                }

                if (child.maxFontSize > maxFontSize) {
                  maxFontSize = child.maxFontSize;
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator["return"]) {
                  _iterator["return"]();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            elem.height = height;
            elem.depth = depth;
            elem.maxFontSize = maxFontSize;
          };
          /**
           * Makes a span with the given list of classes, list of children, and options.
           *
           * TODO(#953): Ensure that `options` is always provided (currently some call
           * sites don't pass it) and make the type below mandatory.
           * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
           * should if present come first in `classes`.
           */


          var makeSpan = function makeSpan(classes, children, options, style) {
            var span = new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"
            /* default */
            ].span(classes, children, options, style);
            sizeElementFromChildren(span);
            return span;
          };

          var makeLineSpan = function makeLineSpan(className, options) {
            // Return a span with an SVG image of a horizontal line. The SVG path
            // fills the middle fifth of the span. We want an extra tall span
            // because Chrome will sometimes not display a span that is 0.04em tall.
            var lineHeight = options.fontMetrics().defaultRuleThickness;

            var line = __WEBPACK_IMPORTED_MODULE_6__stretchy__["a"
            /* default */
            ].ruleSpan(className, lineHeight, options);

            line.height = lineHeight;
            line.style.height = 5 * line.height + "em";
            line.maxFontSize = 1.0;
            return line;
          };
          /**
           * Makes an anchor with the given href, list of classes, list of children,
           * and options.
           */


          var makeAnchor = function makeAnchor(href, classes, children, options) {
            var anchor = new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"
            /* default */
            ].anchor(href, classes, children, options);
            sizeElementFromChildren(anchor);
            return anchor;
          };
          /**
           * Makes a document fragment with the given list of children.
           */


          var makeFragment = function makeFragment(children) {
            var fragment = new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"
            /* default */
            ].documentFragment(children);
            sizeElementFromChildren(fragment);
            return fragment;
          }; // These are exact object types to catch typos in the names of the optional fields.
          // A list of child or kern nodes to be stacked on top of each other (i.e. the
          // first element will be at the bottom, and the last at the top).
          // Computes the updated `children` list and the overall depth.
          //
          // This helper function for makeVList makes it easier to enforce type safety by
          // allowing early exits (returns) in the logic.


          var getVListChildrenAndDepth = function getVListChildrenAndDepth(params) {
            if (params.positionType === "individualShift") {
              var oldChildren = params.children;
              var _children = [oldChildren[0]]; // Add in kerns to the list of params.children to get each element to be
              // shifted to the correct specified shift

              var _depth = -oldChildren[0].shift - oldChildren[0].elem.depth;

              var currPos = _depth;

              for (var i = 1; i < oldChildren.length; i++) {
                var diff = -oldChildren[i].shift - currPos - oldChildren[i].elem.depth;

                var _size = diff - (oldChildren[i - 1].elem.height + oldChildren[i - 1].elem.depth);

                currPos = currPos + diff;

                _children.push({
                  type: "kern",
                  size: _size
                });

                _children.push(oldChildren[i]);
              }

              return {
                children: _children,
                depth: _depth
              };
            }

            var depth = void 0;

            if (params.positionType === "top") {
              // We always start at the bottom, so calculate the bottom by adding up
              // all the sizes
              var bottom = params.positionData;
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default()(params.children), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var child = _step2.value;
                  bottom -= child.type === "kern" ? child.size : child.elem.height + child.elem.depth;
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
                    _iterator2["return"]();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }

              depth = bottom;
            } else if (params.positionType === "bottom") {
              depth = -params.positionData;
            } else {
              var firstChild = params.children[0];

              if (firstChild.type !== "elem") {
                throw new Error('First child must have type "elem".');
              }

              if (params.positionType === "shift") {
                depth = -firstChild.elem.depth - params.positionData;
              } else if (params.positionType === "firstBaseline") {
                depth = -firstChild.elem.depth;
              } else {
                throw new Error("Invalid positionType " + params.positionType + ".");
              }
            }

            return {
              children: params.children,
              depth: depth
            };
          };
          /**
           * Makes a vertical list by stacking elements and kerns on top of each other.
           * Allows for many different ways of specifying the positioning method.
           *
           * See VListParam documentation above.
           */


          var makeVList = function makeVList(params, options) {
            var _getVListChildrenAndD = getVListChildrenAndDepth(params),
                children = _getVListChildrenAndD.children,
                depth = _getVListChildrenAndD.depth; // Create a strut that is taller than any list item. The strut is added to
            // each item, where it will determine the item's baseline. Since it has
            // `overflow:hidden`, the strut's top edge will sit on the item's line box's
            // top edge and the strut's bottom edge will sit on the item's baseline,
            // with no additional line-height spacing. This allows the item baseline to
            // be positioned precisely without worrying about font ascent and
            // line-height.


            var pstrutSize = 0;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              for (var _iterator3 = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default()(children), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var child = _step3.value;

                if (child.type === "elem") {
                  var _elem = child.elem;
                  pstrutSize = Math.max(pstrutSize, _elem.maxFontSize, _elem.height);
                }
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3["return"]) {
                  _iterator3["return"]();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }

            pstrutSize += 2;
            var pstrut = makeSpan(["pstrut"], []);
            pstrut.style.height = pstrutSize + "em"; // Create a new list of actual children at the correct offsets

            var realChildren = [];
            var minPos = depth;
            var maxPos = depth;
            var currPos = depth;
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default()(children), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var _child = _step4.value;

                if (_child.type === "kern") {
                  currPos += _child.size;
                } else {
                  var _elem2 = _child.elem;
                  var classes = _child.wrapperClasses || [];
                  var style = _child.wrapperStyle || {};
                  var childWrap = makeSpan(classes, [pstrut, _elem2], undefined, style);
                  childWrap.style.top = -pstrutSize - currPos - _elem2.depth + "em";

                  if (_child.marginLeft) {
                    childWrap.style.marginLeft = _child.marginLeft;
                  }

                  if (_child.marginRight) {
                    childWrap.style.marginRight = _child.marginRight;
                  }

                  realChildren.push(childWrap);
                  currPos += _elem2.height + _elem2.depth;
                }

                minPos = Math.min(minPos, currPos);
                maxPos = Math.max(maxPos, currPos);
              } // The vlist contents go in a table-cell with `vertical-align:bottom`.
              // This cell's bottom edge will determine the containing table's baseline
              // without overly expanding the containing line-box.

            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4["return"]) {
                  _iterator4["return"]();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }

            var vlist = makeSpan(["vlist"], realChildren);
            vlist.style.height = maxPos + "em"; // A second row is used if necessary to represent the vlist's depth.

            var rows = void 0;

            if (minPos < 0) {
              var depthStrut = makeSpan(["vlist"], []);
              depthStrut.style.height = -minPos + "em"; // Safari wants the first row to have inline content; otherwise it
              // puts the bottom of the *second* row on the baseline.

              var topStrut = makeSpan(["vlist-s"], [new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"
              /* default */
              ].symbolNode("\u200B")]);
              rows = [makeSpan(["vlist-r"], [vlist, topStrut]), makeSpan(["vlist-r"], [depthStrut])];
            } else {
              rows = [makeSpan(["vlist-r"], [vlist])];
            }

            var vtable = makeSpan(["vlist-t"], rows);

            if (rows.length === 2) {
              vtable.classes.push("vlist-t2");
            }

            vtable.height = maxPos;
            vtable.depth = -minPos;
            return vtable;
          }; // Converts verb group into body string, dealing with \verb* form


          var makeVerb = function makeVerb(group, options) {
            // TODO(#892): Make ParseNode type-safe and confirm `group.type` to guarantee
            // that `group.value.body` is of type string.
            var text = group.value.body;

            if (group.value.star) {
              text = text.replace(/ /g, "\u2423"); // Open Box
            } else {
              text = text.replace(/ /g, '\xA0'); // No-Break Space
              // (so that, in particular, spaces don't coalesce)
            }

            return text;
          }; // Glue is a concept from TeX which is a flexible space between elements in
          // either a vertical or horizontal list.  In KaTeX, at least for now, it's
          // static space between elements in a horizontal layout.


          var makeGlue = function makeGlue(measurement, options) {
            // Make an empty span for the rule
            var rule = makeSpan(["mord", "rule"], [], options);
            var size = Object(__WEBPACK_IMPORTED_MODULE_7__units__["a"
            /* calculateSize */
            ])(measurement, options);
            rule.style.marginRight = size + "em";
            return rule;
          }; // Takes an Options object, and returns the appropriate fontLookup


          var retrieveTextFontName = function retrieveTextFontName(fontFamily, fontWeight, fontShape) {
            var baseFontName = retrieveBaseFontName(fontFamily);
            var fontStylesName = retrieveFontStylesName(fontWeight, fontShape);
            return baseFontName + "-" + fontStylesName;
          };

          var retrieveBaseFontName = function retrieveBaseFontName(font) {
            var baseFontName = "";

            switch (font) {
              case "amsrm":
                baseFontName = "AMS";
                break;

              case "textrm":
                baseFontName = "Main";
                break;

              case "textsf":
                baseFontName = "SansSerif";
                break;

              case "texttt":
                baseFontName = "Typewriter";
                break;

              default:
                throw new Error("Invalid font provided: " + font);
            }

            return baseFontName;
          };

          var retrieveFontStylesName = function retrieveFontStylesName(fontWeight, fontShape) {
            var fontStylesName = '';

            if (fontWeight === "textbf") {
              fontStylesName += "Bold";
            }

            if (fontShape === "textit") {
              fontStylesName += "Italic";
            }

            return fontStylesName || "Regular";
          }; // A map of spacing functions to their attributes, like size and corresponding
          // CSS class


          var spacingFunctions = {
            "\\qquad": {
              size: "2em",
              className: "qquad"
            },
            "\\quad": {
              size: "1em",
              className: "quad"
            },
            "\\enspace": {
              size: "0.5em",
              className: "enspace"
            },
            "\\;": {
              size: "0.277778em",
              className: "thickspace"
            },
            "\\:": {
              size: "0.22222em",
              className: "mediumspace"
            },
            "\\,": {
              size: "0.16667em",
              className: "thinspace"
            },
            "\\!": {
              size: "-0.16667em",
              className: "negativethinspace"
            }
          };
          /**
           * Maps TeX font commands to objects containing:
           * - variant: string used for "mathvariant" attribute in buildMathML.js
           * - fontName: the "style" parameter to fontMetrics.getCharacterMetrics
           */
          // A map between tex font commands an MathML mathvariant attribute values

          var fontMap = {
            // styles
            "mathbf": {
              variant: "bold",
              fontName: "Main-Bold"
            },
            "mathrm": {
              variant: "normal",
              fontName: "Main-Regular"
            },
            "textit": {
              variant: "italic",
              fontName: "Main-Italic"
            },
            // "mathit" and "boldsymbol" are missing because they require the use of two
            // fonts: Main-Italic and Math-Italic for "mathit", and Math-BoldItalic and
            // Main-Bold for "boldsymbol".  This is handled by a special case in makeOrd
            // which ends up calling mathit and boldsymbol.
            // families
            "mathbb": {
              variant: "double-struck",
              fontName: "AMS-Regular"
            },
            "mathcal": {
              variant: "script",
              fontName: "Caligraphic-Regular"
            },
            "mathfrak": {
              variant: "fraktur",
              fontName: "Fraktur-Regular"
            },
            "mathscr": {
              variant: "script",
              fontName: "Script-Regular"
            },
            "mathsf": {
              variant: "sans-serif",
              fontName: "SansSerif-Regular"
            },
            "mathtt": {
              variant: "monospace",
              fontName: "Typewriter-Regular"
            }
          };
          var svgData = {
            //   path, width, height
            vec: ["vec", 0.471, 0.714] // values from the font glyph

          };

          var staticSvg = function staticSvg(value, options) {
            // Create a span with inline SVG for the element.
            var _svgData$value = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray___default()(svgData[value], 3),
                pathName = _svgData$value[0],
                width = _svgData$value[1],
                height = _svgData$value[2];

            var path = new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"
            /* default */
            ].pathNode(pathName);
            var svgNode = new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"
            /* default */
            ].svgNode([path], {
              "width": width + "em",
              "height": height + "em",
              // Override CSS rule `.katex svg { width: 100% }`
              "style": "width:" + width + "em",
              "viewBox": "0 0 " + 1000 * width + " " + 1000 * height,
              "preserveAspectRatio": "xMinYMin"
            });
            var span = makeSpan(["overlay"], [svgNode], options);
            span.height = height;
            span.style.height = height + "em";
            span.style.width = width + "em";
            return span;
          };
          /* harmony default export */


          __webpack_exports__["a"] = {
            fontMap: fontMap,
            makeSymbol: makeSymbol,
            mathsym: mathsym,
            makeSpan: makeSpan,
            makeLineSpan: makeLineSpan,
            makeAnchor: makeAnchor,
            makeFragment: makeFragment,
            makeVList: makeVList,
            makeOrd: makeOrd,
            makeVerb: makeVerb,
            makeGlue: makeGlue,
            staticSvg: staticSvg,
            svgData: svgData,
            tryCombineChars: tryCombineChars,
            spacingFunctions: spacingFunctions
          };
          /***/
        },
        /* 1 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__ = __webpack_require__(18);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__ = __webpack_require__(7);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass__ = __webpack_require__(10);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(5);
          /**
           * These objects store data about MathML nodes. This is the MathML equivalent
           * of the types in domTree.js. Since MathML handles its own rendering, and
           * since we're mainly using MathML to improve accessibility, we don't manage
           * any of the styling state that the plain DOM nodes do.
           *
           * The `toNode` and `toMarkup` functions work simlarly to how they do in
           * domTree.js, creating namespaced DOM nodes and HTML text markup respectively.
           */

          /**
           * MathML node types used in KaTeX. For a complete list of MathML nodes, see
           * https://developer.mozilla.org/en-US/docs/Web/MathML/Element.
           */

          /**
           * This node represents a general purpose MathML node of any type. The
           * constructor requires the type of node to create (for example, `"mo"` or
           * `"mspace"`, corresponding to `<mo>` and `<mspace>` tags).
           */


          var MathNode = function () {
            function MathNode(type, children) {
              __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default()(this, MathNode);

              this.type = type;
              this.attributes = {};
              this.children = children || [];
            }
            /**
             * Sets an attribute on a MathML node. MathML depends on attributes to convey a
             * semantic content, so this is used heavily.
             */


            __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass___default()(MathNode, [{
              key: "setAttribute",
              value: function setAttribute(name, value) {
                this.attributes[name] = value;
              }
              /**
               * Converts the math node into a MathML-namespaced DOM element.
               */

            }, {
              key: "toNode",
              value: function toNode() {
                var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", this.type);

                for (var attr in this.attributes) {
                  if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                    node.setAttribute(attr, this.attributes[attr]);
                  }
                }

                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                  for (var _iterator = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(this.children), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var child = _step.value;
                    node.appendChild(child.toNode());
                  }
                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion && _iterator["return"]) {
                      _iterator["return"]();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }

                return node;
              }
              /**
               * Converts the math node into an HTML markup string.
               */

            }, {
              key: "toMarkup",
              value: function toMarkup() {
                var markup = "<" + this.type; // Add the attributes

                for (var attr in this.attributes) {
                  if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                    markup += " " + attr + "=\"";
                    markup += __WEBPACK_IMPORTED_MODULE_3__utils__["a"
                    /* default */
                    ].escape(this.attributes[attr]);
                    markup += "\"";
                  }
                }

                markup += ">";

                for (var i = 0; i < this.children.length; i++) {
                  markup += this.children[i].toMarkup();
                }

                markup += "</" + this.type + ">";
                return markup;
              }
              /**
               * Converts the math node into a string, similar to innerText.
               */

            }, {
              key: "toText",
              value: function toText() {
                if (this.type === "mspace") {
                  if (this.attributes.width === "0.16667em") {
                    return "\u2006";
                  } else {
                    // TODO: Use other space characters for different widths.
                    // https://github.com/Khan/KaTeX/issues/1036
                    return " ";
                  }
                }

                return this.children.map(function (child) {
                  return child.toText();
                }).join("");
              }
            }]);

            return MathNode;
          }();
          /**
           * This node represents a piece of text.
           */


          var TextNode = function () {
            function TextNode(text) {
              __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default()(this, TextNode);

              this.text = text;
            }
            /**
             * Converts the text node into a DOM text node.
             */


            __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass___default()(TextNode, [{
              key: "toNode",
              value: function toNode() {
                return document.createTextNode(this.text);
              }
              /**
               * Converts the text node into HTML markup (which is just the text itself).
               */

            }, {
              key: "toMarkup",
              value: function toMarkup() {
                return __WEBPACK_IMPORTED_MODULE_3__utils__["a"
                /* default */
                ].escape(this.text);
              }
              /**
               * Converts the text node into a string (which is just the text iteself).
               */

            }, {
              key: "toText",
              value: function toText() {
                return this.text;
              }
            }]);

            return TextNode;
          }();
          /* harmony default export */


          __webpack_exports__["a"] = {
            MathNode: MathNode,
            TextNode: TextNode
          };
          /***/
        },
        /* 2 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony export (binding) */

          __webpack_require__.d(__webpack_exports__, "e", function () {
            return makeText;
          });
          /* harmony export (binding) */


          __webpack_require__.d(__webpack_exports__, "d", function () {
            return groupTypes;
          });
          /* harmony export (binding) */


          __webpack_require__.d(__webpack_exports__, "a", function () {
            return buildExpression;
          });
          /* harmony export (binding) */


          __webpack_require__.d(__webpack_exports__, "b", function () {
            return buildGroup;
          });
          /* harmony export (immutable) */


          __webpack_exports__["c"] = buildMathML;
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__fontMetrics__ = __webpack_require__(30);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__ParseError__ = __webpack_require__(6);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__Style__ = __webpack_require__(9);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__symbols__ = __webpack_require__(28);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_6__utils__ = __webpack_require__(5);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_7__stretchy__ = __webpack_require__(13);
          /**
           * WARNING: New methods on groupTypes should be added to src/functions.
           *
           * This file converts a parse tree into a cooresponding MathML tree. The main
           * entry point is the `buildMathML` function, which takes a parse tree from the
           * parser.
           */

          /**
           * Takes a symbol and converts it into a MathML text node after performing
           * optional replacement from symbols.js.
           */


          var makeText = function makeText(text, mode) {
            if (__WEBPACK_IMPORTED_MODULE_5__symbols__["a"
            /* default */
            ][mode][text] && __WEBPACK_IMPORTED_MODULE_5__symbols__["a"
            /* default */
            ][mode][text].replace) {
              text = __WEBPACK_IMPORTED_MODULE_5__symbols__["a"
              /* default */
              ][mode][text].replace;
            }

            return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].TextNode(text);
          };
          /**
           * Returns the math variant as a string or null if none is required.
           */


          var getVariant = function getVariant(group, options) {
            var font = options.fontFamily;

            if (!font) {
              return null;
            }

            var mode = group.mode;

            if (font === "mathit") {
              return "italic";
            } else if (font === "boldsymbol") {
              return "bold-italic";
            }

            var value = group.value;

            if (__WEBPACK_IMPORTED_MODULE_6__utils__["a"
            /* default */
            ].contains(["\\imath", "\\jmath"], value)) {
              return null;
            }

            if (__WEBPACK_IMPORTED_MODULE_5__symbols__["a"
            /* default */
            ][mode][value] && __WEBPACK_IMPORTED_MODULE_5__symbols__["a"
            /* default */
            ][mode][value].replace) {
              value = __WEBPACK_IMPORTED_MODULE_5__symbols__["a"
              /* default */
              ][mode][value].replace;
            }

            var fontName = __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"
            /* default */
            ].fontMap[font].fontName;

            if (__WEBPACK_IMPORTED_MODULE_1__fontMetrics__["a"
            /* default */
            ].getCharacterMetrics(value, fontName, mode)) {
              return __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"
              /* default */
              ].fontMap[font].variant;
            }

            return null;
          };
          /**
           * Functions for handling the different types of groups found in the parse
           * tree. Each function should take a parse group and return a MathML node.
           */


          var groupTypes = {};
          var defaultVariant = {
            "mi": "italic",
            "mn": "normal",
            "mtext": "normal"
          };

          groupTypes.mathord = function (group, options) {
            var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode("mi", [makeText(group.value, group.mode)]);
            var variant = getVariant(group, options) || "italic";

            if (variant !== defaultVariant[node.type]) {
              node.setAttribute("mathvariant", variant);
            }

            return node;
          };

          groupTypes.textord = function (group, options) {
            var text = makeText(group.value, group.mode);
            var variant = getVariant(group, options) || "normal";
            var node = void 0;

            if (group.mode === 'text') {
              node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mtext", [text]);
            } else if (/[0-9]/.test(group.value)) {
              // TODO(kevinb) merge adjacent <mn> nodes
              // do it as a post processing step
              node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mn", [text]);
            } else if (group.value === "\\prime") {
              node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mo", [text]);
            } else {
              node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mi", [text]);
            }

            if (variant !== defaultVariant[node.type]) {
              node.setAttribute("mathvariant", variant);
            }

            return node;
          };

          groupTypes.bin = function (group, options) {
            var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode("mo", [makeText(group.value, group.mode)]);
            var variant = getVariant(group, options);

            if (variant === "bold-italic") {
              node.setAttribute("mathvariant", variant);
            }

            return node;
          };

          groupTypes.rel = function (group) {
            var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode("mo", [makeText(group.value, group.mode)]);
            return node;
          };

          groupTypes.open = function (group) {
            var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode("mo", [makeText(group.value, group.mode)]);
            return node;
          };

          groupTypes.close = function (group) {
            var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode("mo", [makeText(group.value, group.mode)]);
            return node;
          };

          groupTypes.inner = function (group) {
            var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode("mo", [makeText(group.value, group.mode)]);
            return node;
          };

          groupTypes.punct = function (group) {
            var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode("mo", [makeText(group.value, group.mode)]);
            node.setAttribute("separator", "true");
            return node;
          };

          groupTypes.ordgroup = function (group, options) {
            var inner = buildExpression(group.value, options);
            var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode("mrow", inner);
            return node;
          };

          groupTypes.supsub = function (group, options) {
            // Is the inner group a relevant horizonal brace?
            var isBrace = false;
            var isOver = void 0;
            var isSup = void 0;

            if (group.value.base) {
              if (group.value.base.value.type === "horizBrace") {
                isSup = group.value.sup ? true : false;

                if (isSup === group.value.base.value.isOver) {
                  isBrace = true;
                  isOver = group.value.base.value.isOver;
                }
              }
            }

            var removeUnnecessaryRow = true;
            var children = [buildGroup(group.value.base, options, removeUnnecessaryRow)];

            if (group.value.sub) {
              children.push(buildGroup(group.value.sub, options, removeUnnecessaryRow));
            }

            if (group.value.sup) {
              children.push(buildGroup(group.value.sup, options, removeUnnecessaryRow));
            }

            var nodeType = void 0;

            if (isBrace) {
              nodeType = isOver ? "mover" : "munder";
            } else if (!group.value.sub) {
              var base = group.value.base;

              if (base && base.value.limits && options.style === __WEBPACK_IMPORTED_MODULE_4__Style__["a"
              /* default */
              ].DISPLAY) {
                nodeType = "mover";
              } else {
                nodeType = "msup";
              }
            } else if (!group.value.sup) {
              var _base = group.value.base;

              if (_base && _base.value.limits && options.style === __WEBPACK_IMPORTED_MODULE_4__Style__["a"
              /* default */
              ].DISPLAY) {
                nodeType = "munder";
              } else {
                nodeType = "msub";
              }
            } else {
              var _base2 = group.value.base;

              if (_base2 && _base2.value.limits && options.style === __WEBPACK_IMPORTED_MODULE_4__Style__["a"
              /* default */
              ].DISPLAY) {
                nodeType = "munderover";
              } else {
                nodeType = "msubsup";
              }
            }

            var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode(nodeType, children);
            return node;
          };

          groupTypes.spacing = function (group) {
            var node = void 0;

            if (group.value === "\\ " || group.value === "\\space" || group.value === " " || group.value === "~") {
              node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mtext", [new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].TextNode("\xA0")]);
            } else {
              node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mspace");
              node.setAttribute("width", __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"
              /* default */
              ].spacingFunctions[group.value].size);
            }

            return node;
          };

          groupTypes.horizBrace = function (group, options) {
            var accentNode = __WEBPACK_IMPORTED_MODULE_7__stretchy__["a"
            /* default */
            ].mathMLnode(group.value.label);

            return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode(group.value.isOver ? "mover" : "munder", [buildGroup(group.value.base, options), accentNode]);
          };

          groupTypes.xArrow = function (group, options) {
            var arrowNode = __WEBPACK_IMPORTED_MODULE_7__stretchy__["a"
            /* default */
            ].mathMLnode(group.value.label);

            var node = void 0;
            var lowerNode = void 0;

            if (group.value.body) {
              var upperNode = buildGroup(group.value.body, options);

              if (group.value.below) {
                lowerNode = buildGroup(group.value.below, options);
                node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
                /* default */
                ].MathNode("munderover", [arrowNode, lowerNode, upperNode]);
              } else {
                node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
                /* default */
                ].MathNode("mover", [arrowNode, upperNode]);
              }
            } else if (group.value.below) {
              lowerNode = buildGroup(group.value.below, options);
              node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("munder", [arrowNode, lowerNode]);
            } else {
              node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mover", [arrowNode]);
            }

            return node;
          };

          groupTypes.mclass = function (group, options) {
            var inner = buildExpression(group.value.value, options);
            return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode("mstyle", inner);
          };

          groupTypes.raisebox = function (group, options) {
            var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode("mpadded", [buildGroup(group.value.body, options)]);
            var dy = group.value.dy.value.number + group.value.dy.value.unit;
            node.setAttribute("voffset", dy);
            return node;
          };
          /**
           * Takes a list of nodes, builds them, and returns a list of the generated
           * MathML nodes. A little simpler than the HTML version because we don't do any
           * previous-node handling.
           */


          var buildExpression = function buildExpression(expression, options) {
            var groups = [];

            for (var i = 0; i < expression.length; i++) {
              var group = expression[i];
              groups.push(buildGroup(group, options));
            } // TODO(kevinb): combine \\not with mrels and mords


            return groups;
          };
          /**
           * Takes a group from the parser and calls the appropriate groupTypes function
           * on it to produce a MathML node.
           */


          var buildGroup = function buildGroup(group, options) {
            var removeUnnecessaryRow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            if (!group) {
              return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mrow");
            }

            if (groupTypes[group.type]) {
              // Call the groupTypes function
              var result = groupTypes[group.type](group, options);

              if (removeUnnecessaryRow) {
                if (result.type === "mrow" && result.children.length === 1) {
                  return result.children[0];
                }
              }

              return result;
            } else {
              throw new __WEBPACK_IMPORTED_MODULE_3__ParseError__["a"
              /* default */
              ]("Got group of unknown type: '" + group.type + "'");
            }
          };
          /**
           * Takes a full parse tree and settings and builds a MathML representation of
           * it. In particular, we put the elements from building the parse tree into a
           * <semantics> tag so we can also include that TeX source as an annotation.
           *
           * Note that we actually return a domTree element with a `<math>` inside it so
           * we can do appropriate styling.
           */


          function buildMathML(tree, texExpression, options) {
            var expression = buildExpression(tree, options); // Wrap up the expression in an mrow so it is presented in the semantics
            // tag correctly.

            var wrapper = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode("mrow", expression); // Build a TeX annotation of the source

            var annotation = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode("annotation", [new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].TextNode(texExpression)]);
            annotation.setAttribute("encoding", "application/x-tex");
            var semantics = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode("semantics", [wrapper, annotation]);
            var math = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode("math", [semantics]); // You can't style <math> nodes, so we wrap the node in a span.

            return __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"
            /* default */
            ].makeSpan(["katex-mathml"], [math]);
          }
          /***/

        },
        /* 3 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony export (binding) */

          __webpack_require__.d(__webpack_exports__, "a", function () {
            return _functions;
          });
          /* harmony export (immutable) */


          __webpack_exports__["b"] = defineFunction;
          /* harmony export (binding) */

          __webpack_require__.d(__webpack_exports__, "c", function () {
            return ordargument;
          });
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildMathML__ = __webpack_require__(2);
          /** Context provided to function handlers for error messages. */
          // TODO: Enumerate all allowed output types.

          /**
           * Final function spec for use at parse time.
           * This is almost identical to `FunctionPropSpec`, except it
           * 1. includes the function handler, and
           * 2. requires all arguments except argTypes.
           * It is generated by `defineFunction()` below.
           */

          /**
           * All registered functions.
           * `functions.js` just exports this same dictionary again and makes it public.
           * `Parser.js` requires this dictionary.
           */


          var _functions = {};

          function defineFunction(_ref) {
            var type = _ref.type,
                names = _ref.names,
                props = _ref.props,
                handler = _ref.handler,
                htmlBuilder = _ref.htmlBuilder,
                mathmlBuilder = _ref.mathmlBuilder; // Set default values of functions

            var data = {
              numArgs: props.numArgs,
              argTypes: props.argTypes,
              greediness: props.greediness === undefined ? 1 : props.greediness,
              allowedInText: !!props.allowedInText,
              allowedInMath: props.allowedInMath === undefined ? true : props.allowedInMath,
              numOptionalArgs: props.numOptionalArgs || 0,
              infix: !!props.infix,
              handler: handler
            };

            for (var i = 0; i < names.length; ++i) {
              _functions[names[i]] = data;
            }

            if (type) {
              if (htmlBuilder) {
                __WEBPACK_IMPORTED_MODULE_0__buildHTML__["d"
                /* groupTypes */
                ][type] = htmlBuilder;
              }

              if (mathmlBuilder) {
                __WEBPACK_IMPORTED_MODULE_1__buildMathML__["d"
                /* groupTypes */
                ][type] = mathmlBuilder;
              }
            }
          } // Since the corresponding buildHTML/buildMathML function expects a
          // list of elements, we normalize for different kinds of arguments


          var ordargument = function ordargument(arg) {
            if (arg.type === "ordgroup") {
              return arg.value;
            } else {
              return [arg];
            }
          };
          /***/

        },
        /* 4 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony export (binding) */

          __webpack_require__.d(__webpack_exports__, "a", function () {
            return buildExpression;
          });
          /* unused harmony export getTypeOfDomTree */

          /* unused harmony export isLeftTight */

          /* harmony export (binding) */


          __webpack_require__.d(__webpack_exports__, "e", function () {
            return makeNullDelimiter;
          });
          /* harmony export (binding) */


          __webpack_require__.d(__webpack_exports__, "d", function () {
            return groupTypes;
          });
          /* harmony export (binding) */


          __webpack_require__.d(__webpack_exports__, "b", function () {
            return buildGroup;
          });
          /* harmony export (immutable) */


          __webpack_exports__["c"] = buildHTML;
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__ = __webpack_require__(77);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_toConsumableArray__ = __webpack_require__(35);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_toConsumableArray___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_toConsumableArray__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__ParseError__ = __webpack_require__(6);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__Style__ = __webpack_require__(9);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__domTree__ = __webpack_require__(12);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_6__units__ = __webpack_require__(19);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_7__utils__ = __webpack_require__(5);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_8__stretchy__ = __webpack_require__(13);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_9__spacingData__ = __webpack_require__(112);
          /**
           * WARNING: New methods on groupTypes should be added to src/functions.
           *
           * This file does the main work of building a domTree structure from a parse
           * tree. The entry point is the `buildHTML` function, which takes a parse tree.
           * Then, the buildExpression, buildGroup, and various groupTypes functions are
           * called, to produce a final HTML tree.
           */


          var makeSpan = __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
          /* default */
          ].makeSpan; // Binary atoms (first class `mbin`) change into ordinary atoms (`mord`)
          // depending on their surroundings. See TeXbook pg. 442-446, Rules 5 and 6,
          // and the text before Rule 19.

          var isBinLeftCanceller = function isBinLeftCanceller(node, isRealGroup) {
            // TODO: This code assumes that a node's math class is the first element
            // of its `classes` array. A later cleanup should ensure this, for
            // instance by changing the signature of `makeSpan`.
            if (node) {
              return __WEBPACK_IMPORTED_MODULE_7__utils__["a"
              /* default */
              ].contains(["mbin", "mopen", "mrel", "mop", "mpunct"], getTypeOfDomTree(node, "right"));
            } else {
              return isRealGroup;
            }
          };

          var isBinRightCanceller = function isBinRightCanceller(node, isRealGroup) {
            if (node) {
              return __WEBPACK_IMPORTED_MODULE_7__utils__["a"
              /* default */
              ].contains(["mrel", "mclose", "mpunct"], getTypeOfDomTree(node, "left"));
            } else {
              return isRealGroup;
            }
          };

          var styleMap = {
            "display": __WEBPACK_IMPORTED_MODULE_3__Style__["a"
            /* default */
            ].DISPLAY,
            "text": __WEBPACK_IMPORTED_MODULE_3__Style__["a"
            /* default */
            ].TEXT,
            "script": __WEBPACK_IMPORTED_MODULE_3__Style__["a"
            /* default */
            ].SCRIPT,
            "scriptscript": __WEBPACK_IMPORTED_MODULE_3__Style__["a"
            /* default */
            ].SCRIPTSCRIPT
          };
          /**
           * Take a list of nodes, build them in order, and return a list of the built
           * nodes. documentFragments are flattened into their contents, so the
           * returned list contains no fragments. `isRealGroup` is true if `expression`
           * is a real group (no atoms will be added on either side), as opposed to
           * a partial group (e.g. one created by \color). `surrounding` is an array
           * consisting type of nodes that will be added to the left and right.
           */

          var buildExpression = function buildExpression(expression, options, isRealGroup) {
            var surrounding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [null, null]; // Parse expressions into `groups`.

            var rawGroups = [];

            for (var i = 0; i < expression.length; i++) {
              var group = expression[i];
              var output = buildGroup(group, options);

              if (output instanceof __WEBPACK_IMPORTED_MODULE_5__domTree__["a"
              /* default */
              ].documentFragment) {
                rawGroups.push.apply(rawGroups, __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_toConsumableArray___default()(output.children));
              } else {
                rawGroups.push(output);
              }
            } // At this point `rawGroups` consists entirely of `symbolNode`s and `span`s.
            // Ignore explicit spaces (e.g., \;, \,) when determining what implicit
            // spacing should go between atoms of different classes, and add dummy
            // spans for determining spacings between surrounding atoms


            var nonSpaces = [surrounding[0] && makeSpan([surrounding[0]], [], options)].concat(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_toConsumableArray___default()(rawGroups.filter(function (group) {
              return group && group.classes[0] !== "mspace";
            })), [surrounding[1] && makeSpan([surrounding[1]], [], options)]); // Before determining what spaces to insert, perform bin cancellation.
            // Binary operators change to ordinary symbols in some contexts.

            for (var _i = 1; _i < nonSpaces.length - 1; _i++) {
              var left = getOutermostNode(nonSpaces[_i], "left");

              if (left.classes[0] === "mbin" && isBinLeftCanceller(nonSpaces[_i - 1], isRealGroup)) {
                left.classes[0] = "mord";
              }

              var right = getOutermostNode(nonSpaces[_i], "right");

              if (right.classes[0] === "mbin" && isBinRightCanceller(nonSpaces[_i + 1], isRealGroup)) {
                right.classes[0] = "mord";
              }
            }

            var groups = [];
            var j = 0;

            for (var _i2 = 0; _i2 < rawGroups.length; _i2++) {
              groups.push(rawGroups[_i2]); // For any group that is not a space, get the next non-space.  Then
              // lookup what implicit space should be placed between those atoms and
              // add it to groups.

              if (rawGroups[_i2].classes[0] !== "mspace" && j < nonSpaces.length - 1) {
                // if current non-space node is left dummy span, add a glue before
                // first real non-space node
                if (j === 0) {
                  groups.pop();
                  _i2--;
                } // Get the type of the current non-space node.  If it's a document
                // fragment, get the type of the rightmost node in the fragment.


                var _left = getTypeOfDomTree(nonSpaces[j], "right"); // Get the type of the next non-space node.  If it's a document
                // fragment, get the type of the leftmost node in the fragment.


                var _right = getTypeOfDomTree(nonSpaces[j + 1], "left"); // We use buildExpression inside of sizingGroup, but it returns a
                // document fragment of elements.  sizingGroup sets `isRealGroup`
                // to false to avoid processing spans multiple times.


                if (_left && _right && isRealGroup) {
                  var space = isLeftTight(nonSpaces[j + 1]) ? __WEBPACK_IMPORTED_MODULE_9__spacingData__["b"
                  /* tightSpacings */
                  ][_left][_right] : __WEBPACK_IMPORTED_MODULE_9__spacingData__["a"
                  /* spacings */
                  ][_left][_right];

                  if (space) {
                    var glueOptions = options;

                    if (expression.length === 1) {
                      if (expression[0].type === "sizing") {
                        glueOptions = options.havingSize(expression[0].value.size);
                      } else if (expression[0].type === "styling") {
                        glueOptions = options.havingStyle(styleMap[expression[0].value.style]);
                      }
                    }

                    groups.push(__WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
                    /* default */
                    ].makeGlue(space, glueOptions));
                  }
                }

                j++;
              }
            } // Process \\not commands within the group.


            for (var _i3 = 0; _i3 < groups.length; _i3++) {
              if (groups[_i3].value === "\u0338") {
                groups[_i3].style.position = "absolute"; // TODO(kevinb) fix this for Safari by switching to a non-combining
                // character for \not.
                // This value was determined empirically.
                // TODO(kevinb) figure out the real math for this value.

                groups[_i3].style.paddingLeft = "0.8em";
              }
            }

            return groups;
          }; // Return the outermost node of a domTree.


          var getOutermostNode = function getOutermostNode(node) {
            var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "right";

            if (node instanceof __WEBPACK_IMPORTED_MODULE_5__domTree__["a"
            /* default */
            ].documentFragment || node instanceof __WEBPACK_IMPORTED_MODULE_5__domTree__["a"
            /* default */
            ].anchor) {
              if (node.children.length) {
                if (side === "right") {
                  return getOutermostNode(node.children[node.children.length - 1]);
                } else if (side === "left") {
                  return getOutermostNode(node.children[0]);
                }
              }
            }

            return node;
          }; // Return math atom class (mclass) of a domTree.


          var getTypeOfDomTree = function getTypeOfDomTree(node) {
            var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "right";

            if (!node) {
              return null;
            }

            node = getOutermostNode(node, side); // This makes a lot of assumptions as to where the type of atom
            // appears.  We should do a better job of enforcing this.

            if (__WEBPACK_IMPORTED_MODULE_7__utils__["a"
            /* default */
            ].contains(["mord", "mop", "mbin", "mrel", "mopen", "mclose", "mpunct", "minner"], node.classes[0])) {
              return node.classes[0];
            }

            return null;
          }; // If `node` is an atom return whether it's been assigned the mtight class.
          // If `node` is a document fragment, return the value of isLeftTight() for the
          // leftmost node in the fragment.
          // 'mtight' indicates that the node is script or scriptscript style.


          var isLeftTight = function isLeftTight(node) {
            node = getOutermostNode(node, "left");
            return __WEBPACK_IMPORTED_MODULE_7__utils__["a"
            /* default */
            ].contains(node.classes, "mtight");
          };
          /**
           * Sometimes, groups perform special rules when they have superscripts or
           * subscripts attached to them. This function lets the `supsub` group know that
           * its inner element should handle the superscripts and subscripts instead of
           * handling them itself.
           */


          var shouldHandleSupSub = function shouldHandleSupSub(group, options) {
            if (!group.value.base) {
              return false;
            } else {
              var base = group.value.base;

              if (base.type === "op") {
                // Operators handle supsubs differently when they have limits
                // (e.g. `\displaystyle\sum_2^3`)
                return base.value.limits && (options.style.size === __WEBPACK_IMPORTED_MODULE_3__Style__["a"
                /* default */
                ].DISPLAY.size || base.value.alwaysHandleSupSub);
              } else if (base.type === "accent") {
                return __WEBPACK_IMPORTED_MODULE_7__utils__["a"
                /* default */
                ].isCharacterBox(base.value.base);
              } else if (base.type === "horizBrace") {
                var isSup = group.value.sub ? false : true;
                return isSup === base.value.isOver;
              } else {
                return null;
              }
            }
          };

          var makeNullDelimiter = function makeNullDelimiter(options, classes) {
            var moreClasses = ["nulldelimiter"].concat(options.baseSizingClasses());
            return makeSpan(classes.concat(moreClasses));
          };
          /**
           * This is a map of group types to the function used to handle that type.
           * Simpler types come at the beginning, while complicated types come afterwards.
           */


          var groupTypes = {};

          groupTypes.mathord = function (group, options) {
            return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
            /* default */
            ].makeOrd(group, options, "mathord");
          };

          groupTypes.textord = function (group, options) {
            return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
            /* default */
            ].makeOrd(group, options, "textord");
          };

          groupTypes.bin = function (group, options) {
            return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
            /* default */
            ].mathsym(group.value, group.mode, options, ["mbin"]);
          };

          groupTypes.rel = function (group, options) {
            return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
            /* default */
            ].mathsym(group.value, group.mode, options, ["mrel"]);
          };

          groupTypes.open = function (group, options) {
            return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
            /* default */
            ].mathsym(group.value, group.mode, options, ["mopen"]);
          };

          groupTypes.close = function (group, options) {
            return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
            /* default */
            ].mathsym(group.value, group.mode, options, ["mclose"]);
          };

          groupTypes.inner = function (group, options) {
            return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
            /* default */
            ].mathsym(group.value, group.mode, options, ["minner"]);
          };

          groupTypes.punct = function (group, options) {
            return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
            /* default */
            ].mathsym(group.value, group.mode, options, ["mpunct"]);
          };

          groupTypes.ordgroup = function (group, options) {
            return makeSpan(["mord"], buildExpression(group.value, options, true), options);
          };

          groupTypes.supsub = function (group, options) {
            // Superscript and subscripts are handled in the TeXbook on page
            // 445-446, rules 18(a-f).
            // Here is where we defer to the inner group if it should handle
            // superscripts and subscripts itself.
            if (shouldHandleSupSub(group, options)) {
              return groupTypes[group.value.base.type](group, options);
            }

            var base = buildGroup(group.value.base, options);
            var supm = void 0;
            var subm = void 0;
            var metrics = options.fontMetrics();
            var newOptions = void 0; // Rule 18a

            var supShift = 0;
            var subShift = 0;

            if (group.value.sup) {
              newOptions = options.havingStyle(options.style.sup());
              supm = buildGroup(group.value.sup, newOptions, options);

              if (!__WEBPACK_IMPORTED_MODULE_7__utils__["a"
              /* default */
              ].isCharacterBox(group.value.base)) {
                supShift = base.height - newOptions.fontMetrics().supDrop * newOptions.sizeMultiplier / options.sizeMultiplier;
              }
            }

            if (group.value.sub) {
              newOptions = options.havingStyle(options.style.sub());
              subm = buildGroup(group.value.sub, newOptions, options);

              if (!__WEBPACK_IMPORTED_MODULE_7__utils__["a"
              /* default */
              ].isCharacterBox(group.value.base)) {
                subShift = base.depth + newOptions.fontMetrics().subDrop * newOptions.sizeMultiplier / options.sizeMultiplier;
              }
            } // Rule 18c


            var minSupShift = void 0;

            if (options.style === __WEBPACK_IMPORTED_MODULE_3__Style__["a"
            /* default */
            ].DISPLAY) {
              minSupShift = metrics.sup1;
            } else if (options.style.cramped) {
              minSupShift = metrics.sup3;
            } else {
              minSupShift = metrics.sup2;
            } // scriptspace is a font-size-independent size, so scale it
            // appropriately


            var multiplier = options.sizeMultiplier;
            var scriptspace = 0.5 / metrics.ptPerEm / multiplier + "em";
            var supsub = void 0;

            if (!group.value.sup) {
              // Rule 18b
              subShift = Math.max(subShift, metrics.sub1, subm.height - 0.8 * metrics.xHeight);
              var vlistElem = [{
                type: "elem",
                elem: subm,
                marginRight: scriptspace
              }]; // Subscripts shouldn't be shifted by the base's italic correction.
              // Account for that by shifting the subscript back the appropriate
              // amount. Note we only do this when the base is a single symbol.

              if (base instanceof __WEBPACK_IMPORTED_MODULE_5__domTree__["a"
              /* default */
              ].symbolNode) {
                vlistElem[0].marginLeft = -base.italic + "em";
              }

              supsub = __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
              /* default */
              ].makeVList({
                positionType: "shift",
                positionData: subShift,
                children: vlistElem
              }, options);
            } else if (!group.value.sub) {
              // Rule 18c, d
              supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
              supsub = __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
              /* default */
              ].makeVList({
                positionType: "shift",
                positionData: -supShift,
                children: [{
                  type: "elem",
                  elem: supm,
                  marginRight: scriptspace
                }]
              }, options);
            } else {
              supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
              subShift = Math.max(subShift, metrics.sub2);
              var ruleWidth = metrics.defaultRuleThickness; // Rule 18e

              if (supShift - supm.depth - (subm.height - subShift) < 4 * ruleWidth) {
                subShift = 4 * ruleWidth - (supShift - supm.depth) + subm.height;
                var psi = 0.8 * metrics.xHeight - (supShift - supm.depth);

                if (psi > 0) {
                  supShift += psi;
                  subShift -= psi;
                }
              }

              var _vlistElem = [{
                type: "elem",
                elem: subm,
                shift: subShift,
                marginRight: scriptspace
              }, {
                type: "elem",
                elem: supm,
                shift: -supShift,
                marginRight: scriptspace
              }]; // See comment above about subscripts not being shifted

              if (base instanceof __WEBPACK_IMPORTED_MODULE_5__domTree__["a"
              /* default */
              ].symbolNode) {
                _vlistElem[0].marginLeft = -base.italic + "em";
              }

              supsub = __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
              /* default */
              ].makeVList({
                positionType: "individualShift",
                children: _vlistElem
              }, options);
            } // We ensure to wrap the supsub vlist in a span.msupsub to reset text-align


            var mclass = getTypeOfDomTree(base) || "mord";
            return makeSpan([mclass], [base, makeSpan(["msupsub"], [supsub])], options);
          };

          groupTypes.spacing = function (group, options) {
            if (group.value === "\\ " || group.value === "\\space" || group.value === " " || group.value === "~") {
              // Spaces are generated by adding an actual space. Each of these
              // things has an entry in the symbols table, so these will be turned
              // into appropriate outputs.
              if (group.mode === "text") {
                return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
                /* default */
                ].makeOrd(group, options, "textord");
              } else {
                return makeSpan(["mspace"], [__WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
                /* default */
                ].mathsym(group.value, group.mode, options)], options);
              }
            } else {
              // Other kinds of spaces are of arbitrary width. We use CSS to
              // generate these.
              return makeSpan(["mspace", __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
              /* default */
              ].spacingFunctions[group.value].className], [], options);
            }
          };

          groupTypes.horizBrace = function (group, options) {
            var style = options.style;
            var hasSupSub = group.type === "supsub";
            var supSubGroup = void 0;
            var newOptions = void 0;

            if (hasSupSub) {
              // Ref: LaTeX source2e: }}}}\limits}
              // i.e. LaTeX treats the brace similar to an op and passes it
              // with \limits, so we need to assign supsub style.
              if (group.value.sup) {
                newOptions = options.havingStyle(style.sup());
                supSubGroup = buildGroup(group.value.sup, newOptions, options);
              } else {
                newOptions = options.havingStyle(style.sub());
                supSubGroup = buildGroup(group.value.sub, newOptions, options);
              }

              group = group.value.base;
            } // Build the base group


            var body = buildGroup(group.value.base, options.havingBaseStyle(__WEBPACK_IMPORTED_MODULE_3__Style__["a"
            /* default */
            ].DISPLAY)); // Create the stretchy element

            var braceBody = __WEBPACK_IMPORTED_MODULE_8__stretchy__["a"
            /* default */
            ].svgSpan(group, options); // Generate the vlist, with the appropriate kerns               ┏━━━━━━━━┓
            // This first vlist contains the subject matter and the brace:   equation


            var vlist = void 0;

            if (group.value.isOver) {
              vlist = __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
              /* default */
              ].makeVList({
                positionType: "firstBaseline",
                children: [{
                  type: "elem",
                  elem: body
                }, {
                  type: "kern",
                  size: 0.1
                }, {
                  type: "elem",
                  elem: braceBody
                }]
              }, options);
              vlist.children[0].children[0].children[1].classes.push("svg-align");
            } else {
              vlist = __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
              /* default */
              ].makeVList({
                positionType: "bottom",
                positionData: body.depth + 0.1 + braceBody.height,
                children: [{
                  type: "elem",
                  elem: braceBody
                }, {
                  type: "kern",
                  size: 0.1
                }, {
                  type: "elem",
                  elem: body
                }]
              }, options);
              vlist.children[0].children[0].children[0].classes.push("svg-align");
            }

            if (hasSupSub) {
              // In order to write the supsub, wrap the first vlist in another vlist:
              // They can't all go in the same vlist, because the note might be wider
              // than the equation. We want the equation to control the brace width.
              //      note          long note           long note
              //   ┏━━━━━━━━┓   or    ┏━━━┓     not    ┏━━━━━━━━━┓
              //    equation           eqn                 eqn
              var vSpan = makeSpan(["mord", group.value.isOver ? "mover" : "munder"], [vlist], options);

              if (group.value.isOver) {
                vlist = __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
                /* default */
                ].makeVList({
                  positionType: "firstBaseline",
                  children: [{
                    type: "elem",
                    elem: vSpan
                  }, {
                    type: "kern",
                    size: 0.2
                  }, {
                    type: "elem",
                    elem: supSubGroup
                  }]
                }, options);
              } else {
                vlist = __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
                /* default */
                ].makeVList({
                  positionType: "bottom",
                  positionData: vSpan.depth + 0.2 + supSubGroup.height,
                  children: [{
                    type: "elem",
                    elem: supSubGroup
                  }, {
                    type: "kern",
                    size: 0.2
                  }, {
                    type: "elem",
                    elem: vSpan
                  }]
                }, options);
              }
            }

            return makeSpan(["mord", group.value.isOver ? "mover" : "munder"], [vlist], options);
          };

          groupTypes.xArrow = function (group, options) {
            var style = options.style; // Build the argument groups in the appropriate style.
            // Ref: amsmath.dtx:   \hbox{$\scriptstyle\mkern#3mu{#6}\mkern#4mu$}%

            var newOptions = options.havingStyle(style.sup());
            var upperGroup = buildGroup(group.value.body, newOptions, options);
            upperGroup.classes.push("x-arrow-pad");
            var lowerGroup = void 0;

            if (group.value.below) {
              // Build the lower group
              newOptions = options.havingStyle(style.sub());
              lowerGroup = buildGroup(group.value.below, newOptions, options);
              lowerGroup.classes.push("x-arrow-pad");
            }

            var arrowBody = __WEBPACK_IMPORTED_MODULE_8__stretchy__["a"
            /* default */
            ].svgSpan(group, options); // Re shift: Note that stretchy.svgSpan returned arrowBody.depth = 0.
            // The point we want on the math axis is at 0.5 * arrowBody.height.


            var arrowShift = -options.fontMetrics().axisHeight + 0.5 * arrowBody.height; // 2 mu kern. Ref: amsmath.dtx: #7\if0#2\else\mkern#2mu\fi

            var upperShift = -options.fontMetrics().axisHeight - 0.5 * arrowBody.height - 0.111;

            if (group.value.label === "\\xleftequilibrium") {
              upperShift -= upperGroup.depth;
            } // Generate the vlist


            var vlist = void 0;

            if (group.value.below) {
              var lowerShift = -options.fontMetrics().axisHeight + lowerGroup.height + 0.5 * arrowBody.height + 0.111;
              vlist = __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
              /* default */
              ].makeVList({
                positionType: "individualShift",
                children: [{
                  type: "elem",
                  elem: upperGroup,
                  shift: upperShift
                }, {
                  type: "elem",
                  elem: arrowBody,
                  shift: arrowShift
                }, {
                  type: "elem",
                  elem: lowerGroup,
                  shift: lowerShift
                }]
              }, options);
            } else {
              vlist = __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
              /* default */
              ].makeVList({
                positionType: "individualShift",
                children: [{
                  type: "elem",
                  elem: upperGroup,
                  shift: upperShift
                }, {
                  type: "elem",
                  elem: arrowBody,
                  shift: arrowShift
                }]
              }, options);
            }

            vlist.children[0].children[0].children[1].classes.push("svg-align");
            return makeSpan(["mrel", "x-arrow"], [vlist], options);
          };

          groupTypes.mclass = function (group, options) {
            var elements = buildExpression(group.value.value, options, true);
            return makeSpan([group.value.mclass], elements, options);
          };

          groupTypes.raisebox = function (group, options) {
            var body = groupTypes.sizing({
              value: {
                value: [{
                  type: "text",
                  value: {
                    body: group.value.value,
                    font: "mathrm" // simulate \textrm

                  }
                }],
                size: 6 // simulate \normalsize

              }
            }, options);
            var dy = Object(__WEBPACK_IMPORTED_MODULE_6__units__["a"
            /* calculateSize */
            ])(group.value.dy.value, options);
            return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"
            /* default */
            ].makeVList({
              positionType: "shift",
              positionData: -dy,
              children: [{
                type: "elem",
                elem: body
              }]
            }, options);
          };
          /**
           * buildGroup is the function that takes a group and calls the correct groupType
           * function for it. It also handles the interaction of size and style changes
           * between parents and children.
           */


          var buildGroup = function buildGroup(group, options, baseOptions) {
            if (!group) {
              return makeSpan();
            }

            if (groupTypes[group.type]) {
              // Call the groupTypes function
              var groupNode = groupTypes[group.type](group, options); // If the size changed between the parent and the current group, account
              // for that size difference.

              if (baseOptions && options.size !== baseOptions.size) {
                groupNode = makeSpan(options.sizingClasses(baseOptions), [groupNode], options);
                var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier;
                groupNode.height *= multiplier;
                groupNode.depth *= multiplier;
              }

              return groupNode;
            } else {
              throw new __WEBPACK_IMPORTED_MODULE_2__ParseError__["a"
              /* default */
              ]("Got group of unknown type: '" + group.type + "'");
            }
          };
          /**
           * Take an entire parse tree, and build it into an appropriate set of HTML
           * nodes.
           */


          function buildHTML(tree, options) {
            // buildExpression is destructive, so we need to make a clone
            // of the incoming tree so that it isn't accidentally changed
            tree = JSON.parse(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default()(tree)); // Build the expression contained in the tree

            var expression = buildExpression(tree, options, true);
            var body = makeSpan(["base"], expression, options); // Add struts, which ensure that the top of the HTML element falls at the
            // height of the expression, and the bottom of the HTML element falls at the
            // depth of the expression.

            var topStrut = makeSpan(["strut"]);
            var bottomStrut = makeSpan(["strut", "bottom"]);
            topStrut.style.height = body.height + "em";
            bottomStrut.style.height = body.height + body.depth + "em"; // We'd like to use `vertical-align: top` but in IE 9 this lowers the
            // baseline of the box to the bottom of this strut (instead staying in the
            // normal place) so we use an absolute value for vertical-align instead

            bottomStrut.style.verticalAlign = -body.depth + "em"; // Wrap the struts and body together

            var htmlNode = makeSpan(["katex-html"], [topStrut, bottomStrut, body]);
            htmlNode.setAttribute("aria-hidden", "true");
            return htmlNode;
          }
          /***/

        },
        /* 5 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /**
           * This file contains a list of utility functions which are useful in other
           * files.
           */

          /**
           * Provide an `indexOf` function which works in IE8, but defers to native if
           * possible.
           */

          var nativeIndexOf = Array.prototype.indexOf;

          var indexOf = function indexOf(list, elem) {
            if (list == null) {
              return -1;
            }

            if (nativeIndexOf && list.indexOf === nativeIndexOf) {
              return list.indexOf(elem);
            }

            var l = list.length;

            for (var i = 0; i < l; i++) {
              if (list[i] === elem) {
                return i;
              }
            }

            return -1;
          };
          /**
           * Return whether an element is contained in a list
           */


          var contains = function contains(list, elem) {
            return indexOf(list, elem) !== -1;
          };
          /**
           * Provide a default value if a setting is undefined
           * NOTE: Couldn't use `T` as the output type due to facebook/flow#5022.
           */


          var deflt = function deflt(setting, defaultIfUndefined) {
            return setting === undefined ? defaultIfUndefined : setting;
          }; // hyphenate and escape adapted from Facebook's React under Apache 2 license


          var uppercase = /([A-Z])/g;

          var hyphenate = function hyphenate(str) {
            return str.replace(uppercase, "-$1").toLowerCase();
          };

          var ESCAPE_LOOKUP = {
            "&": "&amp;",
            ">": "&gt;",
            "<": "&lt;",
            "\"": "&quot;",
            "'": "&#x27;"
          };
          var ESCAPE_REGEX = /[&><"']/g;
          /**
           * Escapes text to prevent scripting attacks.
           */

          function escape(text) {
            return String(text).replace(ESCAPE_REGEX, function (match) {
              return ESCAPE_LOOKUP[match];
            });
          }
          /**
           * A function to set the text content of a DOM element in all supported
           * browsers. Note that we don't define this if there is no document.
           */


          var setTextContent = void 0;

          if (typeof document !== "undefined") {
            var testNode = document.createElement("span");

            if ("textContent" in testNode) {
              setTextContent = function setTextContent(node, text) {
                node.textContent = text;
              };
            } else {
              setTextContent = function setTextContent(node, text) {
                node.innerText = text;
              };
            }
          }
          /**
           * A function to clear a node.
           */


          function clearNode(node) {
            setTextContent(node, "");
          }
          /**
           * Sometimes we want to pull out the innermost element of a group. In most
           * cases, this will just be the group itself, but when ordgroups and colors have
           * a single element, we want to pull that out.
           */


          var getBaseElem = function getBaseElem(group) {
            if (!group) {
              return false;
            } else if (group.type === "ordgroup") {
              if (group.value.length === 1) {
                return getBaseElem(group.value[0]);
              } else {
                return group;
              }
            } else if (group.type === "color") {
              if (group.value.value.length === 1) {
                return getBaseElem(group.value.value[0]);
              } else {
                return group;
              }
            } else if (group.type === "font") {
              return getBaseElem(group.value.body);
            } else {
              return group;
            }
          };
          /**
           * TeXbook algorithms often reference "character boxes", which are simply groups
           * with a single character in them. To decide if something is a character box,
           * we find its innermost group, and see if it is a single character.
           */


          var isCharacterBox = function isCharacterBox(group) {
            var baseElem = getBaseElem(group); // These are all they types of groups which hold single characters

            return baseElem.type === "mathord" || baseElem.type === "textord" || baseElem.type === "bin" || baseElem.type === "rel" || baseElem.type === "inner" || baseElem.type === "open" || baseElem.type === "close" || baseElem.type === "punct";
          };
          /* harmony default export */


          __webpack_exports__["a"] = {
            contains: contains,
            deflt: deflt,
            escape: escape,
            hyphenate: hyphenate,
            indexOf: indexOf,
            setTextContent: setTextContent,
            clearNode: clearNode,
            getBaseElem: getBaseElem,
            isCharacterBox: isCharacterBox
          };
          /***/
        },
        /* 6 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__ = __webpack_require__(7);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__ParseNode__ = __webpack_require__(14);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__Token__ = __webpack_require__(27);
          /**
           * This is the ParseError class, which is the main error thrown by KaTeX
           * functions when something has gone wrong. This is used to distinguish internal
           * errors from errors in the expression that the user provided.
           *
           * If possible, a caller should provide a Token or ParseNode with information
           * about where in the source string the problem occurred.
           */


          var ParseError = // Error position based on passed-in Token or ParseNode.
          function ParseError(message, // The error message
          token) // An object providing position information
          {
            __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this, ParseError);

            var error = "KaTeX parse error: " + message;
            var start = void 0;
            var loc = token && token.loc;

            if (loc && loc.start <= loc.end) {
              // If we have the input and a position, make the error a bit fancier
              // Get the input
              var input = loc.lexer.input; // Prepend some information

              start = loc.start;
              var end = loc.end;

              if (start === input.length) {
                error += " at end of input: ";
              } else {
                error += " at position " + (start + 1) + ": ";
              } // Underline token in question using combining underscores


              var underlined = input.slice(start, end).replace(/[^]/g, "$&\u0332"); // Extract some context from the input and add it to the error

              var left = void 0;

              if (start > 15) {
                left = "…" + input.slice(start - 15, start);
              } else {
                left = input.slice(0, start);
              }

              var right = void 0;

              if (end + 15 < input.length) {
                right = input.slice(end, end + 15) + "…";
              } else {
                right = input.slice(end);
              }

              error += left + underlined + right;
            } // Some hackery to make ParseError a prototype of Error
            // See http://stackoverflow.com/a/8460753


            var self = new Error(error);
            self.name = "ParseError"; // $FlowFixMe

            self.__proto__ = ParseError.prototype; // $FlowFixMe

            self.position = start;
            return self;
          }; // $FlowFixMe More hackery


          ParseError.prototype.__proto__ = Error.prototype;
          /* harmony default export */

          __webpack_exports__["a"] = ParseError;
          /***/
        },
        /* 7 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict";

          exports.__esModule = true;

          exports["default"] = function (instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          };
          /***/

        },
        /* 8 */

        /***/
        function (module, exports) {
          var core = module.exports = {
            version: '2.4.0'
          };
          if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

          /***/
        },
        /* 9 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__ = __webpack_require__(7);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__ = __webpack_require__(10);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__);
          /**
           * This file contains information and classes for the various kinds of styles
           * used in TeX. It provides a generic `Style` class, which holds information
           * about a specific style. It then provides instances of all the different kinds
           * of styles possible, and provides functions to move between them and get
           * information about them.
           */

          /**
           * The main style class. Contains a unique id for the style, a size (which is
           * the same for cramped and uncramped version of a style), and a cramped flag.
           */


          var Style = function () {
            function Style(id, size, cramped) {
              __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this, Style);

              this.id = id;
              this.size = size;
              this.cramped = cramped;
            }
            /**
             * Get the style of a superscript given a base in the current style.
             */


            __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default()(Style, [{
              key: "sup",
              value: function sup() {
                return styles[_sup[this.id]];
              }
              /**
               * Get the style of a subscript given a base in the current style.
               */

            }, {
              key: "sub",
              value: function sub() {
                return styles[_sub[this.id]];
              }
              /**
               * Get the style of a fraction numerator given the fraction in the current
               * style.
               */

            }, {
              key: "fracNum",
              value: function fracNum() {
                return styles[_fracNum[this.id]];
              }
              /**
               * Get the style of a fraction denominator given the fraction in the current
               * style.
               */

            }, {
              key: "fracDen",
              value: function fracDen() {
                return styles[_fracDen[this.id]];
              }
              /**
               * Get the cramped version of a style (in particular, cramping a cramped style
               * doesn't change the style).
               */

            }, {
              key: "cramp",
              value: function cramp() {
                return styles[_cramp[this.id]];
              }
              /**
               * Get a text or display version of this style.
               */

            }, {
              key: "text",
              value: function text() {
                return styles[_text[this.id]];
              }
              /**
               * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)
               */

            }, {
              key: "isTight",
              value: function isTight() {
                return this.size >= 2;
              }
            }]);

            return Style;
          }(); // Export an interface for type checking, but don't expose the implementation.
          // This way, no more styles can be generated.
          // IDs of the different styles


          var D = 0;
          var Dc = 1;
          var T = 2;
          var Tc = 3;
          var S = 4;
          var Sc = 5;
          var SS = 6;
          var SSc = 7; // Instances of the different styles

          var styles = [new Style(D, 0, false), new Style(Dc, 0, true), new Style(T, 1, false), new Style(Tc, 1, true), new Style(S, 2, false), new Style(Sc, 2, true), new Style(SS, 3, false), new Style(SSc, 3, true)]; // Lookup tables for switching from one style to another

          var _sup = [S, Sc, S, Sc, SS, SSc, SS, SSc];
          var _sub = [Sc, Sc, Sc, Sc, SSc, SSc, SSc, SSc];
          var _fracNum = [T, Tc, S, Sc, SS, SSc, SS, SSc];
          var _fracDen = [Tc, Tc, Sc, Sc, SSc, SSc, SSc, SSc];
          var _cramp = [Dc, Dc, Tc, Tc, Sc, Sc, SSc, SSc];
          var _text = [D, Dc, T, Tc, T, Tc, T, Tc]; // We only export some of the styles.

          /* harmony default export */

          __webpack_exports__["a"] = {
            DISPLAY: styles[D],
            TEXT: styles[T],
            SCRIPT: styles[S],
            SCRIPTSCRIPT: styles[SS]
          };
          /***/
        },
        /* 10 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict";

          exports.__esModule = true;

          var _defineProperty = __webpack_require__(73);

          var _defineProperty2 = _interopRequireDefault(_defineProperty);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              "default": obj
            };
          }

          exports["default"] = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                (0, _defineProperty2["default"])(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();
          /***/

        },
        /* 11 */

        /***/
        function (module, exports, __webpack_require__) {
          var store = __webpack_require__(52)('wks'),
              uid = __webpack_require__(32),
              Symbol = __webpack_require__(16).Symbol,
              USE_SYMBOL = typeof Symbol == 'function';

          var $exports = module.exports = function (name) {
            return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
          };

          $exports.store = store;
          /***/
        },
        /* 12 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__ = __webpack_require__(18);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign__ = __webpack_require__(105);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck__ = __webpack_require__(7);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass__ = __webpack_require__(10);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__unicodeScripts__ = __webpack_require__(42);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__utils__ = __webpack_require__(5);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_6__svgGeometry__ = __webpack_require__(111);
          /**
           * These objects store the data about the DOM nodes we create, as well as some
           * extra data. They can then be transformed into real DOM nodes with the
           * `toNode` function or HTML markup using `toMarkup`. They are useful for both
           * storing extra properties on the nodes, as well as providing a way to easily
           * work with the DOM.
           *
           * Similar functions for working with MathML nodes exist in mathMLTree.js.
           */

          /**
           * Create an HTML className based on a list of classes. In addition to joining
           * with spaces, we also remove null or empty classes.
           */


          var createClass = function createClass(classes) {
            classes = classes.slice();

            for (var i = classes.length - 1; i >= 0; i--) {
              if (!classes[i]) {
                classes.splice(i, 1);
              }
            }

            return classes.join(" ");
          }; // To ensure that all nodes have compatible signatures for these methods.

          /**
           * All `DomChildNode`s MUST have `height`, `depth`, and `maxFontSize` numeric
           * fields.
           *
           * `DomChildNode` is not defined as an interface since `documentFragment` also
           * has these fields but should not be considered a `DomChildNode`.
           */

          /**
           * This node represents a span node, with a className, a list of children, and
           * an inline style. It also contains information about its height, depth, and
           * maxFontSize.
           */


          var span = function () {
            function span(classes, children, options, style) {
              __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck___default()(this, span);

              this.classes = classes || [];
              this.children = children || [];
              this.height = 0;
              this.depth = 0;
              this.maxFontSize = 0;
              this.style = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign___default()({}, style);
              this.attributes = {};

              if (options) {
                if (options.style.isTight()) {
                  this.classes.push("mtight");
                }

                var color = options.getColor();

                if (color) {
                  this.style.color = color;
                }
              }
            }
            /**
             * Sets an arbitrary attribute on the span. Warning: use this wisely. Not all
             * browsers support attributes the same, and having too many custom attributes
             * is probably bad.
             */


            __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass___default()(span, [{
              key: "setAttribute",
              value: function setAttribute(attribute, value) {
                this.attributes[attribute] = value;
              }
            }, {
              key: "tryCombine",
              value: function tryCombine(sibling) {
                return false;
              }
              /**
               * Convert the span into an HTML node
               */

            }, {
              key: "toNode",
              value: function toNode() {
                var span = document.createElement("span"); // Apply the class

                span.className = createClass(this.classes); // Apply inline styles

                for (var style in this.style) {
                  if (Object.prototype.hasOwnProperty.call(this.style, style)) {
                    // $FlowFixMe Flow doesn't seem to understand span.style's type.
                    span.style[style] = this.style[style];
                  }
                } // Apply attributes


                for (var attr in this.attributes) {
                  if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                    span.setAttribute(attr, this.attributes[attr]);
                  }
                } // Append the children, also as HTML nodes


                for (var i = 0; i < this.children.length; i++) {
                  span.appendChild(this.children[i].toNode());
                }

                return span;
              }
              /**
               * Convert the span into an HTML markup string
               */

            }, {
              key: "toMarkup",
              value: function toMarkup() {
                var markup = "<span"; // Add the class

                if (this.classes.length) {
                  markup += " class=\"";
                  markup += __WEBPACK_IMPORTED_MODULE_5__utils__["a"
                  /* default */
                  ].escape(createClass(this.classes));
                  markup += "\"";
                }

                var styles = ""; // Add the styles, after hyphenation

                for (var style in this.style) {
                  if (this.style.hasOwnProperty(style)) {
                    styles += __WEBPACK_IMPORTED_MODULE_5__utils__["a"
                    /* default */
                    ].hyphenate(style) + ":" + this.style[style] + ";";
                  }
                }

                if (styles) {
                  markup += " style=\"" + __WEBPACK_IMPORTED_MODULE_5__utils__["a"
                  /* default */
                  ].escape(styles) + "\"";
                } // Add the attributes


                for (var attr in this.attributes) {
                  if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                    markup += " " + attr + "=\"";
                    markup += __WEBPACK_IMPORTED_MODULE_5__utils__["a"
                    /* default */
                    ].escape(this.attributes[attr]);
                    markup += "\"";
                  }
                }

                markup += ">"; // Add the markup of the children, also as markup

                for (var i = 0; i < this.children.length; i++) {
                  markup += this.children[i].toMarkup();
                }

                markup += "</span>";
                return markup;
              }
            }]);

            return span;
          }();
          /**
           * This node represents an anchor (<a>) element with a hyperlink, a list of classes,
           * a list of children, and an inline style. It also contains information about its
           * height, depth, and maxFontSize.
           */


          var anchor = function () {
            function anchor(href, classes, children, options) {
              __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck___default()(this, anchor);

              this.href = href;
              this.classes = classes;
              this.children = children;
              this.height = 0;
              this.depth = 0;
              this.maxFontSize = 0;
              this.style = {};
              this.attributes = {};

              if (options.style.isTight()) {
                this.classes.push("mtight");
              }

              var color = options.getColor();

              if (color) {
                this.style.color = color;
              }
            }
            /**
             * Sets an arbitrary attribute on the anchor. Warning: use this wisely. Not all
             * browsers support attributes the same, and having too many custom attributes
             * is probably bad.
             */


            __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass___default()(anchor, [{
              key: "setAttribute",
              value: function setAttribute(attribute, value) {
                this.attributes[attribute] = value;
              }
            }, {
              key: "tryCombine",
              value: function tryCombine(sibling) {
                return false;
              }
              /**
               * Convert the anchor into an HTML node
               */

            }, {
              key: "toNode",
              value: function toNode() {
                var a = document.createElement("a"); // Apply the href

                a.setAttribute('href', this.href); // Apply the class

                if (this.classes.length) {
                  a.className = createClass(this.classes);
                } // Apply inline styles


                for (var style in this.style) {
                  if (Object.prototype.hasOwnProperty.call(this.style, style)) {
                    // $FlowFixMe Flow doesn't seem to understand a.style's type.
                    a.style[style] = this.style[style];
                  }
                } // Apply attributes


                for (var attr in this.attributes) {
                  if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                    a.setAttribute(attr, this.attributes[attr]);
                  }
                } // Append the children, also as HTML nodes


                for (var i = 0; i < this.children.length; i++) {
                  a.appendChild(this.children[i].toNode());
                }

                return a;
              }
              /**
               * Convert the a into an HTML markup string
               */

            }, {
              key: "toMarkup",
              value: function toMarkup() {
                var markup = "<a"; // Add the href

                markup += "href=\"" + (markup += __WEBPACK_IMPORTED_MODULE_5__utils__["a"
                /* default */
                ].escape(this.href)) + "\""; // Add the class

                if (this.classes.length) {
                  markup += " class=\"" + __WEBPACK_IMPORTED_MODULE_5__utils__["a"
                  /* default */
                  ].escape(createClass(this.classes)) + "\"";
                }

                var styles = ""; // Add the styles, after hyphenation

                for (var style in this.style) {
                  if (this.style.hasOwnProperty(style)) {
                    styles += __WEBPACK_IMPORTED_MODULE_5__utils__["a"
                    /* default */
                    ].hyphenate(style) + ":" + this.style[style] + ";";
                  }
                }

                if (styles) {
                  markup += " style=\"" + __WEBPACK_IMPORTED_MODULE_5__utils__["a"
                  /* default */
                  ].escape(styles) + "\"";
                } // Add the attributes


                for (var attr in this.attributes) {
                  if (attr !== "href" && Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                    markup += " " + attr + "=\"" + __WEBPACK_IMPORTED_MODULE_5__utils__["a"
                    /* default */
                    ].escape(this.attributes[attr]) + "\"";
                  }
                }

                markup += ">"; // Add the markup of the children, also as markup

                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                  for (var _iterator = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(this.children), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var child = _step.value;
                    markup += child.toMarkup();
                  }
                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion && _iterator["return"]) {
                      _iterator["return"]();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }

                markup += "</a>";
                return markup;
              }
            }]);

            return anchor;
          }();
          /**
           * This node represents a document fragment, which contains elements, but when
           * placed into the DOM doesn't have any representation itself. Thus, it only
           * contains children and doesn't have any HTML properties. It also keeps track
           * of a height, depth, and maxFontSize.
           */


          var documentFragment = function () {
            function documentFragment(children) {
              __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck___default()(this, documentFragment);

              this.children = children || [];
              this.height = 0;
              this.depth = 0;
              this.maxFontSize = 0;
            }
            /**
             * Convert the fragment into a node
             */


            __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass___default()(documentFragment, [{
              key: "toNode",
              value: function toNode() {
                // Create a fragment
                var frag = document.createDocumentFragment(); // Append the children

                for (var i = 0; i < this.children.length; i++) {
                  frag.appendChild(this.children[i].toNode());
                }

                return frag;
              }
              /**
               * Convert the fragment into HTML markup
               */

            }, {
              key: "toMarkup",
              value: function toMarkup() {
                var markup = ""; // Simply concatenate the markup for the children together

                for (var i = 0; i < this.children.length; i++) {
                  markup += this.children[i].toMarkup();
                }

                return markup;
              }
            }]);

            return documentFragment;
          }();

          var iCombinations = {
            'î': "\u0131\u0302",
            'ï': "\u0131\u0308",
            'í': "\u0131\u0301",
            // 'ī': '\u0131\u0304', // enable when we add Extended Latin
            'ì': "\u0131\u0300"
          };
          /**
           * A symbol node contains information about a single symbol. It either renders
           * to a single text node, or a span with a single text node in it, depending on
           * whether it has CSS classes, styles, or needs italic correction.
           */

          var symbolNode = function () {
            function symbolNode(value, height, depth, italic, skew, width, classes, style) {
              __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck___default()(this, symbolNode);

              this.value = value;
              this.height = height || 0;
              this.depth = depth || 0;
              this.italic = italic || 0;
              this.skew = skew || 0;
              this.width = width || 0;
              this.classes = classes || [];
              this.style = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign___default()({}, style);
              this.maxFontSize = 0; // Mark text from non-Latin scripts with specific classes so that we
              // can specify which fonts to use.  This allows us to render these
              // characters with a serif font in situations where the browser would
              // either default to a sans serif or render a placeholder character.
              // We use CSS class names like cjk_fallback, hangul_fallback and
              // brahmic_fallback. See ./unicodeScripts.js for the set of possible
              // script names

              var script = Object(__WEBPACK_IMPORTED_MODULE_4__unicodeScripts__["a"
              /* scriptFromCodepoint */
              ])(this.value.charCodeAt(0));

              if (script) {
                this.classes.push(script + "_fallback");
              }

              if (/[îïíì]/.test(this.value)) {
                // add ī when we add Extended Latin
                this.value = iCombinations[this.value];
              }
            }

            __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass___default()(symbolNode, [{
              key: "tryCombine",
              value: function tryCombine(sibling) {
                if (!sibling || !(sibling instanceof symbolNode) || this.italic > 0 || createClass(this.classes) !== createClass(sibling.classes) || this.skew !== sibling.skew || this.maxFontSize !== sibling.maxFontSize) {
                  return false;
                }

                for (var style in this.style) {
                  if (this.style.hasOwnProperty(style) && this.style[style] !== sibling.style[style]) {
                    return false;
                  }
                }

                for (var _style in sibling.style) {
                  if (sibling.style.hasOwnProperty(_style) && this.style[_style] !== sibling.style[_style]) {
                    return false;
                  }
                }

                this.value += sibling.value;
                this.height = Math.max(this.height, sibling.height);
                this.depth = Math.max(this.depth, sibling.depth);
                this.italic = sibling.italic;
                return true;
              }
              /**
               * Creates a text node or span from a symbol node. Note that a span is only
               * created if it is needed.
               */

            }, {
              key: "toNode",
              value: function toNode() {
                var node = document.createTextNode(this.value);
                var span = null;

                if (this.italic > 0) {
                  span = document.createElement("span");
                  span.style.marginRight = this.italic + "em";
                }

                if (this.classes.length > 0) {
                  span = span || document.createElement("span");
                  span.className = createClass(this.classes);
                }

                for (var style in this.style) {
                  if (this.style.hasOwnProperty(style)) {
                    span = span || document.createElement("span"); // $FlowFixMe Flow doesn't seem to understand span.style's type.

                    span.style[style] = this.style[style];
                  }
                }

                if (span) {
                  span.appendChild(node);
                  return span;
                } else {
                  return node;
                }
              }
              /**
               * Creates markup for a symbol node.
               */

            }, {
              key: "toMarkup",
              value: function toMarkup() {
                // TODO(alpert): More duplication than I'd like from
                // span.prototype.toMarkup and symbolNode.prototype.toNode...
                var needsSpan = false;
                var markup = "<span";

                if (this.classes.length) {
                  needsSpan = true;
                  markup += " class=\"";
                  markup += __WEBPACK_IMPORTED_MODULE_5__utils__["a"
                  /* default */
                  ].escape(createClass(this.classes));
                  markup += "\"";
                }

                var styles = "";

                if (this.italic > 0) {
                  styles += "margin-right:" + this.italic + "em;";
                }

                for (var style in this.style) {
                  if (this.style.hasOwnProperty(style)) {
                    styles += __WEBPACK_IMPORTED_MODULE_5__utils__["a"
                    /* default */
                    ].hyphenate(style) + ":" + this.style[style] + ";";
                  }
                }

                if (styles) {
                  needsSpan = true;
                  markup += " style=\"" + __WEBPACK_IMPORTED_MODULE_5__utils__["a"
                  /* default */
                  ].escape(styles) + "\"";
                }

                var escaped = __WEBPACK_IMPORTED_MODULE_5__utils__["a"
                /* default */
                ].escape(this.value);

                if (needsSpan) {
                  markup += ">";
                  markup += escaped;
                  markup += "</span>";
                  return markup;
                } else {
                  return escaped;
                }
              }
            }]);

            return symbolNode;
          }();
          /**
           * SVG nodes are used to render stretchy wide elements.
           */


          var svgNode = function () {
            function svgNode(children, attributes) {
              __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck___default()(this, svgNode);

              this.children = children || [];
              this.attributes = attributes || {};
              this.height = 0;
              this.depth = 0;
              this.maxFontSize = 0;
            } // Required for all `DomChildNode`s. Are always 0 for svgNode.


            __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass___default()(svgNode, [{
              key: "toNode",
              value: function toNode() {
                var svgNS = "http://www.w3.org/2000/svg";
                var node = document.createElementNS(svgNS, "svg"); // Apply attributes

                for (var attr in this.attributes) {
                  if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                    node.setAttribute(attr, this.attributes[attr]);
                  }
                }

                for (var i = 0; i < this.children.length; i++) {
                  node.appendChild(this.children[i].toNode());
                }

                return node;
              }
            }, {
              key: "toMarkup",
              value: function toMarkup() {
                var markup = "<svg"; // Apply attributes

                for (var attr in this.attributes) {
                  if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                    markup += " " + attr + "='" + this.attributes[attr] + "'";
                  }
                }

                markup += ">";

                for (var i = 0; i < this.children.length; i++) {
                  markup += this.children[i].toMarkup();
                }

                markup += "</svg>";
                return markup;
              }
            }]);

            return svgNode;
          }();

          var pathNode = function () {
            function pathNode(pathName, alternate) {
              __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck___default()(this, pathNode);

              this.pathName = pathName;
              this.alternate = alternate; // Used only for tall \sqrt
            }

            __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass___default()(pathNode, [{
              key: "toNode",
              value: function toNode() {
                var svgNS = "http://www.w3.org/2000/svg";
                var node = document.createElementNS(svgNS, "path");

                if (this.alternate) {
                  node.setAttribute("d", this.alternate);
                } else {
                  node.setAttribute("d", __WEBPACK_IMPORTED_MODULE_6__svgGeometry__["a"
                  /* default */
                  ].path[this.pathName]);
                }

                return node;
              }
            }, {
              key: "toMarkup",
              value: function toMarkup() {
                if (this.alternate) {
                  return "<path d='" + this.alternate + "'/>";
                } else {
                  return "<path d='" + __WEBPACK_IMPORTED_MODULE_6__svgGeometry__["a"
                  /* default */
                  ].path[this.pathName] + "'/>";
                }
              }
            }]);

            return pathNode;
          }();

          var lineNode = function () {
            function lineNode(attributes) {
              __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck___default()(this, lineNode);

              this.attributes = attributes || {};
            }

            __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass___default()(lineNode, [{
              key: "toNode",
              value: function toNode() {
                var svgNS = "http://www.w3.org/2000/svg";
                var node = document.createElementNS(svgNS, "line"); // Apply attributes

                for (var attr in this.attributes) {
                  if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                    node.setAttribute(attr, this.attributes[attr]);
                  }
                }

                return node;
              }
            }, {
              key: "toMarkup",
              value: function toMarkup() {
                var markup = "<line";

                for (var attr in this.attributes) {
                  if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                    markup += " " + attr + "='" + this.attributes[attr] + "'";
                  }
                }

                markup += "/>";
                return markup;
              }
            }]);

            return lineNode;
          }();
          /* harmony default export */


          __webpack_exports__["a"] = {
            span: span,
            anchor: anchor,
            documentFragment: documentFragment,
            symbolNode: symbolNode,
            svgNode: svgNode,
            pathNode: pathNode,
            lineNode: lineNode
          };
          /***/
        },
        /* 13 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray__ = __webpack_require__(57);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__domTree__ = __webpack_require__(12);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__utils__ = __webpack_require__(5);
          /**
           * This file provides support to buildMathML.js and buildHTML.js
           * for stretchy wide elements rendered from SVG files
           * and other CSS trickery.
           */


          var stretchyCodePoint = {
            widehat: "^",
            widetilde: "~",
            utilde: "~",
            overleftarrow: "\u2190",
            underleftarrow: "\u2190",
            xleftarrow: "\u2190",
            overrightarrow: "\u2192",
            underrightarrow: "\u2192",
            xrightarrow: "\u2192",
            underbrace: "\u23B5",
            overbrace: "\u23DE",
            overleftrightarrow: "\u2194",
            underleftrightarrow: "\u2194",
            xleftrightarrow: "\u2194",
            Overrightarrow: "\u21D2",
            xRightarrow: "\u21D2",
            overleftharpoon: "\u21BC",
            xleftharpoonup: "\u21BC",
            overrightharpoon: "\u21C0",
            xrightharpoonup: "\u21C0",
            xLeftarrow: "\u21D0",
            xLeftrightarrow: "\u21D4",
            xhookleftarrow: "\u21A9",
            xhookrightarrow: "\u21AA",
            xmapsto: "\u21A6",
            xrightharpoondown: "\u21C1",
            xleftharpoondown: "\u21BD",
            xrightleftharpoons: "\u21CC",
            xleftrightharpoons: "\u21CB",
            xtwoheadleftarrow: "\u219E",
            xtwoheadrightarrow: "\u21A0",
            xlongequal: "=",
            xtofrom: "\u21C4",
            xrightleftarrows: "\u21C4",
            xrightequilibrium: "\u21CC",
            // Not a perfect match.
            xleftequilibrium: "\u21CB" // None better available.

          };

          var mathMLnode = function mathMLnode(label) {
            var node = new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
            /* default */
            ].MathNode("mo", [new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
            /* default */
            ].TextNode(stretchyCodePoint[label.substr(1)])]);
            node.setAttribute("stretchy", "true");
            return node;
          }; // Many of the KaTeX SVG images have been adapted from glyphs in KaTeX fonts.
          // Copyright (c) 2009-2010, Design Science, Inc. (<www.mathjax.org>)
          // Copyright (c) 2014-2017 Khan Academy (<www.khanacademy.org>)
          // Licensed under the SIL Open Font License, Version 1.1.
          // See \nhttp://scripts.sil.org/OFL
          // Very Long SVGs
          //    Many of the KaTeX stretchy wide elements use a long SVG image and an
          //    overflow: hidden tactic to achieve a stretchy image while avoiding
          //    distortion of arrowheads or brace corners.
          //    The SVG typically contains a very long (400 em) arrow.
          //    The SVG is in a container span that has overflow: hidden, so the span
          //    acts like a window that exposes only part of the  SVG.
          //    The SVG always has a longer, thinner aspect ratio than the container span.
          //    After the SVG fills 100% of the height of the container span,
          //    there is a long arrow shaft left over. That left-over shaft is not shown.
          //    Instead, it is sliced off because the span's CSS has overflow: hidden.
          //    Thus, the reader sees an arrow that matches the subject matter width
          //    without distortion.
          //    Some functions, such as \cancel, need to vary their aspect ratio. These
          //    functions do not get the overflow SVG treatment.
          // Second Brush Stroke
          //    Low resolution monitors struggle to display images in fine detail.
          //    So browsers apply anti-aliasing. A long straight arrow shaft therefore
          //    will sometimes appear as if it has a blurred edge.
          //    To mitigate this, these SVG files contain a second "brush-stroke" on the
          //    arrow shafts. That is, a second long thin rectangular SVG path has been
          //    written directly on top of each arrow shaft. This reinforcement causes
          //    some of the screen pixels to display as black instead of the anti-aliased
          //    gray pixel that a  single path would generate. So we get arrow shafts
          //    whose edges appear to be sharper.
          // In the katexImagesData object just below, the dimensions all
          // correspond to path geometry inside the relevant SVG.
          // For example, \overrightarrow uses the same arrowhead as glyph U+2192
          // from the KaTeX Main font. The scaling factor is 1000.
          // That is, inside the font, that arrowhead is 522 units tall, which
          // corresponds to 0.522 em inside the document.


          var katexImagesData = {
            //   path(s), minWidth, height, align
            overrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
            overleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
            underrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
            underleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
            xrightarrow: [["rightarrow"], 1.469, 522, "xMaxYMin"],
            xleftarrow: [["leftarrow"], 1.469, 522, "xMinYMin"],
            Overrightarrow: [["doublerightarrow"], 0.888, 560, "xMaxYMin"],
            xRightarrow: [["doublerightarrow"], 1.526, 560, "xMaxYMin"],
            xLeftarrow: [["doubleleftarrow"], 1.526, 560, "xMinYMin"],
            overleftharpoon: [["leftharpoon"], 0.888, 522, "xMinYMin"],
            xleftharpoonup: [["leftharpoon"], 0.888, 522, "xMinYMin"],
            xleftharpoondown: [["leftharpoondown"], 0.888, 522, "xMinYMin"],
            overrightharpoon: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
            xrightharpoonup: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
            xrightharpoondown: [["rightharpoondown"], 0.888, 522, "xMaxYMin"],
            xlongequal: [["longequal"], 0.888, 334, "xMinYMin"],
            xtwoheadleftarrow: [["twoheadleftarrow"], 0.888, 334, "xMinYMin"],
            xtwoheadrightarrow: [["twoheadrightarrow"], 0.888, 334, "xMaxYMin"],
            overleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
            overbrace: [["leftbrace", "midbrace", "rightbrace"], 1.6, 548],
            underbrace: [["leftbraceunder", "midbraceunder", "rightbraceunder"], 1.6, 548],
            underleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
            xleftrightarrow: [["leftarrow", "rightarrow"], 1.75, 522],
            xLeftrightarrow: [["doubleleftarrow", "doublerightarrow"], 1.75, 560],
            xrightleftharpoons: [["leftharpoondownplus", "rightharpoonplus"], 1.75, 716],
            xleftrightharpoons: [["leftharpoonplus", "rightharpoondownplus"], 1.75, 716],
            xhookleftarrow: [["leftarrow", "righthook"], 1.08, 522],
            xhookrightarrow: [["lefthook", "rightarrow"], 1.08, 522],
            overlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
            underlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
            overgroup: [["leftgroup", "rightgroup"], 0.888, 342],
            undergroup: [["leftgroupunder", "rightgroupunder"], 0.888, 342],
            xmapsto: [["leftmapsto", "rightarrow"], 1.5, 522],
            xtofrom: [["leftToFrom", "rightToFrom"], 1.75, 528],
            // The next three arrows are from the mhchem package.
            // In mhchem.sty, min-length is 2.0em. But these arrows might appear in the
            // document as \xrightarrow or \xrightleftharpoons. Those have
            // min-length = 1.75em, so we set min-length on these next three to match.
            xrightleftarrows: [["baraboveleftarrow", "rightarrowabovebar"], 1.75, 667],
            xrightequilibrium: [["baraboveshortleftharpoon", "rightharpoonaboveshortbar"], 1.75, 716],
            xleftequilibrium: [["shortbaraboveleftharpoon", "shortrightharpoonabovebar"], 1.75, 716]
          };

          var groupLength = function groupLength(arg) {
            if (arg.type === "ordgroup") {
              return arg.value.length;
            } else {
              return 1;
            }
          };

          var svgSpan = function svgSpan(group, options) {
            // Create a span with inline SVG for the element.
            function buildSvgSpan_() {
              var viewBoxWidth = 400000; // default

              var label = group.value.label.substr(1);

              if (__WEBPACK_IMPORTED_MODULE_4__utils__["a"
              /* default */
              ].contains(["widehat", "widetilde", "utilde"], label)) {
                // There are four SVG images available for each function.
                // Choose a taller image when there are more characters.
                var numChars = groupLength(group.value.base);
                var viewBoxHeight = void 0;
                var pathName = void 0;

                var _height = void 0;

                if (numChars > 5) {
                  viewBoxHeight = label === "widehat" ? 420 : 312;
                  viewBoxWidth = label === "widehat" ? 2364 : 2340; // Next get the span height, in 1000 ems

                  _height = label === "widehat" ? 0.42 : 0.34;
                  pathName = (label === "widehat" ? "widehat" : "tilde") + "4";
                } else {
                  var imgIndex = [1, 1, 2, 2, 3, 3][numChars];

                  if (label === "widehat") {
                    viewBoxWidth = [0, 1062, 2364, 2364, 2364][imgIndex];
                    viewBoxHeight = [0, 239, 300, 360, 420][imgIndex];
                    _height = [0, 0.24, 0.3, 0.3, 0.36, 0.42][imgIndex];
                    pathName = "widehat" + imgIndex;
                  } else {
                    viewBoxWidth = [0, 600, 1033, 2339, 2340][imgIndex];
                    viewBoxHeight = [0, 260, 286, 306, 312][imgIndex];
                    _height = [0, 0.26, 0.286, 0.3, 0.306, 0.34][imgIndex];
                    pathName = "tilde" + imgIndex;
                  }
                }

                var path = new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"
                /* default */
                ].pathNode(pathName);
                var svgNode = new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"
                /* default */
                ].svgNode([path], {
                  "width": "100%",
                  "height": _height + "em",
                  "viewBox": "0 0 " + viewBoxWidth + " " + viewBoxHeight,
                  "preserveAspectRatio": "none"
                });
                return {
                  span: __WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"
                  /* default */
                  ].makeSpan([], [svgNode], options),
                  minWidth: 0,
                  height: _height
                };
              } else {
                var spans = [];

                var _katexImagesData$labe = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray___default()(katexImagesData[label], 4),
                    paths = _katexImagesData$labe[0],
                    _minWidth = _katexImagesData$labe[1],
                    _viewBoxHeight = _katexImagesData$labe[2],
                    align1 = _katexImagesData$labe[3];

                var _height2 = _viewBoxHeight / 1000;

                var numSvgChildren = paths.length;
                var widthClasses = void 0;
                var aligns = void 0;

                if (numSvgChildren === 1) {
                  widthClasses = ["hide-tail"];
                  aligns = [align1];
                } else if (numSvgChildren === 2) {
                  widthClasses = ["halfarrow-left", "halfarrow-right"];
                  aligns = ["xMinYMin", "xMaxYMin"];
                } else if (numSvgChildren === 3) {
                  widthClasses = ["brace-left", "brace-center", "brace-right"];
                  aligns = ["xMinYMin", "xMidYMin", "xMaxYMin"];
                } else {
                  throw new Error("Correct katexImagesData or update code here to support\n                    " + numSvgChildren + " children.");
                }

                for (var i = 0; i < numSvgChildren; i++) {
                  var _path = new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"
                  /* default */
                  ].pathNode(paths[i]);

                  var _svgNode = new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"
                  /* default */
                  ].svgNode([_path], {
                    "width": "400em",
                    "height": _height2 + "em",
                    "viewBox": "0 0 " + viewBoxWidth + " " + _viewBoxHeight,
                    "preserveAspectRatio": aligns[i] + " slice"
                  });

                  var _span = __WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"
                  /* default */
                  ].makeSpan([widthClasses[i]], [_svgNode], options);

                  if (numSvgChildren === 1) {
                    return {
                      span: _span,
                      minWidth: _minWidth,
                      height: _height2
                    };
                  } else {
                    _span.style.height = _height2 + "em";
                    spans.push(_span);
                  }
                }

                return {
                  span: __WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"
                  /* default */
                  ].makeSpan(["stretchy"], spans, options),
                  minWidth: _minWidth,
                  height: _height2
                };
              }
            } // buildSvgSpan_()


            var _buildSvgSpan_ = buildSvgSpan_(),
                span = _buildSvgSpan_.span,
                minWidth = _buildSvgSpan_.minWidth,
                height = _buildSvgSpan_.height; // Note that we are returning span.depth = 0.
            // Any adjustments relative to the baseline must be done in buildHTML.


            span.height = height;
            span.style.height = height + "em";

            if (minWidth > 0) {
              span.style.minWidth = minWidth + "em";
            }

            return span;
          };

          var encloseSpan = function encloseSpan(inner, label, pad, options) {
            // Return an image span for \cancel, \bcancel, \xcancel, or \fbox
            var img = void 0;
            var totalHeight = inner.height + inner.depth + 2 * pad;

            if (/fbox|color/.test(label)) {
              img = __WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"
              /* default */
              ].makeSpan(["stretchy", label], [], options);

              if (label === "fbox") {
                var color = options.color && options.getColor();

                if (color) {
                  img.style.borderColor = color;
                }
              }
            } else {
              // \cancel, \bcancel, or \xcancel
              // Since \cancel's SVG is inline and it omits the viewBox attribute,
              // its stroke-width will not vary with span area.
              var lines = [];

              if (/^[bx]cancel$/.test(label)) {
                lines.push(new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"
                /* default */
                ].lineNode({
                  "x1": "0",
                  "y1": "0",
                  "x2": "100%",
                  "y2": "100%",
                  "stroke-width": "0.046em"
                }));
              }

              if (/^x?cancel$/.test(label)) {
                lines.push(new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"
                /* default */
                ].lineNode({
                  "x1": "0",
                  "y1": "100%",
                  "x2": "100%",
                  "y2": "0",
                  "stroke-width": "0.046em"
                }));
              }

              var svgNode = new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"
              /* default */
              ].svgNode(lines, {
                "width": "100%",
                "height": totalHeight + "em"
              });
              img = __WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"
              /* default */
              ].makeSpan([], [svgNode], options);
            }

            img.height = totalHeight;
            img.style.height = totalHeight + "em";
            return img;
          };

          var ruleSpan = function ruleSpan(className, lineThickness, options) {
            // Get a span with an SVG path that fills the middle fifth of the span.
            // We're using an extra wide span so Chrome won't round it down to zero.
            var path = void 0;
            var svgNode = void 0;
            var parentClass = "stretchy"; // default

            if (className === "vertical-separator") {
              path = new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"
              /* default */
              ].pathNode("vertSeparator");
              svgNode = new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"
              /* default */
              ].svgNode([path], {
                "width": "0.25em",
                // contains a path that is 0.05 ems wide.
                "height": "400em",
                "viewBox": "0 0 250 400000",
                "preserveAspectRatio": "xMinYMin slice"
              });
              parentClass = "vertical-separator";
            } else {
              // The next two lines are the only place in KaTeX where SVG paths are
              // put into a viewBox that is not always exactly a 1000:1 scale to the
              // document em size. Instead, the path is a horizontal line set to
              // take up the middle fifth of the viewBox and span. If the context is
              // normalsize/textstyle then the line will be 0.04em and the usual
              // 1000:1 ratio holds. But if the context is scriptstyle, then
              // lineThickness > 0.04em and we have a ratio somewhat different than
              // 1000:1.
              path = new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"
              /* default */
              ].pathNode("stdHorizRule");
              svgNode = new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"
              /* default */
              ].svgNode([path], {
                "width": "400em",
                "height": 5 * lineThickness + "em",
                "viewBox": "0 0 400000 200",
                "preserveAspectRatio": "xMinYMin slice"
              });
            }

            return __WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"
            /* default */
            ].makeSpan([parentClass], [svgNode], options);
          };
          /* harmony default export */


          __webpack_exports__["a"] = {
            encloseSpan: encloseSpan,
            mathMLnode: mathMLnode,
            ruleSpan: ruleSpan,
            svgSpan: svgSpan
          };
          /***/
        },
        /* 14 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__ = __webpack_require__(7);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__SourceLocation__ = __webpack_require__(31);
          /**
           * The resulting parse tree nodes of the parse tree.
           *
           * It is possible to provide position information, so that a `ParseNode` can
           * fulfill a role similar to a `Token` in error reporting.
           * For details on the corresponding properties see `Token` constructor.
           * Providing such information can lead to better error reporting.
           */


          var ParseNode = function ParseNode(type, // type of node, like e.g. "ordgroup"
          value, // type-specific representation of the node
          mode, // parse mode in action for this node, "math" or "text"
          first, // first token or node of the input for
          last) // last token or node of the input for this
          // node, will default to firstToken if unset
          {
            __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this, ParseNode);

            this.type = type;
            this.value = value;
            this.mode = mode;
            this.loc = __WEBPACK_IMPORTED_MODULE_1__SourceLocation__["a"
            /* default */
            ].range(first, last);
          };
          /* harmony default export */


          __webpack_exports__["a"] = ParseNode;
          /***/
        },
        /* 15 */

        /***/
        function (module, exports, __webpack_require__) {
          var anObject = __webpack_require__(22),
              IE8_DOM_DEFINE = __webpack_require__(70),
              toPrimitive = __webpack_require__(71),
              dP = Object.defineProperty;

          exports.f = __webpack_require__(23) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
            anObject(O);
            P = toPrimitive(P, true);
            anObject(Attributes);
            if (IE8_DOM_DEFINE) try {
              return dP(O, P, Attributes);
            } catch (e) {
              /* empty */
            }
            if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
            if ('value' in Attributes) O[P] = Attributes.value;
            return O;
          };
          /***/
        },
        /* 16 */

        /***/
        function (module, exports) {
          // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
          var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
          if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

          /***/
        },
        /* 17 */

        /***/
        function (module, exports) {
          module.exports = {};
          /***/
        },
        /* 18 */

        /***/
        function (module, exports, __webpack_require__) {
          module.exports = {
            "default": __webpack_require__(103),
            __esModule: true
          };
          /***/
        },
        /* 19 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony export (binding) */

          __webpack_require__.d(__webpack_exports__, "b", function () {
            return validUnit;
          });
          /* harmony export (binding) */


          __webpack_require__.d(__webpack_exports__, "a", function () {
            return calculateSize;
          });
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0__ParseError__ = __webpack_require__(6);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__Options__ = __webpack_require__(43);
          /**
           * This file does conversion between units.  In particular, it provides
           * calculateSize to convert other units into ems.
           */
          // This table gives the number of TeX pts in one of each *absolute* TeX unit.
          // Thus, multiplying a length by this number converts the length from units
          // into pts.  Dividing the result by ptPerEm gives the number of ems
          // *assuming* a font size of ptPerEm (normal size, normal style).


          var ptPerUnit = {
            // https://en.wikibooks.org/wiki/LaTeX/Lengths and
            // https://tex.stackexchange.com/a/8263
            "pt": 1,
            // TeX point
            "mm": 7227 / 2540,
            // millimeter
            "cm": 7227 / 254,
            // centimeter
            "in": 72.27,
            // inch
            "bp": 803 / 800,
            // big (PostScript) points
            "pc": 12,
            // pica
            "dd": 1238 / 1157,
            // didot
            "cc": 14856 / 1157,
            // cicero (12 didot)
            "nd": 685 / 642,
            // new didot
            "nc": 1370 / 107,
            // new cicero (12 new didot)
            "sp": 1 / 65536,
            // scaled point (TeX's internal smallest unit)
            // https://tex.stackexchange.com/a/41371
            "px": 803 / 800 // \pdfpxdimen defaults to 1 bp in pdfTeX and LuaTeX

          }; // Dictionary of relative units, for fast validity testing.

          var relativeUnit = {
            "ex": true,
            "em": true,
            "mu": true
          };
          /**
           * Determine whether the specified unit (either a string defining the unit
           * or a "size" parse node containing a unit field) is valid.
           */

          var validUnit = function validUnit(unit) {
            if (typeof unit !== "string") {
              unit = unit.unit;
            }

            return unit in ptPerUnit || unit in relativeUnit || unit === "ex";
          };
          /*
           * Convert a "size" parse node (with numeric "number" and string "unit" fields,
           * as parsed by functions.js argType "size") into a CSS em value for the
           * current style/scale.  `options` gives the current options.
           */


          var calculateSize = function calculateSize(sizeValue, options) {
            var scale = void 0;

            if (sizeValue.unit in ptPerUnit) {
              // Absolute units
              scale = ptPerUnit[sizeValue.unit] // Convert unit to pt
              / options.fontMetrics().ptPerEm // Convert pt to CSS em
              / options.sizeMultiplier; // Unscale to make absolute units
            } else if (sizeValue.unit === "mu") {
              // `mu` units scale with scriptstyle/scriptscriptstyle.
              scale = options.fontMetrics().cssEmPerMu;
            } else {
              // Other relative units always refer to the *textstyle* font
              // in the current size.
              var unitOptions = void 0;

              if (options.style.isTight()) {
                // isTight() means current style is script/scriptscript.
                unitOptions = options.havingStyle(options.style.text());
              } else {
                unitOptions = options;
              } // TODO: In TeX these units are relative to the quad of the current
              // *text* font, e.g. cmr10. KaTeX instead uses values from the
              // comparably-sized *Computer Modern symbol* font. At 10pt, these
              // match. At 7pt and 5pt, they differ: cmr7=1.138894, cmsy7=1.170641;
              // cmr5=1.361133, cmsy5=1.472241. Consider $\scriptsize a\kern1emb$.
              // TeX \showlists shows a kern of 1.13889 * fontsize;
              // KaTeX shows a kern of 1.171 * fontsize.


              if (sizeValue.unit === "ex") {
                scale = unitOptions.fontMetrics().xHeight;
              } else if (sizeValue.unit === "em") {
                scale = unitOptions.fontMetrics().quad;
              } else {
                throw new __WEBPACK_IMPORTED_MODULE_0__ParseError__["a"
                /* default */
                ]("Invalid unit: '" + sizeValue.unit + "'");
              }

              if (unitOptions !== options) {
                scale *= unitOptions.sizeMultiplier / options.sizeMultiplier;
              }
            }

            return Math.min(sizeValue.number * scale, options.maxSize);
          };
          /***/

        },
        /* 20 */

        /***/
        function (module, exports) {
          module.exports = function (it) {
            return typeof it === 'object' ? it !== null : typeof it === 'function';
          };
          /***/

        },
        /* 21 */

        /***/
        function (module, exports) {
          var hasOwnProperty = {}.hasOwnProperty;

          module.exports = function (it, key) {
            return hasOwnProperty.call(it, key);
          };
          /***/

        },
        /* 22 */

        /***/
        function (module, exports, __webpack_require__) {
          var isObject = __webpack_require__(20);

          module.exports = function (it) {
            if (!isObject(it)) throw TypeError(it + ' is not an object!');
            return it;
          };
          /***/

        },
        /* 23 */

        /***/
        function (module, exports, __webpack_require__) {
          // Thank's IE8 for his funny defineProperty
          module.exports = !__webpack_require__(24)(function () {
            return Object.defineProperty({}, 'a', {
              get: function get() {
                return 7;
              }
            }).a != 7;
          });
          /***/
        },
        /* 24 */

        /***/
        function (module, exports) {
          module.exports = function (exec) {
            try {
              return !!exec();
            } catch (e) {
              return true;
            }
          };
          /***/

        },
        /* 25 */

        /***/
        function (module, exports, __webpack_require__) {
          var global = __webpack_require__(16),
              core = __webpack_require__(8),
              ctx = __webpack_require__(47),
              hide = __webpack_require__(26),
              PROTOTYPE = 'prototype';

          var $export = function $export(type, name, source) {
            var IS_FORCED = type & $export.F,
                IS_GLOBAL = type & $export.G,
                IS_STATIC = type & $export.S,
                IS_PROTO = type & $export.P,
                IS_BIND = type & $export.B,
                IS_WRAP = type & $export.W,
                exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),
                expProto = exports[PROTOTYPE],
                target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE],
                key,
                own,
                out;
            if (IS_GLOBAL) source = name;

            for (key in source) {
              // contains in native
              own = !IS_FORCED && target && target[key] !== undefined;
              if (own && key in exports) continue; // export native or passed

              out = own ? target[key] : source[key]; // prevent global pollution for namespaces

              exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] // bind timers to global for call from export context
              : IS_BIND && own ? ctx(out, global) // wrap global constructors for prevent change them in library
              : IS_WRAP && target[key] == out ? function (C) {
                var F = function F(a, b, c) {
                  if (this instanceof C) {
                    switch (arguments.length) {
                      case 0:
                        return new C();

                      case 1:
                        return new C(a);

                      case 2:
                        return new C(a, b);
                    }

                    return new C(a, b, c);
                  }

                  return C.apply(this, arguments);
                };

                F[PROTOTYPE] = C[PROTOTYPE];
                return F; // make static versions for prototype methods
              }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%

              if (IS_PROTO) {
                (exports.virtual || (exports.virtual = {}))[key] = out; // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%

                if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
              }
            }
          }; // type bitmap


          $export.F = 1; // forced

          $export.G = 2; // global

          $export.S = 4; // static

          $export.P = 8; // proto

          $export.B = 16; // bind

          $export.W = 32; // wrap

          $export.U = 64; // safe

          $export.R = 128; // real proto method for `library` 

          module.exports = $export;
          /***/
        },
        /* 26 */

        /***/
        function (module, exports, __webpack_require__) {
          var dP = __webpack_require__(15),
              createDesc = __webpack_require__(33);

          module.exports = __webpack_require__(23) ? function (object, key, value) {
            return dP.f(object, key, createDesc(1, value));
          } : function (object, key, value) {
            object[key] = value;
            return object;
          };
          /***/
        },
        /* 27 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony export (binding) */

          __webpack_require__.d(__webpack_exports__, "a", function () {
            return Token;
          });
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__ = __webpack_require__(7);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__ = __webpack_require__(10);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__SourceLocation__ = __webpack_require__(31);
          /**
           * Interface required to break circular dependency between Token, Lexer, and
           * ParseError.
           */

          /**
           * The resulting token returned from `lex`.
           *
           * It consists of the token text plus some position information.
           * The position information is essentially a range in an input string,
           * but instead of referencing the bare input string, we refer to the lexer.
           * That way it is possible to attach extra metadata to the input string,
           * like for example a file name or similar.
           *
           * The position information is optional, so it is OK to construct synthetic
           * tokens if appropriate. Not providing available position information may
           * lead to degraded error reporting, though.
           */


          var Token = function () {
            function Token(text, // the text of this token
            loc) {
              __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this, Token);

              this.text = text;
              this.loc = loc;
            }
            /**
             * Given a pair of tokens (this and endToken), compute a `Token` encompassing
             * the whole input range enclosed by these two.
             */


            __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default()(Token, [{
              key: "range",
              value: function range(endToken, // last token of the range, inclusive
              text) // the text of the newly constructed token
              {
                return new Token(text, __WEBPACK_IMPORTED_MODULE_2__SourceLocation__["a"
                /* default */
                ].range(this, endToken));
              }
            }]);

            return Token;
          }();
          /***/

        },
        /* 28 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /**
           * This file holds a list of all no-argument functions and single-character
           * symbols (like 'a' or ';').
           *
           * For each of the symbols, there are three properties they can have:
           * - font (required): the font to be used for this symbol. Either "main" (the
               normal font), or "ams" (the ams fonts).
           * - group (required): the ParseNode group type the symbol should have (i.e.
               "textord", "mathord", etc).
               See https://github.com/Khan/KaTeX/wiki/Examining-TeX#group-types
           * - replace: the character that this symbol or function should be
           *   replaced with (i.e. "\phi" has a replace value of "\u03d5", the phi
           *   character in the main font).
           *
           * The outermost map in the table indicates what mode the symbols should be
           * accepted in (e.g. "math" or "text").
           */

          var symbols = {
            "math": {},
            "text": {}
          };
          /* harmony default export */

          __webpack_exports__["a"] = symbols;
          /** `acceptUnicodeChar = true` is only applicable if `replace` is set. */

          function defineSymbol(mode, font, group, replace, name, acceptUnicodeChar) {
            symbols[mode][name] = {
              font: font,
              group: group,
              replace: replace
            };

            if (acceptUnicodeChar && replace) {
              symbols[mode][replace] = symbols[mode][name];
            }
          } // Some abbreviations for commonly used strings.
          // This helps minify the code, and also spotting typos using jshint.
          // modes:


          var math = "math";
          var text = "text"; // fonts:

          var main = "main";
          var ams = "ams"; // groups:

          var accent = "accent";
          var bin = "bin";
          var close = "close";
          var inner = "inner";
          var mathord = "mathord";
          var op = "op";
          var open = "open";
          var punct = "punct";
          var rel = "rel";
          var spacing = "spacing";
          var textord = "textord"; // Now comes the symbol table
          // Relation Symbols

          defineSymbol(math, main, rel, "\u2261", "\\equiv", true);
          defineSymbol(math, main, rel, "\u227A", "\\prec", true);
          defineSymbol(math, main, rel, "\u227B", "\\succ", true);
          defineSymbol(math, main, rel, "\u223C", "\\sim", true);
          defineSymbol(math, main, rel, "\u22A5", "\\perp");
          defineSymbol(math, main, rel, "\u2AAF", "\\preceq", true);
          defineSymbol(math, main, rel, "\u2AB0", "\\succeq", true);
          defineSymbol(math, main, rel, "\u2243", "\\simeq", true);
          defineSymbol(math, main, rel, "\u2223", "\\mid", true);
          defineSymbol(math, main, rel, "\u226A", "\\ll");
          defineSymbol(math, main, rel, "\u226B", "\\gg", true);
          defineSymbol(math, main, rel, "\u224D", "\\asymp", true);
          defineSymbol(math, main, rel, "\u2225", "\\parallel");
          defineSymbol(math, main, rel, "\u22C8", "\\bowtie", true);
          defineSymbol(math, main, rel, "\u2323", "\\smile", true);
          defineSymbol(math, main, rel, "\u2291", "\\sqsubseteq", true);
          defineSymbol(math, main, rel, "\u2292", "\\sqsupseteq", true);
          defineSymbol(math, main, rel, "\u2250", "\\doteq", true);
          defineSymbol(math, main, rel, "\u2322", "\\frown", true);
          defineSymbol(math, main, rel, "\u220B", "\\ni", true);
          defineSymbol(math, main, rel, "\u221D", "\\propto", true);
          defineSymbol(math, main, rel, "\u22A2", "\\vdash", true);
          defineSymbol(math, main, rel, "\u22A3", "\\dashv", true);
          defineSymbol(math, main, rel, "\u220B", "\\owns"); // Punctuation

          defineSymbol(math, main, punct, ".", "\\ldotp");
          defineSymbol(math, main, punct, "\u22C5", "\\cdotp"); // Misc Symbols

          defineSymbol(math, main, textord, "#", "\\#");
          defineSymbol(text, main, textord, "#", "\\#");
          defineSymbol(math, main, textord, "&", "\\&");
          defineSymbol(text, main, textord, "&", "\\&");
          defineSymbol(math, main, textord, "\u2135", "\\aleph", true);
          defineSymbol(math, main, textord, "\u2200", "\\forall", true);
          defineSymbol(math, main, textord, "\u210F", "\\hbar");
          defineSymbol(math, main, textord, "\u2203", "\\exists", true);
          defineSymbol(math, main, textord, "\u2207", "\\nabla", true);
          defineSymbol(math, main, textord, "\u266D", "\\flat", true);
          defineSymbol(math, main, textord, "\u2113", "\\ell", true);
          defineSymbol(math, main, textord, "\u266E", "\\natural", true);
          defineSymbol(math, main, textord, "\u2663", "\\clubsuit", true);
          defineSymbol(math, main, textord, "\u2118", "\\wp", true);
          defineSymbol(math, main, textord, "\u266F", "\\sharp", true);
          defineSymbol(math, main, textord, "\u2662", "\\diamondsuit", true);
          defineSymbol(math, main, textord, "\u211C", "\\Re", true);
          defineSymbol(math, main, textord, "\u2661", "\\heartsuit", true);
          defineSymbol(math, main, textord, "\u2111", "\\Im", true);
          defineSymbol(math, main, textord, "\u2660", "\\spadesuit", true);
          defineSymbol(text, main, textord, "\xA7", "\\S", true);
          defineSymbol(text, main, textord, "\xB6", "\\P", true); // Math and Text

          defineSymbol(math, main, textord, "\u2020", "\\dag");
          defineSymbol(text, main, textord, "\u2020", "\\dag");
          defineSymbol(text, main, textord, "\u2020", "\\textdagger");
          defineSymbol(math, main, textord, "\u2021", "\\ddag");
          defineSymbol(text, main, textord, "\u2021", "\\ddag");
          defineSymbol(text, main, textord, "\u2020", "\\textdaggerdbl"); // Large Delimiters

          defineSymbol(math, main, close, "\u23B1", "\\rmoustache");
          defineSymbol(math, main, open, "\u23B0", "\\lmoustache");
          defineSymbol(math, main, close, "\u27EF", "\\rgroup");
          defineSymbol(math, main, open, "\u27EE", "\\lgroup"); // Binary Operators

          defineSymbol(math, main, bin, "\u2213", "\\mp", true);
          defineSymbol(math, main, bin, "\u2296", "\\ominus", true);
          defineSymbol(math, main, bin, "\u228E", "\\uplus", true);
          defineSymbol(math, main, bin, "\u2293", "\\sqcap", true);
          defineSymbol(math, main, bin, "\u2217", "\\ast");
          defineSymbol(math, main, bin, "\u2294", "\\sqcup", true);
          defineSymbol(math, main, bin, "\u25EF", "\\bigcirc");
          defineSymbol(math, main, bin, "\u2219", "\\bullet");
          defineSymbol(math, main, bin, "\u2021", "\\ddagger");
          defineSymbol(math, main, bin, "\u2240", "\\wr", true);
          defineSymbol(math, main, bin, "\u2A3F", "\\amalg");
          defineSymbol(math, main, bin, "&", "\\And"); // from amsmath
          // Arrow Symbols

          defineSymbol(math, main, rel, "\u27F5", "\\longleftarrow", true);
          defineSymbol(math, main, rel, "\u21D0", "\\Leftarrow", true);
          defineSymbol(math, main, rel, "\u27F8", "\\Longleftarrow", true);
          defineSymbol(math, main, rel, "\u27F6", "\\longrightarrow", true);
          defineSymbol(math, main, rel, "\u21D2", "\\Rightarrow", true);
          defineSymbol(math, main, rel, "\u27F9", "\\Longrightarrow", true);
          defineSymbol(math, main, rel, "\u2194", "\\leftrightarrow", true);
          defineSymbol(math, main, rel, "\u27F7", "\\longleftrightarrow", true);
          defineSymbol(math, main, rel, "\u21D4", "\\Leftrightarrow", true);
          defineSymbol(math, main, rel, "\u27FA", "\\Longleftrightarrow", true);
          defineSymbol(math, main, rel, "\u21A6", "\\mapsto", true);
          defineSymbol(math, main, rel, "\u27FC", "\\longmapsto", true);
          defineSymbol(math, main, rel, "\u2197", "\\nearrow", true);
          defineSymbol(math, main, rel, "\u21A9", "\\hookleftarrow", true);
          defineSymbol(math, main, rel, "\u21AA", "\\hookrightarrow", true);
          defineSymbol(math, main, rel, "\u2198", "\\searrow", true);
          defineSymbol(math, main, rel, "\u21BC", "\\leftharpoonup", true);
          defineSymbol(math, main, rel, "\u21C0", "\\rightharpoonup", true);
          defineSymbol(math, main, rel, "\u2199", "\\swarrow", true);
          defineSymbol(math, main, rel, "\u21BD", "\\leftharpoondown", true);
          defineSymbol(math, main, rel, "\u21C1", "\\rightharpoondown", true);
          defineSymbol(math, main, rel, "\u2196", "\\nwarrow", true);
          defineSymbol(math, main, rel, "\u21CC", "\\rightleftharpoons", true); // AMS Negated Binary Relations

          defineSymbol(math, ams, rel, "\u226E", "\\nless", true);
          defineSymbol(math, ams, rel, "\uE010", "\\nleqslant");
          defineSymbol(math, ams, rel, "\uE011", "\\nleqq");
          defineSymbol(math, ams, rel, "\u2A87", "\\lneq", true);
          defineSymbol(math, ams, rel, "\u2268", "\\lneqq", true);
          defineSymbol(math, ams, rel, "\uE00C", "\\lvertneqq");
          defineSymbol(math, ams, rel, "\u22E6", "\\lnsim", true);
          defineSymbol(math, ams, rel, "\u2A89", "\\lnapprox", true);
          defineSymbol(math, ams, rel, "\u2280", "\\nprec", true); // unicode-math maps \u22e0 to \npreccurlyeq. We'll use the AMS synonym.

          defineSymbol(math, ams, rel, "\u22E0", "\\npreceq", true);
          defineSymbol(math, ams, rel, "\u22E8", "\\precnsim", true);
          defineSymbol(math, ams, rel, "\u2AB9", "\\precnapprox", true);
          defineSymbol(math, ams, rel, "\u2241", "\\nsim", true);
          defineSymbol(math, ams, rel, "\uE006", "\\nshortmid");
          defineSymbol(math, ams, rel, "\u2224", "\\nmid", true);
          defineSymbol(math, ams, rel, "\u22AC", "\\nvdash", true);
          defineSymbol(math, ams, rel, "\u22AD", "\\nvDash", true);
          defineSymbol(math, ams, rel, "\u22EA", "\\ntriangleleft");
          defineSymbol(math, ams, rel, "\u22EC", "\\ntrianglelefteq", true);
          defineSymbol(math, ams, rel, "\u228A", "\\subsetneq", true);
          defineSymbol(math, ams, rel, "\uE01A", "\\varsubsetneq");
          defineSymbol(math, ams, rel, "\u2ACB", "\\subsetneqq", true);
          defineSymbol(math, ams, rel, "\uE017", "\\varsubsetneqq");
          defineSymbol(math, ams, rel, "\u226F", "\\ngtr", true);
          defineSymbol(math, ams, rel, "\uE00F", "\\ngeqslant");
          defineSymbol(math, ams, rel, "\uE00E", "\\ngeqq");
          defineSymbol(math, ams, rel, "\u2A88", "\\gneq", true);
          defineSymbol(math, ams, rel, "\u2269", "\\gneqq", true);
          defineSymbol(math, ams, rel, "\uE00D", "\\gvertneqq");
          defineSymbol(math, ams, rel, "\u22E7", "\\gnsim", true);
          defineSymbol(math, ams, rel, "\u2A8A", "\\gnapprox", true);
          defineSymbol(math, ams, rel, "\u2281", "\\nsucc", true); // unicode-math maps \u22e1 to \nsucccurlyeq. We'll use the AMS synonym.

          defineSymbol(math, ams, rel, "\u22E1", "\\nsucceq", true);
          defineSymbol(math, ams, rel, "\u22E9", "\\succnsim", true);
          defineSymbol(math, ams, rel, "\u2ABA", "\\succnapprox", true); // unicode-math maps \u2246 to \simneqq. We'll use the AMS synonym.

          defineSymbol(math, ams, rel, "\u2246", "\\ncong", true);
          defineSymbol(math, ams, rel, "\uE007", "\\nshortparallel");
          defineSymbol(math, ams, rel, "\u2226", "\\nparallel", true);
          defineSymbol(math, ams, rel, "\u22AF", "\\nVDash", true);
          defineSymbol(math, ams, rel, "\u22EB", "\\ntriangleright");
          defineSymbol(math, ams, rel, "\u22ED", "\\ntrianglerighteq", true);
          defineSymbol(math, ams, rel, "\uE018", "\\nsupseteqq");
          defineSymbol(math, ams, rel, "\u228B", "\\supsetneq", true);
          defineSymbol(math, ams, rel, "\uE01B", "\\varsupsetneq");
          defineSymbol(math, ams, rel, "\u2ACC", "\\supsetneqq", true);
          defineSymbol(math, ams, rel, "\uE019", "\\varsupsetneqq");
          defineSymbol(math, ams, rel, "\u22AE", "\\nVdash", true);
          defineSymbol(math, ams, rel, "\u2AB5", "\\precneqq", true);
          defineSymbol(math, ams, rel, "\u2AB6", "\\succneqq", true);
          defineSymbol(math, ams, rel, "\uE016", "\\nsubseteqq");
          defineSymbol(math, ams, bin, "\u22B4", "\\unlhd");
          defineSymbol(math, ams, bin, "\u22B5", "\\unrhd"); // AMS Negated Arrows

          defineSymbol(math, ams, rel, "\u219A", "\\nleftarrow", true);
          defineSymbol(math, ams, rel, "\u219B", "\\nrightarrow", true);
          defineSymbol(math, ams, rel, "\u21CD", "\\nLeftarrow", true);
          defineSymbol(math, ams, rel, "\u21CF", "\\nRightarrow", true);
          defineSymbol(math, ams, rel, "\u21AE", "\\nleftrightarrow", true);
          defineSymbol(math, ams, rel, "\u21CE", "\\nLeftrightarrow", true); // AMS Misc

          defineSymbol(math, ams, rel, "\u25B3", "\\vartriangle");
          defineSymbol(math, ams, textord, "\u210F", "\\hslash");
          defineSymbol(math, ams, textord, "\u25BD", "\\triangledown");
          defineSymbol(math, ams, textord, "\u25CA", "\\lozenge");
          defineSymbol(math, ams, textord, "\u24C8", "\\circledS");
          defineSymbol(math, ams, textord, "\xAE", "\\circledR");
          defineSymbol(text, ams, textord, "\xAE", "\\circledR");
          defineSymbol(math, ams, textord, "\u2221", "\\measuredangle", true);
          defineSymbol(math, ams, textord, "\u2204", "\\nexists");
          defineSymbol(math, ams, textord, "\u2127", "\\mho");
          defineSymbol(math, ams, textord, "\u2132", "\\Finv", true);
          defineSymbol(math, ams, textord, "\u2141", "\\Game", true);
          defineSymbol(math, ams, textord, "k", "\\Bbbk");
          defineSymbol(math, ams, textord, "\u2035", "\\backprime");
          defineSymbol(math, ams, textord, "\u25B2", "\\blacktriangle");
          defineSymbol(math, ams, textord, "\u25BC", "\\blacktriangledown");
          defineSymbol(math, ams, textord, "\u25A0", "\\blacksquare");
          defineSymbol(math, ams, textord, "\u29EB", "\\blacklozenge");
          defineSymbol(math, ams, textord, "\u2605", "\\bigstar");
          defineSymbol(math, ams, textord, "\u2222", "\\sphericalangle", true);
          defineSymbol(math, ams, textord, "\u2201", "\\complement", true); // unicode-math maps U+F0 (ð) to \matheth. We map to AMS function \eth

          defineSymbol(math, ams, textord, "\xF0", "\\eth", true);
          defineSymbol(math, ams, textord, "\u2571", "\\diagup");
          defineSymbol(math, ams, textord, "\u2572", "\\diagdown");
          defineSymbol(math, ams, textord, "\u25A1", "\\square");
          defineSymbol(math, ams, textord, "\u25A1", "\\Box");
          defineSymbol(math, ams, textord, "\u25CA", "\\Diamond"); // unicode-math maps U+A5 to \mathyen. We map to AMS function \yen

          defineSymbol(math, ams, textord, "\xA5", "\\yen", true);
          defineSymbol(math, ams, textord, "\u2713", "\\checkmark", true);
          defineSymbol(text, ams, textord, "\u2713", "\\checkmark"); // AMS Hebrew

          defineSymbol(math, ams, textord, "\u2136", "\\beth", true);
          defineSymbol(math, ams, textord, "\u2138", "\\daleth", true);
          defineSymbol(math, ams, textord, "\u2137", "\\gimel", true); // AMS Greek

          defineSymbol(math, ams, textord, "\u03DD", "\\digamma");
          defineSymbol(math, ams, textord, "\u03F0", "\\varkappa"); // AMS Delimiters

          defineSymbol(math, ams, open, "\u250C", "\\ulcorner");
          defineSymbol(math, ams, close, "\u2510", "\\urcorner");
          defineSymbol(math, ams, open, "\u2514", "\\llcorner");
          defineSymbol(math, ams, close, "\u2518", "\\lrcorner"); // AMS Binary Relations

          defineSymbol(math, ams, rel, "\u2266", "\\leqq", true);
          defineSymbol(math, ams, rel, "\u2A7D", "\\leqslant");
          defineSymbol(math, ams, rel, "\u2A95", "\\eqslantless", true);
          defineSymbol(math, ams, rel, "\u2272", "\\lesssim");
          defineSymbol(math, ams, rel, "\u2A85", "\\lessapprox");
          defineSymbol(math, ams, rel, "\u224A", "\\approxeq", true);
          defineSymbol(math, ams, bin, "\u22D6", "\\lessdot");
          defineSymbol(math, ams, rel, "\u22D8", "\\lll");
          defineSymbol(math, ams, rel, "\u2276", "\\lessgtr");
          defineSymbol(math, ams, rel, "\u22DA", "\\lesseqgtr");
          defineSymbol(math, ams, rel, "\u2A8B", "\\lesseqqgtr");
          defineSymbol(math, ams, rel, "\u2251", "\\doteqdot");
          defineSymbol(math, ams, rel, "\u2253", "\\risingdotseq", true);
          defineSymbol(math, ams, rel, "\u2252", "\\fallingdotseq", true);
          defineSymbol(math, ams, rel, "\u223D", "\\backsim", true);
          defineSymbol(math, ams, rel, "\u22CD", "\\backsimeq", true);
          defineSymbol(math, ams, rel, "\u2AC5", "\\subseteqq", true);
          defineSymbol(math, ams, rel, "\u22D0", "\\Subset", true);
          defineSymbol(math, ams, rel, "\u228F", "\\sqsubset", true);
          defineSymbol(math, ams, rel, "\u227C", "\\preccurlyeq", true);
          defineSymbol(math, ams, rel, "\u22DE", "\\curlyeqprec", true);
          defineSymbol(math, ams, rel, "\u227E", "\\precsim", true);
          defineSymbol(math, ams, rel, "\u2AB7", "\\precapprox", true);
          defineSymbol(math, ams, rel, "\u22B2", "\\vartriangleleft");
          defineSymbol(math, ams, rel, "\u22B4", "\\trianglelefteq");
          defineSymbol(math, ams, rel, "\u22A8", "\\vDash");
          defineSymbol(math, ams, rel, "\u22AA", "\\Vvdash", true);
          defineSymbol(math, ams, rel, "\u2323", "\\smallsmile");
          defineSymbol(math, ams, rel, "\u2322", "\\smallfrown");
          defineSymbol(math, ams, rel, "\u224F", "\\bumpeq", true);
          defineSymbol(math, ams, rel, "\u224E", "\\Bumpeq", true);
          defineSymbol(math, ams, rel, "\u2267", "\\geqq", true);
          defineSymbol(math, ams, rel, "\u2A7E", "\\geqslant", true);
          defineSymbol(math, ams, rel, "\u2A96", "\\eqslantgtr", true);
          defineSymbol(math, ams, rel, "\u2273", "\\gtrsim", true);
          defineSymbol(math, ams, rel, "\u2A86", "\\gtrapprox", true);
          defineSymbol(math, ams, bin, "\u22D7", "\\gtrdot");
          defineSymbol(math, ams, rel, "\u22D9", "\\ggg", true);
          defineSymbol(math, ams, rel, "\u2277", "\\gtrless", true);
          defineSymbol(math, ams, rel, "\u22DB", "\\gtreqless", true);
          defineSymbol(math, ams, rel, "\u2A8C", "\\gtreqqless", true);
          defineSymbol(math, ams, rel, "\u2256", "\\eqcirc", true);
          defineSymbol(math, ams, rel, "\u2257", "\\circeq", true);
          defineSymbol(math, ams, rel, "\u225C", "\\triangleq", true);
          defineSymbol(math, ams, rel, "\u223C", "\\thicksim");
          defineSymbol(math, ams, rel, "\u2248", "\\thickapprox");
          defineSymbol(math, ams, rel, "\u2AC6", "\\supseteqq", true);
          defineSymbol(math, ams, rel, "\u22D1", "\\Supset", true);
          defineSymbol(math, ams, rel, "\u2290", "\\sqsupset", true);
          defineSymbol(math, ams, rel, "\u227D", "\\succcurlyeq", true);
          defineSymbol(math, ams, rel, "\u22DF", "\\curlyeqsucc", true);
          defineSymbol(math, ams, rel, "\u227F", "\\succsim", true);
          defineSymbol(math, ams, rel, "\u2AB8", "\\succapprox", true);
          defineSymbol(math, ams, rel, "\u22B3", "\\vartriangleright");
          defineSymbol(math, ams, rel, "\u22B5", "\\trianglerighteq");
          defineSymbol(math, ams, rel, "\u22A9", "\\Vdash", true);
          defineSymbol(math, ams, rel, "\u2223", "\\shortmid");
          defineSymbol(math, ams, rel, "\u2225", "\\shortparallel");
          defineSymbol(math, ams, rel, "\u226C", "\\between", true);
          defineSymbol(math, ams, rel, "\u22D4", "\\pitchfork", true);
          defineSymbol(math, ams, rel, "\u221D", "\\varpropto");
          defineSymbol(math, ams, rel, "\u25C0", "\\blacktriangleleft"); // unicode-math says that \therefore is a mathord atom.
          // We kept the amssymb atom type, which is rel.

          defineSymbol(math, ams, rel, "\u2234", "\\therefore", true);
          defineSymbol(math, ams, rel, "\u220D", "\\backepsilon");
          defineSymbol(math, ams, rel, "\u25B6", "\\blacktriangleright"); // unicode-math says that \because is a mathord atom.
          // We kept the amssymb atom type, which is rel.

          defineSymbol(math, ams, rel, "\u2235", "\\because", true);
          defineSymbol(math, ams, rel, "\u22D8", "\\llless");
          defineSymbol(math, ams, rel, "\u22D9", "\\gggtr");
          defineSymbol(math, ams, bin, "\u22B2", "\\lhd");
          defineSymbol(math, ams, bin, "\u22B3", "\\rhd");
          defineSymbol(math, ams, rel, "\u2242", "\\eqsim", true);
          defineSymbol(math, main, rel, "\u22C8", "\\Join");
          defineSymbol(math, ams, rel, "\u2251", "\\Doteq", true); // AMS Binary Operators

          defineSymbol(math, ams, bin, "\u2214", "\\dotplus", true);
          defineSymbol(math, ams, bin, "\u2216", "\\smallsetminus");
          defineSymbol(math, ams, bin, "\u22D2", "\\Cap", true);
          defineSymbol(math, ams, bin, "\u22D3", "\\Cup", true);
          defineSymbol(math, ams, bin, "\u2A5E", "\\doublebarwedge", true);
          defineSymbol(math, ams, bin, "\u229F", "\\boxminus", true);
          defineSymbol(math, ams, bin, "\u229E", "\\boxplus", true);
          defineSymbol(math, ams, bin, "\u22C7", "\\divideontimes", true);
          defineSymbol(math, ams, bin, "\u22C9", "\\ltimes", true);
          defineSymbol(math, ams, bin, "\u22CA", "\\rtimes", true);
          defineSymbol(math, ams, bin, "\u22CB", "\\leftthreetimes", true);
          defineSymbol(math, ams, bin, "\u22CC", "\\rightthreetimes", true);
          defineSymbol(math, ams, bin, "\u22CF", "\\curlywedge", true);
          defineSymbol(math, ams, bin, "\u22CE", "\\curlyvee", true);
          defineSymbol(math, ams, bin, "\u229D", "\\circleddash", true);
          defineSymbol(math, ams, bin, "\u229B", "\\circledast", true);
          defineSymbol(math, ams, bin, "\u22C5", "\\centerdot");
          defineSymbol(math, ams, bin, "\u22BA", "\\intercal", true);
          defineSymbol(math, ams, bin, "\u22D2", "\\doublecap");
          defineSymbol(math, ams, bin, "\u22D3", "\\doublecup");
          defineSymbol(math, ams, bin, "\u22A0", "\\boxtimes", true); // AMS Arrows
          // Note: unicode-math maps \u21e2 to their own function \rightdasharrow.
          // We'll map it to AMS function \dashrightarrow. It produces the same atom.

          defineSymbol(math, ams, rel, "\u21E2", "\\dashrightarrow", true); // unicode-math maps \u21e0 to \leftdasharrow. We'll use the AMS synonym.

          defineSymbol(math, ams, rel, "\u21E0", "\\dashleftarrow", true);
          defineSymbol(math, ams, rel, "\u21C7", "\\leftleftarrows", true);
          defineSymbol(math, ams, rel, "\u21C6", "\\leftrightarrows", true);
          defineSymbol(math, ams, rel, "\u21DA", "\\Lleftarrow", true);
          defineSymbol(math, ams, rel, "\u219E", "\\twoheadleftarrow", true);
          defineSymbol(math, ams, rel, "\u21A2", "\\leftarrowtail", true);
          defineSymbol(math, ams, rel, "\u21AB", "\\looparrowleft", true);
          defineSymbol(math, ams, rel, "\u21CB", "\\leftrightharpoons", true);
          defineSymbol(math, ams, rel, "\u21B6", "\\curvearrowleft", true); // unicode-math maps \u21ba to \acwopencirclearrow. We'll use the AMS synonym.

          defineSymbol(math, ams, rel, "\u21BA", "\\circlearrowleft", true);
          defineSymbol(math, ams, rel, "\u21B0", "\\Lsh", true);
          defineSymbol(math, ams, rel, "\u21C8", "\\upuparrows", true);
          defineSymbol(math, ams, rel, "\u21BF", "\\upharpoonleft", true);
          defineSymbol(math, ams, rel, "\u21C3", "\\downharpoonleft", true);
          defineSymbol(math, ams, rel, "\u22B8", "\\multimap", true);
          defineSymbol(math, ams, rel, "\u21AD", "\\leftrightsquigarrow", true);
          defineSymbol(math, ams, rel, "\u21C9", "\\rightrightarrows", true);
          defineSymbol(math, ams, rel, "\u21C4", "\\rightleftarrows", true);
          defineSymbol(math, ams, rel, "\u21A0", "\\twoheadrightarrow", true);
          defineSymbol(math, ams, rel, "\u21A3", "\\rightarrowtail", true);
          defineSymbol(math, ams, rel, "\u21AC", "\\looparrowright", true);
          defineSymbol(math, ams, rel, "\u21B7", "\\curvearrowright", true); // unicode-math maps \u21bb to \cwopencirclearrow. We'll use the AMS synonym.

          defineSymbol(math, ams, rel, "\u21BB", "\\circlearrowright", true);
          defineSymbol(math, ams, rel, "\u21B1", "\\Rsh", true);
          defineSymbol(math, ams, rel, "\u21CA", "\\downdownarrows", true);
          defineSymbol(math, ams, rel, "\u21BE", "\\upharpoonright", true);
          defineSymbol(math, ams, rel, "\u21C2", "\\downharpoonright", true);
          defineSymbol(math, ams, rel, "\u21DD", "\\rightsquigarrow", true);
          defineSymbol(math, ams, rel, "\u21DD", "\\leadsto");
          defineSymbol(math, ams, rel, "\u21DB", "\\Rrightarrow", true);
          defineSymbol(math, ams, rel, "\u21BE", "\\restriction");
          defineSymbol(math, main, textord, "\u2018", "`");
          defineSymbol(math, main, textord, "$", "\\$");
          defineSymbol(text, main, textord, "$", "\\$");
          defineSymbol(text, main, textord, "$", "\\textdollar");
          defineSymbol(math, main, textord, "%", "\\%");
          defineSymbol(text, main, textord, "%", "\\%");
          defineSymbol(math, main, textord, "_", "\\_");
          defineSymbol(text, main, textord, "_", "\\_");
          defineSymbol(text, main, textord, "_", "\\textunderscore");
          defineSymbol(math, main, textord, "\u2220", "\\angle", true);
          defineSymbol(math, main, textord, "\u221E", "\\infty", true);
          defineSymbol(math, main, textord, "\u2032", "\\prime");
          defineSymbol(math, main, textord, "\u25B3", "\\triangle");
          defineSymbol(math, main, textord, "\u0393", "\\Gamma", true);
          defineSymbol(math, main, textord, "\u0394", "\\Delta", true);
          defineSymbol(math, main, textord, "\u0398", "\\Theta", true);
          defineSymbol(math, main, textord, "\u039B", "\\Lambda", true);
          defineSymbol(math, main, textord, "\u039E", "\\Xi", true);
          defineSymbol(math, main, textord, "\u03A0", "\\Pi", true);
          defineSymbol(math, main, textord, "\u03A3", "\\Sigma", true);
          defineSymbol(math, main, textord, "\u03A5", "\\Upsilon", true);
          defineSymbol(math, main, textord, "\u03A6", "\\Phi", true);
          defineSymbol(math, main, textord, "\u03A8", "\\Psi", true);
          defineSymbol(math, main, textord, "\u03A9", "\\Omega", true);
          defineSymbol(math, main, textord, "\xAC", "\\neg");
          defineSymbol(math, main, textord, "\xAC", "\\lnot");
          defineSymbol(math, main, textord, "\u22A4", "\\top");
          defineSymbol(math, main, textord, "\u22A5", "\\bot");
          defineSymbol(math, main, textord, "\u2205", "\\emptyset");
          defineSymbol(math, ams, textord, "\u2205", "\\varnothing");
          defineSymbol(math, main, mathord, "\u03B1", "\\alpha", true);
          defineSymbol(math, main, mathord, "\u03B2", "\\beta", true);
          defineSymbol(math, main, mathord, "\u03B3", "\\gamma", true);
          defineSymbol(math, main, mathord, "\u03B4", "\\delta", true);
          defineSymbol(math, main, mathord, "\u03F5", "\\epsilon", true);
          defineSymbol(math, main, mathord, "\u03B6", "\\zeta", true);
          defineSymbol(math, main, mathord, "\u03B7", "\\eta", true);
          defineSymbol(math, main, mathord, "\u03B8", "\\theta", true);
          defineSymbol(math, main, mathord, "\u03B9", "\\iota", true);
          defineSymbol(math, main, mathord, "\u03BA", "\\kappa", true);
          defineSymbol(math, main, mathord, "\u03BB", "\\lambda", true);
          defineSymbol(math, main, mathord, "\u03BC", "\\mu", true);
          defineSymbol(math, main, mathord, "\u03BD", "\\nu", true);
          defineSymbol(math, main, mathord, "\u03BE", "\\xi", true);
          defineSymbol(math, main, mathord, "\u03BF", "\\omicron", true);
          defineSymbol(math, main, mathord, "\u03C0", "\\pi", true);
          defineSymbol(math, main, mathord, "\u03C1", "\\rho", true);
          defineSymbol(math, main, mathord, "\u03C3", "\\sigma", true);
          defineSymbol(math, main, mathord, "\u03C4", "\\tau", true);
          defineSymbol(math, main, mathord, "\u03C5", "\\upsilon", true);
          defineSymbol(math, main, mathord, "\u03D5", "\\phi", true);
          defineSymbol(math, main, mathord, "\u03C7", "\\chi", true);
          defineSymbol(math, main, mathord, "\u03C8", "\\psi", true);
          defineSymbol(math, main, mathord, "\u03C9", "\\omega", true);
          defineSymbol(math, main, mathord, "\u03B5", "\\varepsilon", true);
          defineSymbol(math, main, mathord, "\u03D1", "\\vartheta", true);
          defineSymbol(math, main, mathord, "\u03D6", "\\varpi", true);
          defineSymbol(math, main, mathord, "\u03F1", "\\varrho", true);
          defineSymbol(math, main, mathord, "\u03C2", "\\varsigma", true);
          defineSymbol(math, main, mathord, "\u03C6", "\\varphi", true);
          defineSymbol(math, main, bin, "\u2217", "*");
          defineSymbol(math, main, bin, "+", "+");
          defineSymbol(math, main, bin, "\u2212", "-");
          defineSymbol(math, main, bin, "\u22C5", "\\cdot", true);
          defineSymbol(math, main, bin, "\u2218", "\\circ");
          defineSymbol(math, main, bin, "\xF7", "\\div", true);
          defineSymbol(math, main, bin, "\xB1", "\\pm", true);
          defineSymbol(math, main, bin, "\xD7", "\\times", true);
          defineSymbol(math, main, bin, "\u2229", "\\cap", true);
          defineSymbol(math, main, bin, "\u222A", "\\cup", true);
          defineSymbol(math, main, bin, "\u2216", "\\setminus");
          defineSymbol(math, main, bin, "\u2227", "\\land");
          defineSymbol(math, main, bin, "\u2228", "\\lor");
          defineSymbol(math, main, bin, "\u2227", "\\wedge", true);
          defineSymbol(math, main, bin, "\u2228", "\\vee", true);
          defineSymbol(math, main, textord, "\u221A", "\\surd");
          defineSymbol(math, main, open, "(", "(");
          defineSymbol(math, main, open, "[", "[");
          defineSymbol(math, main, open, "\u27E8", "\\langle", true);
          defineSymbol(math, main, open, "\u2223", "\\lvert");
          defineSymbol(math, main, open, "\u2225", "\\lVert");
          defineSymbol(math, main, close, ")", ")");
          defineSymbol(math, main, close, "]", "]");
          defineSymbol(math, main, close, "?", "?");
          defineSymbol(math, main, close, "!", "!");
          defineSymbol(math, main, close, "\u27E9", "\\rangle", true);
          defineSymbol(math, main, close, "\u2223", "\\rvert");
          defineSymbol(math, main, close, "\u2225", "\\rVert");
          defineSymbol(math, main, rel, "=", "=");
          defineSymbol(math, main, rel, "<", "<");
          defineSymbol(math, main, rel, ">", ">");
          defineSymbol(math, main, rel, ":", ":");
          defineSymbol(math, main, rel, "\u2248", "\\approx", true);
          defineSymbol(math, main, rel, "\u2245", "\\cong", true);
          defineSymbol(math, main, rel, "\u2265", "\\ge");
          defineSymbol(math, main, rel, "\u2265", "\\geq", true);
          defineSymbol(math, main, rel, "\u2190", "\\gets");
          defineSymbol(math, main, rel, ">", "\\gt");
          defineSymbol(math, main, rel, "\u2208", "\\in", true);
          defineSymbol(math, main, rel, "\u2209", "\\notin", true);
          defineSymbol(math, main, rel, "\u0338", "\\not");
          defineSymbol(math, main, rel, "\u2282", "\\subset", true);
          defineSymbol(math, main, rel, "\u2283", "\\supset", true);
          defineSymbol(math, main, rel, "\u2286", "\\subseteq", true);
          defineSymbol(math, main, rel, "\u2287", "\\supseteq", true);
          defineSymbol(math, ams, rel, "\u2288", "\\nsubseteq", true);
          defineSymbol(math, ams, rel, "\u2289", "\\nsupseteq", true);
          defineSymbol(math, main, rel, "\u22A8", "\\models");
          defineSymbol(math, main, rel, "\u2190", "\\leftarrow", true);
          defineSymbol(math, main, rel, "\u2264", "\\le");
          defineSymbol(math, main, rel, "\u2264", "\\leq", true);
          defineSymbol(math, main, rel, "<", "\\lt");
          defineSymbol(math, main, rel, "\u2260", "\\ne", true);
          defineSymbol(math, main, rel, "\u2260", "\\neq");
          defineSymbol(math, main, rel, "\u2192", "\\rightarrow", true);
          defineSymbol(math, main, rel, "\u2192", "\\to");
          defineSymbol(math, ams, rel, "\u2271", "\\ngeq", true);
          defineSymbol(math, ams, rel, "\u2270", "\\nleq", true);
          defineSymbol(math, main, spacing, null, "\\!");
          defineSymbol(math, main, spacing, "\xA0", "\\ ");
          defineSymbol(math, main, spacing, "\xA0", "~");
          defineSymbol(math, main, spacing, null, "\\,");
          defineSymbol(math, main, spacing, null, "\\:");
          defineSymbol(math, main, spacing, null, "\\;");
          defineSymbol(math, main, spacing, null, "\\enspace");
          defineSymbol(math, main, spacing, null, "\\qquad");
          defineSymbol(math, main, spacing, null, "\\quad");
          defineSymbol(math, main, spacing, "\xA0", "\\space"); // Ref: LaTeX Source 2e: \DeclareRobustCommand{\nobreakspace}{%

          defineSymbol(math, main, spacing, "\xA0", "\\nobreakspace");
          defineSymbol(text, main, spacing, null, "\\!");
          defineSymbol(text, main, spacing, "\xA0", "\\ ");
          defineSymbol(text, main, spacing, "\xA0", "~");
          defineSymbol(text, main, spacing, null, "\\,");
          defineSymbol(text, main, spacing, null, "\\:");
          defineSymbol(text, main, spacing, null, "\\;");
          defineSymbol(text, main, spacing, null, "\\enspace");
          defineSymbol(text, main, spacing, null, "\\qquad");
          defineSymbol(text, main, spacing, null, "\\quad");
          defineSymbol(text, main, spacing, "\xA0", "\\space");
          defineSymbol(text, main, spacing, "\xA0", "\\nobreakspace");
          defineSymbol(math, main, punct, ",", ",");
          defineSymbol(math, main, punct, ";", ";");
          defineSymbol(math, main, punct, ":", "\\colon");
          defineSymbol(math, ams, bin, "\u22BC", "\\barwedge", true);
          defineSymbol(math, ams, bin, "\u22BB", "\\veebar", true);
          defineSymbol(math, main, bin, "\u2299", "\\odot", true);
          defineSymbol(math, main, bin, "\u2295", "\\oplus", true);
          defineSymbol(math, main, bin, "\u2297", "\\otimes", true);
          defineSymbol(math, main, textord, "\u2202", "\\partial", true);
          defineSymbol(math, main, bin, "\u2298", "\\oslash", true);
          defineSymbol(math, ams, bin, "\u229A", "\\circledcirc", true);
          defineSymbol(math, ams, bin, "\u22A1", "\\boxdot", true);
          defineSymbol(math, main, bin, "\u25B3", "\\bigtriangleup");
          defineSymbol(math, main, bin, "\u25BD", "\\bigtriangledown");
          defineSymbol(math, main, bin, "\u2020", "\\dagger");
          defineSymbol(math, main, bin, "\u22C4", "\\diamond");
          defineSymbol(math, main, bin, "\u22C6", "\\star");
          defineSymbol(math, main, bin, "\u25C3", "\\triangleleft");
          defineSymbol(math, main, bin, "\u25B9", "\\triangleright");
          defineSymbol(math, main, open, "{", "\\{");
          defineSymbol(text, main, textord, "{", "\\{");
          defineSymbol(text, main, textord, "{", "\\textbraceleft");
          defineSymbol(math, main, close, "}", "\\}");
          defineSymbol(text, main, textord, "}", "\\}");
          defineSymbol(text, main, textord, "}", "\\textbraceright");
          defineSymbol(math, main, open, "{", "\\lbrace");
          defineSymbol(math, main, close, "}", "\\rbrace");
          defineSymbol(math, main, open, "[", "\\lbrack");
          defineSymbol(math, main, close, "]", "\\rbrack");
          defineSymbol(text, main, textord, "<", "\\textless"); // in T1 fontenc

          defineSymbol(text, main, textord, ">", "\\textgreater"); // in T1 fontenc

          defineSymbol(math, main, open, "\u230A", "\\lfloor");
          defineSymbol(math, main, close, "\u230B", "\\rfloor");
          defineSymbol(math, main, open, "\u2308", "\\lceil");
          defineSymbol(math, main, close, "\u2309", "\\rceil");
          defineSymbol(math, main, textord, "\\", "\\backslash");
          defineSymbol(math, main, textord, "\u2223", "|");
          defineSymbol(math, main, textord, "\u2223", "\\vert");
          defineSymbol(text, main, textord, "|", "\\textbar"); // in T1 fontenc

          defineSymbol(math, main, textord, "\u2225", "\\|");
          defineSymbol(math, main, textord, "\u2225", "\\Vert");
          defineSymbol(text, main, textord, "\u2225", "\\textbardbl");
          defineSymbol(math, main, rel, "\u2191", "\\uparrow", true);
          defineSymbol(math, main, rel, "\u21D1", "\\Uparrow", true);
          defineSymbol(math, main, rel, "\u2193", "\\downarrow", true);
          defineSymbol(math, main, rel, "\u21D3", "\\Downarrow", true);
          defineSymbol(math, main, rel, "\u2195", "\\updownarrow", true);
          defineSymbol(math, main, rel, "\u21D5", "\\Updownarrow", true);
          defineSymbol(math, main, op, "\u2210", "\\coprod");
          defineSymbol(math, main, op, "\u22C1", "\\bigvee");
          defineSymbol(math, main, op, "\u22C0", "\\bigwedge");
          defineSymbol(math, main, op, "\u2A04", "\\biguplus");
          defineSymbol(math, main, op, "\u22C2", "\\bigcap");
          defineSymbol(math, main, op, "\u22C3", "\\bigcup");
          defineSymbol(math, main, op, "\u222B", "\\int");
          defineSymbol(math, main, op, "\u222B", "\\intop");
          defineSymbol(math, main, op, "\u222C", "\\iint");
          defineSymbol(math, main, op, "\u222D", "\\iiint");
          defineSymbol(math, main, op, "\u220F", "\\prod");
          defineSymbol(math, main, op, "\u2211", "\\sum");
          defineSymbol(math, main, op, "\u2A02", "\\bigotimes");
          defineSymbol(math, main, op, "\u2A01", "\\bigoplus");
          defineSymbol(math, main, op, "\u2A00", "\\bigodot");
          defineSymbol(math, main, op, "\u222E", "\\oint");
          defineSymbol(math, main, op, "\u2A06", "\\bigsqcup");
          defineSymbol(math, main, op, "\u222B", "\\smallint");
          defineSymbol(text, main, inner, "\u2026", "\\textellipsis");
          defineSymbol(math, main, inner, "\u2026", "\\mathellipsis");
          defineSymbol(text, main, inner, "\u2026", "\\ldots", true);
          defineSymbol(math, main, inner, "\u2026", "\\ldots", true);
          defineSymbol(math, main, inner, "\u22EF", "\\@cdots", true);
          defineSymbol(math, main, inner, "\u22F1", "\\ddots", true);
          defineSymbol(math, main, textord, "\u22EE", "\\vdots", true);
          defineSymbol(math, main, accent, "\u02CA", "\\acute");
          defineSymbol(math, main, accent, "\u02CB", "\\grave");
          defineSymbol(math, main, accent, "\xA8", "\\ddot");
          defineSymbol(math, main, accent, "~", "\\tilde");
          defineSymbol(math, main, accent, "\u02C9", "\\bar");
          defineSymbol(math, main, accent, "\u02D8", "\\breve");
          defineSymbol(math, main, accent, "\u02C7", "\\check");
          defineSymbol(math, main, accent, "^", "\\hat");
          defineSymbol(math, main, accent, "\u20D7", "\\vec");
          defineSymbol(math, main, accent, "\u02D9", "\\dot");
          defineSymbol(math, main, accent, "\u02DA", "\\mathring");
          defineSymbol(math, main, mathord, "\u0131", "\\imath", true);
          defineSymbol(math, main, mathord, "\u0237", "\\jmath", true);
          defineSymbol(text, main, textord, "\u0131", "\\i", true);
          defineSymbol(text, main, textord, "\u0237", "\\j", true);
          defineSymbol(text, main, textord, "\xDF", "\\ss", true);
          defineSymbol(text, main, textord, "\xE6", "\\ae", true);
          defineSymbol(text, main, textord, "\xE6", "\\ae", true);
          defineSymbol(text, main, textord, "\u0153", "\\oe", true);
          defineSymbol(text, main, textord, "\xF8", "\\o", true);
          defineSymbol(text, main, textord, "\xC6", "\\AE", true);
          defineSymbol(text, main, textord, "\u0152", "\\OE", true);
          defineSymbol(text, main, textord, "\xD8", "\\O", true);
          defineSymbol(text, main, accent, "\u02CA", "\\'"); // acute

          defineSymbol(text, main, accent, "\u02CB", "\\`"); // grave

          defineSymbol(text, main, accent, "\u02C6", "\\^"); // circumflex

          defineSymbol(text, main, accent, "\u02DC", "\\~"); // tilde

          defineSymbol(text, main, accent, "\u02C9", "\\="); // macron

          defineSymbol(text, main, accent, "\u02D8", "\\u"); // breve

          defineSymbol(text, main, accent, "\u02D9", "\\."); // dot above

          defineSymbol(text, main, accent, "\u02DA", "\\r"); // ring above

          defineSymbol(text, main, accent, "\u02C7", "\\v"); // caron

          defineSymbol(text, main, accent, "\xA8", '\\"'); // diaresis

          defineSymbol(text, main, accent, "\u02DD", "\\H"); // double acute

          defineSymbol(text, main, textord, "\u2013", "--");
          defineSymbol(text, main, textord, "\u2013", "\\textendash");
          defineSymbol(text, main, textord, "\u2014", "---");
          defineSymbol(text, main, textord, "\u2014", "\\textemdash");
          defineSymbol(text, main, textord, "\u2018", "`");
          defineSymbol(text, main, textord, "\u2018", "\\textquoteleft");
          defineSymbol(text, main, textord, "\u2019", "'");
          defineSymbol(text, main, textord, "\u2019", "\\textquoteright");
          defineSymbol(text, main, textord, "\u201C", "``");
          defineSymbol(text, main, textord, "\u201C", "\\textquotedblleft");
          defineSymbol(text, main, textord, "\u201D", "''");
          defineSymbol(text, main, textord, "\u201D", "\\textquotedblright");
          defineSymbol(math, main, textord, "\xB0", "\\degree");
          defineSymbol(text, main, textord, "\xB0", "\\degree"); // TODO: In LaTeX, \pounds can generate a different character in text and math
          // mode, but among our fonts, only Main-Italic defines this character "163".

          defineSymbol(math, main, mathord, "\xA3", "\\pounds");
          defineSymbol(math, main, mathord, "\xA3", "\\mathsterling", true);
          defineSymbol(text, main, mathord, "\xA3", "\\pounds");
          defineSymbol(text, main, mathord, "\xA3", "\\textsterling", true);
          defineSymbol(math, ams, textord, "\u2720", "\\maltese");
          defineSymbol(text, ams, textord, "\u2720", "\\maltese");
          defineSymbol(text, main, spacing, "\xA0", "\\ ");
          defineSymbol(text, main, spacing, "\xA0", " ");
          defineSymbol(text, main, spacing, "\xA0", "~"); // There are lots of symbols which are the same, so we add them in afterwards.
          // All of these are textords in math mode

          var mathTextSymbols = "0123456789/@.\"";

          for (var i = 0; i < mathTextSymbols.length; i++) {
            var ch = mathTextSymbols.charAt(i);
            defineSymbol(math, main, textord, ch, ch);
          } // All of these are textords in text mode


          var textSymbols = "0123456789!@*()-=+[]<>|\";:?/.,";

          for (var _i = 0; _i < textSymbols.length; _i++) {
            var _ch = textSymbols.charAt(_i);

            defineSymbol(text, main, textord, _ch, _ch);
          } // All of these are textords in text mode, and mathords in math mode


          var letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

          for (var _i2 = 0; _i2 < letters.length; _i2++) {
            var _ch2 = letters.charAt(_i2);

            defineSymbol(math, main, mathord, _ch2, _ch2);
            defineSymbol(text, main, textord, _ch2, _ch2);
          } // We add these Latin-1 letters as symbols for backwards-compatibility,
          // but they are not actually in the font, nor are they supported by the
          // Unicode accent mechanism, so they fall back to Times font and look ugly.
          // TODO(edemaine): Fix this.


          var extraLatin = "ÇÐÞçþ";

          for (var _i3 = 0; _i3 < extraLatin.length; _i3++) {
            var _ch3 = extraLatin.charAt(_i3);

            defineSymbol(math, main, mathord, _ch3, _ch3);
            defineSymbol(text, main, textord, _ch3, _ch3);
          }

          defineSymbol(text, main, textord, "ð", "ð"); // Unicode versions of existing characters

          defineSymbol(text, main, textord, "\u2013", "–");
          defineSymbol(text, main, textord, "\u2014", "—");
          defineSymbol(text, main, textord, "\u2018", "‘");
          defineSymbol(text, main, textord, "\u2019", "’");
          defineSymbol(text, main, textord, "\u201C", "“");
          defineSymbol(text, main, textord, "\u201D", "”");
          /***/
        },
        /* 29 */

        /***/
        function (module, exports, __webpack_require__) {
          // 7.1.13 ToObject(argument)
          var defined = __webpack_require__(38);

          module.exports = function (it) {
            return Object(defined(it));
          };
          /***/

        },
        /* 30 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__unicodeScripts__ = __webpack_require__(42);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__submodules_katex_fonts_fontMetricsData__ = __webpack_require__(59);
          /**
           * This file contains metrics regarding fonts and individual symbols. The sigma
           * and xi variables, as well as the metricMap map contain data extracted from
           * TeX, TeX font metrics, and the TTF files. These data are then exposed via the
           * `metrics` variable and the getCharacterMetrics function.
           */
          // In TeX, there are actually three sets of dimensions, one for each of
          // textstyle (size index 5 and higher: >=9pt), scriptstyle (size index 3 and 4:
          // 7-8pt), and scriptscriptstyle (size index 1 and 2: 5-6pt).  These are
          // provided in the the arrays below, in that order.
          //
          // The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respsectively.
          // This was determined by running the following script:
          //
          //     latex -interaction=nonstopmode \
          //     '\documentclass{article}\usepackage{amsmath}\begin{document}' \
          //     '$a$ \expandafter\show\the\textfont2' \
          //     '\expandafter\show\the\scriptfont2' \
          //     '\expandafter\show\the\scriptscriptfont2' \
          //     '\stop'
          //
          // The metrics themselves were retreived using the following commands:
          //
          //     tftopl cmsy10
          //     tftopl cmsy7
          //     tftopl cmsy5
          //
          // The output of each of these commands is quite lengthy.  The only part we
          // care about is the FONTDIMEN section. Each value is measured in EMs.


          var sigmasAndXis = {
            slant: [0.250, 0.250, 0.250],
            // sigma1
            space: [0.000, 0.000, 0.000],
            // sigma2
            stretch: [0.000, 0.000, 0.000],
            // sigma3
            shrink: [0.000, 0.000, 0.000],
            // sigma4
            xHeight: [0.431, 0.431, 0.431],
            // sigma5
            quad: [1.000, 1.171, 1.472],
            // sigma6
            extraSpace: [0.000, 0.000, 0.000],
            // sigma7
            num1: [0.677, 0.732, 0.925],
            // sigma8
            num2: [0.394, 0.384, 0.387],
            // sigma9
            num3: [0.444, 0.471, 0.504],
            // sigma10
            denom1: [0.686, 0.752, 1.025],
            // sigma11
            denom2: [0.345, 0.344, 0.532],
            // sigma12
            sup1: [0.413, 0.503, 0.504],
            // sigma13
            sup2: [0.363, 0.431, 0.404],
            // sigma14
            sup3: [0.289, 0.286, 0.294],
            // sigma15
            sub1: [0.150, 0.143, 0.200],
            // sigma16
            sub2: [0.247, 0.286, 0.400],
            // sigma17
            supDrop: [0.386, 0.353, 0.494],
            // sigma18
            subDrop: [0.050, 0.071, 0.100],
            // sigma19
            delim1: [2.390, 1.700, 1.980],
            // sigma20
            delim2: [1.010, 1.157, 1.420],
            // sigma21
            axisHeight: [0.250, 0.250, 0.250],
            // sigma22
            // These font metrics are extracted from TeX by using tftopl on cmex10.tfm;
            // they correspond to the font parameters of the extension fonts (family 3).
            // See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to
            // match cmex7, we'd use cmex7.tfm values for script and scriptscript
            // values.
            defaultRuleThickness: [0.04, 0.049, 0.049],
            // xi8; cmex7: 0.049
            bigOpSpacing1: [0.111, 0.111, 0.111],
            // xi9
            bigOpSpacing2: [0.166, 0.166, 0.166],
            // xi10
            bigOpSpacing3: [0.2, 0.2, 0.2],
            // xi11
            bigOpSpacing4: [0.6, 0.611, 0.611],
            // xi12; cmex7: 0.611
            bigOpSpacing5: [0.1, 0.143, 0.143],
            // xi13; cmex7: 0.143
            // The \sqrt rule width is taken from the height of the surd character.
            // Since we use the same font at all sizes, this thickness doesn't scale.
            sqrtRuleThickness: [0.04, 0.04, 0.04],
            // This value determines how large a pt is, for metrics which are defined
            // in terms of pts.
            // This value is also used in katex.less; if you change it make sure the
            // values match.
            ptPerEm: [10.0, 10.0, 10.0],
            // The space between adjacent `|` columns in an array definition. From
            // `\showthe\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.
            doubleRuleSep: [0.2, 0.2, 0.2]
          }; // This map contains a mapping from font name and character code to character
          // metrics, including height, depth, italic correction, and skew (kern from the
          // character to the corresponding \skewchar)
          // This map is generated via `make metrics`. It should not be changed manually.
          // These are very rough approximations.  We default to Times New Roman which
          // should have Latin-1 and Cyrillic characters, but may not depending on the
          // operating system.  The metrics do not account for extra height from the
          // accents.  In the case of Cyrillic characters which have both ascenders and
          // descenders we prefer approximations with ascenders, primarily to prevent
          // the fraction bar or root line from intersecting the glyph.
          // TODO(kevinb) allow union of multiple glyph metrics for better accuracy.

          var extraCharacterMap = {
            // Latin-1
            'Å': 'A',
            'Ç': 'C',
            'Ð': 'D',
            'Þ': 'o',
            'å': 'a',
            'ç': 'c',
            'ð': 'd',
            'þ': 'o',
            // Cyrillic
            'А': 'A',
            'Б': 'B',
            'В': 'B',
            'Г': 'F',
            'Д': 'A',
            'Е': 'E',
            'Ж': 'K',
            'З': '3',
            'И': 'N',
            'Й': 'N',
            'К': 'K',
            'Л': 'N',
            'М': 'M',
            'Н': 'H',
            'О': 'O',
            'П': 'N',
            'Р': 'P',
            'С': 'C',
            'Т': 'T',
            'У': 'y',
            'Ф': 'O',
            'Х': 'X',
            'Ц': 'U',
            'Ч': 'h',
            'Ш': 'W',
            'Щ': 'W',
            'Ъ': 'B',
            'Ы': 'X',
            'Ь': 'B',
            'Э': '3',
            'Ю': 'X',
            'Я': 'R',
            'а': 'a',
            'б': 'b',
            'в': 'a',
            'г': 'r',
            'д': 'y',
            'е': 'e',
            'ж': 'm',
            'з': 'e',
            'и': 'n',
            'й': 'n',
            'к': 'n',
            'л': 'n',
            'м': 'm',
            'н': 'n',
            'о': 'o',
            'п': 'n',
            'р': 'p',
            'с': 'c',
            'т': 'o',
            'у': 'y',
            'ф': 'b',
            'х': 'x',
            'ц': 'n',
            'ч': 'n',
            'ш': 'w',
            'щ': 'w',
            'ъ': 'a',
            'ы': 'm',
            'ь': 'a',
            'э': 'e',
            'ю': 'm',
            'я': 'r'
          };
          /**
           * This function is a convenience function for looking up information in the
           * metricMap table. It takes a character as a string, and a font.
           *
           * Note: the `width` property may be undefined if fontMetricsData.js wasn't
           * built using `Make extended_metrics`.
           */

          var getCharacterMetrics = function getCharacterMetrics(character, font, mode) {
            if (!__WEBPACK_IMPORTED_MODULE_1__submodules_katex_fonts_fontMetricsData__["a"
            /* default */
            ][font]) {
              throw new Error("Font metrics not found for font: " + font + ".");
            }

            var ch = character.charCodeAt(0);

            if (character[0] in extraCharacterMap) {
              ch = extraCharacterMap[character[0]].charCodeAt(0);
            }

            var metrics = __WEBPACK_IMPORTED_MODULE_1__submodules_katex_fonts_fontMetricsData__["a"
            /* default */
            ][font][ch];

            if (!metrics && mode === 'text') {
              // We don't typically have font metrics for Asian scripts.
              // But since we support them in text mode, we need to return
              // some sort of metrics.
              // So if the character is in a script we support but we
              // don't have metrics for it, just use the metrics for
              // the Latin capital letter M. This is close enough because
              // we (currently) only care about the height of the glpyh
              // not its width.
              if (Object(__WEBPACK_IMPORTED_MODULE_0__unicodeScripts__["b"
              /* supportedCodepoint */
              ])(ch)) {
                metrics = __WEBPACK_IMPORTED_MODULE_1__submodules_katex_fonts_fontMetricsData__["a"
                /* default */
                ][font][77]; // 77 is the charcode for 'M'
              }
            }

            if (metrics) {
              return {
                depth: metrics[0],
                height: metrics[1],
                italic: metrics[2],
                skew: metrics[3],
                width: metrics[4]
              };
            }
          };

          var fontMetricsBySizeIndex = {};
          /**
           * Get the font metrics for a given size.
           */

          var getFontMetrics = function getFontMetrics(size) {
            var sizeIndex = void 0;

            if (size >= 5) {
              sizeIndex = 0;
            } else if (size >= 3) {
              sizeIndex = 1;
            } else {
              sizeIndex = 2;
            }

            if (!fontMetricsBySizeIndex[sizeIndex]) {
              var metrics = fontMetricsBySizeIndex[sizeIndex] = {
                cssEmPerMu: sigmasAndXis.quad[sizeIndex] / 18
              };

              for (var key in sigmasAndXis) {
                if (sigmasAndXis.hasOwnProperty(key)) {
                  metrics[key] = sigmasAndXis[key][sizeIndex];
                }
              }
            }

            return fontMetricsBySizeIndex[sizeIndex];
          };
          /* harmony default export */


          __webpack_exports__["a"] = {
            getFontMetrics: getFontMetrics,
            getCharacterMetrics: getCharacterMetrics
          };
          /***/
        },
        /* 31 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_freeze__ = __webpack_require__(66);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_freeze___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_freeze__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__ = __webpack_require__(7);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass__ = __webpack_require__(10);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass__);
          /**
           * Lexing or parsing positional information for error reporting.
           * This object is immutable.
           */


          var SourceLocation = function () {
            // End offset, zero-based exclusive.
            // Lexer holding the input string.
            function SourceLocation(lexer, start, end) {
              __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default()(this, SourceLocation);

              this.lexer = lexer;
              this.start = start;
              this.end = end;

              __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_freeze___default()(this); // Immutable to allow sharing in range().

            }
            /**
             * Merges two `SourceLocation`s from location providers, given they are
             * provided in order of appearance.
             * - Returns the first one's location if only the first is provided.
             * - Returns a merged range of the first and the last if both are provided
             *   and their lexers match.
             * - Otherwise, returns null.
             */
            // Start offset, zero-based inclusive.


            __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass___default()(SourceLocation, null, [{
              key: "range",
              value: function range(first, second) {
                if (!second) {
                  return first && first.loc;
                } else if (!first || !first.loc || !second.loc || first.loc.lexer !== second.loc.lexer) {
                  return null;
                } else {
                  return new SourceLocation(first.loc.lexer, first.loc.start, second.loc.end);
                }
              }
            }]);

            return SourceLocation;
          }();
          /* harmony default export */


          __webpack_exports__["a"] = SourceLocation;
          /***/
        },
        /* 32 */

        /***/
        function (module, exports) {
          var id = 0,
              px = Math.random();

          module.exports = function (key) {
            return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
          };
          /***/

        },
        /* 33 */

        /***/
        function (module, exports) {
          module.exports = function (bitmap, value) {
            return {
              enumerable: !(bitmap & 1),
              configurable: !(bitmap & 2),
              writable: !(bitmap & 4),
              value: value
            };
          };
          /***/

        },
        /* 34 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__ = __webpack_require__(7);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(5);
          /**
           * This is a module for storing settings passed into KaTeX. It correctly handles
           * default settings.
           */

          /**
           * The main Settings object
           *
           * The current options stored are:
           *  - displayMode: Whether the expression should be typeset as inline math
           *                 (false, the default), meaning that the math starts in
           *                 \textstyle and is placed in an inline-block); or as display
           *                 math (true), meaning that the math starts in \displaystyle
           *                 and is placed in a block with vertical margin.
           */


          var Settings = function Settings(options) {
            __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this, Settings); // allow null options


            options = options || {};
            this.displayMode = __WEBPACK_IMPORTED_MODULE_1__utils__["a"
            /* default */
            ].deflt(options.displayMode, false);
            this.throwOnError = __WEBPACK_IMPORTED_MODULE_1__utils__["a"
            /* default */
            ].deflt(options.throwOnError, true);
            this.errorColor = __WEBPACK_IMPORTED_MODULE_1__utils__["a"
            /* default */
            ].deflt(options.errorColor, "#cc0000");
            this.macros = options.macros || {};
            this.colorIsTextColor = __WEBPACK_IMPORTED_MODULE_1__utils__["a"
            /* default */
            ].deflt(options.colorIsTextColor, false);
            this.maxSize = Math.max(0, __WEBPACK_IMPORTED_MODULE_1__utils__["a"
            /* default */
            ].deflt(options.maxSize, Infinity));
          };
          /* harmony default export */


          __webpack_exports__["a"] = Settings;
          /***/
        },
        /* 35 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict";

          exports.__esModule = true;

          var _from = __webpack_require__(79);

          var _from2 = _interopRequireDefault(_from);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              "default": obj
            };
          }

          exports["default"] = function (arr) {
            if (Array.isArray(arr)) {
              for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
              }

              return arr2;
            } else {
              return (0, _from2["default"])(arr);
            }
          };
          /***/

        },
        /* 36 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict";

          var $at = __webpack_require__(81)(true); // 21.1.3.27 String.prototype[@@iterator]()


          __webpack_require__(48)(String, 'String', function (iterated) {
            this._t = String(iterated); // target

            this._i = 0; // next index
            // 21.1.5.2.1 %StringIteratorPrototype%.next()
          }, function () {
            var O = this._t,
                index = this._i,
                point;
            if (index >= O.length) return {
              value: undefined,
              done: true
            };
            point = $at(O, index);
            this._i += point.length;
            return {
              value: point,
              done: false
            };
          });
          /***/

        },
        /* 37 */

        /***/
        function (module, exports) {
          // 7.1.4 ToInteger
          var ceil = Math.ceil,
              floor = Math.floor;

          module.exports = function (it) {
            return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
          };
          /***/

        },
        /* 38 */

        /***/
        function (module, exports) {
          // 7.2.1 RequireObjectCoercible(argument)
          module.exports = function (it) {
            if (it == undefined) throw TypeError("Can't call method on  " + it);
            return it;
          };
          /***/

        },
        /* 39 */

        /***/
        function (module, exports, __webpack_require__) {
          // 19.1.2.14 / 15.2.3.14 Object.keys(O)
          var $keys = __webpack_require__(87),
              enumBugKeys = __webpack_require__(53);

          module.exports = Object.keys || function keys(O) {
            return $keys(O, enumBugKeys);
          };
          /***/

        },
        /* 40 */

        /***/
        function (module, exports, __webpack_require__) {
          // to indexed object, toObject with fallback for non-array-like ES3 strings
          var IObject = __webpack_require__(49),
              defined = __webpack_require__(38);

          module.exports = function (it) {
            return IObject(defined(it));
          };
          /***/

        },
        /* 41 */

        /***/
        function (module, exports, __webpack_require__) {
          var shared = __webpack_require__(52)('keys'),
              uid = __webpack_require__(32);

          module.exports = function (key) {
            return shared[key] || (shared[key] = uid(key));
          };
          /***/

        },
        /* 42 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony export (immutable) */

          __webpack_exports__["a"] = scriptFromCodepoint;
          /* harmony export (immutable) */

          __webpack_exports__["b"] = supportedCodepoint;
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__ = __webpack_require__(35);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator__ = __webpack_require__(18);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator__);
          /**
           * Unicode block data for the families of scripts we support in \text{}.
           * Scripts only need to appear here if they do not have font metrics.
           */


          var scriptData = [{
            // Latin characters beyond the Latin-1 characters we have metrics for.
            // Needed for Czech, Hungarian and Turkish text, for example.
            name: 'latin',
            blocks: [[0x0100, 0x024f], // Latin Extended-A and Latin Extended-B
            [0x0300, 0x036f]]
          }, {
            // The Cyrillic script used by Russian and related languages.
            // A Cyrillic subset used to be supported as explicitly defined
            // symbols in symbols.js
            name: 'cyrillic',
            blocks: [[0x0400, 0x04ff]]
          }, {
            // The Brahmic scripts of South and Southeast Asia
            // Devanagari (0900–097F)
            // Bengali (0980–09FF)
            // Gurmukhi (0A00–0A7F)
            // Gujarati (0A80–0AFF)
            // Oriya (0B00–0B7F)
            // Tamil (0B80–0BFF)
            // Telugu (0C00–0C7F)
            // Kannada (0C80–0CFF)
            // Malayalam (0D00–0D7F)
            // Sinhala (0D80–0DFF)
            // Thai (0E00–0E7F)
            // Lao (0E80–0EFF)
            // Tibetan (0F00–0FFF)
            // Myanmar (1000–109F)
            name: 'brahmic',
            blocks: [[0x0900, 0x109F]]
          }, {
            name: 'georgian',
            blocks: [[0x10A0, 0x10ff]]
          }, {
            // Chinese and Japanese.
            // The "k" in cjk is for Korean, but we've separated Korean out
            name: "cjk",
            blocks: [[0x3000, 0x30FF], // CJK symbols and punctuation, Hiragana, Katakana
            [0x4E00, 0x9FAF], // CJK ideograms
            [0xFF00, 0xFF60]]
          }, {
            // Korean
            name: 'hangul',
            blocks: [[0xAC00, 0xD7AF]]
          }];
          /**
           * Given a codepoint, return the name of the script or script family
           * it is from, or null if it is not part of a known block
           */

          /*
           * This file defines the Unicode scripts and script families that we
           * support. To add new scripts or families, just add a new entry to the
           * scriptData array below. Adding scripts to the scriptData array allows
           * characters from that script to appear in \text{} environments.
           */

          /**
           * Each script or script family has a name and an array of blocks.
           * Each block is an array of two numbers which specify the start and
           * end points (inclusive) of a block of Unicode codepoints.
           */

          function scriptFromCodepoint(codepoint) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default()(scriptData), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var script = _step.value;
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                  for (var _iterator2 = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default()(script.blocks), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var block = _step2.value;

                    if (codepoint >= block[0] && codepoint <= block[1]) {
                      return script.name;
                    }
                  }
                } catch (err) {
                  _didIteratorError2 = true;
                  _iteratorError2 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
                      _iterator2["return"]();
                    }
                  } finally {
                    if (_didIteratorError2) {
                      throw _iteratorError2;
                    }
                  }
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator["return"]) {
                  _iterator["return"]();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            return null;
          }
          /**
           * A flattened version of all the supported blocks in a single array.
           * This is an optimization to make supportedCodepoint() fast.
           */


          var allBlocks = [];
          scriptData.forEach(function (s) {
            return s.blocks.forEach(function (b) {
              return allBlocks.push.apply(allBlocks, __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default()(b));
            });
          });
          /**
           * Given a codepoint, return true if it falls within one of the
           * scripts or script families defined above and false otherwise.
           *
           * Micro benchmarks shows that this is faster than
           * /[\u3000-\u30FF\u4E00-\u9FAF\uFF00-\uFF60\uAC00-\uD7AF\u0900-\u109F]/.test()
           * in Firefox, Chrome and Node.
           */

          function supportedCodepoint(codepoint) {
            for (var i = 0; i < allBlocks.length; i += 2) {
              if (codepoint >= allBlocks[i] && codepoint <= allBlocks[i + 1]) {
                return true;
              }
            }

            return false;
          }
          /***/

        },
        /* 43 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__ = __webpack_require__(7);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__ = __webpack_require__(10);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__fontMetrics__ = __webpack_require__(30);
          /**
           * This file contains information about the options that the Parser carries
           * around with it while parsing. Data is held in an `Options` object, and when
           * recursing, a new `Options` object can be created with the `.with*` and
           * `.reset` functions.
           */


          var sizeStyleMap = [// Each element contains [textsize, scriptsize, scriptscriptsize].
          // The size mappings are taken from TeX with \normalsize=10pt.
          [1, 1, 1], // size1: [5, 5, 5]              \tiny
          [2, 1, 1], // size2: [6, 5, 5]
          [3, 1, 1], // size3: [7, 5, 5]              \scriptsize
          [4, 2, 1], // size4: [8, 6, 5]              \footnotesize
          [5, 2, 1], // size5: [9, 6, 5]              \small
          [6, 3, 1], // size6: [10, 7, 5]             \normalsize
          [7, 4, 2], // size7: [12, 8, 6]             \large
          [8, 6, 3], // size8: [14.4, 10, 7]          \Large
          [9, 7, 6], // size9: [17.28, 12, 10]        \LARGE
          [10, 8, 7], // size10: [20.74, 14.4, 12]     \huge
          [11, 10, 9]];
          var sizeMultipliers = [// fontMetrics.js:getFontMetrics also uses size indexes, so if
          // you change size indexes, change that function.
          0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.2, 1.44, 1.728, 2.074, 2.488];

          var sizeAtStyle = function sizeAtStyle(size, style) {
            return style.size < 2 ? size : sizeStyleMap[size - 1][style.size - 1];
          };
          /**
           * This is the main options class. It contains the current style, size, color,
           * and font.
           *
           * Options objects should not be modified. To create a new Options with
           * different properties, call a `.having*` method.
           */


          var Options = function () {
            function Options(data) {
              __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this, Options);

              this.style = data.style;
              this.color = data.color;
              this.size = data.size || Options.BASESIZE;
              this.textSize = data.textSize || this.size;
              this.phantom = !!data.phantom;
              this.fontFamily = data.fontFamily;
              this.fontWeight = data.fontWeight || '';
              this.fontShape = data.fontShape || '';
              this.sizeMultiplier = sizeMultipliers[this.size - 1];
              this.maxSize = data.maxSize;
              this._fontMetrics = undefined;
            }
            /**
             * Returns a new options object with the same properties as "this".  Properties
             * from "extension" will be copied to the new options object.
             */

            /**
             * The base size index.
             */


            __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default()(Options, [{
              key: "extend",
              value: function extend(extension) {
                var data = {
                  style: this.style,
                  size: this.size,
                  textSize: this.textSize,
                  color: this.color,
                  phantom: this.phantom,
                  fontFamily: this.fontFamily,
                  fontWeight: this.fontWeight,
                  fontShape: this.fontShape,
                  maxSize: this.maxSize
                };

                for (var key in extension) {
                  if (extension.hasOwnProperty(key)) {
                    data[key] = extension[key];
                  }
                }

                return new Options(data);
              }
              /**
               * Return an options object with the given style. If `this.style === style`,
               * returns `this`.
               */

            }, {
              key: "havingStyle",
              value: function havingStyle(style) {
                if (this.style === style) {
                  return this;
                } else {
                  return this.extend({
                    style: style,
                    size: sizeAtStyle(this.textSize, style)
                  });
                }
              }
              /**
               * Return an options object with a cramped version of the current style. If
               * the current style is cramped, returns `this`.
               */

            }, {
              key: "havingCrampedStyle",
              value: function havingCrampedStyle() {
                return this.havingStyle(this.style.cramp());
              }
              /**
               * Return an options object with the given size and in at least `\textstyle`.
               * Returns `this` if appropriate.
               */

            }, {
              key: "havingSize",
              value: function havingSize(size) {
                if (this.size === size && this.textSize === size) {
                  return this;
                } else {
                  return this.extend({
                    style: this.style.text(),
                    size: size,
                    textSize: size,
                    sizeMultiplier: sizeMultipliers[size - 1]
                  });
                }
              }
              /**
               * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,
               * changes to at least `\textstyle`.
               */

            }, {
              key: "havingBaseStyle",
              value: function havingBaseStyle(style) {
                style = style || this.style.text();
                var wantSize = sizeAtStyle(Options.BASESIZE, style);

                if (this.size === wantSize && this.textSize === Options.BASESIZE && this.style === style) {
                  return this;
                } else {
                  return this.extend({
                    style: style,
                    size: wantSize
                  });
                }
              }
              /**
               * Create a new options object with the given color.
               */

            }, {
              key: "withColor",
              value: function withColor(color) {
                return this.extend({
                  color: color
                });
              }
              /**
               * Create a new options object with "phantom" set to true.
               */

            }, {
              key: "withPhantom",
              value: function withPhantom() {
                return this.extend({
                  phantom: true
                });
              }
              /**
               * Create a new options objects with the give font.
               */

            }, {
              key: "withFontFamily",
              value: function withFontFamily(fontFamily) {
                return this.extend({
                  fontFamily: fontFamily || this.fontFamily
                });
              }
              /**
               * Creates a new options object with the given font weight
               */

            }, {
              key: "withFontWeight",
              value: function withFontWeight(fontWeight) {
                return this.extend({
                  fontWeight: fontWeight
                });
              }
              /**
               * Creates a new options object with the given font weight
               */

            }, {
              key: "withFontShape",
              value: function withFontShape(fontShape) {
                return this.extend({
                  fontShape: fontShape
                });
              }
              /**
               * Return the CSS sizing classes required to switch from enclosing options
               * `oldOptions` to `this`. Returns an array of classes.
               */

            }, {
              key: "sizingClasses",
              value: function sizingClasses(oldOptions) {
                if (oldOptions.size !== this.size) {
                  return ["sizing", "reset-size" + oldOptions.size, "size" + this.size];
                } else {
                  return [];
                }
              }
              /**
               * Return the CSS sizing classes required to switch to the base size. Like
               * `this.havingSize(BASESIZE).sizingClasses(this)`.
               */

            }, {
              key: "baseSizingClasses",
              value: function baseSizingClasses() {
                if (this.size !== Options.BASESIZE) {
                  return ["sizing", "reset-size" + this.size, "size" + Options.BASESIZE];
                } else {
                  return [];
                }
              }
              /**
               * Return the font metrics for this size.
               */

            }, {
              key: "fontMetrics",
              value: function fontMetrics() {
                if (!this._fontMetrics) {
                  this._fontMetrics = __WEBPACK_IMPORTED_MODULE_2__fontMetrics__["a"
                  /* default */
                  ].getFontMetrics(this.size);
                }

                return this._fontMetrics;
              }
              /**
               * A map of color names to CSS colors.
               * TODO(emily): Remove this when we have real macros
               */

            }, {
              key: "getColor",

              /**
               * Gets the CSS color of the current options object, accounting for the
               * `colorMap`.
               */
              value: function getColor() {
                if (this.phantom) {
                  return "transparent";
                } else if (this.color != null && Options.colorMap.hasOwnProperty(this.color)) {
                  return Options.colorMap[this.color];
                } else {
                  return this.color;
                }
              }
            }]);

            return Options;
          }();

          Options.BASESIZE = 6;
          Options.colorMap = {
            "katex-blue": "#6495ed",
            "katex-orange": "#ffa500",
            "katex-pink": "#ff00af",
            "katex-red": "#df0030",
            "katex-green": "#28ae7b",
            "katex-gray": "gray",
            "katex-purple": "#9d38bd",
            "katex-blueA": "#ccfaff",
            "katex-blueB": "#80f6ff",
            "katex-blueC": "#63d9ea",
            "katex-blueD": "#11accd",
            "katex-blueE": "#0c7f99",
            "katex-tealA": "#94fff5",
            "katex-tealB": "#26edd5",
            "katex-tealC": "#01d1c1",
            "katex-tealD": "#01a995",
            "katex-tealE": "#208170",
            "katex-greenA": "#b6ffb0",
            "katex-greenB": "#8af281",
            "katex-greenC": "#74cf70",
            "katex-greenD": "#1fab54",
            "katex-greenE": "#0d923f",
            "katex-goldA": "#ffd0a9",
            "katex-goldB": "#ffbb71",
            "katex-goldC": "#ff9c39",
            "katex-goldD": "#e07d10",
            "katex-goldE": "#a75a05",
            "katex-redA": "#fca9a9",
            "katex-redB": "#ff8482",
            "katex-redC": "#f9685d",
            "katex-redD": "#e84d39",
            "katex-redE": "#bc2612",
            "katex-maroonA": "#ffbde0",
            "katex-maroonB": "#ff92c6",
            "katex-maroonC": "#ed5fa6",
            "katex-maroonD": "#ca337c",
            "katex-maroonE": "#9e034e",
            "katex-purpleA": "#ddd7ff",
            "katex-purpleB": "#c6b9fc",
            "katex-purpleC": "#aa87ff",
            "katex-purpleD": "#7854ab",
            "katex-purpleE": "#543b78",
            "katex-mintA": "#f5f9e8",
            "katex-mintB": "#edf2df",
            "katex-mintC": "#e0e5cc",
            "katex-grayA": "#f6f7f7",
            "katex-grayB": "#f0f1f2",
            "katex-grayC": "#e3e5e6",
            "katex-grayD": "#d6d8da",
            "katex-grayE": "#babec2",
            "katex-grayF": "#888d93",
            "katex-grayG": "#626569",
            "katex-grayH": "#3b3e40",
            "katex-grayI": "#21242c",
            "katex-kaBlue": "#314453",
            "katex-kaGreen": "#71B307"
          };
          /* harmony default export */

          __webpack_exports__["a"] = Options;
          /***/
        },
        /* 44 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__ParseError__ = __webpack_require__(6);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__Style__ = __webpack_require__(9);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__domTree__ = __webpack_require__(12);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__fontMetrics__ = __webpack_require__(30);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__symbols__ = __webpack_require__(28);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_6__utils__ = __webpack_require__(5);
          /**
           * This file deals with creating delimiters of various sizes. The TeXbook
           * discusses these routines on page 441-442, in the "Another subroutine sets box
           * x to a specified variable delimiter" paragraph.
           *
           * There are three main routines here. `makeSmallDelim` makes a delimiter in the
           * normal font, but in either text, script, or scriptscript style.
           * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,
           * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of
           * smaller pieces that are stacked on top of one another.
           *
           * The functions take a parameter `center`, which determines if the delimiter
           * should be centered around the axis.
           *
           * Then, there are three exposed functions. `sizedDelim` makes a delimiter in
           * one of the given sizes. This is used for things like `\bigl`.
           * `customSizedDelim` makes a delimiter with a given total height+depth. It is
           * called in places like `\sqrt`. `leftRightDelim` makes an appropriate
           * delimiter which surrounds an expression of a given height an depth. It is
           * used in `\left` and `\right`.
           */

          /**
           * Get the metrics for a given symbol and font, after transformation (i.e.
           * after following replacement from symbols.js)
           */


          var getMetrics = function getMetrics(symbol, font, mode) {
            if (__WEBPACK_IMPORTED_MODULE_5__symbols__["a"
            /* default */
            ].math[symbol] && __WEBPACK_IMPORTED_MODULE_5__symbols__["a"
            /* default */
            ].math[symbol].replace) {
              return __WEBPACK_IMPORTED_MODULE_4__fontMetrics__["a"
              /* default */
              ].getCharacterMetrics(__WEBPACK_IMPORTED_MODULE_5__symbols__["a"
              /* default */
              ].math[symbol].replace, font, mode);
            } else {
              return __WEBPACK_IMPORTED_MODULE_4__fontMetrics__["a"
              /* default */
              ].getCharacterMetrics(symbol, font, mode);
            }
          };
          /**
           * Puts a delimiter span in a given style, and adds appropriate height, depth,
           * and maxFontSizes.
           */


          var styleWrap = function styleWrap(delim, toStyle, options, classes) {
            var newOptions = options.havingBaseStyle(toStyle);

            var span = __WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"
            /* default */
            ].makeSpan((classes || []).concat(newOptions.sizingClasses(options)), [delim], options);

            span.delimSizeMultiplier = newOptions.sizeMultiplier / options.sizeMultiplier;
            span.height *= span.delimSizeMultiplier;
            span.depth *= span.delimSizeMultiplier;
            span.maxFontSize = newOptions.sizeMultiplier;
            return span;
          };

          var centerSpan = function centerSpan(span, options, style) {
            var newOptions = options.havingBaseStyle(style);
            var shift = (1 - options.sizeMultiplier / newOptions.sizeMultiplier) * options.fontMetrics().axisHeight;
            span.classes.push("delimcenter");
            span.style.top = shift + "em";
            span.height -= shift;
            span.depth += shift;
          };
          /**
           * Makes a small delimiter. This is a delimiter that comes in the Main-Regular
           * font, but is restyled to either be in textstyle, scriptstyle, or
           * scriptscriptstyle.
           */


          var makeSmallDelim = function makeSmallDelim(delim, style, center, options, mode, classes) {
            var text = __WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"
            /* default */
            ].makeSymbol(delim, "Main-Regular", mode, options);

            var span = styleWrap(text, style, options, classes);

            if (center) {
              centerSpan(span, options, style);
            }

            return span;
          };
          /**
           * Builds a symbol in the given font size (note size is an integer)
           */


          var mathrmSize = function mathrmSize(value, size, mode, options) {
            return __WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"
            /* default */
            ].makeSymbol(value, "Size" + size + "-Regular", mode, options);
          };
          /**
           * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,
           * Size3, or Size4 fonts. It is always rendered in textstyle.
           */


          var makeLargeDelim = function makeLargeDelim(delim, size, center, options, mode, classes) {
            var inner = mathrmSize(delim, size, mode, options);
            var span = styleWrap(__WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"
            /* default */
            ].makeSpan(["delimsizing", "size" + size], [inner], options), __WEBPACK_IMPORTED_MODULE_1__Style__["a"
            /* default */
            ].TEXT, options, classes);

            if (center) {
              centerSpan(span, options, __WEBPACK_IMPORTED_MODULE_1__Style__["a"
              /* default */
              ].TEXT);
            }

            return span;
          };
          /**
           * Make an inner span with the given offset and in the given font. This is used
           * in `makeStackedDelim` to make the stacking pieces for the delimiter.
           */


          var makeInner = function makeInner(symbol, font, mode) {
            var sizeClass = void 0; // Apply the correct CSS class to choose the right font.

            if (font === "Size1-Regular") {
              sizeClass = "delim-size1";
            } else if (font === "Size4-Regular") {
              sizeClass = "delim-size4";
            }

            var inner = __WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"
            /* default */
            ].makeSpan(["delimsizinginner", sizeClass], [__WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"
            /* default */
            ].makeSpan([], [__WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"
            /* default */
            ].makeSymbol(symbol, font, mode)])]); // Since this will be passed into `makeVList` in the end, wrap the element
            // in the appropriate tag that VList uses.


            return {
              type: "elem",
              elem: inner
            };
          };
          /**
           * Make a stacked delimiter out of a given delimiter, with the total height at
           * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.
           */


          var makeStackedDelim = function makeStackedDelim(delim, heightTotal, center, options, mode, classes) {
            // There are four parts, the top, an optional middle, a repeated part, and a
            // bottom.
            var top = void 0;
            var middle = void 0;
            var repeat = void 0;
            var bottom = void 0;
            top = repeat = bottom = delim;
            middle = null; // Also keep track of what font the delimiters are in

            var font = "Size1-Regular"; // We set the parts and font based on the symbol. Note that we use
            // '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the
            // repeats of the arrows

            if (delim === "\\uparrow") {
              repeat = bottom = "\u23D0";
            } else if (delim === "\\Uparrow") {
              repeat = bottom = "\u2016";
            } else if (delim === "\\downarrow") {
              top = repeat = "\u23D0";
            } else if (delim === "\\Downarrow") {
              top = repeat = "\u2016";
            } else if (delim === "\\updownarrow") {
              top = "\\uparrow";
              repeat = "\u23D0";
              bottom = "\\downarrow";
            } else if (delim === "\\Updownarrow") {
              top = "\\Uparrow";
              repeat = "\u2016";
              bottom = "\\Downarrow";
            } else if (delim === "[" || delim === "\\lbrack") {
              top = "\u23A1";
              repeat = "\u23A2";
              bottom = "\u23A3";
              font = "Size4-Regular";
            } else if (delim === "]" || delim === "\\rbrack") {
              top = "\u23A4";
              repeat = "\u23A5";
              bottom = "\u23A6";
              font = "Size4-Regular";
            } else if (delim === "\\lfloor") {
              repeat = top = "\u23A2";
              bottom = "\u23A3";
              font = "Size4-Regular";
            } else if (delim === "\\lceil") {
              top = "\u23A1";
              repeat = bottom = "\u23A2";
              font = "Size4-Regular";
            } else if (delim === "\\rfloor") {
              repeat = top = "\u23A5";
              bottom = "\u23A6";
              font = "Size4-Regular";
            } else if (delim === "\\rceil") {
              top = "\u23A4";
              repeat = bottom = "\u23A5";
              font = "Size4-Regular";
            } else if (delim === "(") {
              top = "\u239B";
              repeat = "\u239C";
              bottom = "\u239D";
              font = "Size4-Regular";
            } else if (delim === ")") {
              top = "\u239E";
              repeat = "\u239F";
              bottom = "\u23A0";
              font = "Size4-Regular";
            } else if (delim === "\\{" || delim === "\\lbrace") {
              top = "\u23A7";
              middle = "\u23A8";
              bottom = "\u23A9";
              repeat = "\u23AA";
              font = "Size4-Regular";
            } else if (delim === "\\}" || delim === "\\rbrace") {
              top = "\u23AB";
              middle = "\u23AC";
              bottom = "\u23AD";
              repeat = "\u23AA";
              font = "Size4-Regular";
            } else if (delim === "\\lgroup") {
              top = "\u23A7";
              bottom = "\u23A9";
              repeat = "\u23AA";
              font = "Size4-Regular";
            } else if (delim === "\\rgroup") {
              top = "\u23AB";
              bottom = "\u23AD";
              repeat = "\u23AA";
              font = "Size4-Regular";
            } else if (delim === "\\lmoustache") {
              top = "\u23A7";
              bottom = "\u23AD";
              repeat = "\u23AA";
              font = "Size4-Regular";
            } else if (delim === "\\rmoustache") {
              top = "\u23AB";
              bottom = "\u23A9";
              repeat = "\u23AA";
              font = "Size4-Regular";
            } // Get the metrics of the four sections


            var topMetrics = getMetrics(top, font, mode);
            var topHeightTotal = topMetrics.height + topMetrics.depth;
            var repeatMetrics = getMetrics(repeat, font, mode);
            var repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;
            var bottomMetrics = getMetrics(bottom, font, mode);
            var bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;
            var middleHeightTotal = 0;
            var middleFactor = 1;

            if (middle !== null) {
              var middleMetrics = getMetrics(middle, font, mode);
              middleHeightTotal = middleMetrics.height + middleMetrics.depth;
              middleFactor = 2; // repeat symmetrically above and below middle
            } // Calcuate the minimal height that the delimiter can have.
            // It is at least the size of the top, bottom, and optional middle combined.


            var minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal; // Compute the number of copies of the repeat symbol we will need

            var repeatCount = Math.ceil((heightTotal - minHeight) / (middleFactor * repeatHeightTotal)); // Compute the total height of the delimiter including all the symbols

            var realHeightTotal = minHeight + repeatCount * middleFactor * repeatHeightTotal; // The center of the delimiter is placed at the center of the axis. Note
            // that in this context, "center" means that the delimiter should be
            // centered around the axis in the current style, while normally it is
            // centered around the axis in textstyle.

            var axisHeight = options.fontMetrics().axisHeight;

            if (center) {
              axisHeight *= options.sizeMultiplier;
            } // Calculate the depth


            var depth = realHeightTotal / 2 - axisHeight; // Now, we start building the pieces that will go into the vlist
            // Keep a list of the inner pieces

            var inners = []; // Add the bottom symbol

            inners.push(makeInner(bottom, font, mode));

            if (middle === null) {
              // Add that many symbols
              for (var i = 0; i < repeatCount; i++) {
                inners.push(makeInner(repeat, font, mode));
              }
            } else {
              // When there is a middle bit, we need the middle part and two repeated
              // sections
              for (var _i = 0; _i < repeatCount; _i++) {
                inners.push(makeInner(repeat, font, mode));
              }

              inners.push(makeInner(middle, font, mode));

              for (var _i2 = 0; _i2 < repeatCount; _i2++) {
                inners.push(makeInner(repeat, font, mode));
              }
            } // Add the top symbol


            inners.push(makeInner(top, font, mode)); // Finally, build the vlist

            var newOptions = options.havingBaseStyle(__WEBPACK_IMPORTED_MODULE_1__Style__["a"
            /* default */
            ].TEXT);

            var inner = __WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"
            /* default */
            ].makeVList({
              positionType: "bottom",
              positionData: depth,
              children: inners
            }, newOptions);

            return styleWrap(__WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"
            /* default */
            ].makeSpan(["delimsizing", "mult"], [inner], newOptions), __WEBPACK_IMPORTED_MODULE_1__Style__["a"
            /* default */
            ].TEXT, options, classes);
          }; // All surds have 0.08em padding above the viniculum inside the SVG.
          // That keeps browser span height rounding error from pinching the line.


          var vbPad = 80; // padding above the surd, measured inside the viewBox.

          var emPad = 0.08; // padding, in ems, measured in the document.

          var sqrtSvg = function sqrtSvg(sqrtName, height, viewBoxHeight, options) {
            var alternate = void 0;

            if (sqrtName === "sqrtTall") {
              // sqrtTall is from glyph U23B7 in the font KaTeX_Size4-Regular
              // One path edge has a variable length. It runs from the viniculumn
              // to a point near (14 units) the bottom of the surd. The viniculum
              // is 40 units thick. So the length of the line in question is:
              var vertSegment = viewBoxHeight - 54 - vbPad;
              alternate = "M702 " + vbPad + "H400000v40H742v" + vertSegment + "l-4 4-4 4c-.667.7\n-2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1h-12l-28-84c-16.667-52-96.667\n-294.333-240-727l-212 -643 -85 170c-4-3.333-8.333-7.667-13 -13l-13-13l77-155\n 77-156c66 199.333 139 419.667 219 661 l218 661zM702 " + vbPad + "H400000v40H742z";
            }

            var pathNode = new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"
            /* default */
            ].pathNode(sqrtName, alternate);
            var svg = new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"
            /* default */
            ].svgNode([pathNode], {
              // Note: 1000:1 ratio of viewBox to document em width.
              "width": "400em",
              "height": height + "em",
              "viewBox": "0 0 400000 " + viewBoxHeight,
              "preserveAspectRatio": "xMinYMin slice"
            });
            return __WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"
            /* default */
            ].makeSpan(["hide-tail"], [svg], options);
          };
          /**
           * Make a sqrt image of the given height,
           */


          var makeSqrtImage = function makeSqrtImage(height, options) {
            var delim = traverseSequence("\\surd", height, stackLargeDelimiterSequence, options); // Create a span containing an SVG image of a sqrt symbol.

            var span = void 0;
            var sizeMultiplier = options.sizeMultiplier; // default

            var spanHeight = 0;
            var texHeight = 0;
            var viewBoxHeight = 0; // We create viewBoxes with 80 units of "padding" above each surd.
            // Then browser rounding error on the parent span height will not
            // encroach on the ink of the viniculum. But that padding is not
            // included in the TeX-like `height` used for calculation of
            // vertical alignment. So texHeight = span.height < span.style.height.

            if (delim.type === "small") {
              // Get an SVG that is derived from glyph U+221A in font KaTeX-Main.
              viewBoxHeight = 1000 + vbPad; // 1000 unit glyph height.

              var newOptions = options.havingBaseStyle(delim.style);
              sizeMultiplier = newOptions.sizeMultiplier / options.sizeMultiplier;
              spanHeight = (1.0 + emPad) * sizeMultiplier;
              texHeight = 1.00 * sizeMultiplier;
              span = sqrtSvg("sqrtMain", spanHeight, viewBoxHeight, options);
              span.style.minWidth = "0.853em";
              span.advanceWidth = 0.833 * sizeMultiplier; // from the font.
            } else if (delim.type === "large") {
              // These SVGs come from fonts: KaTeX_Size1, _Size2, etc.
              viewBoxHeight = (1000 + vbPad) * sizeToMaxHeight[delim.size];
              texHeight = sizeToMaxHeight[delim.size] / sizeMultiplier;
              spanHeight = (sizeToMaxHeight[delim.size] + emPad) / sizeMultiplier;
              span = sqrtSvg("sqrtSize" + delim.size, spanHeight, viewBoxHeight, options);
              span.style.minWidth = "1.02em";
              span.advanceWidth = 1.0 / sizeMultiplier; // from the font
            } else {
              // Tall sqrt. In TeX, this would be stacked using multiple glyphs.
              // We'll use a single SVG to accomplish the same thing.
              spanHeight = height / sizeMultiplier + emPad;
              texHeight = height / sizeMultiplier;
              viewBoxHeight = Math.floor(1000 * height) + vbPad;
              span = sqrtSvg("sqrtTall", spanHeight, viewBoxHeight, options);
              span.style.minWidth = "0.742em";
              span.advanceWidth = 1.056 / sizeMultiplier;
            }

            span.height = texHeight;
            span.style.height = spanHeight + "em";
            return {
              span: span,
              // Calculate the actual line width.
              // This actually should depend on the chosen font -- e.g. \boldmath
              // should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and
              // have thicker rules.
              ruleWidth: options.fontMetrics().sqrtRuleThickness * sizeMultiplier
            };
          }; // There are three kinds of delimiters, delimiters that stack when they become
          // too large


          var stackLargeDelimiters = ["(", ")", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\\lceil", "\\rceil", "\\surd"]; // delimiters that always stack

          var stackAlwaysDelimiters = ["\\uparrow", "\\downarrow", "\\updownarrow", "\\Uparrow", "\\Downarrow", "\\Updownarrow", "|", "\\|", "\\vert", "\\Vert", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\\lmoustache", "\\rmoustache"]; // and delimiters that never stack

          var stackNeverDelimiters = ["<", ">", "\\langle", "\\rangle", "/", "\\backslash", "\\lt", "\\gt"]; // Metrics of the different sizes. Found by looking at TeX's output of
          // $\bigl| // \Bigl| \biggl| \Biggl| \showlists$
          // Used to create stacked delimiters of appropriate sizes in makeSizedDelim.

          var sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3.0];
          /**
           * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.
           */

          var makeSizedDelim = function makeSizedDelim(delim, size, options, mode, classes) {
            // < and > turn into \langle and \rangle in delimiters
            if (delim === "<" || delim === "\\lt" || delim === "\u27E8") {
              delim = "\\langle";
            } else if (delim === ">" || delim === "\\gt" || delim === "\u27E9") {
              delim = "\\rangle";
            } // Sized delimiters are never centered.


            if (__WEBPACK_IMPORTED_MODULE_6__utils__["a"
            /* default */
            ].contains(stackLargeDelimiters, delim) || __WEBPACK_IMPORTED_MODULE_6__utils__["a"
            /* default */
            ].contains(stackNeverDelimiters, delim)) {
              return makeLargeDelim(delim, size, false, options, mode, classes);
            } else if (__WEBPACK_IMPORTED_MODULE_6__utils__["a"
            /* default */
            ].contains(stackAlwaysDelimiters, delim)) {
              return makeStackedDelim(delim, sizeToMaxHeight[size], false, options, mode, classes);
            } else {
              throw new __WEBPACK_IMPORTED_MODULE_0__ParseError__["a"
              /* default */
              ]("Illegal delimiter: '" + delim + "'");
            }
          };
          /**
           * There are three different sequences of delimiter sizes that the delimiters
           * follow depending on the kind of delimiter. This is used when creating custom
           * sized delimiters to decide whether to create a small, large, or stacked
           * delimiter.
           *
           * In real TeX, these sequences aren't explicitly defined, but are instead
           * defined inside the font metrics. Since there are only three sequences that
           * are possible for the delimiters that TeX defines, it is easier to just encode
           * them explicitly here.
           */
          // Delimiters that never stack try small delimiters and large delimiters only


          var stackNeverDelimiterSequence = [{
            type: "small",
            style: __WEBPACK_IMPORTED_MODULE_1__Style__["a"
            /* default */
            ].SCRIPTSCRIPT
          }, {
            type: "small",
            style: __WEBPACK_IMPORTED_MODULE_1__Style__["a"
            /* default */
            ].SCRIPT
          }, {
            type: "small",
            style: __WEBPACK_IMPORTED_MODULE_1__Style__["a"
            /* default */
            ].TEXT
          }, {
            type: "large",
            size: 1
          }, {
            type: "large",
            size: 2
          }, {
            type: "large",
            size: 3
          }, {
            type: "large",
            size: 4
          }]; // Delimiters that always stack try the small delimiters first, then stack

          var stackAlwaysDelimiterSequence = [{
            type: "small",
            style: __WEBPACK_IMPORTED_MODULE_1__Style__["a"
            /* default */
            ].SCRIPTSCRIPT
          }, {
            type: "small",
            style: __WEBPACK_IMPORTED_MODULE_1__Style__["a"
            /* default */
            ].SCRIPT
          }, {
            type: "small",
            style: __WEBPACK_IMPORTED_MODULE_1__Style__["a"
            /* default */
            ].TEXT
          }, {
            type: "stack"
          }]; // Delimiters that stack when large try the small and then large delimiters, and
          // stack afterwards

          var stackLargeDelimiterSequence = [{
            type: "small",
            style: __WEBPACK_IMPORTED_MODULE_1__Style__["a"
            /* default */
            ].SCRIPTSCRIPT
          }, {
            type: "small",
            style: __WEBPACK_IMPORTED_MODULE_1__Style__["a"
            /* default */
            ].SCRIPT
          }, {
            type: "small",
            style: __WEBPACK_IMPORTED_MODULE_1__Style__["a"
            /* default */
            ].TEXT
          }, {
            type: "large",
            size: 1
          }, {
            type: "large",
            size: 2
          }, {
            type: "large",
            size: 3
          }, {
            type: "large",
            size: 4
          }, {
            type: "stack"
          }];
          /**
           * Get the font used in a delimiter based on what kind of delimiter it is.
           */

          var delimTypeToFont = function delimTypeToFont(type) {
            if (type.type === "small") {
              return "Main-Regular";
            } else if (type.type === "large") {
              return "Size" + type.size + "-Regular";
            } else if (type.type === "stack") {
              return "Size4-Regular";
            }
          };
          /**
           * Traverse a sequence of types of delimiters to decide what kind of delimiter
           * should be used to create a delimiter of the given height+depth.
           */


          var traverseSequence = function traverseSequence(delim, height, sequence, options) {
            // Here, we choose the index we should start at in the sequences. In smaller
            // sizes (which correspond to larger numbers in style.size) we start earlier
            // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts
            // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2
            var start = Math.min(2, 3 - options.style.size);

            for (var i = start; i < sequence.length; i++) {
              if (sequence[i].type === "stack") {
                // This is always the last delimiter, so we just break the loop now.
                break;
              }

              var metrics = getMetrics(delim, delimTypeToFont(sequence[i]), "math");
              var heightDepth = metrics.height + metrics.depth; // Small delimiters are scaled down versions of the same font, so we
              // account for the style change size.

              if (sequence[i].type === "small") {
                var newOptions = options.havingBaseStyle(sequence[i].style);
                heightDepth *= newOptions.sizeMultiplier;
              } // Check if the delimiter at this size works for the given height.


              if (heightDepth > height) {
                return sequence[i];
              }
            } // If we reached the end of the sequence, return the last sequence element.


            return sequence[sequence.length - 1];
          };
          /**
           * Make a delimiter of a given height+depth, with optional centering. Here, we
           * traverse the sequences, and create a delimiter that the sequence tells us to.
           */


          var makeCustomSizedDelim = function makeCustomSizedDelim(delim, height, center, options, mode, classes) {
            if (delim === "<" || delim === "\\lt" || delim === "\u27E8") {
              delim = "\\langle";
            } else if (delim === ">" || delim === "\\gt" || delim === "\u27E9") {
              delim = "\\rangle";
            } // Decide what sequence to use


            var sequence = void 0;

            if (__WEBPACK_IMPORTED_MODULE_6__utils__["a"
            /* default */
            ].contains(stackNeverDelimiters, delim)) {
              sequence = stackNeverDelimiterSequence;
            } else if (__WEBPACK_IMPORTED_MODULE_6__utils__["a"
            /* default */
            ].contains(stackLargeDelimiters, delim)) {
              sequence = stackLargeDelimiterSequence;
            } else {
              sequence = stackAlwaysDelimiterSequence;
            } // Look through the sequence


            var delimType = traverseSequence(delim, height, sequence, options); // Get the delimiter from font glyphs.
            // Depending on the sequence element we decided on, call the
            // appropriate function.

            if (delimType.type === "small") {
              return makeSmallDelim(delim, delimType.style, center, options, mode, classes);
            } else if (delimType.type === "large") {
              return makeLargeDelim(delim, delimType.size, center, options, mode, classes);
            } else
              /* if (delimType.type === "stack") */
              {
                return makeStackedDelim(delim, height, center, options, mode, classes);
              }
          };
          /**
           * Make a delimiter for use with `\left` and `\right`, given a height and depth
           * of an expression that the delimiters surround.
           */


          var makeLeftRightDelim = function makeLeftRightDelim(delim, height, depth, options, mode, classes) {
            // We always center \left/\right delimiters, so the axis is always shifted
            var axisHeight = options.fontMetrics().axisHeight * options.sizeMultiplier; // Taken from TeX source, tex.web, function make_left_right

            var delimiterFactor = 901;
            var delimiterExtend = 5.0 / options.fontMetrics().ptPerEm;
            var maxDistFromAxis = Math.max(height - axisHeight, depth + axisHeight);
            var totalHeight = Math.max( // In real TeX, calculations are done using integral values which are
            // 65536 per pt, or 655360 per em. So, the division here truncates in
            // TeX but doesn't here, producing different results. If we wanted to
            // exactly match TeX's calculation, we could do
            //   Math.floor(655360 * maxDistFromAxis / 500) *
            //    delimiterFactor / 655360
            // (To see the difference, compare
            //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
            // in TeX and KaTeX)
            maxDistFromAxis / 500 * delimiterFactor, 2 * maxDistFromAxis - delimiterExtend); // Finally, we defer to `makeCustomSizedDelim` with our calculated total
            // height

            return makeCustomSizedDelim(delim, totalHeight, true, options, mode, classes);
          };
          /* harmony default export */


          __webpack_exports__["a"] = {
            sqrtImage: makeSqrtImage,
            sizedDelim: makeSizedDelim,
            customSizedDelim: makeCustomSizedDelim,
            leftRightDelim: makeLeftRightDelim
          };
          /***/
        },
        /* 45 */

        /***/
        function (module, exports, __webpack_require__) {
          var isObject = __webpack_require__(20),
              document = __webpack_require__(16).document // in old IE typeof document.createElement is 'object'
          ,
              is = isObject(document) && isObject(document.createElement);

          module.exports = function (it) {
            return is ? document.createElement(it) : {};
          };
          /***/

        },
        /* 46 */

        /***/
        function (module, exports, __webpack_require__) {
          // most Object methods by ES6 should accept primitives
          var $export = __webpack_require__(25),
              core = __webpack_require__(8),
              fails = __webpack_require__(24);

          module.exports = function (KEY, exec) {
            var fn = (core.Object || {})[KEY] || Object[KEY],
                exp = {};
            exp[KEY] = exec(fn);
            $export($export.S + $export.F * fails(function () {
              fn(1);
            }), 'Object', exp);
          };
          /***/

        },
        /* 47 */

        /***/
        function (module, exports, __webpack_require__) {
          // optional / simple context binding
          var aFunction = __webpack_require__(72);

          module.exports = function (fn, that, length) {
            aFunction(fn);
            if (that === undefined) return fn;

            switch (length) {
              case 1:
                return function (a) {
                  return fn.call(that, a);
                };

              case 2:
                return function (a, b) {
                  return fn.call(that, a, b);
                };

              case 3:
                return function (a, b, c) {
                  return fn.call(that, a, b, c);
                };
            }

            return function ()
            /* ...args */
            {
              return fn.apply(that, arguments);
            };
          };
          /***/

        },
        /* 48 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict";

          var LIBRARY = __webpack_require__(82),
              $export = __webpack_require__(25),
              redefine = __webpack_require__(83),
              hide = __webpack_require__(26),
              has = __webpack_require__(21),
              Iterators = __webpack_require__(17),
              $iterCreate = __webpack_require__(84),
              setToStringTag = __webpack_require__(54),
              getPrototypeOf = __webpack_require__(91),
              ITERATOR = __webpack_require__(11)('iterator'),
              BUGGY = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
          ,
              FF_ITERATOR = '@@iterator',
              KEYS = 'keys',
              VALUES = 'values';

          var returnThis = function returnThis() {
            return this;
          };

          module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
            $iterCreate(Constructor, NAME, next);

            var getMethod = function getMethod(kind) {
              if (!BUGGY && kind in proto) return proto[kind];

              switch (kind) {
                case KEYS:
                  return function keys() {
                    return new Constructor(this, kind);
                  };

                case VALUES:
                  return function values() {
                    return new Constructor(this, kind);
                  };
              }

              return function entries() {
                return new Constructor(this, kind);
              };
            };

            var TAG = NAME + ' Iterator',
                DEF_VALUES = DEFAULT == VALUES,
                VALUES_BUG = false,
                proto = Base.prototype,
                $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
                $default = $native || getMethod(DEFAULT),
                $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined,
                $anyNative = NAME == 'Array' ? proto.entries || $native : $native,
                methods,
                key,
                IteratorPrototype; // Fix native

            if ($anyNative) {
              IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));

              if (IteratorPrototype !== Object.prototype) {
                // Set @@toStringTag to native iterators
                setToStringTag(IteratorPrototype, TAG, true); // fix for some old engines

                if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
              }
            } // fix Array#{values, @@iterator}.name in V8 / FF


            if (DEF_VALUES && $native && $native.name !== VALUES) {
              VALUES_BUG = true;

              $default = function values() {
                return $native.call(this);
              };
            } // Define iterator


            if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
              hide(proto, ITERATOR, $default);
            } // Plug for library


            Iterators[NAME] = $default;
            Iterators[TAG] = returnThis;

            if (DEFAULT) {
              methods = {
                values: DEF_VALUES ? $default : getMethod(VALUES),
                keys: IS_SET ? $default : getMethod(KEYS),
                entries: $entries
              };
              if (FORCED) for (key in methods) {
                if (!(key in proto)) redefine(proto, key, methods[key]);
              } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
            }

            return methods;
          };
          /***/

        },
        /* 49 */

        /***/
        function (module, exports, __webpack_require__) {
          // fallback for non-array-like ES3 and non-enumerable old V8 strings
          var cof = __webpack_require__(50);

          module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
            return cof(it) == 'String' ? it.split('') : Object(it);
          };
          /***/
        },
        /* 50 */

        /***/
        function (module, exports) {
          var toString = {}.toString;

          module.exports = function (it) {
            return toString.call(it).slice(8, -1);
          };
          /***/

        },
        /* 51 */

        /***/
        function (module, exports, __webpack_require__) {
          // 7.1.15 ToLength
          var toInteger = __webpack_require__(37),
              min = Math.min;

          module.exports = function (it) {
            return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
          };
          /***/

        },
        /* 52 */

        /***/
        function (module, exports, __webpack_require__) {
          var global = __webpack_require__(16),
              SHARED = '__core-js_shared__',
              store = global[SHARED] || (global[SHARED] = {});

          module.exports = function (key) {
            return store[key] || (store[key] = {});
          };
          /***/

        },
        /* 53 */

        /***/
        function (module, exports) {
          // IE 8- don't enum bug keys
          module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
          /***/
        },
        /* 54 */

        /***/
        function (module, exports, __webpack_require__) {
          var def = __webpack_require__(15).f,
              has = __webpack_require__(21),
              TAG = __webpack_require__(11)('toStringTag');

          module.exports = function (it, tag, stat) {
            if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
              configurable: true,
              value: tag
            });
          };
          /***/

        },
        /* 55 */

        /***/
        function (module, exports, __webpack_require__) {
          var classof = __webpack_require__(56),
              ITERATOR = __webpack_require__(11)('iterator'),
              Iterators = __webpack_require__(17);

          module.exports = __webpack_require__(8).getIteratorMethod = function (it) {
            if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
          };
          /***/

        },
        /* 56 */

        /***/
        function (module, exports, __webpack_require__) {
          // getting tag from 19.1.3.6 Object.prototype.toString()
          var cof = __webpack_require__(50),
              TAG = __webpack_require__(11)('toStringTag') // ES3 wrong here
          ,
              ARG = cof(function () {
            return arguments;
          }()) == 'Arguments'; // fallback for IE11 Script Access Denied error


          var tryGet = function tryGet(it, key) {
            try {
              return it[key];
            } catch (e) {
              /* empty */
            }
          };

          module.exports = function (it) {
            var O, T, B;
            return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
            : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T // builtinTag case
            : ARG ? cof(O) // ES3 arguments fallback
            : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
          };
          /***/

        },
        /* 57 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict";

          exports.__esModule = true;

          var _isIterable2 = __webpack_require__(97);

          var _isIterable3 = _interopRequireDefault(_isIterable2);

          var _getIterator2 = __webpack_require__(18);

          var _getIterator3 = _interopRequireDefault(_getIterator2);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              "default": obj
            };
          }

          exports["default"] = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = (0, _getIterator3["default"])(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if ((0, _isIterable3["default"])(Object(arr))) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();
          /***/

        },
        /* 58 */

        /***/
        function (module, exports, __webpack_require__) {
          __webpack_require__(99);

          var global = __webpack_require__(16),
              hide = __webpack_require__(26),
              Iterators = __webpack_require__(17),
              TO_STRING_TAG = __webpack_require__(11)('toStringTag');

          for (var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++) {
            var NAME = collections[i],
                Collection = global[NAME],
                proto = Collection && Collection.prototype;
            if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
            Iterators[NAME] = Iterators.Array;
          }
          /***/

        },
        /* 59 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony default export */

          __webpack_exports__["a"] = {
            "AMS-Regular": {
              "65": [0, 0.68889, 0, 0, 0.72222],
              "66": [0, 0.68889, 0, 0, 0.66667],
              "67": [0, 0.68889, 0, 0, 0.72222],
              "68": [0, 0.68889, 0, 0, 0.72222],
              "69": [0, 0.68889, 0, 0, 0.66667],
              "70": [0, 0.68889, 0, 0, 0.61111],
              "71": [0, 0.68889, 0, 0, 0.77778],
              "72": [0, 0.68889, 0, 0, 0.77778],
              "73": [0, 0.68889, 0, 0, 0.38889],
              "74": [0.16667, 0.68889, 0, 0, 0.5],
              "75": [0, 0.68889, 0, 0, 0.77778],
              "76": [0, 0.68889, 0, 0, 0.66667],
              "77": [0, 0.68889, 0, 0, 0.94445],
              "78": [0, 0.68889, 0, 0, 0.72222],
              "79": [0.16667, 0.68889, 0, 0, 0.77778],
              "80": [0, 0.68889, 0, 0, 0.61111],
              "81": [0.16667, 0.68889, 0, 0, 0.77778],
              "82": [0, 0.68889, 0, 0, 0.72222],
              "83": [0, 0.68889, 0, 0, 0.55556],
              "84": [0, 0.68889, 0, 0, 0.66667],
              "85": [0, 0.68889, 0, 0, 0.72222],
              "86": [0, 0.68889, 0, 0, 0.72222],
              "87": [0, 0.68889, 0, 0, 1.0],
              "88": [0, 0.68889, 0, 0, 0.72222],
              "89": [0, 0.68889, 0, 0, 0.72222],
              "90": [0, 0.68889, 0, 0, 0.66667],
              "107": [0, 0.68889, 0, 0, 0.55556],
              "165": [0, 0.675, 0.025, 0, 0.75],
              "174": [0.15559, 0.69224, 0, 0, 0.94666],
              "240": [0, 0.68889, 0, 0, 0.55556],
              "295": [0, 0.68889, 0, 0, 0.54028],
              "710": [0, 0.825, 0, 0, 2.33334],
              "732": [0, 0.9, 0, 0, 2.33334],
              "770": [0, 0.825, 0, 0, 2.33334],
              "771": [0, 0.9, 0, 0, 2.33334],
              "989": [0.08167, 0.58167, 0, 0, 0.77778],
              "1008": [0, 0.43056, 0.04028, 0, 0.66667],
              "8245": [0, 0.54986, 0, 0, 0.275],
              "8463": [0, 0.68889, 0, 0, 0.54028],
              "8487": [0, 0.68889, 0, 0, 0.72222],
              "8498": [0, 0.68889, 0, 0, 0.55556],
              "8502": [0, 0.68889, 0, 0, 0.66667],
              "8503": [0, 0.68889, 0, 0, 0.44445],
              "8504": [0, 0.68889, 0, 0, 0.66667],
              "8513": [0, 0.68889, 0, 0, 0.63889],
              "8592": [-0.03598, 0.46402, 0, 0, 0.5],
              "8594": [-0.03598, 0.46402, 0, 0, 0.5],
              "8602": [-0.13313, 0.36687, 0, 0, 1.0],
              "8603": [-0.13313, 0.36687, 0, 0, 1.0],
              "8606": [0.01354, 0.52239, 0, 0, 1.0],
              "8608": [0.01354, 0.52239, 0, 0, 1.0],
              "8610": [0.01354, 0.52239, 0, 0, 1.11111],
              "8611": [0.01354, 0.52239, 0, 0, 1.11111],
              "8619": [0, 0.54986, 0, 0, 1.0],
              "8620": [0, 0.54986, 0, 0, 1.0],
              "8621": [-0.13313, 0.37788, 0, 0, 1.38889],
              "8622": [-0.13313, 0.36687, 0, 0, 1.0],
              "8624": [0, 0.69224, 0, 0, 0.5],
              "8625": [0, 0.69224, 0, 0, 0.5],
              "8630": [0, 0.43056, 0, 0, 1.0],
              "8631": [0, 0.43056, 0, 0, 1.0],
              "8634": [0.08198, 0.58198, 0, 0, 0.77778],
              "8635": [0.08198, 0.58198, 0, 0, 0.77778],
              "8638": [0.19444, 0.69224, 0, 0, 0.41667],
              "8639": [0.19444, 0.69224, 0, 0, 0.41667],
              "8642": [0.19444, 0.69224, 0, 0, 0.41667],
              "8643": [0.19444, 0.69224, 0, 0, 0.41667],
              "8644": [0.1808, 0.675, 0, 0, 1.0],
              "8646": [0.1808, 0.675, 0, 0, 1.0],
              "8647": [0.1808, 0.675, 0, 0, 1.0],
              "8648": [0.19444, 0.69224, 0, 0, 0.83334],
              "8649": [0.1808, 0.675, 0, 0, 1.0],
              "8650": [0.19444, 0.69224, 0, 0, 0.83334],
              "8651": [0.01354, 0.52239, 0, 0, 1.0],
              "8652": [0.01354, 0.52239, 0, 0, 1.0],
              "8653": [-0.13313, 0.36687, 0, 0, 1.0],
              "8654": [-0.13313, 0.36687, 0, 0, 1.0],
              "8655": [-0.13313, 0.36687, 0, 0, 1.0],
              "8666": [0.13667, 0.63667, 0, 0, 1.0],
              "8667": [0.13667, 0.63667, 0, 0, 1.0],
              "8669": [-0.13313, 0.37788, 0, 0, 1.0],
              "8672": [-0.064, 0.437, 0, 0, 1187],
              "8674": [-0.064, 0.437, 0, 0, 1167],
              "8705": [0, 0.825, 0, 0, 0.5],
              "8708": [0, 0.68889, 0, 0, 0.55556],
              "8709": [0.08167, 0.58167, 0, 0, 0.77778],
              "8717": [0, 0.43056, 0, 0, 0.42917],
              "8722": [-0.03598, 0.46402, 0, 0, 0.5],
              "8724": [0.08198, 0.69224, 0, 0, 0.77778],
              "8726": [0.08167, 0.58167, 0, 0, 0.77778],
              "8733": [0, 0.69224, 0, 0, 0.77778],
              "8736": [0, 0.69224, 0, 0, 0.72222],
              "8737": [0, 0.69224, 0, 0, 0.72222],
              "8738": [0.03517, 0.52239, 0, 0, 0.72222],
              "8739": [0.08167, 0.58167, 0, 0, 0.22222],
              "8740": [0.25142, 0.74111, 0, 0, 0.27778],
              "8741": [0.08167, 0.58167, 0, 0, 0.38889],
              "8742": [0.25142, 0.74111, 0, 0, 0.5],
              "8756": [0, 0.69224, 0, 0, 0.66667],
              "8757": [0, 0.69224, 0, 0, 0.66667],
              "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
              "8765": [-0.13313, 0.37788, 0, 0, 0.77778],
              "8769": [-0.13313, 0.36687, 0, 0, 0.77778],
              "8770": [-0.03625, 0.46375, 0, 0, 0.77778],
              "8774": [0.30274, 0.79383, 0, 0, 0.77778],
              "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
              "8778": [0.08167, 0.58167, 0, 0, 0.77778],
              "8782": [0.06062, 0.54986, 0, 0, 0.77778],
              "8783": [0.06062, 0.54986, 0, 0, 0.77778],
              "8785": [0.08198, 0.58198, 0, 0, 0.77778],
              "8786": [0.08198, 0.58198, 0, 0, 0.77778],
              "8787": [0.08198, 0.58198, 0, 0, 0.77778],
              "8790": [0, 0.69224, 0, 0, 0.77778],
              "8791": [0.22958, 0.72958, 0, 0, 0.77778],
              "8796": [0.08198, 0.91667, 0, 0, 0.77778],
              "8806": [0.25583, 0.75583, 0, 0, 0.77778],
              "8807": [0.25583, 0.75583, 0, 0, 0.77778],
              "8808": [0.25142, 0.75726, 0, 0, 0.77778],
              "8809": [0.25142, 0.75726, 0, 0, 0.77778],
              "8812": [0.25583, 0.75583, 0, 0, 0.5],
              "8814": [0.20576, 0.70576, 0, 0, 0.77778],
              "8815": [0.20576, 0.70576, 0, 0, 0.77778],
              "8816": [0.30274, 0.79383, 0, 0, 0.77778],
              "8817": [0.30274, 0.79383, 0, 0, 0.77778],
              "8818": [0.22958, 0.72958, 0, 0, 0.77778],
              "8819": [0.22958, 0.72958, 0, 0, 0.77778],
              "8822": [0.1808, 0.675, 0, 0, 0.77778],
              "8823": [0.1808, 0.675, 0, 0, 0.77778],
              "8828": [0.13667, 0.63667, 0, 0, 0.77778],
              "8829": [0.13667, 0.63667, 0, 0, 0.77778],
              "8830": [0.22958, 0.72958, 0, 0, 0.77778],
              "8831": [0.22958, 0.72958, 0, 0, 0.77778],
              "8832": [0.20576, 0.70576, 0, 0, 0.77778],
              "8833": [0.20576, 0.70576, 0, 0, 0.77778],
              "8840": [0.30274, 0.79383, 0, 0, 0.77778],
              "8841": [0.30274, 0.79383, 0, 0, 0.77778],
              "8842": [0.13597, 0.63597, 0, 0, 0.77778],
              "8843": [0.13597, 0.63597, 0, 0, 0.77778],
              "8847": [0.03517, 0.54986, 0, 0, 0.77778],
              "8848": [0.03517, 0.54986, 0, 0, 0.77778],
              "8858": [0.08198, 0.58198, 0, 0, 0.77778],
              "8859": [0.08198, 0.58198, 0, 0, 0.77778],
              "8861": [0.08198, 0.58198, 0, 0, 0.77778],
              "8862": [0, 0.675, 0, 0, 0.77778],
              "8863": [0, 0.675, 0, 0, 0.77778],
              "8864": [0, 0.675, 0, 0, 0.77778],
              "8865": [0, 0.675, 0, 0, 0.77778],
              "8872": [0, 0.69224, 0, 0, 0.61111],
              "8873": [0, 0.69224, 0, 0, 0.72222],
              "8874": [0, 0.69224, 0, 0, 0.88889],
              "8876": [0, 0.68889, 0, 0, 0.61111],
              "8877": [0, 0.68889, 0, 0, 0.61111],
              "8878": [0, 0.68889, 0, 0, 0.72222],
              "8879": [0, 0.68889, 0, 0, 0.72222],
              "8882": [0.03517, 0.54986, 0, 0, 0.77778],
              "8883": [0.03517, 0.54986, 0, 0, 0.77778],
              "8884": [0.13667, 0.63667, 0, 0, 0.77778],
              "8885": [0.13667, 0.63667, 0, 0, 0.77778],
              "8888": [0, 0.54986, 0, 0, 1.11111],
              "8890": [0.19444, 0.43056, 0, 0, 0.55556],
              "8891": [0.19444, 0.69224, 0, 0, 0.61111],
              "8892": [0.19444, 0.69224, 0, 0, 0.61111],
              "8901": [0, 0.54986, 0, 0, 0.27778],
              "8903": [0.08167, 0.58167, 0, 0, 0.77778],
              "8905": [0.08167, 0.58167, 0, 0, 0.77778],
              "8906": [0.08167, 0.58167, 0, 0, 0.77778],
              "8907": [0, 0.69224, 0, 0, 0.77778],
              "8908": [0, 0.69224, 0, 0, 0.77778],
              "8909": [-0.03598, 0.46402, 0, 0, 0.77778],
              "8910": [0, 0.54986, 0, 0, 0.76042],
              "8911": [0, 0.54986, 0, 0, 0.76042],
              "8912": [0.03517, 0.54986, 0, 0, 0.77778],
              "8913": [0.03517, 0.54986, 0, 0, 0.77778],
              "8914": [0, 0.54986, 0, 0, 0.66667],
              "8915": [0, 0.54986, 0, 0, 0.66667],
              "8916": [0, 0.69224, 0, 0, 0.66667],
              "8918": [0.0391, 0.5391, 0, 0, 0.77778],
              "8919": [0.0391, 0.5391, 0, 0, 0.77778],
              "8920": [0.03517, 0.54986, 0, 0, 1.33334],
              "8921": [0.03517, 0.54986, 0, 0, 1.33334],
              "8922": [0.38569, 0.88569, 0, 0, 0.77778],
              "8923": [0.38569, 0.88569, 0, 0, 0.77778],
              "8926": [0.13667, 0.63667, 0, 0, 0.77778],
              "8927": [0.13667, 0.63667, 0, 0, 0.77778],
              "8928": [0.30274, 0.79383, 0, 0, 0.77778],
              "8929": [0.30274, 0.79383, 0, 0, 0.77778],
              "8934": [0.23222, 0.74111, 0, 0, 0.77778],
              "8935": [0.23222, 0.74111, 0, 0, 0.77778],
              "8936": [0.23222, 0.74111, 0, 0, 0.77778],
              "8937": [0.23222, 0.74111, 0, 0, 0.77778],
              "8938": [0.20576, 0.70576, 0, 0, 0.77778],
              "8939": [0.20576, 0.70576, 0, 0, 0.77778],
              "8940": [0.30274, 0.79383, 0, 0, 0.77778],
              "8941": [0.30274, 0.79383, 0, 0, 0.77778],
              "8994": [0.19444, 0.69224, 0, 0, 0.77778],
              "8995": [0.19444, 0.69224, 0, 0, 0.77778],
              "9416": [0.15559, 0.69224, 0, 0, 0.90222],
              "9484": [0, 0.69224, 0, 0, 0.5],
              "9488": [0, 0.69224, 0, 0, 0.5],
              "9492": [0, 0.37788, 0, 0, 0.5],
              "9496": [0, 0.37788, 0, 0, 0.5],
              "9585": [0.19444, 0.68889, 0, 0, 0.88889],
              "9586": [0.19444, 0.74111, 0, 0, 0.88889],
              "9632": [0, 0.675, 0, 0, 0.77778],
              "9633": [0, 0.675, 0, 0, 0.77778],
              "9650": [0, 0.54986, 0, 0, 0.72222],
              "9651": [0, 0.54986, 0, 0, 0.72222],
              "9654": [0.03517, 0.54986, 0, 0, 0.77778],
              "9660": [0, 0.54986, 0, 0, 0.72222],
              "9661": [0, 0.54986, 0, 0, 0.72222],
              "9664": [0.03517, 0.54986, 0, 0, 0.77778],
              "9674": [0.11111, 0.69224, 0, 0, 0.66667],
              "9733": [0.19444, 0.69224, 0, 0, 0.94445],
              "10003": [0, 0.69224, 0, 0, 0.83334],
              "10016": [0, 0.69224, 0, 0, 0.83334],
              "10731": [0.11111, 0.69224, 0, 0, 0.66667],
              "10846": [0.19444, 0.75583, 0, 0, 0.61111],
              "10877": [0.13667, 0.63667, 0, 0, 0.77778],
              "10878": [0.13667, 0.63667, 0, 0, 0.77778],
              "10885": [0.25583, 0.75583, 0, 0, 0.77778],
              "10886": [0.25583, 0.75583, 0, 0, 0.77778],
              "10887": [0.13597, 0.63597, 0, 0, 0.77778],
              "10888": [0.13597, 0.63597, 0, 0, 0.77778],
              "10889": [0.26167, 0.75726, 0, 0, 0.77778],
              "10890": [0.26167, 0.75726, 0, 0, 0.77778],
              "10891": [0.48256, 0.98256, 0, 0, 0.77778],
              "10892": [0.48256, 0.98256, 0, 0, 0.77778],
              "10901": [0.13667, 0.63667, 0, 0, 0.77778],
              "10902": [0.13667, 0.63667, 0, 0, 0.77778],
              "10933": [0.25142, 0.75726, 0, 0, 0.77778],
              "10934": [0.25142, 0.75726, 0, 0, 0.77778],
              "10935": [0.26167, 0.75726, 0, 0, 0.77778],
              "10936": [0.26167, 0.75726, 0, 0, 0.77778],
              "10937": [0.26167, 0.75726, 0, 0, 0.77778],
              "10938": [0.26167, 0.75726, 0, 0, 0.77778],
              "10949": [0.25583, 0.75583, 0, 0, 0.77778],
              "10950": [0.25583, 0.75583, 0, 0, 0.77778],
              "10955": [0.28481, 0.79383, 0, 0, 0.77778],
              "10956": [0.28481, 0.79383, 0, 0, 0.77778],
              "57350": [0.08167, 0.58167, 0, 0, 0.22222],
              "57351": [0.08167, 0.58167, 0, 0, 0.38889],
              "57352": [0.08167, 0.58167, 0, 0, 0.77778],
              "57353": [0, 0.43056, 0.04028, 0, 0.66667],
              "57356": [0.25142, 0.75726, 0, 0, 0.77778],
              "57357": [0.25142, 0.75726, 0, 0, 0.77778],
              "57358": [0.41951, 0.91951, 0, 0, 0.77778],
              "57359": [0.30274, 0.79383, 0, 0, 0.77778],
              "57360": [0.30274, 0.79383, 0, 0, 0.77778],
              "57361": [0.41951, 0.91951, 0, 0, 0.77778],
              "57366": [0.25142, 0.75726, 0, 0, 0.77778],
              "57367": [0.25142, 0.75726, 0, 0, 0.77778],
              "57368": [0.25142, 0.75726, 0, 0, 0.77778],
              "57369": [0.25142, 0.75726, 0, 0, 0.77778],
              "57370": [0.13597, 0.63597, 0, 0, 0.77778],
              "57371": [0.13597, 0.63597, 0, 0, 0.77778]
            },
            "Caligraphic-Regular": {
              "48": [0, 0.43056, 0, 0, 0.5],
              "49": [0, 0.43056, 0, 0, 0.5],
              "50": [0, 0.43056, 0, 0, 0.5],
              "51": [0.19444, 0.43056, 0, 0, 0.5],
              "52": [0.19444, 0.43056, 0, 0, 0.5],
              "53": [0.19444, 0.43056, 0, 0, 0.5],
              "54": [0, 0.64444, 0, 0, 0.5],
              "55": [0.19444, 0.43056, 0, 0, 0.5],
              "56": [0, 0.64444, 0, 0, 0.5],
              "57": [0.19444, 0.43056, 0, 0, 0.5],
              "65": [0, 0.68333, 0, 0.19445, 0.79847],
              "66": [0, 0.68333, 0.03041, 0.13889, 0.65681],
              "67": [0, 0.68333, 0.05834, 0.13889, 0.52653],
              "68": [0, 0.68333, 0.02778, 0.08334, 0.77139],
              "69": [0, 0.68333, 0.08944, 0.11111, 0.52778],
              "70": [0, 0.68333, 0.09931, 0.11111, 0.71875],
              "71": [0.09722, 0.68333, 0.0593, 0.11111, 0.59487],
              "72": [0, 0.68333, 0.00965, 0.11111, 0.84452],
              "73": [0, 0.68333, 0.07382, 0, 0.54452],
              "74": [0.09722, 0.68333, 0.18472, 0.16667, 0.67778],
              "75": [0, 0.68333, 0.01445, 0.05556, 0.76195],
              "76": [0, 0.68333, 0, 0.13889, 0.68972],
              "77": [0, 0.68333, 0, 0.13889, 1.2009],
              "78": [0, 0.68333, 0.14736, 0.08334, 0.82049],
              "79": [0, 0.68333, 0.02778, 0.11111, 0.79611],
              "80": [0, 0.68333, 0.08222, 0.08334, 0.69556],
              "81": [0.09722, 0.68333, 0, 0.11111, 0.81667],
              "82": [0, 0.68333, 0, 0.08334, 0.8475],
              "83": [0, 0.68333, 0.075, 0.13889, 0.60556],
              "84": [0, 0.68333, 0.25417, 0, 0.54464],
              "85": [0, 0.68333, 0.09931, 0.08334, 0.62583],
              "86": [0, 0.68333, 0.08222, 0, 0.61278],
              "87": [0, 0.68333, 0.08222, 0.08334, 0.98778],
              "88": [0, 0.68333, 0.14643, 0.13889, 0.7133],
              "89": [0.09722, 0.68333, 0.08222, 0.08334, 0.66834],
              "90": [0, 0.68333, 0.07944, 0.13889, 0.72473]
            },
            "Fraktur-Regular": {
              "33": [0, 0.69141, 0, 0, 0.29574],
              "34": [0, 0.69141, 0, 0, 0.21471],
              "38": [0, 0.69141, 0, 0, 0.73786],
              "39": [0, 0.69141, 0, 0, 0.21201],
              "40": [0.24982, 0.74947, 0, 0, 0.38865],
              "41": [0.24982, 0.74947, 0, 0, 0.38865],
              "42": [0, 0.62119, 0, 0, 0.27764],
              "43": [0.08319, 0.58283, 0, 0, 0.75623],
              "44": [0, 0.10803, 0, 0, 0.27764],
              "45": [0.08319, 0.58283, 0, 0, 0.75623],
              "46": [0, 0.10803, 0, 0, 0.27764],
              "47": [0.24982, 0.74947, 0, 0, 0.50181],
              "48": [0, 0.47534, 0, 0, 0.50181],
              "49": [0, 0.47534, 0, 0, 0.50181],
              "50": [0, 0.47534, 0, 0, 0.50181],
              "51": [0.18906, 0.47534, 0, 0, 0.50181],
              "52": [0.18906, 0.47534, 0, 0, 0.50181],
              "53": [0.18906, 0.47534, 0, 0, 0.50181],
              "54": [0, 0.69141, 0, 0, 0.50181],
              "55": [0.18906, 0.47534, 0, 0, 0.50181],
              "56": [0, 0.69141, 0, 0, 0.50181],
              "57": [0.18906, 0.47534, 0, 0, 0.50181],
              "58": [0, 0.47534, 0, 0, 0.21606],
              "59": [0.12604, 0.47534, 0, 0, 0.21606],
              "61": [-0.13099, 0.36866, 0, 0, 0.75623],
              "63": [0, 0.69141, 0, 0, 0.36245],
              "65": [0, 0.69141, 0, 0, 0.7176],
              "66": [0, 0.69141, 0, 0, 0.88397],
              "67": [0, 0.69141, 0, 0, 0.61254],
              "68": [0, 0.69141, 0, 0, 0.83158],
              "69": [0, 0.69141, 0, 0, 0.66278],
              "70": [0.12604, 0.69141, 0, 0, 0.61119],
              "71": [0, 0.69141, 0, 0, 0.78539],
              "72": [0.06302, 0.69141, 0, 0, 0.7203],
              "73": [0, 0.69141, 0, 0, 0.55448],
              "74": [0.12604, 0.69141, 0, 0, 0.55231],
              "75": [0, 0.69141, 0, 0, 0.66845],
              "76": [0, 0.69141, 0, 0, 0.66602],
              "77": [0, 0.69141, 0, 0, 1.04953],
              "78": [0, 0.69141, 0, 0, 0.83212],
              "79": [0, 0.69141, 0, 0, 0.82699],
              "80": [0.18906, 0.69141, 0, 0, 0.82753],
              "81": [0.03781, 0.69141, 0, 0, 0.82699],
              "82": [0, 0.69141, 0, 0, 0.82807],
              "83": [0, 0.69141, 0, 0, 0.82861],
              "84": [0, 0.69141, 0, 0, 0.66899],
              "85": [0, 0.69141, 0, 0, 0.64576],
              "86": [0, 0.69141, 0, 0, 0.83131],
              "87": [0, 0.69141, 0, 0, 1.04602],
              "88": [0, 0.69141, 0, 0, 0.71922],
              "89": [0.18906, 0.69141, 0, 0, 0.83293],
              "90": [0.12604, 0.69141, 0, 0, 0.60201],
              "91": [0.24982, 0.74947, 0, 0, 0.27764],
              "93": [0.24982, 0.74947, 0, 0, 0.27764],
              "94": [0, 0.69141, 0, 0, 0.49965],
              "97": [0, 0.47534, 0, 0, 0.50046],
              "98": [0, 0.69141, 0, 0, 0.51315],
              "99": [0, 0.47534, 0, 0, 0.38946],
              "100": [0, 0.62119, 0, 0, 0.49857],
              "101": [0, 0.47534, 0, 0, 0.40053],
              "102": [0.18906, 0.69141, 0, 0, 0.32626],
              "103": [0.18906, 0.47534, 0, 0, 0.5037],
              "104": [0.18906, 0.69141, 0, 0, 0.52126],
              "105": [0, 0.69141, 0, 0, 0.27899],
              "106": [0, 0.69141, 0, 0, 0.28088],
              "107": [0, 0.69141, 0, 0, 0.38946],
              "108": [0, 0.69141, 0, 0, 0.27953],
              "109": [0, 0.47534, 0, 0, 0.76676],
              "110": [0, 0.47534, 0, 0, 0.52666],
              "111": [0, 0.47534, 0, 0, 0.48885],
              "112": [0.18906, 0.52396, 0, 0, 0.50046],
              "113": [0.18906, 0.47534, 0, 0, 0.48912],
              "114": [0, 0.47534, 0, 0, 0.38919],
              "115": [0, 0.47534, 0, 0, 0.44266],
              "116": [0, 0.62119, 0, 0, 0.33301],
              "117": [0, 0.47534, 0, 0, 0.5172],
              "118": [0, 0.52396, 0, 0, 0.5118],
              "119": [0, 0.52396, 0, 0, 0.77351],
              "120": [0.18906, 0.47534, 0, 0, 0.38865],
              "121": [0.18906, 0.47534, 0, 0, 0.49884],
              "122": [0.18906, 0.47534, 0, 0, 0.39054],
              "8216": [0, 0.69141, 0, 0, 0.21471],
              "8217": [0, 0.69141, 0, 0, 0.21471],
              "58112": [0, 0.62119, 0, 0, 0.49749],
              "58113": [0, 0.62119, 0, 0, 0.4983],
              "58114": [0.18906, 0.69141, 0, 0, 0.33328],
              "58115": [0.18906, 0.69141, 0, 0, 0.32923],
              "58116": [0.18906, 0.47534, 0, 0, 0.50343],
              "58117": [0, 0.69141, 0, 0, 0.33301],
              "58118": [0, 0.62119, 0, 0, 0.33409],
              "58119": [0, 0.47534, 0, 0, 0.50073]
            },
            "Main-Bold": {
              "33": [0, 0.69444, 0, 0, 0.35],
              "34": [0, 0.69444, 0, 0, 0.60278],
              "35": [0.19444, 0.69444, 0, 0, 0.95833],
              "36": [0.05556, 0.75, 0, 0, 0.575],
              "37": [0.05556, 0.75, 0, 0, 0.95833],
              "38": [0, 0.69444, 0, 0, 0.89444],
              "39": [0, 0.69444, 0, 0, 0.31944],
              "40": [0.25, 0.75, 0, 0, 0.44722],
              "41": [0.25, 0.75, 0, 0, 0.44722],
              "42": [0, 0.75, 0, 0, 0.575],
              "43": [0.13333, 0.63333, 0, 0, 0.89444],
              "44": [0.19444, 0.15556, 0, 0, 0.31944],
              "45": [0, 0.44444, 0, 0, 0.38333],
              "46": [0, 0.15556, 0, 0, 0.31944],
              "47": [0.25, 0.75, 0, 0, 0.575],
              "48": [0, 0.64444, 0, 0, 0.575],
              "49": [0, 0.64444, 0, 0, 0.575],
              "50": [0, 0.64444, 0, 0, 0.575],
              "51": [0, 0.64444, 0, 0, 0.575],
              "52": [0, 0.64444, 0, 0, 0.575],
              "53": [0, 0.64444, 0, 0, 0.575],
              "54": [0, 0.64444, 0, 0, 0.575],
              "55": [0, 0.64444, 0, 0, 0.575],
              "56": [0, 0.64444, 0, 0, 0.575],
              "57": [0, 0.64444, 0, 0, 0.575],
              "58": [0, 0.44444, 0, 0, 0.31944],
              "59": [0.19444, 0.44444, 0, 0, 0.31944],
              "60": [0.08556, 0.58556, 0, 0, 0.89444],
              "61": [-0.10889, 0.39111, 0, 0, 0.89444],
              "62": [0.08556, 0.58556, 0, 0, 0.89444],
              "63": [0, 0.69444, 0, 0, 0.54305],
              "64": [0, 0.69444, 0, 0, 0.89444],
              "65": [0, 0.68611, 0, 0, 0.86944],
              "66": [0, 0.68611, 0, 0, 0.81805],
              "67": [0, 0.68611, 0, 0, 0.83055],
              "68": [0, 0.68611, 0, 0, 0.88194],
              "69": [0, 0.68611, 0, 0, 0.75555],
              "70": [0, 0.68611, 0, 0, 0.72361],
              "71": [0, 0.68611, 0, 0, 0.90416],
              "72": [0, 0.68611, 0, 0, 0.9],
              "73": [0, 0.68611, 0, 0, 0.43611],
              "74": [0, 0.68611, 0, 0, 0.59444],
              "75": [0, 0.68611, 0, 0, 0.90138],
              "76": [0, 0.68611, 0, 0, 0.69166],
              "77": [0, 0.68611, 0, 0, 1.09166],
              "78": [0, 0.68611, 0, 0, 0.9],
              "79": [0, 0.68611, 0, 0, 0.86388],
              "80": [0, 0.68611, 0, 0, 0.78611],
              "81": [0.19444, 0.68611, 0, 0, 0.86388],
              "82": [0, 0.68611, 0, 0, 0.8625],
              "83": [0, 0.68611, 0, 0, 0.63889],
              "84": [0, 0.68611, 0, 0, 0.8],
              "85": [0, 0.68611, 0, 0, 0.88472],
              "86": [0, 0.68611, 0.01597, 0, 0.86944],
              "87": [0, 0.68611, 0.01597, 0, 1.18888],
              "88": [0, 0.68611, 0, 0, 0.86944],
              "89": [0, 0.68611, 0.02875, 0, 0.86944],
              "90": [0, 0.68611, 0, 0, 0.70277],
              "91": [0.25, 0.75, 0, 0, 0.31944],
              "92": [0.25, 0.75, 0, 0, 0.575],
              "93": [0.25, 0.75, 0, 0, 0.31944],
              "94": [0, 0.69444, 0, 0, 0.575],
              "95": [0.31, 0.13444, 0.03194, 0, 0.575],
              "97": [0, 0.44444, 0, 0, 0.55902],
              "98": [0, 0.69444, 0, 0, 0.63889],
              "99": [0, 0.44444, 0, 0, 0.51111],
              "100": [0, 0.69444, 0, 0, 0.63889],
              "101": [0, 0.44444, 0, 0, 0.52708],
              "102": [0, 0.69444, 0.10903, 0, 0.35139],
              "103": [0.19444, 0.44444, 0.01597, 0, 0.575],
              "104": [0, 0.69444, 0, 0, 0.63889],
              "105": [0, 0.69444, 0, 0, 0.31944],
              "106": [0.19444, 0.69444, 0, 0, 0.35139],
              "107": [0, 0.69444, 0, 0, 0.60694],
              "108": [0, 0.69444, 0, 0, 0.31944],
              "109": [0, 0.44444, 0, 0, 0.95833],
              "110": [0, 0.44444, 0, 0, 0.63889],
              "111": [0, 0.44444, 0, 0, 0.575],
              "112": [0.19444, 0.44444, 0, 0, 0.63889],
              "113": [0.19444, 0.44444, 0, 0, 0.60694],
              "114": [0, 0.44444, 0, 0, 0.47361],
              "115": [0, 0.44444, 0, 0, 0.45361],
              "116": [0, 0.63492, 0, 0, 0.44722],
              "117": [0, 0.44444, 0, 0, 0.63889],
              "118": [0, 0.44444, 0.01597, 0, 0.60694],
              "119": [0, 0.44444, 0.01597, 0, 0.83055],
              "120": [0, 0.44444, 0, 0, 0.60694],
              "121": [0.19444, 0.44444, 0.01597, 0, 0.60694],
              "122": [0, 0.44444, 0, 0, 0.51111],
              "123": [0.25, 0.75, 0, 0, 0.575],
              "124": [0.25, 0.75, 0, 0, 0.31944],
              "125": [0.25, 0.75, 0, 0, 0.575],
              "126": [0.35, 0.34444, 0, 0, 0.575],
              "168": [0, 0.69444, 0, 0, 0.575],
              "172": [0, 0.44444, 0, 0, 0.76666],
              "176": [0, 0.69444, 0, 0, 0.86944],
              "177": [0.13333, 0.63333, 0, 0, 0.89444],
              "198": [0, 0.68611, 0, 0, 1.04166],
              "215": [0.13333, 0.63333, 0, 0, 0.89444],
              "216": [0.04861, 0.73472, 0, 0, 0.89444],
              "223": [0, 0.69444, 0, 0, 0.59722],
              "230": [0, 0.44444, 0, 0, 0.83055],
              "247": [0.13333, 0.63333, 0, 0, 0.89444],
              "248": [0.09722, 0.54167, 0, 0, 0.575],
              "305": [0, 0.44444, 0, 0, 0.31944],
              "338": [0, 0.68611, 0, 0, 1.16944],
              "339": [0, 0.44444, 0, 0, 0.89444],
              "567": [0.19444, 0.44444, 0, 0, 0.35139],
              "710": [0, 0.69444, 0, 0, 0.575],
              "711": [0, 0.63194, 0, 0, 0.575],
              "713": [0, 0.59611, 0, 0, 0.575],
              "714": [0, 0.69444, 0, 0, 0.575],
              "715": [0, 0.69444, 0, 0, 0.575],
              "728": [0, 0.69444, 0, 0, 0.575],
              "729": [0, 0.69444, 0, 0, 0.31944],
              "730": [0, 0.69444, 0, 0, 0.86944],
              "732": [0, 0.69444, 0, 0, 0.575],
              "733": [0, 0.69444, 0, 0, 0.575],
              "824": [0.19444, 0.69444, 0, 0, 0],
              "915": [0, 0.68611, 0, 0, 0.69166],
              "916": [0, 0.68611, 0, 0, 0.95833],
              "920": [0, 0.68611, 0, 0, 0.89444],
              "923": [0, 0.68611, 0, 0, 0.80555],
              "926": [0, 0.68611, 0, 0, 0.76666],
              "928": [0, 0.68611, 0, 0, 0.9],
              "931": [0, 0.68611, 0, 0, 0.83055],
              "933": [0, 0.68611, 0, 0, 0.89444],
              "934": [0, 0.68611, 0, 0, 0.83055],
              "936": [0, 0.68611, 0, 0, 0.89444],
              "937": [0, 0.68611, 0, 0, 0.83055],
              "8211": [0, 0.44444, 0.03194, 0, 0.575],
              "8212": [0, 0.44444, 0.03194, 0, 1.14999],
              "8216": [0, 0.69444, 0, 0, 0.31944],
              "8217": [0, 0.69444, 0, 0, 0.31944],
              "8220": [0, 0.69444, 0, 0, 0.60278],
              "8221": [0, 0.69444, 0, 0, 0.60278],
              "8224": [0.19444, 0.69444, 0, 0, 0.51111],
              "8225": [0.19444, 0.69444, 0, 0, 0.51111],
              "8242": [0, 0.55556, 0, 0, 0.34444],
              "8407": [0, 0.72444, 0.15486, 0, 0.575],
              "8463": [0, 0.69444, 0, 0, 0.66759],
              "8465": [0, 0.69444, 0, 0, 0.83055],
              "8467": [0, 0.69444, 0, 0, 0.47361],
              "8472": [0.19444, 0.44444, 0, 0, 0.74027],
              "8476": [0, 0.69444, 0, 0, 0.83055],
              "8501": [0, 0.69444, 0, 0, 0.70277],
              "8592": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8593": [0.19444, 0.69444, 0, 0, 0.575],
              "8594": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8595": [0.19444, 0.69444, 0, 0, 0.575],
              "8596": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8597": [0.25, 0.75, 0, 0, 0.575],
              "8598": [0.19444, 0.69444, 0, 0, 1.14999],
              "8599": [0.19444, 0.69444, 0, 0, 1.14999],
              "8600": [0.19444, 0.69444, 0, 0, 1.14999],
              "8601": [0.19444, 0.69444, 0, 0, 1.14999],
              "8636": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8637": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8640": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8641": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8656": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8657": [0.19444, 0.69444, 0, 0, 0.70277],
              "8658": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8659": [0.19444, 0.69444, 0, 0, 0.70277],
              "8660": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8661": [0.25, 0.75, 0, 0, 0.70277],
              "8704": [0, 0.69444, 0, 0, 0.63889],
              "8706": [0, 0.69444, 0.06389, 0, 0.62847],
              "8707": [0, 0.69444, 0, 0, 0.63889],
              "8709": [0.05556, 0.75, 0, 0, 0.575],
              "8711": [0, 0.68611, 0, 0, 0.95833],
              "8712": [0.08556, 0.58556, 0, 0, 0.76666],
              "8715": [0.08556, 0.58556, 0, 0, 0.76666],
              "8722": [0.13333, 0.63333, 0, 0, 0.89444],
              "8723": [0.13333, 0.63333, 0, 0, 0.89444],
              "8725": [0.25, 0.75, 0, 0, 0.575],
              "8726": [0.25, 0.75, 0, 0, 0.575],
              "8727": [-0.02778, 0.47222, 0, 0, 0.575],
              "8728": [-0.02639, 0.47361, 0, 0, 0.575],
              "8729": [-0.02639, 0.47361, 0, 0, 0.575],
              "8730": [0.18, 0.82, 0, 0, 0.95833],
              "8733": [0, 0.44444, 0, 0, 0.89444],
              "8734": [0, 0.44444, 0, 0, 1.14999],
              "8736": [0, 0.69224, 0, 0, 0.72222],
              "8739": [0.25, 0.75, 0, 0, 0.31944],
              "8741": [0.25, 0.75, 0, 0, 0.575],
              "8743": [0, 0.55556, 0, 0, 0.76666],
              "8744": [0, 0.55556, 0, 0, 0.76666],
              "8745": [0, 0.55556, 0, 0, 0.76666],
              "8746": [0, 0.55556, 0, 0, 0.76666],
              "8747": [0.19444, 0.69444, 0.12778, 0, 0.56875],
              "8764": [-0.10889, 0.39111, 0, 0, 0.89444],
              "8768": [0.19444, 0.69444, 0, 0, 0.31944],
              "8771": [0.00222, 0.50222, 0, 0, 0.89444],
              "8776": [0.02444, 0.52444, 0, 0, 0.89444],
              "8781": [0.00222, 0.50222, 0, 0, 0.89444],
              "8801": [0.00222, 0.50222, 0, 0, 0.89444],
              "8804": [0.19667, 0.69667, 0, 0, 0.89444],
              "8805": [0.19667, 0.69667, 0, 0, 0.89444],
              "8810": [0.08556, 0.58556, 0, 0, 1.14999],
              "8811": [0.08556, 0.58556, 0, 0, 1.14999],
              "8826": [0.08556, 0.58556, 0, 0, 0.89444],
              "8827": [0.08556, 0.58556, 0, 0, 0.89444],
              "8834": [0.08556, 0.58556, 0, 0, 0.89444],
              "8835": [0.08556, 0.58556, 0, 0, 0.89444],
              "8838": [0.19667, 0.69667, 0, 0, 0.89444],
              "8839": [0.19667, 0.69667, 0, 0, 0.89444],
              "8846": [0, 0.55556, 0, 0, 0.76666],
              "8849": [0.19667, 0.69667, 0, 0, 0.89444],
              "8850": [0.19667, 0.69667, 0, 0, 0.89444],
              "8851": [0, 0.55556, 0, 0, 0.76666],
              "8852": [0, 0.55556, 0, 0, 0.76666],
              "8853": [0.13333, 0.63333, 0, 0, 0.89444],
              "8854": [0.13333, 0.63333, 0, 0, 0.89444],
              "8855": [0.13333, 0.63333, 0, 0, 0.89444],
              "8856": [0.13333, 0.63333, 0, 0, 0.89444],
              "8857": [0.13333, 0.63333, 0, 0, 0.89444],
              "8866": [0, 0.69444, 0, 0, 0.70277],
              "8867": [0, 0.69444, 0, 0, 0.70277],
              "8868": [0, 0.69444, 0, 0, 0.89444],
              "8869": [0, 0.69444, 0, 0, 0.89444],
              "8900": [-0.02639, 0.47361, 0, 0, 0.575],
              "8901": [-0.02639, 0.47361, 0, 0, 0.31944],
              "8902": [-0.02778, 0.47222, 0, 0, 0.575],
              "8968": [0.25, 0.75, 0, 0, 0.51111],
              "8969": [0.25, 0.75, 0, 0, 0.51111],
              "8970": [0.25, 0.75, 0, 0, 0.51111],
              "8971": [0.25, 0.75, 0, 0, 0.51111],
              "8994": [-0.13889, 0.36111, 0, 0, 1.14999],
              "8995": [-0.13889, 0.36111, 0, 0, 1.14999],
              "9651": [0.19444, 0.69444, 0, 0, 1.02222],
              "9657": [-0.02778, 0.47222, 0, 0, 0.575],
              "9661": [0.19444, 0.69444, 0, 0, 1.02222],
              "9667": [-0.02778, 0.47222, 0, 0, 0.575],
              "9711": [0.19444, 0.69444, 0, 0, 1.14999],
              "9824": [0.12963, 0.69444, 0, 0, 0.89444],
              "9825": [0.12963, 0.69444, 0, 0, 0.89444],
              "9826": [0.12963, 0.69444, 0, 0, 0.89444],
              "9827": [0.12963, 0.69444, 0, 0, 0.89444],
              "9837": [0, 0.75, 0, 0, 0.44722],
              "9838": [0.19444, 0.69444, 0, 0, 0.44722],
              "9839": [0.19444, 0.69444, 0, 0, 0.44722],
              "10216": [0.25, 0.75, 0, 0, 0.44722],
              "10217": [0.25, 0.75, 0, 0, 0.44722],
              "10815": [0, 0.68611, 0, 0, 0.9],
              "10927": [0.19667, 0.69667, 0, 0, 0.89444],
              "10928": [0.19667, 0.69667, 0, 0, 0.89444]
            },
            "Main-BoldItalic": {
              "33": [0, 0.69444, 0.11417, 0, 0.38611],
              "34": [0, 0.69444, 0.07939, 0, 0.62055],
              "35": [0.19444, 0.69444, 0.06833, 0, 0.94444],
              "37": [0.05556, 0.75, 0.12861, 0, 0.94444],
              "38": [0, 0.69444, 0.08528, 0, 0.88555],
              "39": [0, 0.69444, 0.12945, 0, 0.35555],
              "40": [0.25, 0.75, 0.15806, 0, 0.47333],
              "41": [0.25, 0.75, 0.03306, 0, 0.47333],
              "42": [0, 0.75, 0.14333, 0, 0.59111],
              "43": [0.10333, 0.60333, 0.03306, 0, 0.88555],
              "44": [0.19444, 0.14722, 0, 0, 0.35555],
              "45": [0, 0.44444, 0.02611, 0, 0.41444],
              "46": [0, 0.14722, 0, 0, 0.35555],
              "47": [0.25, 0.75, 0.15806, 0, 0.59111],
              "48": [0, 0.64444, 0.13167, 0, 0.59111],
              "49": [0, 0.64444, 0.13167, 0, 0.59111],
              "50": [0, 0.64444, 0.13167, 0, 0.59111],
              "51": [0, 0.64444, 0.13167, 0, 0.59111],
              "52": [0.19444, 0.64444, 0.13167, 0, 0.59111],
              "53": [0, 0.64444, 0.13167, 0, 0.59111],
              "54": [0, 0.64444, 0.13167, 0, 0.59111],
              "55": [0.19444, 0.64444, 0.13167, 0, 0.59111],
              "56": [0, 0.64444, 0.13167, 0, 0.59111],
              "57": [0, 0.64444, 0.13167, 0, 0.59111],
              "58": [0, 0.44444, 0.06695, 0, 0.35555],
              "59": [0.19444, 0.44444, 0.06695, 0, 0.35555],
              "61": [-0.10889, 0.39111, 0.06833, 0, 0.88555],
              "63": [0, 0.69444, 0.11472, 0, 0.59111],
              "64": [0, 0.69444, 0.09208, 0, 0.88555],
              "65": [0, 0.68611, 0, 0, 0.86555],
              "66": [0, 0.68611, 0.0992, 0, 0.81666],
              "67": [0, 0.68611, 0.14208, 0, 0.82666],
              "68": [0, 0.68611, 0.09062, 0, 0.87555],
              "69": [0, 0.68611, 0.11431, 0, 0.75666],
              "70": [0, 0.68611, 0.12903, 0, 0.72722],
              "71": [0, 0.68611, 0.07347, 0, 0.89527],
              "72": [0, 0.68611, 0.17208, 0, 0.8961],
              "73": [0, 0.68611, 0.15681, 0, 0.47166],
              "74": [0, 0.68611, 0.145, 0, 0.61055],
              "75": [0, 0.68611, 0.14208, 0, 0.89499],
              "76": [0, 0.68611, 0, 0, 0.69777],
              "77": [0, 0.68611, 0.17208, 0, 1.07277],
              "78": [0, 0.68611, 0.17208, 0, 0.8961],
              "79": [0, 0.68611, 0.09062, 0, 0.85499],
              "80": [0, 0.68611, 0.0992, 0, 0.78721],
              "81": [0.19444, 0.68611, 0.09062, 0, 0.85499],
              "82": [0, 0.68611, 0.02559, 0, 0.85944],
              "83": [0, 0.68611, 0.11264, 0, 0.64999],
              "84": [0, 0.68611, 0.12903, 0, 0.7961],
              "85": [0, 0.68611, 0.17208, 0, 0.88083],
              "86": [0, 0.68611, 0.18625, 0, 0.86555],
              "87": [0, 0.68611, 0.18625, 0, 1.15999],
              "88": [0, 0.68611, 0.15681, 0, 0.86555],
              "89": [0, 0.68611, 0.19803, 0, 0.86555],
              "90": [0, 0.68611, 0.14208, 0, 0.70888],
              "91": [0.25, 0.75, 0.1875, 0, 0.35611],
              "93": [0.25, 0.75, 0.09972, 0, 0.35611],
              "94": [0, 0.69444, 0.06709, 0, 0.59111],
              "95": [0.31, 0.13444, 0.09811, 0, 0.59111],
              "97": [0, 0.44444, 0.09426, 0, 0.59111],
              "98": [0, 0.69444, 0.07861, 0, 0.53222],
              "99": [0, 0.44444, 0.05222, 0, 0.53222],
              "100": [0, 0.69444, 0.10861, 0, 0.59111],
              "101": [0, 0.44444, 0.085, 0, 0.53222],
              "102": [0.19444, 0.69444, 0.21778, 0, 0.4],
              "103": [0.19444, 0.44444, 0.105, 0, 0.53222],
              "104": [0, 0.69444, 0.09426, 0, 0.59111],
              "105": [0, 0.69326, 0.11387, 0, 0.35555],
              "106": [0.19444, 0.69326, 0.1672, 0, 0.35555],
              "107": [0, 0.69444, 0.11111, 0, 0.53222],
              "108": [0, 0.69444, 0.10861, 0, 0.29666],
              "109": [0, 0.44444, 0.09426, 0, 0.94444],
              "110": [0, 0.44444, 0.09426, 0, 0.64999],
              "111": [0, 0.44444, 0.07861, 0, 0.59111],
              "112": [0.19444, 0.44444, 0.07861, 0, 0.59111],
              "113": [0.19444, 0.44444, 0.105, 0, 0.53222],
              "114": [0, 0.44444, 0.11111, 0, 0.50167],
              "115": [0, 0.44444, 0.08167, 0, 0.48694],
              "116": [0, 0.63492, 0.09639, 0, 0.385],
              "117": [0, 0.44444, 0.09426, 0, 0.62055],
              "118": [0, 0.44444, 0.11111, 0, 0.53222],
              "119": [0, 0.44444, 0.11111, 0, 0.76777],
              "120": [0, 0.44444, 0.12583, 0, 0.56055],
              "121": [0.19444, 0.44444, 0.105, 0, 0.56166],
              "122": [0, 0.44444, 0.13889, 0, 0.49055],
              "126": [0.35, 0.34444, 0.11472, 0, 0.59111],
              "163": [0, 0.69444, 0, 0, 0.86853],
              "168": [0, 0.69444, 0.11473, 0, 0.59111],
              "176": [0, 0.69444, 0, 0, 0.94888],
              "198": [0, 0.68611, 0.11431, 0, 1.02277],
              "216": [0.04861, 0.73472, 0.09062, 0, 0.88555],
              "223": [0.19444, 0.69444, 0.09736, 0, 0.665],
              "230": [0, 0.44444, 0.085, 0, 0.82666],
              "248": [0.09722, 0.54167, 0.09458, 0, 0.59111],
              "305": [0, 0.44444, 0.09426, 0, 0.35555],
              "338": [0, 0.68611, 0.11431, 0, 1.14054],
              "339": [0, 0.44444, 0.085, 0, 0.82666],
              "567": [0.19444, 0.44444, 0.04611, 0, 0.385],
              "710": [0, 0.69444, 0.06709, 0, 0.59111],
              "711": [0, 0.63194, 0.08271, 0, 0.59111],
              "713": [0, 0.59444, 0.10444, 0, 0.59111],
              "714": [0, 0.69444, 0.08528, 0, 0.59111],
              "715": [0, 0.69444, 0, 0, 0.59111],
              "728": [0, 0.69444, 0.10333, 0, 0.59111],
              "729": [0, 0.69444, 0.12945, 0, 0.35555],
              "730": [0, 0.69444, 0, 0, 0.94888],
              "732": [0, 0.69444, 0.11472, 0, 0.59111],
              "733": [0, 0.69444, 0.11472, 0, 0.59111],
              "915": [0, 0.68611, 0.12903, 0, 0.69777],
              "916": [0, 0.68611, 0, 0, 0.94444],
              "920": [0, 0.68611, 0.09062, 0, 0.88555],
              "923": [0, 0.68611, 0, 0, 0.80666],
              "926": [0, 0.68611, 0.15092, 0, 0.76777],
              "928": [0, 0.68611, 0.17208, 0, 0.8961],
              "931": [0, 0.68611, 0.11431, 0, 0.82666],
              "933": [0, 0.68611, 0.10778, 0, 0.88555],
              "934": [0, 0.68611, 0.05632, 0, 0.82666],
              "936": [0, 0.68611, 0.10778, 0, 0.88555],
              "937": [0, 0.68611, 0.0992, 0, 0.82666],
              "8211": [0, 0.44444, 0.09811, 0, 0.59111],
              "8212": [0, 0.44444, 0.09811, 0, 1.18221],
              "8216": [0, 0.69444, 0.12945, 0, 0.35555],
              "8217": [0, 0.69444, 0.12945, 0, 0.35555],
              "8220": [0, 0.69444, 0.16772, 0, 0.62055],
              "8221": [0, 0.69444, 0.07939, 0, 0.62055]
            },
            "Main-Italic": {
              "33": [0, 0.69444, 0.12417, 0, 0.30667],
              "34": [0, 0.69444, 0.06961, 0, 0.51444],
              "35": [0.19444, 0.69444, 0.06616, 0, 0.81777],
              "37": [0.05556, 0.75, 0.13639, 0, 0.81777],
              "38": [0, 0.69444, 0.09694, 0, 0.76666],
              "39": [0, 0.69444, 0.12417, 0, 0.30667],
              "40": [0.25, 0.75, 0.16194, 0, 0.40889],
              "41": [0.25, 0.75, 0.03694, 0, 0.40889],
              "42": [0, 0.75, 0.14917, 0, 0.51111],
              "43": [0.05667, 0.56167, 0.03694, 0, 0.76666],
              "44": [0.19444, 0.10556, 0, 0, 0.30667],
              "45": [0, 0.43056, 0.02826, 0, 0.35778],
              "46": [0, 0.10556, 0, 0, 0.30667],
              "47": [0.25, 0.75, 0.16194, 0, 0.51111],
              "48": [0, 0.64444, 0.13556, 0, 0.51111],
              "49": [0, 0.64444, 0.13556, 0, 0.51111],
              "50": [0, 0.64444, 0.13556, 0, 0.51111],
              "51": [0, 0.64444, 0.13556, 0, 0.51111],
              "52": [0.19444, 0.64444, 0.13556, 0, 0.51111],
              "53": [0, 0.64444, 0.13556, 0, 0.51111],
              "54": [0, 0.64444, 0.13556, 0, 0.51111],
              "55": [0.19444, 0.64444, 0.13556, 0, 0.51111],
              "56": [0, 0.64444, 0.13556, 0, 0.51111],
              "57": [0, 0.64444, 0.13556, 0, 0.51111],
              "58": [0, 0.43056, 0.0582, 0, 0.30667],
              "59": [0.19444, 0.43056, 0.0582, 0, 0.30667],
              "61": [-0.13313, 0.36687, 0.06616, 0, 0.76666],
              "63": [0, 0.69444, 0.1225, 0, 0.51111],
              "64": [0, 0.69444, 0.09597, 0, 0.76666],
              "65": [0, 0.68333, 0, 0, 0.74333],
              "66": [0, 0.68333, 0.10257, 0, 0.70389],
              "67": [0, 0.68333, 0.14528, 0, 0.71555],
              "68": [0, 0.68333, 0.09403, 0, 0.755],
              "69": [0, 0.68333, 0.12028, 0, 0.67833],
              "70": [0, 0.68333, 0.13305, 0, 0.65277],
              "71": [0, 0.68333, 0.08722, 0, 0.77361],
              "72": [0, 0.68333, 0.16389, 0, 0.74333],
              "73": [0, 0.68333, 0.15806, 0, 0.38555],
              "74": [0, 0.68333, 0.14028, 0, 0.525],
              "75": [0, 0.68333, 0.14528, 0, 0.76888],
              "76": [0, 0.68333, 0, 0, 0.62722],
              "77": [0, 0.68333, 0.16389, 0, 0.89666],
              "78": [0, 0.68333, 0.16389, 0, 0.74333],
              "79": [0, 0.68333, 0.09403, 0, 0.76666],
              "80": [0, 0.68333, 0.10257, 0, 0.67833],
              "81": [0.19444, 0.68333, 0.09403, 0, 0.76666],
              "82": [0, 0.68333, 0.03868, 0, 0.72944],
              "83": [0, 0.68333, 0.11972, 0, 0.56222],
              "84": [0, 0.68333, 0.13305, 0, 0.71555],
              "85": [0, 0.68333, 0.16389, 0, 0.74333],
              "86": [0, 0.68333, 0.18361, 0, 0.74333],
              "87": [0, 0.68333, 0.18361, 0, 0.99888],
              "88": [0, 0.68333, 0.15806, 0, 0.74333],
              "89": [0, 0.68333, 0.19383, 0, 0.74333],
              "90": [0, 0.68333, 0.14528, 0, 0.61333],
              "91": [0.25, 0.75, 0.1875, 0, 0.30667],
              "93": [0.25, 0.75, 0.10528, 0, 0.30667],
              "94": [0, 0.69444, 0.06646, 0, 0.51111],
              "95": [0.31, 0.12056, 0.09208, 0, 0.51111],
              "97": [0, 0.43056, 0.07671, 0, 0.51111],
              "98": [0, 0.69444, 0.06312, 0, 0.46],
              "99": [0, 0.43056, 0.05653, 0, 0.46],
              "100": [0, 0.69444, 0.10333, 0, 0.51111],
              "101": [0, 0.43056, 0.07514, 0, 0.46],
              "102": [0.19444, 0.69444, 0.21194, 0, 0.30667],
              "103": [0.19444, 0.43056, 0.08847, 0, 0.46],
              "104": [0, 0.69444, 0.07671, 0, 0.51111],
              "105": [0, 0.65536, 0.1019, 0, 0.30667],
              "106": [0.19444, 0.65536, 0.14467, 0, 0.30667],
              "107": [0, 0.69444, 0.10764, 0, 0.46],
              "108": [0, 0.69444, 0.10333, 0, 0.25555],
              "109": [0, 0.43056, 0.07671, 0, 0.81777],
              "110": [0, 0.43056, 0.07671, 0, 0.56222],
              "111": [0, 0.43056, 0.06312, 0, 0.51111],
              "112": [0.19444, 0.43056, 0.06312, 0, 0.51111],
              "113": [0.19444, 0.43056, 0.08847, 0, 0.46],
              "114": [0, 0.43056, 0.10764, 0, 0.42166],
              "115": [0, 0.43056, 0.08208, 0, 0.40889],
              "116": [0, 0.61508, 0.09486, 0, 0.33222],
              "117": [0, 0.43056, 0.07671, 0, 0.53666],
              "118": [0, 0.43056, 0.10764, 0, 0.46],
              "119": [0, 0.43056, 0.10764, 0, 0.66444],
              "120": [0, 0.43056, 0.12042, 0, 0.46389],
              "121": [0.19444, 0.43056, 0.08847, 0, 0.48555],
              "122": [0, 0.43056, 0.12292, 0, 0.40889],
              "126": [0.35, 0.31786, 0.11585, 0, 0.51111],
              "163": [0, 0.69444, 0, 0, 0.76909],
              "168": [0, 0.66786, 0.10474, 0, 0.51111],
              "176": [0, 0.69444, 0, 0, 0.83129],
              "198": [0, 0.68333, 0.12028, 0, 0.88277],
              "216": [0.04861, 0.73194, 0.09403, 0, 0.76666],
              "223": [0.19444, 0.69444, 0.10514, 0, 0.53666],
              "230": [0, 0.43056, 0.07514, 0, 0.71555],
              "248": [0.09722, 0.52778, 0.09194, 0, 0.51111],
              "305": [0, 0.43056, 0, 0.02778, 0.32246],
              "338": [0, 0.68333, 0.12028, 0, 0.98499],
              "339": [0, 0.43056, 0.07514, 0, 0.71555],
              "567": [0.19444, 0.43056, 0, 0.08334, 0.38403],
              "710": [0, 0.69444, 0.06646, 0, 0.51111],
              "711": [0, 0.62847, 0.08295, 0, 0.51111],
              "713": [0, 0.56167, 0.10333, 0, 0.51111],
              "714": [0, 0.69444, 0.09694, 0, 0.51111],
              "715": [0, 0.69444, 0, 0, 0.51111],
              "728": [0, 0.69444, 0.10806, 0, 0.51111],
              "729": [0, 0.66786, 0.11752, 0, 0.30667],
              "730": [0, 0.69444, 0, 0, 0.83129],
              "732": [0, 0.66786, 0.11585, 0, 0.51111],
              "733": [0, 0.69444, 0.1225, 0, 0.51111],
              "915": [0, 0.68333, 0.13305, 0, 0.62722],
              "916": [0, 0.68333, 0, 0, 0.81777],
              "920": [0, 0.68333, 0.09403, 0, 0.76666],
              "923": [0, 0.68333, 0, 0, 0.69222],
              "926": [0, 0.68333, 0.15294, 0, 0.66444],
              "928": [0, 0.68333, 0.16389, 0, 0.74333],
              "931": [0, 0.68333, 0.12028, 0, 0.71555],
              "933": [0, 0.68333, 0.11111, 0, 0.76666],
              "934": [0, 0.68333, 0.05986, 0, 0.71555],
              "936": [0, 0.68333, 0.11111, 0, 0.76666],
              "937": [0, 0.68333, 0.10257, 0, 0.71555],
              "8211": [0, 0.43056, 0.09208, 0, 0.51111],
              "8212": [0, 0.43056, 0.09208, 0, 1.02222],
              "8216": [0, 0.69444, 0.12417, 0, 0.30667],
              "8217": [0, 0.69444, 0.12417, 0, 0.30667],
              "8220": [0, 0.69444, 0.1685, 0, 0.51444],
              "8221": [0, 0.69444, 0.06961, 0, 0.51444],
              "8463": [0, 0.68889, 0, 0, 0.54028]
            },
            "Main-Regular": {
              "32": [0, 0, 0, 0, 0],
              "33": [0, 0.69444, 0, 0, 0.27778],
              "34": [0, 0.69444, 0, 0, 0.5],
              "35": [0.19444, 0.69444, 0, 0, 0.83334],
              "36": [0.05556, 0.75, 0, 0, 0.5],
              "37": [0.05556, 0.75, 0, 0, 0.83334],
              "38": [0, 0.69444, 0, 0, 0.77778],
              "39": [0, 0.69444, 0, 0, 0.27778],
              "40": [0.25, 0.75, 0, 0, 0.38889],
              "41": [0.25, 0.75, 0, 0, 0.38889],
              "42": [0, 0.75, 0, 0, 0.5],
              "43": [0.08333, 0.58333, 0, 0, 0.77778],
              "44": [0.19444, 0.10556, 0, 0, 0.27778],
              "45": [0, 0.43056, 0, 0, 0.33333],
              "46": [0, 0.10556, 0, 0, 0.27778],
              "47": [0.25, 0.75, 0, 0, 0.5],
              "48": [0, 0.64444, 0, 0, 0.5],
              "49": [0, 0.64444, 0, 0, 0.5],
              "50": [0, 0.64444, 0, 0, 0.5],
              "51": [0, 0.64444, 0, 0, 0.5],
              "52": [0, 0.64444, 0, 0, 0.5],
              "53": [0, 0.64444, 0, 0, 0.5],
              "54": [0, 0.64444, 0, 0, 0.5],
              "55": [0, 0.64444, 0, 0, 0.5],
              "56": [0, 0.64444, 0, 0, 0.5],
              "57": [0, 0.64444, 0, 0, 0.5],
              "58": [0, 0.43056, 0, 0, 0.27778],
              "59": [0.19444, 0.43056, 0, 0, 0.27778],
              "60": [0.0391, 0.5391, 0, 0, 0.77778],
              "61": [-0.13313, 0.36687, 0, 0, 0.77778],
              "62": [0.0391, 0.5391, 0, 0, 0.77778],
              "63": [0, 0.69444, 0, 0, 0.47222],
              "64": [0, 0.69444, 0, 0, 0.77778],
              "65": [0, 0.68333, 0, 0, 0.75],
              "66": [0, 0.68333, 0, 0, 0.70834],
              "67": [0, 0.68333, 0, 0, 0.72222],
              "68": [0, 0.68333, 0, 0, 0.76389],
              "69": [0, 0.68333, 0, 0, 0.68056],
              "70": [0, 0.68333, 0, 0, 0.65278],
              "71": [0, 0.68333, 0, 0, 0.78472],
              "72": [0, 0.68333, 0, 0, 0.75],
              "73": [0, 0.68333, 0, 0, 0.36111],
              "74": [0, 0.68333, 0, 0, 0.51389],
              "75": [0, 0.68333, 0, 0, 0.77778],
              "76": [0, 0.68333, 0, 0, 0.625],
              "77": [0, 0.68333, 0, 0, 0.91667],
              "78": [0, 0.68333, 0, 0, 0.75],
              "79": [0, 0.68333, 0, 0, 0.77778],
              "80": [0, 0.68333, 0, 0, 0.68056],
              "81": [0.19444, 0.68333, 0, 0, 0.77778],
              "82": [0, 0.68333, 0, 0, 0.73611],
              "83": [0, 0.68333, 0, 0, 0.55556],
              "84": [0, 0.68333, 0, 0, 0.72222],
              "85": [0, 0.68333, 0, 0, 0.75],
              "86": [0, 0.68333, 0.01389, 0, 0.75],
              "87": [0, 0.68333, 0.01389, 0, 1.02778],
              "88": [0, 0.68333, 0, 0, 0.75],
              "89": [0, 0.68333, 0.025, 0, 0.75],
              "90": [0, 0.68333, 0, 0, 0.61111],
              "91": [0.25, 0.75, 0, 0, 0.27778],
              "92": [0.25, 0.75, 0, 0, 0.5],
              "93": [0.25, 0.75, 0, 0, 0.27778],
              "94": [0, 0.69444, 0, 0, 0.5],
              "95": [0.31, 0.12056, 0.02778, 0, 0.5],
              "97": [0, 0.43056, 0, 0, 0.5],
              "98": [0, 0.69444, 0, 0, 0.55556],
              "99": [0, 0.43056, 0, 0, 0.44445],
              "100": [0, 0.69444, 0, 0, 0.55556],
              "101": [0, 0.43056, 0, 0, 0.44445],
              "102": [0, 0.69444, 0.07778, 0, 0.30556],
              "103": [0.19444, 0.43056, 0.01389, 0, 0.5],
              "104": [0, 0.69444, 0, 0, 0.55556],
              "105": [0, 0.66786, 0, 0, 0.27778],
              "106": [0.19444, 0.66786, 0, 0, 0.30556],
              "107": [0, 0.69444, 0, 0, 0.52778],
              "108": [0, 0.69444, 0, 0, 0.27778],
              "109": [0, 0.43056, 0, 0, 0.83334],
              "110": [0, 0.43056, 0, 0, 0.55556],
              "111": [0, 0.43056, 0, 0, 0.5],
              "112": [0.19444, 0.43056, 0, 0, 0.55556],
              "113": [0.19444, 0.43056, 0, 0, 0.52778],
              "114": [0, 0.43056, 0, 0, 0.39167],
              "115": [0, 0.43056, 0, 0, 0.39445],
              "116": [0, 0.61508, 0, 0, 0.38889],
              "117": [0, 0.43056, 0, 0, 0.55556],
              "118": [0, 0.43056, 0.01389, 0, 0.52778],
              "119": [0, 0.43056, 0.01389, 0, 0.72222],
              "120": [0, 0.43056, 0, 0, 0.52778],
              "121": [0.19444, 0.43056, 0.01389, 0, 0.52778],
              "122": [0, 0.43056, 0, 0, 0.44445],
              "123": [0.25, 0.75, 0, 0, 0.5],
              "124": [0.25, 0.75, 0, 0, 0.27778],
              "125": [0.25, 0.75, 0, 0, 0.5],
              "126": [0.35, 0.31786, 0, 0, 0.5],
              "160": [0, 0, 0, 0, 0],
              "168": [0, 0.66786, 0, 0, 0.5],
              "172": [0, 0.43056, 0, 0, 0.66667],
              "176": [0, 0.69444, 0, 0, 0.75],
              "177": [0.08333, 0.58333, 0, 0, 0.77778],
              "198": [0, 0.68333, 0, 0, 0.90278],
              "215": [0.08333, 0.58333, 0, 0, 0.77778],
              "216": [0.04861, 0.73194, 0, 0, 0.77778],
              "223": [0, 0.69444, 0, 0, 0.5],
              "230": [0, 0.43056, 0, 0, 0.72222],
              "247": [0.08333, 0.58333, 0, 0, 0.77778],
              "248": [0.09722, 0.52778, 0, 0, 0.5],
              "305": [0, 0.43056, 0, 0, 0.27778],
              "338": [0, 0.68333, 0, 0, 1.01389],
              "339": [0, 0.43056, 0, 0, 0.77778],
              "567": [0.19444, 0.43056, 0, 0, 0.30556],
              "710": [0, 0.69444, 0, 0, 0.5],
              "711": [0, 0.62847, 0, 0, 0.5],
              "713": [0, 0.56778, 0, 0, 0.5],
              "714": [0, 0.69444, 0, 0, 0.5],
              "715": [0, 0.69444, 0, 0, 0.5],
              "728": [0, 0.69444, 0, 0, 0.5],
              "729": [0, 0.66786, 0, 0, 0.27778],
              "730": [0, 0.69444, 0, 0, 0.75],
              "732": [0, 0.66786, 0, 0, 0.5],
              "733": [0, 0.69444, 0, 0, 0.5],
              "824": [0.19444, 0.69444, 0, 0, 0],
              "915": [0, 0.68333, 0, 0, 0.625],
              "916": [0, 0.68333, 0, 0, 0.83334],
              "920": [0, 0.68333, 0, 0, 0.77778],
              "923": [0, 0.68333, 0, 0, 0.69445],
              "926": [0, 0.68333, 0, 0, 0.66667],
              "928": [0, 0.68333, 0, 0, 0.75],
              "931": [0, 0.68333, 0, 0, 0.72222],
              "933": [0, 0.68333, 0, 0, 0.77778],
              "934": [0, 0.68333, 0, 0, 0.72222],
              "936": [0, 0.68333, 0, 0, 0.77778],
              "937": [0, 0.68333, 0, 0, 0.72222],
              "8211": [0, 0.43056, 0.02778, 0, 0.5],
              "8212": [0, 0.43056, 0.02778, 0, 1.0],
              "8216": [0, 0.69444, 0, 0, 0.27778],
              "8217": [0, 0.69444, 0, 0, 0.27778],
              "8220": [0, 0.69444, 0, 0, 0.5],
              "8221": [0, 0.69444, 0, 0, 0.5],
              "8224": [0.19444, 0.69444, 0, 0, 0.44445],
              "8225": [0.19444, 0.69444, 0, 0, 0.44445],
              "8230": [0, 0.12, 0, 0, 1015],
              "8242": [0, 0.55556, 0, 0, 0.275],
              "8407": [0, 0.71444, 0.15382, 0, 0.5],
              "8463": [0, 0.68889, 0, 0, 0.54028],
              "8465": [0, 0.69444, 0, 0, 0.72222],
              "8467": [0, 0.69444, 0, 0.11111, 0.41667],
              "8472": [0.19444, 0.43056, 0, 0.11111, 0.63646],
              "8476": [0, 0.69444, 0, 0, 0.72222],
              "8501": [0, 0.69444, 0, 0, 0.61111],
              "8592": [-0.13313, 0.36687, 0, 0, 1.0],
              "8593": [0.19444, 0.69444, 0, 0, 0.5],
              "8594": [-0.13313, 0.36687, 0, 0, 1.0],
              "8595": [0.19444, 0.69444, 0, 0, 0.5],
              "8596": [-0.13313, 0.36687, 0, 0, 1.0],
              "8597": [0.25, 0.75, 0, 0, 0.5],
              "8598": [0.19444, 0.69444, 0, 0, 1.0],
              "8599": [0.19444, 0.69444, 0, 0, 1.0],
              "8600": [0.19444, 0.69444, 0, 0, 1.0],
              "8601": [0.19444, 0.69444, 0, 0, 1.0],
              "8614": [0.011, 0.511, 0, 0, 889],
              "8617": [0.011, 0.511, 0, 0, 1015],
              "8618": [0.011, 0.511, 0, 0, 1015],
              "8636": [-0.13313, 0.36687, 0, 0, 1.0],
              "8637": [-0.13313, 0.36687, 0, 0, 1.0],
              "8640": [-0.13313, 0.36687, 0, 0, 1.0],
              "8641": [-0.13313, 0.36687, 0, 0, 1.0],
              "8652": [0.011, 0.671, 0, 0, 889],
              "8656": [-0.13313, 0.36687, 0, 0, 1.0],
              "8657": [0.19444, 0.69444, 0, 0, 0.61111],
              "8658": [-0.13313, 0.36687, 0, 0, 1.0],
              "8659": [0.19444, 0.69444, 0, 0, 0.61111],
              "8660": [-0.13313, 0.36687, 0, 0, 1.0],
              "8661": [0.25, 0.75, 0, 0, 0.61111],
              "8704": [0, 0.69444, 0, 0, 0.55556],
              "8706": [0, 0.69444, 0.05556, 0.08334, 0.5309],
              "8707": [0, 0.69444, 0, 0, 0.55556],
              "8709": [0.05556, 0.75, 0, 0, 0.5],
              "8711": [0, 0.68333, 0, 0, 0.83334],
              "8712": [0.0391, 0.5391, 0, 0, 0.66667],
              "8715": [0.0391, 0.5391, 0, 0, 0.66667],
              "8722": [0.08333, 0.58333, 0, 0, 0.77778],
              "8723": [0.08333, 0.58333, 0, 0, 0.77778],
              "8725": [0.25, 0.75, 0, 0, 0.5],
              "8726": [0.25, 0.75, 0, 0, 0.5],
              "8727": [-0.03472, 0.46528, 0, 0, 0.5],
              "8728": [-0.05555, 0.44445, 0, 0, 0.5],
              "8729": [-0.05555, 0.44445, 0, 0, 0.5],
              "8730": [0.2, 0.8, 0, 0, 0.83334],
              "8733": [0, 0.43056, 0, 0, 0.77778],
              "8734": [0, 0.43056, 0, 0, 1.0],
              "8736": [0, 0.69224, 0, 0, 0.72222],
              "8739": [0.25, 0.75, 0, 0, 0.27778],
              "8741": [0.25, 0.75, 0, 0, 0.5],
              "8743": [0, 0.55556, 0, 0, 0.66667],
              "8744": [0, 0.55556, 0, 0, 0.66667],
              "8745": [0, 0.55556, 0, 0, 0.66667],
              "8746": [0, 0.55556, 0, 0, 0.66667],
              "8747": [0.19444, 0.69444, 0.11111, 0, 0.41667],
              "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
              "8768": [0.19444, 0.69444, 0, 0, 0.27778],
              "8771": [-0.03625, 0.46375, 0, 0, 0.77778],
              "8773": [-0.022, 0.589, 0, 0, 667],
              "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
              "8781": [-0.03625, 0.46375, 0, 0, 0.77778],
              "8784": [-0.133, 0.67, 0, 0, 666],
              "8800": [0.215, 0.716, 0, 0, 666],
              "8801": [-0.03625, 0.46375, 0, 0, 0.77778],
              "8804": [0.13597, 0.63597, 0, 0, 0.77778],
              "8805": [0.13597, 0.63597, 0, 0, 0.77778],
              "8810": [0.0391, 0.5391, 0, 0, 1.0],
              "8811": [0.0391, 0.5391, 0, 0, 1.0],
              "8826": [0.0391, 0.5391, 0, 0, 0.77778],
              "8827": [0.0391, 0.5391, 0, 0, 0.77778],
              "8834": [0.0391, 0.5391, 0, 0, 0.77778],
              "8835": [0.0391, 0.5391, 0, 0, 0.77778],
              "8838": [0.13597, 0.63597, 0, 0, 0.77778],
              "8839": [0.13597, 0.63597, 0, 0, 0.77778],
              "8846": [0, 0.55556, 0, 0, 0.66667],
              "8849": [0.13597, 0.63597, 0, 0, 0.77778],
              "8850": [0.13597, 0.63597, 0, 0, 0.77778],
              "8851": [0, 0.55556, 0, 0, 0.66667],
              "8852": [0, 0.55556, 0, 0, 0.66667],
              "8853": [0.08333, 0.58333, 0, 0, 0.77778],
              "8854": [0.08333, 0.58333, 0, 0, 0.77778],
              "8855": [0.08333, 0.58333, 0, 0, 0.77778],
              "8856": [0.08333, 0.58333, 0, 0, 0.77778],
              "8857": [0.08333, 0.58333, 0, 0, 0.77778],
              "8866": [0, 0.69444, 0, 0, 0.61111],
              "8867": [0, 0.69444, 0, 0, 0.61111],
              "8868": [0, 0.69444, 0, 0, 0.77778],
              "8869": [0, 0.69444, 0, 0, 0.77778],
              "8872": [0.249, 0.75, 0, 0, 692],
              "8900": [-0.05555, 0.44445, 0, 0, 0.5],
              "8901": [-0.05555, 0.44445, 0, 0, 0.27778],
              "8902": [-0.03472, 0.46528, 0, 0, 0.5],
              "8904": [0.005, 0.505, 0, 0, 847],
              "8942": [0.03, 0.9, 0, 0, 121],
              "8943": [-0.19, 0.31, 0, 0, 1015],
              "8945": [-0.1, 0.82, 0, 0, 1015],
              "8968": [0.25, 0.75, 0, 0, 0.44445],
              "8969": [0.25, 0.75, 0, 0, 0.44445],
              "8970": [0.25, 0.75, 0, 0, 0.44445],
              "8971": [0.25, 0.75, 0, 0, 0.44445],
              "8994": [-0.14236, 0.35764, 0, 0, 1.0],
              "8995": [-0.14236, 0.35764, 0, 0, 1.0],
              "9136": [0.244, 0.744, 0, 0, 301],
              "9137": [0.244, 0.744, 0, 0, 301],
              "9651": [0.19444, 0.69444, 0, 0, 0.88889],
              "9657": [-0.03472, 0.46528, 0, 0, 0.5],
              "9661": [0.19444, 0.69444, 0, 0, 0.88889],
              "9667": [-0.03472, 0.46528, 0, 0, 0.5],
              "9711": [0.19444, 0.69444, 0, 0, 1.0],
              "9824": [0.12963, 0.69444, 0, 0, 0.77778],
              "9825": [0.12963, 0.69444, 0, 0, 0.77778],
              "9826": [0.12963, 0.69444, 0, 0, 0.77778],
              "9827": [0.12963, 0.69444, 0, 0, 0.77778],
              "9837": [0, 0.75, 0, 0, 0.38889],
              "9838": [0.19444, 0.69444, 0, 0, 0.38889],
              "9839": [0.19444, 0.69444, 0, 0, 0.38889],
              "10216": [0.25, 0.75, 0, 0, 0.38889],
              "10217": [0.25, 0.75, 0, 0, 0.38889],
              "10222": [0.244, 0.744, 0, 0, 184],
              "10223": [0.244, 0.744, 0, 0, 184],
              "10229": [0.011, 0.511, 0, 0, 1470],
              "10230": [0.011, 0.511, 0, 0, 1469],
              "10231": [0.011, 0.511, 0, 0, 1748],
              "10232": [0.024, 0.525, 0, 0, 1497],
              "10233": [0.024, 0.525, 0, 0, 1526],
              "10234": [0.024, 0.525, 0, 0, 1746],
              "10236": [0.011, 0.511, 0, 0, 1498],
              "10815": [0, 0.68333, 0, 0, 0.75],
              "10927": [0.13597, 0.63597, 0, 0, 0.77778],
              "10928": [0.13597, 0.63597, 0, 0, 0.77778]
            },
            "Math-BoldItalic": {
              "47": [0.19444, 0.69444, 0, 0, 0],
              "65": [0, 0.68611, 0, 0, 0.86944],
              "66": [0, 0.68611, 0.04835, 0, 0.8664],
              "67": [0, 0.68611, 0.06979, 0, 0.81694],
              "68": [0, 0.68611, 0.03194, 0, 0.93812],
              "69": [0, 0.68611, 0.05451, 0, 0.81007],
              "70": [0, 0.68611, 0.15972, 0, 0.68889],
              "71": [0, 0.68611, 0, 0, 0.88673],
              "72": [0, 0.68611, 0.08229, 0, 0.98229],
              "73": [0, 0.68611, 0.07778, 0, 0.51111],
              "74": [0, 0.68611, 0.10069, 0, 0.63125],
              "75": [0, 0.68611, 0.06979, 0, 0.97118],
              "76": [0, 0.68611, 0, 0, 0.75555],
              "77": [0, 0.68611, 0.11424, 0, 1.14201],
              "78": [0, 0.68611, 0.11424, 0, 0.95034],
              "79": [0, 0.68611, 0.03194, 0, 0.83666],
              "80": [0, 0.68611, 0.15972, 0, 0.72309],
              "81": [0.19444, 0.68611, 0, 0, 0.86861],
              "82": [0, 0.68611, 0.00421, 0, 0.87235],
              "83": [0, 0.68611, 0.05382, 0, 0.69271],
              "84": [0, 0.68611, 0.15972, 0, 0.63663],
              "85": [0, 0.68611, 0.11424, 0, 0.80027],
              "86": [0, 0.68611, 0.25555, 0, 0.67778],
              "87": [0, 0.68611, 0.15972, 0, 1.09305],
              "88": [0, 0.68611, 0.07778, 0, 0.94722],
              "89": [0, 0.68611, 0.25555, 0, 0.67458],
              "90": [0, 0.68611, 0.06979, 0, 0.77257],
              "97": [0, 0.44444, 0, 0, 0.63287],
              "98": [0, 0.69444, 0, 0, 0.52083],
              "99": [0, 0.44444, 0, 0, 0.51342],
              "100": [0, 0.69444, 0, 0, 0.60972],
              "101": [0, 0.44444, 0, 0, 0.55361],
              "102": [0.19444, 0.69444, 0.11042, 0, 0.56806],
              "103": [0.19444, 0.44444, 0.03704, 0, 0.5449],
              "104": [0, 0.69444, 0, 0, 0.66759],
              "105": [0, 0.69326, 0, 0, 0.4048],
              "106": [0.19444, 0.69326, 0.0622, 0, 0.47083],
              "107": [0, 0.69444, 0.01852, 0, 0.6037],
              "108": [0, 0.69444, 0.0088, 0, 0.34815],
              "109": [0, 0.44444, 0, 0, 1.0324],
              "110": [0, 0.44444, 0, 0, 0.71296],
              "111": [0, 0.44444, 0, 0, 0.58472],
              "112": [0.19444, 0.44444, 0, 0, 0.60092],
              "113": [0.19444, 0.44444, 0.03704, 0, 0.54213],
              "114": [0, 0.44444, 0.03194, 0, 0.5287],
              "115": [0, 0.44444, 0, 0, 0.53125],
              "116": [0, 0.63492, 0, 0, 0.41528],
              "117": [0, 0.44444, 0, 0, 0.68102],
              "118": [0, 0.44444, 0.03704, 0, 0.56666],
              "119": [0, 0.44444, 0.02778, 0, 0.83148],
              "120": [0, 0.44444, 0, 0, 0.65903],
              "121": [0.19444, 0.44444, 0.03704, 0, 0.59028],
              "122": [0, 0.44444, 0.04213, 0, 0.55509],
              "915": [0, 0.68611, 0.15972, 0, 0.65694],
              "916": [0, 0.68611, 0, 0, 0.95833],
              "920": [0, 0.68611, 0.03194, 0, 0.86722],
              "923": [0, 0.68611, 0, 0, 0.80555],
              "926": [0, 0.68611, 0.07458, 0, 0.84125],
              "928": [0, 0.68611, 0.08229, 0, 0.98229],
              "931": [0, 0.68611, 0.05451, 0, 0.88507],
              "933": [0, 0.68611, 0.15972, 0, 0.67083],
              "934": [0, 0.68611, 0, 0, 0.76666],
              "936": [0, 0.68611, 0.11653, 0, 0.71402],
              "937": [0, 0.68611, 0.04835, 0, 0.8789],
              "945": [0, 0.44444, 0, 0, 0.76064],
              "946": [0.19444, 0.69444, 0.03403, 0, 0.65972],
              "947": [0.19444, 0.44444, 0.06389, 0, 0.59003],
              "948": [0, 0.69444, 0.03819, 0, 0.52222],
              "949": [0, 0.44444, 0, 0, 0.52882],
              "950": [0.19444, 0.69444, 0.06215, 0, 0.50833],
              "951": [0.19444, 0.44444, 0.03704, 0, 0.6],
              "952": [0, 0.69444, 0.03194, 0, 0.5618],
              "953": [0, 0.44444, 0, 0, 0.41204],
              "954": [0, 0.44444, 0, 0, 0.66759],
              "955": [0, 0.69444, 0, 0, 0.67083],
              "956": [0.19444, 0.44444, 0, 0, 0.70787],
              "957": [0, 0.44444, 0.06898, 0, 0.57685],
              "958": [0.19444, 0.69444, 0.03021, 0, 0.50833],
              "959": [0, 0.44444, 0, 0, 0.58472],
              "960": [0, 0.44444, 0.03704, 0, 0.68241],
              "961": [0.19444, 0.44444, 0, 0, 0.6118],
              "962": [0.09722, 0.44444, 0.07917, 0, 0.42361],
              "963": [0, 0.44444, 0.03704, 0, 0.68588],
              "964": [0, 0.44444, 0.13472, 0, 0.52083],
              "965": [0, 0.44444, 0.03704, 0, 0.63055],
              "966": [0.19444, 0.44444, 0, 0, 0.74722],
              "967": [0.19444, 0.44444, 0, 0, 0.71805],
              "968": [0.19444, 0.69444, 0.03704, 0, 0.75833],
              "969": [0, 0.44444, 0.03704, 0, 0.71782],
              "977": [0, 0.69444, 0, 0, 0.69155],
              "981": [0.19444, 0.69444, 0, 0, 0.7125],
              "982": [0, 0.44444, 0.03194, 0, 0.975],
              "1009": [0.19444, 0.44444, 0, 0, 0.6118],
              "1013": [0, 0.44444, 0, 0, 0.48333]
            },
            "Math-Italic": {
              "47": [0.19444, 0.69444, 0, 0, 0],
              "65": [0, 0.68333, 0, 0.13889, 0.75],
              "66": [0, 0.68333, 0.05017, 0.08334, 0.75851],
              "67": [0, 0.68333, 0.07153, 0.08334, 0.71472],
              "68": [0, 0.68333, 0.02778, 0.05556, 0.82792],
              "69": [0, 0.68333, 0.05764, 0.08334, 0.7382],
              "70": [0, 0.68333, 0.13889, 0.08334, 0.64306],
              "71": [0, 0.68333, 0, 0.08334, 0.78625],
              "72": [0, 0.68333, 0.08125, 0.05556, 0.83125],
              "73": [0, 0.68333, 0.07847, 0.11111, 0.43958],
              "74": [0, 0.68333, 0.09618, 0.16667, 0.55451],
              "75": [0, 0.68333, 0.07153, 0.05556, 0.84931],
              "76": [0, 0.68333, 0, 0.02778, 0.68056],
              "77": [0, 0.68333, 0.10903, 0.08334, 0.97014],
              "78": [0, 0.68333, 0.10903, 0.08334, 0.80347],
              "79": [0, 0.68333, 0.02778, 0.08334, 0.76278],
              "80": [0, 0.68333, 0.13889, 0.08334, 0.64201],
              "81": [0.19444, 0.68333, 0, 0.08334, 0.79056],
              "82": [0, 0.68333, 0.00773, 0.08334, 0.75929],
              "83": [0, 0.68333, 0.05764, 0.08334, 0.6132],
              "84": [0, 0.68333, 0.13889, 0.08334, 0.58438],
              "85": [0, 0.68333, 0.10903, 0.02778, 0.68278],
              "86": [0, 0.68333, 0.22222, 0, 0.58333],
              "87": [0, 0.68333, 0.13889, 0, 0.94445],
              "88": [0, 0.68333, 0.07847, 0.08334, 0.82847],
              "89": [0, 0.68333, 0.22222, 0, 0.58056],
              "90": [0, 0.68333, 0.07153, 0.08334, 0.68264],
              "97": [0, 0.43056, 0, 0, 0.52859],
              "98": [0, 0.69444, 0, 0, 0.42917],
              "99": [0, 0.43056, 0, 0.05556, 0.43276],
              "100": [0, 0.69444, 0, 0.16667, 0.52049],
              "101": [0, 0.43056, 0, 0.05556, 0.46563],
              "102": [0.19444, 0.69444, 0.10764, 0.16667, 0.48959],
              "103": [0.19444, 0.43056, 0.03588, 0.02778, 0.47697],
              "104": [0, 0.69444, 0, 0, 0.57616],
              "105": [0, 0.65952, 0, 0, 0.34451],
              "106": [0.19444, 0.65952, 0.05724, 0, 0.41181],
              "107": [0, 0.69444, 0.03148, 0, 0.5206],
              "108": [0, 0.69444, 0.01968, 0.08334, 0.29838],
              "109": [0, 0.43056, 0, 0, 0.87801],
              "110": [0, 0.43056, 0, 0, 0.60023],
              "111": [0, 0.43056, 0, 0.05556, 0.48472],
              "112": [0.19444, 0.43056, 0, 0.08334, 0.50313],
              "113": [0.19444, 0.43056, 0.03588, 0.08334, 0.44641],
              "114": [0, 0.43056, 0.02778, 0.05556, 0.45116],
              "115": [0, 0.43056, 0, 0.05556, 0.46875],
              "116": [0, 0.61508, 0, 0.08334, 0.36111],
              "117": [0, 0.43056, 0, 0.02778, 0.57246],
              "118": [0, 0.43056, 0.03588, 0.02778, 0.48472],
              "119": [0, 0.43056, 0.02691, 0.08334, 0.71592],
              "120": [0, 0.43056, 0, 0.02778, 0.57153],
              "121": [0.19444, 0.43056, 0.03588, 0.05556, 0.49028],
              "122": [0, 0.43056, 0.04398, 0.05556, 0.46505],
              "915": [0, 0.68333, 0.13889, 0.08334, 0.61528],
              "916": [0, 0.68333, 0, 0.16667, 0.83334],
              "920": [0, 0.68333, 0.02778, 0.08334, 0.76278],
              "923": [0, 0.68333, 0, 0.16667, 0.69445],
              "926": [0, 0.68333, 0.07569, 0.08334, 0.74236],
              "928": [0, 0.68333, 0.08125, 0.05556, 0.83125],
              "931": [0, 0.68333, 0.05764, 0.08334, 0.77986],
              "933": [0, 0.68333, 0.13889, 0.05556, 0.58333],
              "934": [0, 0.68333, 0, 0.08334, 0.66667],
              "936": [0, 0.68333, 0.11, 0.05556, 0.61222],
              "937": [0, 0.68333, 0.05017, 0.08334, 0.7724],
              "945": [0, 0.43056, 0.0037, 0.02778, 0.6397],
              "946": [0.19444, 0.69444, 0.05278, 0.08334, 0.56563],
              "947": [0.19444, 0.43056, 0.05556, 0, 0.51773],
              "948": [0, 0.69444, 0.03785, 0.05556, 0.44444],
              "949": [0, 0.43056, 0, 0.08334, 0.46632],
              "950": [0.19444, 0.69444, 0.07378, 0.08334, 0.4375],
              "951": [0.19444, 0.43056, 0.03588, 0.05556, 0.49653],
              "952": [0, 0.69444, 0.02778, 0.08334, 0.46944],
              "953": [0, 0.43056, 0, 0.05556, 0.35394],
              "954": [0, 0.43056, 0, 0, 0.57616],
              "955": [0, 0.69444, 0, 0, 0.58334],
              "956": [0.19444, 0.43056, 0, 0.02778, 0.60255],
              "957": [0, 0.43056, 0.06366, 0.02778, 0.49398],
              "958": [0.19444, 0.69444, 0.04601, 0.11111, 0.4375],
              "959": [0, 0.43056, 0, 0.05556, 0.48472],
              "960": [0, 0.43056, 0.03588, 0, 0.57003],
              "961": [0.19444, 0.43056, 0, 0.08334, 0.51702],
              "962": [0.09722, 0.43056, 0.07986, 0.08334, 0.36285],
              "963": [0, 0.43056, 0.03588, 0, 0.57141],
              "964": [0, 0.43056, 0.1132, 0.02778, 0.43715],
              "965": [0, 0.43056, 0.03588, 0.02778, 0.54028],
              "966": [0.19444, 0.43056, 0, 0.08334, 0.65417],
              "967": [0.19444, 0.43056, 0, 0.05556, 0.62569],
              "968": [0.19444, 0.69444, 0.03588, 0.11111, 0.65139],
              "969": [0, 0.43056, 0.03588, 0, 0.62245],
              "977": [0, 0.69444, 0, 0.08334, 0.59144],
              "981": [0.19444, 0.69444, 0, 0.08334, 0.59583],
              "982": [0, 0.43056, 0.02778, 0, 0.82813],
              "1009": [0.19444, 0.43056, 0, 0.08334, 0.51702],
              "1013": [0, 0.43056, 0, 0.05556, 0.4059]
            },
            "Math-Regular": {
              "65": [0, 0.68333, 0, 0.13889, 0.75],
              "66": [0, 0.68333, 0.05017, 0.08334, 0.75851],
              "67": [0, 0.68333, 0.07153, 0.08334, 0.71472],
              "68": [0, 0.68333, 0.02778, 0.05556, 0.82792],
              "69": [0, 0.68333, 0.05764, 0.08334, 0.7382],
              "70": [0, 0.68333, 0.13889, 0.08334, 0.64306],
              "71": [0, 0.68333, 0, 0.08334, 0.78625],
              "72": [0, 0.68333, 0.08125, 0.05556, 0.83125],
              "73": [0, 0.68333, 0.07847, 0.11111, 0.43958],
              "74": [0, 0.68333, 0.09618, 0.16667, 0.55451],
              "75": [0, 0.68333, 0.07153, 0.05556, 0.84931],
              "76": [0, 0.68333, 0, 0.02778, 0.68056],
              "77": [0, 0.68333, 0.10903, 0.08334, 0.97014],
              "78": [0, 0.68333, 0.10903, 0.08334, 0.80347],
              "79": [0, 0.68333, 0.02778, 0.08334, 0.76278],
              "80": [0, 0.68333, 0.13889, 0.08334, 0.64201],
              "81": [0.19444, 0.68333, 0, 0.08334, 0.79056],
              "82": [0, 0.68333, 0.00773, 0.08334, 0.75929],
              "83": [0, 0.68333, 0.05764, 0.08334, 0.6132],
              "84": [0, 0.68333, 0.13889, 0.08334, 0.58438],
              "85": [0, 0.68333, 0.10903, 0.02778, 0.68278],
              "86": [0, 0.68333, 0.22222, 0, 0.58333],
              "87": [0, 0.68333, 0.13889, 0, 0.94445],
              "88": [0, 0.68333, 0.07847, 0.08334, 0.82847],
              "89": [0, 0.68333, 0.22222, 0, 0.58056],
              "90": [0, 0.68333, 0.07153, 0.08334, 0.68264],
              "97": [0, 0.43056, 0, 0, 0.52859],
              "98": [0, 0.69444, 0, 0, 0.42917],
              "99": [0, 0.43056, 0, 0.05556, 0.43276],
              "100": [0, 0.69444, 0, 0.16667, 0.52049],
              "101": [0, 0.43056, 0, 0.05556, 0.46563],
              "102": [0.19444, 0.69444, 0.10764, 0.16667, 0.48959],
              "103": [0.19444, 0.43056, 0.03588, 0.02778, 0.47697],
              "104": [0, 0.69444, 0, 0, 0.57616],
              "105": [0, 0.65952, 0, 0, 0.34451],
              "106": [0.19444, 0.65952, 0.05724, 0, 0.41181],
              "107": [0, 0.69444, 0.03148, 0, 0.5206],
              "108": [0, 0.69444, 0.01968, 0.08334, 0.29838],
              "109": [0, 0.43056, 0, 0, 0.87801],
              "110": [0, 0.43056, 0, 0, 0.60023],
              "111": [0, 0.43056, 0, 0.05556, 0.48472],
              "112": [0.19444, 0.43056, 0, 0.08334, 0.50313],
              "113": [0.19444, 0.43056, 0.03588, 0.08334, 0.44641],
              "114": [0, 0.43056, 0.02778, 0.05556, 0.45116],
              "115": [0, 0.43056, 0, 0.05556, 0.46875],
              "116": [0, 0.61508, 0, 0.08334, 0.36111],
              "117": [0, 0.43056, 0, 0.02778, 0.57246],
              "118": [0, 0.43056, 0.03588, 0.02778, 0.48472],
              "119": [0, 0.43056, 0.02691, 0.08334, 0.71592],
              "120": [0, 0.43056, 0, 0.02778, 0.57153],
              "121": [0.19444, 0.43056, 0.03588, 0.05556, 0.49028],
              "122": [0, 0.43056, 0.04398, 0.05556, 0.46505],
              "915": [0, 0.68333, 0.13889, 0.08334, 0.61528],
              "916": [0, 0.68333, 0, 0.16667, 0.83334],
              "920": [0, 0.68333, 0.02778, 0.08334, 0.76278],
              "923": [0, 0.68333, 0, 0.16667, 0.69445],
              "926": [0, 0.68333, 0.07569, 0.08334, 0.74236],
              "928": [0, 0.68333, 0.08125, 0.05556, 0.83125],
              "931": [0, 0.68333, 0.05764, 0.08334, 0.77986],
              "933": [0, 0.68333, 0.13889, 0.05556, 0.58333],
              "934": [0, 0.68333, 0, 0.08334, 0.66667],
              "936": [0, 0.68333, 0.11, 0.05556, 0.61222],
              "937": [0, 0.68333, 0.05017, 0.08334, 0.7724],
              "945": [0, 0.43056, 0.0037, 0.02778, 0.6397],
              "946": [0.19444, 0.69444, 0.05278, 0.08334, 0.56563],
              "947": [0.19444, 0.43056, 0.05556, 0, 0.51773],
              "948": [0, 0.69444, 0.03785, 0.05556, 0.44444],
              "949": [0, 0.43056, 0, 0.08334, 0.46632],
              "950": [0.19444, 0.69444, 0.07378, 0.08334, 0.4375],
              "951": [0.19444, 0.43056, 0.03588, 0.05556, 0.49653],
              "952": [0, 0.69444, 0.02778, 0.08334, 0.46944],
              "953": [0, 0.43056, 0, 0.05556, 0.35394],
              "954": [0, 0.43056, 0, 0, 0.57616],
              "955": [0, 0.69444, 0, 0, 0.58334],
              "956": [0.19444, 0.43056, 0, 0.02778, 0.60255],
              "957": [0, 0.43056, 0.06366, 0.02778, 0.49398],
              "958": [0.19444, 0.69444, 0.04601, 0.11111, 0.4375],
              "959": [0, 0.43056, 0, 0.05556, 0.48472],
              "960": [0, 0.43056, 0.03588, 0, 0.57003],
              "961": [0.19444, 0.43056, 0, 0.08334, 0.51702],
              "962": [0.09722, 0.43056, 0.07986, 0.08334, 0.36285],
              "963": [0, 0.43056, 0.03588, 0, 0.57141],
              "964": [0, 0.43056, 0.1132, 0.02778, 0.43715],
              "965": [0, 0.43056, 0.03588, 0.02778, 0.54028],
              "966": [0.19444, 0.43056, 0, 0.08334, 0.65417],
              "967": [0.19444, 0.43056, 0, 0.05556, 0.62569],
              "968": [0.19444, 0.69444, 0.03588, 0.11111, 0.65139],
              "969": [0, 0.43056, 0.03588, 0, 0.62245],
              "977": [0, 0.69444, 0, 0.08334, 0.59144],
              "981": [0.19444, 0.69444, 0, 0.08334, 0.59583],
              "982": [0, 0.43056, 0.02778, 0, 0.82813],
              "1009": [0.19444, 0.43056, 0, 0.08334, 0.51702],
              "1013": [0, 0.43056, 0, 0.05556, 0.4059]
            },
            "SansSerif-Bold": {
              "33": [0, 0.69444, 0, 0, 0.36667],
              "34": [0, 0.69444, 0, 0, 0.55834],
              "35": [0.19444, 0.69444, 0, 0, 0.91667],
              "36": [0.05556, 0.75, 0, 0, 0.55],
              "37": [0.05556, 0.75, 0, 0, 1.02912],
              "38": [0, 0.69444, 0, 0, 0.83056],
              "39": [0, 0.69444, 0, 0, 0.30556],
              "40": [0.25, 0.75, 0, 0, 0.42778],
              "41": [0.25, 0.75, 0, 0, 0.42778],
              "42": [0, 0.75, 0, 0, 0.55],
              "43": [0.11667, 0.61667, 0, 0, 0.85556],
              "44": [0.10556, 0.13056, 0, 0, 0.30556],
              "45": [0, 0.45833, 0, 0, 0.36667],
              "46": [0, 0.13056, 0, 0, 0.30556],
              "47": [0.25, 0.75, 0, 0, 0.55],
              "48": [0, 0.69444, 0, 0, 0.55],
              "49": [0, 0.69444, 0, 0, 0.55],
              "50": [0, 0.69444, 0, 0, 0.55],
              "51": [0, 0.69444, 0, 0, 0.55],
              "52": [0, 0.69444, 0, 0, 0.55],
              "53": [0, 0.69444, 0, 0, 0.55],
              "54": [0, 0.69444, 0, 0, 0.55],
              "55": [0, 0.69444, 0, 0, 0.55],
              "56": [0, 0.69444, 0, 0, 0.55],
              "57": [0, 0.69444, 0, 0, 0.55],
              "58": [0, 0.45833, 0, 0, 0.30556],
              "59": [0.10556, 0.45833, 0, 0, 0.30556],
              "61": [-0.09375, 0.40625, 0, 0, 0.85556],
              "63": [0, 0.69444, 0, 0, 0.51945],
              "64": [0, 0.69444, 0, 0, 0.73334],
              "65": [0, 0.69444, 0, 0, 0.73334],
              "66": [0, 0.69444, 0, 0, 0.73334],
              "67": [0, 0.69444, 0, 0, 0.70278],
              "68": [0, 0.69444, 0, 0, 0.79445],
              "69": [0, 0.69444, 0, 0, 0.64167],
              "70": [0, 0.69444, 0, 0, 0.61111],
              "71": [0, 0.69444, 0, 0, 0.73334],
              "72": [0, 0.69444, 0, 0, 0.79445],
              "73": [0, 0.69444, 0, 0, 0.33056],
              "74": [0, 0.69444, 0, 0, 0.51945],
              "75": [0, 0.69444, 0, 0, 0.76389],
              "76": [0, 0.69444, 0, 0, 0.58056],
              "77": [0, 0.69444, 0, 0, 0.97778],
              "78": [0, 0.69444, 0, 0, 0.79445],
              "79": [0, 0.69444, 0, 0, 0.79445],
              "80": [0, 0.69444, 0, 0, 0.70278],
              "81": [0.10556, 0.69444, 0, 0, 0.79445],
              "82": [0, 0.69444, 0, 0, 0.70278],
              "83": [0, 0.69444, 0, 0, 0.61111],
              "84": [0, 0.69444, 0, 0, 0.73334],
              "85": [0, 0.69444, 0, 0, 0.76389],
              "86": [0, 0.69444, 0.01528, 0, 0.73334],
              "87": [0, 0.69444, 0.01528, 0, 1.03889],
              "88": [0, 0.69444, 0, 0, 0.73334],
              "89": [0, 0.69444, 0.0275, 0, 0.73334],
              "90": [0, 0.69444, 0, 0, 0.67223],
              "91": [0.25, 0.75, 0, 0, 0.34306],
              "93": [0.25, 0.75, 0, 0, 0.34306],
              "94": [0, 0.69444, 0, 0, 0.55],
              "95": [0.35, 0.10833, 0.03056, 0, 0.55],
              "97": [0, 0.45833, 0, 0, 0.525],
              "98": [0, 0.69444, 0, 0, 0.56111],
              "99": [0, 0.45833, 0, 0, 0.48889],
              "100": [0, 0.69444, 0, 0, 0.56111],
              "101": [0, 0.45833, 0, 0, 0.51111],
              "102": [0, 0.69444, 0.07639, 0, 0.33611],
              "103": [0.19444, 0.45833, 0.01528, 0, 0.55],
              "104": [0, 0.69444, 0, 0, 0.56111],
              "105": [0, 0.69444, 0, 0, 0.25556],
              "106": [0.19444, 0.69444, 0, 0, 0.28611],
              "107": [0, 0.69444, 0, 0, 0.53056],
              "108": [0, 0.69444, 0, 0, 0.25556],
              "109": [0, 0.45833, 0, 0, 0.86667],
              "110": [0, 0.45833, 0, 0, 0.56111],
              "111": [0, 0.45833, 0, 0, 0.55],
              "112": [0.19444, 0.45833, 0, 0, 0.56111],
              "113": [0.19444, 0.45833, 0, 0, 0.56111],
              "114": [0, 0.45833, 0.01528, 0, 0.37222],
              "115": [0, 0.45833, 0, 0, 0.42167],
              "116": [0, 0.58929, 0, 0, 0.40417],
              "117": [0, 0.45833, 0, 0, 0.56111],
              "118": [0, 0.45833, 0.01528, 0, 0.5],
              "119": [0, 0.45833, 0.01528, 0, 0.74445],
              "120": [0, 0.45833, 0, 0, 0.5],
              "121": [0.19444, 0.45833, 0.01528, 0, 0.5],
              "122": [0, 0.45833, 0, 0, 0.47639],
              "126": [0.35, 0.34444, 0, 0, 0.55],
              "168": [0, 0.69444, 0, 0, 0.55],
              "176": [0, 0.69444, 0, 0, 0.73334],
              "180": [0, 0.69444, 0, 0, 0.55],
              "305": [0, 0.45833, 0, 0, 0.25556],
              "567": [0.19444, 0.45833, 0, 0, 0.28611],
              "710": [0, 0.69444, 0, 0, 0.55],
              "711": [0, 0.63542, 0, 0, 0.55],
              "713": [0, 0.63778, 0, 0, 0.55],
              "728": [0, 0.69444, 0, 0, 0.55],
              "729": [0, 0.69444, 0, 0, 0.30556],
              "730": [0, 0.69444, 0, 0, 0.73334],
              "732": [0, 0.69444, 0, 0, 0.55],
              "733": [0, 0.69444, 0, 0, 0.55],
              "915": [0, 0.69444, 0, 0, 0.58056],
              "916": [0, 0.69444, 0, 0, 0.91667],
              "920": [0, 0.69444, 0, 0, 0.85556],
              "923": [0, 0.69444, 0, 0, 0.67223],
              "926": [0, 0.69444, 0, 0, 0.73334],
              "928": [0, 0.69444, 0, 0, 0.79445],
              "931": [0, 0.69444, 0, 0, 0.79445],
              "933": [0, 0.69444, 0, 0, 0.85556],
              "934": [0, 0.69444, 0, 0, 0.79445],
              "936": [0, 0.69444, 0, 0, 0.85556],
              "937": [0, 0.69444, 0, 0, 0.79445],
              "8211": [0, 0.45833, 0.03056, 0, 0.55],
              "8212": [0, 0.45833, 0.03056, 0, 1.10001],
              "8216": [0, 0.69444, 0, 0, 0.30556],
              "8217": [0, 0.69444, 0, 0, 0.30556],
              "8220": [0, 0.69444, 0, 0, 0.55834],
              "8221": [0, 0.69444, 0, 0, 0.55834]
            },
            "SansSerif-Italic": {
              "33": [0, 0.69444, 0.05733, 0, 0.31945],
              "34": [0, 0.69444, 0.00316, 0, 0.5],
              "35": [0.19444, 0.69444, 0.05087, 0, 0.83334],
              "36": [0.05556, 0.75, 0.11156, 0, 0.5],
              "37": [0.05556, 0.75, 0.03126, 0, 0.83334],
              "38": [0, 0.69444, 0.03058, 0, 0.75834],
              "39": [0, 0.69444, 0.07816, 0, 0.27778],
              "40": [0.25, 0.75, 0.13164, 0, 0.38889],
              "41": [0.25, 0.75, 0.02536, 0, 0.38889],
              "42": [0, 0.75, 0.11775, 0, 0.5],
              "43": [0.08333, 0.58333, 0.02536, 0, 0.77778],
              "44": [0.125, 0.08333, 0, 0, 0.27778],
              "45": [0, 0.44444, 0.01946, 0, 0.33333],
              "46": [0, 0.08333, 0, 0, 0.27778],
              "47": [0.25, 0.75, 0.13164, 0, 0.5],
              "48": [0, 0.65556, 0.11156, 0, 0.5],
              "49": [0, 0.65556, 0.11156, 0, 0.5],
              "50": [0, 0.65556, 0.11156, 0, 0.5],
              "51": [0, 0.65556, 0.11156, 0, 0.5],
              "52": [0, 0.65556, 0.11156, 0, 0.5],
              "53": [0, 0.65556, 0.11156, 0, 0.5],
              "54": [0, 0.65556, 0.11156, 0, 0.5],
              "55": [0, 0.65556, 0.11156, 0, 0.5],
              "56": [0, 0.65556, 0.11156, 0, 0.5],
              "57": [0, 0.65556, 0.11156, 0, 0.5],
              "58": [0, 0.44444, 0.02502, 0, 0.27778],
              "59": [0.125, 0.44444, 0.02502, 0, 0.27778],
              "61": [-0.13, 0.37, 0.05087, 0, 0.77778],
              "63": [0, 0.69444, 0.11809, 0, 0.47222],
              "64": [0, 0.69444, 0.07555, 0, 0.66667],
              "65": [0, 0.69444, 0, 0, 0.66667],
              "66": [0, 0.69444, 0.08293, 0, 0.66667],
              "67": [0, 0.69444, 0.11983, 0, 0.63889],
              "68": [0, 0.69444, 0.07555, 0, 0.72223],
              "69": [0, 0.69444, 0.11983, 0, 0.59722],
              "70": [0, 0.69444, 0.13372, 0, 0.56945],
              "71": [0, 0.69444, 0.11983, 0, 0.66667],
              "72": [0, 0.69444, 0.08094, 0, 0.70834],
              "73": [0, 0.69444, 0.13372, 0, 0.27778],
              "74": [0, 0.69444, 0.08094, 0, 0.47222],
              "75": [0, 0.69444, 0.11983, 0, 0.69445],
              "76": [0, 0.69444, 0, 0, 0.54167],
              "77": [0, 0.69444, 0.08094, 0, 0.875],
              "78": [0, 0.69444, 0.08094, 0, 0.70834],
              "79": [0, 0.69444, 0.07555, 0, 0.73611],
              "80": [0, 0.69444, 0.08293, 0, 0.63889],
              "81": [0.125, 0.69444, 0.07555, 0, 0.73611],
              "82": [0, 0.69444, 0.08293, 0, 0.64584],
              "83": [0, 0.69444, 0.09205, 0, 0.55556],
              "84": [0, 0.69444, 0.13372, 0, 0.68056],
              "85": [0, 0.69444, 0.08094, 0, 0.6875],
              "86": [0, 0.69444, 0.1615, 0, 0.66667],
              "87": [0, 0.69444, 0.1615, 0, 0.94445],
              "88": [0, 0.69444, 0.13372, 0, 0.66667],
              "89": [0, 0.69444, 0.17261, 0, 0.66667],
              "90": [0, 0.69444, 0.11983, 0, 0.61111],
              "91": [0.25, 0.75, 0.15942, 0, 0.28889],
              "93": [0.25, 0.75, 0.08719, 0, 0.28889],
              "94": [0, 0.69444, 0.0799, 0, 0.5],
              "95": [0.35, 0.09444, 0.08616, 0, 0.5],
              "97": [0, 0.44444, 0.00981, 0, 0.48056],
              "98": [0, 0.69444, 0.03057, 0, 0.51667],
              "99": [0, 0.44444, 0.08336, 0, 0.44445],
              "100": [0, 0.69444, 0.09483, 0, 0.51667],
              "101": [0, 0.44444, 0.06778, 0, 0.44445],
              "102": [0, 0.69444, 0.21705, 0, 0.30556],
              "103": [0.19444, 0.44444, 0.10836, 0, 0.5],
              "104": [0, 0.69444, 0.01778, 0, 0.51667],
              "105": [0, 0.67937, 0.09718, 0, 0.23889],
              "106": [0.19444, 0.67937, 0.09162, 0, 0.26667],
              "107": [0, 0.69444, 0.08336, 0, 0.48889],
              "108": [0, 0.69444, 0.09483, 0, 0.23889],
              "109": [0, 0.44444, 0.01778, 0, 0.79445],
              "110": [0, 0.44444, 0.01778, 0, 0.51667],
              "111": [0, 0.44444, 0.06613, 0, 0.5],
              "112": [0.19444, 0.44444, 0.0389, 0, 0.51667],
              "113": [0.19444, 0.44444, 0.04169, 0, 0.51667],
              "114": [0, 0.44444, 0.10836, 0, 0.34167],
              "115": [0, 0.44444, 0.0778, 0, 0.38333],
              "116": [0, 0.57143, 0.07225, 0, 0.36111],
              "117": [0, 0.44444, 0.04169, 0, 0.51667],
              "118": [0, 0.44444, 0.10836, 0, 0.46111],
              "119": [0, 0.44444, 0.10836, 0, 0.68334],
              "120": [0, 0.44444, 0.09169, 0, 0.46111],
              "121": [0.19444, 0.44444, 0.10836, 0, 0.46111],
              "122": [0, 0.44444, 0.08752, 0, 0.43472],
              "126": [0.35, 0.32659, 0.08826, 0, 0.5],
              "168": [0, 0.67937, 0.06385, 0, 0.5],
              "176": [0, 0.69444, 0, 0, 0.73752],
              "305": [0, 0.44444, 0.04169, 0, 0.23889],
              "567": [0.19444, 0.44444, 0.04169, 0, 0.26667],
              "710": [0, 0.69444, 0.0799, 0, 0.5],
              "711": [0, 0.63194, 0.08432, 0, 0.5],
              "713": [0, 0.60889, 0.08776, 0, 0.5],
              "714": [0, 0.69444, 0.09205, 0, 0.5],
              "715": [0, 0.69444, 0, 0, 0.5],
              "728": [0, 0.69444, 0.09483, 0, 0.5],
              "729": [0, 0.67937, 0.07774, 0, 0.27778],
              "730": [0, 0.69444, 0, 0, 0.73752],
              "732": [0, 0.67659, 0.08826, 0, 0.5],
              "733": [0, 0.69444, 0.09205, 0, 0.5],
              "915": [0, 0.69444, 0.13372, 0, 0.54167],
              "916": [0, 0.69444, 0, 0, 0.83334],
              "920": [0, 0.69444, 0.07555, 0, 0.77778],
              "923": [0, 0.69444, 0, 0, 0.61111],
              "926": [0, 0.69444, 0.12816, 0, 0.66667],
              "928": [0, 0.69444, 0.08094, 0, 0.70834],
              "931": [0, 0.69444, 0.11983, 0, 0.72222],
              "933": [0, 0.69444, 0.09031, 0, 0.77778],
              "934": [0, 0.69444, 0.04603, 0, 0.72222],
              "936": [0, 0.69444, 0.09031, 0, 0.77778],
              "937": [0, 0.69444, 0.08293, 0, 0.72222],
              "8211": [0, 0.44444, 0.08616, 0, 0.5],
              "8212": [0, 0.44444, 0.08616, 0, 1.0],
              "8216": [0, 0.69444, 0.07816, 0, 0.27778],
              "8217": [0, 0.69444, 0.07816, 0, 0.27778],
              "8220": [0, 0.69444, 0.14205, 0, 0.5],
              "8221": [0, 0.69444, 0.00316, 0, 0.5]
            },
            "SansSerif-Regular": {
              "33": [0, 0.69444, 0, 0, 0.31945],
              "34": [0, 0.69444, 0, 0, 0.5],
              "35": [0.19444, 0.69444, 0, 0, 0.83334],
              "36": [0.05556, 0.75, 0, 0, 0.5],
              "37": [0.05556, 0.75, 0, 0, 0.83334],
              "38": [0, 0.69444, 0, 0, 0.75834],
              "39": [0, 0.69444, 0, 0, 0.27778],
              "40": [0.25, 0.75, 0, 0, 0.38889],
              "41": [0.25, 0.75, 0, 0, 0.38889],
              "42": [0, 0.75, 0, 0, 0.5],
              "43": [0.08333, 0.58333, 0, 0, 0.77778],
              "44": [0.125, 0.08333, 0, 0, 0.27778],
              "45": [0, 0.44444, 0, 0, 0.33333],
              "46": [0, 0.08333, 0, 0, 0.27778],
              "47": [0.25, 0.75, 0, 0, 0.5],
              "48": [0, 0.65556, 0, 0, 0.5],
              "49": [0, 0.65556, 0, 0, 0.5],
              "50": [0, 0.65556, 0, 0, 0.5],
              "51": [0, 0.65556, 0, 0, 0.5],
              "52": [0, 0.65556, 0, 0, 0.5],
              "53": [0, 0.65556, 0, 0, 0.5],
              "54": [0, 0.65556, 0, 0, 0.5],
              "55": [0, 0.65556, 0, 0, 0.5],
              "56": [0, 0.65556, 0, 0, 0.5],
              "57": [0, 0.65556, 0, 0, 0.5],
              "58": [0, 0.44444, 0, 0, 0.27778],
              "59": [0.125, 0.44444, 0, 0, 0.27778],
              "61": [-0.13, 0.37, 0, 0, 0.77778],
              "63": [0, 0.69444, 0, 0, 0.47222],
              "64": [0, 0.69444, 0, 0, 0.66667],
              "65": [0, 0.69444, 0, 0, 0.66667],
              "66": [0, 0.69444, 0, 0, 0.66667],
              "67": [0, 0.69444, 0, 0, 0.63889],
              "68": [0, 0.69444, 0, 0, 0.72223],
              "69": [0, 0.69444, 0, 0, 0.59722],
              "70": [0, 0.69444, 0, 0, 0.56945],
              "71": [0, 0.69444, 0, 0, 0.66667],
              "72": [0, 0.69444, 0, 0, 0.70834],
              "73": [0, 0.69444, 0, 0, 0.27778],
              "74": [0, 0.69444, 0, 0, 0.47222],
              "75": [0, 0.69444, 0, 0, 0.69445],
              "76": [0, 0.69444, 0, 0, 0.54167],
              "77": [0, 0.69444, 0, 0, 0.875],
              "78": [0, 0.69444, 0, 0, 0.70834],
              "79": [0, 0.69444, 0, 0, 0.73611],
              "80": [0, 0.69444, 0, 0, 0.63889],
              "81": [0.125, 0.69444, 0, 0, 0.73611],
              "82": [0, 0.69444, 0, 0, 0.64584],
              "83": [0, 0.69444, 0, 0, 0.55556],
              "84": [0, 0.69444, 0, 0, 0.68056],
              "85": [0, 0.69444, 0, 0, 0.6875],
              "86": [0, 0.69444, 0.01389, 0, 0.66667],
              "87": [0, 0.69444, 0.01389, 0, 0.94445],
              "88": [0, 0.69444, 0, 0, 0.66667],
              "89": [0, 0.69444, 0.025, 0, 0.66667],
              "90": [0, 0.69444, 0, 0, 0.61111],
              "91": [0.25, 0.75, 0, 0, 0.28889],
              "93": [0.25, 0.75, 0, 0, 0.28889],
              "94": [0, 0.69444, 0, 0, 0.5],
              "95": [0.35, 0.09444, 0.02778, 0, 0.5],
              "97": [0, 0.44444, 0, 0, 0.48056],
              "98": [0, 0.69444, 0, 0, 0.51667],
              "99": [0, 0.44444, 0, 0, 0.44445],
              "100": [0, 0.69444, 0, 0, 0.51667],
              "101": [0, 0.44444, 0, 0, 0.44445],
              "102": [0, 0.69444, 0.06944, 0, 0.30556],
              "103": [0.19444, 0.44444, 0.01389, 0, 0.5],
              "104": [0, 0.69444, 0, 0, 0.51667],
              "105": [0, 0.67937, 0, 0, 0.23889],
              "106": [0.19444, 0.67937, 0, 0, 0.26667],
              "107": [0, 0.69444, 0, 0, 0.48889],
              "108": [0, 0.69444, 0, 0, 0.23889],
              "109": [0, 0.44444, 0, 0, 0.79445],
              "110": [0, 0.44444, 0, 0, 0.51667],
              "111": [0, 0.44444, 0, 0, 0.5],
              "112": [0.19444, 0.44444, 0, 0, 0.51667],
              "113": [0.19444, 0.44444, 0, 0, 0.51667],
              "114": [0, 0.44444, 0.01389, 0, 0.34167],
              "115": [0, 0.44444, 0, 0, 0.38333],
              "116": [0, 0.57143, 0, 0, 0.36111],
              "117": [0, 0.44444, 0, 0, 0.51667],
              "118": [0, 0.44444, 0.01389, 0, 0.46111],
              "119": [0, 0.44444, 0.01389, 0, 0.68334],
              "120": [0, 0.44444, 0, 0, 0.46111],
              "121": [0.19444, 0.44444, 0.01389, 0, 0.46111],
              "122": [0, 0.44444, 0, 0, 0.43472],
              "126": [0.35, 0.32659, 0, 0, 0.5],
              "176": [0, 0.69444, 0, 0, 0.66667],
              "305": [0, 0.44444, 0, 0, 0.23889],
              "567": [0.19444, 0.44444, 0, 0, 0.26667],
              "710": [0, 0.69444, 0, 0, 0.5],
              "711": [0, 0.63194, 0, 0, 0.5],
              "713": [0, 0.60889, 0, 0, 0.5],
              "714": [0, 0.69444, 0, 0, 0.5],
              "728": [0, 0.69444, 0, 0, 0.5],
              "729": [0, 0.67937, 0, 0, 0.27778],
              "730": [0, 0.69444, 0, 0, 0.66667],
              "733": [0, 0.69444, 0, 0, 0.5],
              "771": [0, 0.67659, 0, 0, 0.5],
              "776": [0, 0.67937, 0, 0, 0.5],
              "915": [0, 0.69444, 0, 0, 0.54167],
              "916": [0, 0.69444, 0, 0, 0.83334],
              "920": [0, 0.69444, 0, 0, 0.77778],
              "923": [0, 0.69444, 0, 0, 0.61111],
              "926": [0, 0.69444, 0, 0, 0.66667],
              "928": [0, 0.69444, 0, 0, 0.70834],
              "931": [0, 0.69444, 0, 0, 0.72222],
              "933": [0, 0.69444, 0, 0, 0.77778],
              "934": [0, 0.69444, 0, 0, 0.72222],
              "936": [0, 0.69444, 0, 0, 0.77778],
              "937": [0, 0.69444, 0, 0, 0.72222],
              "8211": [0, 0.44444, 0.02778, 0, 0.5],
              "8212": [0, 0.44444, 0.02778, 0, 1.0],
              "8216": [0, 0.69444, 0, 0, 0.27778],
              "8217": [0, 0.69444, 0, 0, 0.27778],
              "8220": [0, 0.69444, 0, 0, 0.5],
              "8221": [0, 0.69444, 0, 0, 0.5]
            },
            "Script-Regular": {
              "65": [0, 0.7, 0.22925, 0, 0.80253],
              "66": [0, 0.7, 0.04087, 0, 0.90757],
              "67": [0, 0.7, 0.1689, 0, 0.66619],
              "68": [0, 0.7, 0.09371, 0, 0.77443],
              "69": [0, 0.7, 0.18583, 0, 0.56162],
              "70": [0, 0.7, 0.13634, 0, 0.89544],
              "71": [0, 0.7, 0.17322, 0, 0.60961],
              "72": [0, 0.7, 0.29694, 0, 0.96919],
              "73": [0, 0.7, 0.19189, 0, 0.80907],
              "74": [0.27778, 0.7, 0.19189, 0, 1.05159],
              "75": [0, 0.7, 0.31259, 0, 0.91364],
              "76": [0, 0.7, 0.19189, 0, 0.87373],
              "77": [0, 0.7, 0.15981, 0, 1.08031],
              "78": [0, 0.7, 0.3525, 0, 0.9015],
              "79": [0, 0.7, 0.08078, 0, 0.73787],
              "80": [0, 0.7, 0.08078, 0, 1.01262],
              "81": [0, 0.7, 0.03305, 0, 0.88282],
              "82": [0, 0.7, 0.06259, 0, 0.85],
              "83": [0, 0.7, 0.19189, 0, 0.86767],
              "84": [0, 0.7, 0.29087, 0, 0.74697],
              "85": [0, 0.7, 0.25815, 0, 0.79996],
              "86": [0, 0.7, 0.27523, 0, 0.62204],
              "87": [0, 0.7, 0.27523, 0, 0.80532],
              "88": [0, 0.7, 0.26006, 0, 0.94445],
              "89": [0, 0.7, 0.2939, 0, 0.70961],
              "90": [0, 0.7, 0.24037, 0, 0.8212]
            },
            "Size1-Regular": {
              "40": [0.35001, 0.85, 0, 0, 0.45834],
              "41": [0.35001, 0.85, 0, 0, 0.45834],
              "47": [0.35001, 0.85, 0, 0, 0.57778],
              "91": [0.35001, 0.85, 0, 0, 0.41667],
              "92": [0.35001, 0.85, 0, 0, 0.57778],
              "93": [0.35001, 0.85, 0, 0, 0.41667],
              "123": [0.35001, 0.85, 0, 0, 0.58334],
              "125": [0.35001, 0.85, 0, 0, 0.58334],
              "710": [0, 0.72222, 0, 0, 0.55556],
              "732": [0, 0.72222, 0, 0, 0.55556],
              "770": [0, 0.72222, 0, 0, 0.55556],
              "771": [0, 0.72222, 0, 0, 0.55556],
              "8214": [-0.00099, 0.601, 0, 0, 0.77778],
              "8593": [1e-05, 0.6, 0, 0, 0.66667],
              "8595": [1e-05, 0.6, 0, 0, 0.66667],
              "8657": [1e-05, 0.6, 0, 0, 0.77778],
              "8659": [1e-05, 0.6, 0, 0, 0.77778],
              "8719": [0.25001, 0.75, 0, 0, 0.94445],
              "8720": [0.25001, 0.75, 0, 0, 0.94445],
              "8721": [0.25001, 0.75, 0, 0, 1.05556],
              "8730": [0.35001, 0.85, 0, 0, 1.0],
              "8739": [-0.00599, 0.606, 0, 0, 0.33333],
              "8741": [-0.00599, 0.606, 0, 0, 0.55556],
              "8747": [0.30612, 0.805, 0.19445, 0, 0.47222],
              "8748": [0.306, 0.805, 0.19445, 0, 0.47222],
              "8749": [0.306, 0.805, 0.19445, 0, 0.47222],
              "8750": [0.30612, 0.805, 0.19445, 0, 0.47222],
              "8896": [0.25001, 0.75, 0, 0, 0.83334],
              "8897": [0.25001, 0.75, 0, 0, 0.83334],
              "8898": [0.25001, 0.75, 0, 0, 0.83334],
              "8899": [0.25001, 0.75, 0, 0, 0.83334],
              "8968": [0.35001, 0.85, 0, 0, 0.47222],
              "8969": [0.35001, 0.85, 0, 0, 0.47222],
              "8970": [0.35001, 0.85, 0, 0, 0.47222],
              "8971": [0.35001, 0.85, 0, 0, 0.47222],
              "9168": [-0.00099, 0.601, 0, 0, 0.66667],
              "10216": [0.35001, 0.85, 0, 0, 0.47222],
              "10217": [0.35001, 0.85, 0, 0, 0.47222],
              "10752": [0.25001, 0.75, 0, 0, 1.11111],
              "10753": [0.25001, 0.75, 0, 0, 1.11111],
              "10754": [0.25001, 0.75, 0, 0, 1.11111],
              "10756": [0.25001, 0.75, 0, 0, 0.83334],
              "10758": [0.25001, 0.75, 0, 0, 0.83334]
            },
            "Size2-Regular": {
              "40": [0.65002, 1.15, 0, 0, 0.59722],
              "41": [0.65002, 1.15, 0, 0, 0.59722],
              "47": [0.65002, 1.15, 0, 0, 0.81111],
              "91": [0.65002, 1.15, 0, 0, 0.47222],
              "92": [0.65002, 1.15, 0, 0, 0.81111],
              "93": [0.65002, 1.15, 0, 0, 0.47222],
              "123": [0.65002, 1.15, 0, 0, 0.66667],
              "125": [0.65002, 1.15, 0, 0, 0.66667],
              "710": [0, 0.75, 0, 0, 1.0],
              "732": [0, 0.75, 0, 0, 1.0],
              "770": [0, 0.75, 0, 0, 1.0],
              "771": [0, 0.75, 0, 0, 1.0],
              "8719": [0.55001, 1.05, 0, 0, 1.27778],
              "8720": [0.55001, 1.05, 0, 0, 1.27778],
              "8721": [0.55001, 1.05, 0, 0, 1.44445],
              "8730": [0.65002, 1.15, 0, 0, 1.0],
              "8747": [0.86225, 1.36, 0.44445, 0, 0.55556],
              "8748": [0.862, 1.36, 0.44445, 0, 0.55556],
              "8749": [0.862, 1.36, 0.44445, 0, 0.55556],
              "8750": [0.86225, 1.36, 0.44445, 0, 0.55556],
              "8896": [0.55001, 1.05, 0, 0, 1.11111],
              "8897": [0.55001, 1.05, 0, 0, 1.11111],
              "8898": [0.55001, 1.05, 0, 0, 1.11111],
              "8899": [0.55001, 1.05, 0, 0, 1.11111],
              "8968": [0.65002, 1.15, 0, 0, 0.52778],
              "8969": [0.65002, 1.15, 0, 0, 0.52778],
              "8970": [0.65002, 1.15, 0, 0, 0.52778],
              "8971": [0.65002, 1.15, 0, 0, 0.52778],
              "10216": [0.65002, 1.15, 0, 0, 0.61111],
              "10217": [0.65002, 1.15, 0, 0, 0.61111],
              "10752": [0.55001, 1.05, 0, 0, 1.51112],
              "10753": [0.55001, 1.05, 0, 0, 1.51112],
              "10754": [0.55001, 1.05, 0, 0, 1.51112],
              "10756": [0.55001, 1.05, 0, 0, 1.11111],
              "10758": [0.55001, 1.05, 0, 0, 1.11111]
            },
            "Size3-Regular": {
              "40": [0.95003, 1.45, 0, 0, 0.73611],
              "41": [0.95003, 1.45, 0, 0, 0.73611],
              "47": [0.95003, 1.45, 0, 0, 1.04445],
              "91": [0.95003, 1.45, 0, 0, 0.52778],
              "92": [0.95003, 1.45, 0, 0, 1.04445],
              "93": [0.95003, 1.45, 0, 0, 0.52778],
              "123": [0.95003, 1.45, 0, 0, 0.75],
              "125": [0.95003, 1.45, 0, 0, 0.75],
              "710": [0, 0.75, 0, 0, 1.44445],
              "732": [0, 0.75, 0, 0, 1.44445],
              "770": [0, 0.75, 0, 0, 1.44445],
              "771": [0, 0.75, 0, 0, 1.44445],
              "8730": [0.95003, 1.45, 0, 0, 1.0],
              "8968": [0.95003, 1.45, 0, 0, 0.58334],
              "8969": [0.95003, 1.45, 0, 0, 0.58334],
              "8970": [0.95003, 1.45, 0, 0, 0.58334],
              "8971": [0.95003, 1.45, 0, 0, 0.58334],
              "10216": [0.95003, 1.45, 0, 0, 0.75],
              "10217": [0.95003, 1.45, 0, 0, 0.75]
            },
            "Size4-Regular": {
              "40": [1.25003, 1.75, 0, 0, 0.79167],
              "41": [1.25003, 1.75, 0, 0, 0.79167],
              "47": [1.25003, 1.75, 0, 0, 1.27778],
              "91": [1.25003, 1.75, 0, 0, 0.58334],
              "92": [1.25003, 1.75, 0, 0, 1.27778],
              "93": [1.25003, 1.75, 0, 0, 0.58334],
              "123": [1.25003, 1.75, 0, 0, 0.80556],
              "125": [1.25003, 1.75, 0, 0, 0.80556],
              "710": [0, 0.825, 0, 0, 1.8889],
              "732": [0, 0.825, 0, 0, 1.8889],
              "770": [0, 0.825, 0, 0, 1.8889],
              "771": [0, 0.825, 0, 0, 1.8889],
              "8730": [1.25003, 1.75, 0, 0, 1.0],
              "8968": [1.25003, 1.75, 0, 0, 0.63889],
              "8969": [1.25003, 1.75, 0, 0, 0.63889],
              "8970": [1.25003, 1.75, 0, 0, 0.63889],
              "8971": [1.25003, 1.75, 0, 0, 0.63889],
              "9115": [0.64502, 1.155, 0, 0, 0.875],
              "9116": [1e-05, 0.6, 0, 0, 0.875],
              "9117": [0.64502, 1.155, 0, 0, 0.875],
              "9118": [0.64502, 1.155, 0, 0, 0.875],
              "9119": [1e-05, 0.6, 0, 0, 0.875],
              "9120": [0.64502, 1.155, 0, 0, 0.875],
              "9121": [0.64502, 1.155, 0, 0, 0.66667],
              "9122": [-0.00099, 0.601, 0, 0, 0.66667],
              "9123": [0.64502, 1.155, 0, 0, 0.66667],
              "9124": [0.64502, 1.155, 0, 0, 0.66667],
              "9125": [-0.00099, 0.601, 0, 0, 0.66667],
              "9126": [0.64502, 1.155, 0, 0, 0.66667],
              "9127": [1e-05, 0.9, 0, 0, 0.88889],
              "9128": [0.65002, 1.15, 0, 0, 0.88889],
              "9129": [0.90001, 0, 0, 0, 0.88889],
              "9130": [0, 0.3, 0, 0, 0.88889],
              "9131": [1e-05, 0.9, 0, 0, 0.88889],
              "9132": [0.65002, 1.15, 0, 0, 0.88889],
              "9133": [0.90001, 0, 0, 0, 0.88889],
              "9143": [0.88502, 0.915, 0, 0, 1.05556],
              "10216": [1.25003, 1.75, 0, 0, 0.80556],
              "10217": [1.25003, 1.75, 0, 0, 0.80556],
              "57344": [-0.00499, 0.605, 0, 0, 1.05556],
              "57345": [-0.00499, 0.605, 0, 0, 1.05556],
              "57680": [0, 0.12, 0, 0, 0.45],
              "57681": [0, 0.12, 0, 0, 0.45],
              "57682": [0, 0.12, 0, 0, 0.45],
              "57683": [0, 0.12, 0, 0, 0.45]
            },
            "Typewriter-Regular": {
              "33": [0, 0.61111, 0, 0, 0.525],
              "34": [0, 0.61111, 0, 0, 0.525],
              "35": [0, 0.61111, 0, 0, 0.525],
              "36": [0.08333, 0.69444, 0, 0, 0.525],
              "37": [0.08333, 0.69444, 0, 0, 0.525],
              "38": [0, 0.61111, 0, 0, 0.525],
              "39": [0, 0.61111, 0, 0, 0.525],
              "40": [0.08333, 0.69444, 0, 0, 0.525],
              "41": [0.08333, 0.69444, 0, 0, 0.525],
              "42": [0, 0.52083, 0, 0, 0.525],
              "43": [-0.08056, 0.53055, 0, 0, 0.525],
              "44": [0.13889, 0.125, 0, 0, 0.525],
              "45": [-0.08056, 0.53055, 0, 0, 0.525],
              "46": [0, 0.125, 0, 0, 0.525],
              "47": [0.08333, 0.69444, 0, 0, 0.525],
              "48": [0, 0.61111, 0, 0, 0.525],
              "49": [0, 0.61111, 0, 0, 0.525],
              "50": [0, 0.61111, 0, 0, 0.525],
              "51": [0, 0.61111, 0, 0, 0.525],
              "52": [0, 0.61111, 0, 0, 0.525],
              "53": [0, 0.61111, 0, 0, 0.525],
              "54": [0, 0.61111, 0, 0, 0.525],
              "55": [0, 0.61111, 0, 0, 0.525],
              "56": [0, 0.61111, 0, 0, 0.525],
              "57": [0, 0.61111, 0, 0, 0.525],
              "58": [0, 0.43056, 0, 0, 0.525],
              "59": [0.13889, 0.43056, 0, 0, 0.525],
              "60": [-0.05556, 0.55556, 0, 0, 0.525],
              "61": [-0.19549, 0.41562, 0, 0, 0.525],
              "62": [-0.05556, 0.55556, 0, 0, 0.525],
              "63": [0, 0.61111, 0, 0, 0.525],
              "64": [0, 0.61111, 0, 0, 0.525],
              "65": [0, 0.61111, 0, 0, 0.525],
              "66": [0, 0.61111, 0, 0, 0.525],
              "67": [0, 0.61111, 0, 0, 0.525],
              "68": [0, 0.61111, 0, 0, 0.525],
              "69": [0, 0.61111, 0, 0, 0.525],
              "70": [0, 0.61111, 0, 0, 0.525],
              "71": [0, 0.61111, 0, 0, 0.525],
              "72": [0, 0.61111, 0, 0, 0.525],
              "73": [0, 0.61111, 0, 0, 0.525],
              "74": [0, 0.61111, 0, 0, 0.525],
              "75": [0, 0.61111, 0, 0, 0.525],
              "76": [0, 0.61111, 0, 0, 0.525],
              "77": [0, 0.61111, 0, 0, 0.525],
              "78": [0, 0.61111, 0, 0, 0.525],
              "79": [0, 0.61111, 0, 0, 0.525],
              "80": [0, 0.61111, 0, 0, 0.525],
              "81": [0.13889, 0.61111, 0, 0, 0.525],
              "82": [0, 0.61111, 0, 0, 0.525],
              "83": [0, 0.61111, 0, 0, 0.525],
              "84": [0, 0.61111, 0, 0, 0.525],
              "85": [0, 0.61111, 0, 0, 0.525],
              "86": [0, 0.61111, 0, 0, 0.525],
              "87": [0, 0.61111, 0, 0, 0.525],
              "88": [0, 0.61111, 0, 0, 0.525],
              "89": [0, 0.61111, 0, 0, 0.525],
              "90": [0, 0.61111, 0, 0, 0.525],
              "91": [0.08333, 0.69444, 0, 0, 0.525],
              "92": [0.08333, 0.69444, 0, 0, 0.525],
              "93": [0.08333, 0.69444, 0, 0, 0.525],
              "94": [0, 0.61111, 0, 0, 0.525],
              "95": [0.09514, 0, 0, 0, 0.525],
              "96": [0, 0.61111, 0, 0, 0.525],
              "97": [0, 0.43056, 0, 0, 0.525],
              "98": [0, 0.61111, 0, 0, 0.525],
              "99": [0, 0.43056, 0, 0, 0.525],
              "100": [0, 0.61111, 0, 0, 0.525],
              "101": [0, 0.43056, 0, 0, 0.525],
              "102": [0, 0.61111, 0, 0, 0.525],
              "103": [0.22222, 0.43056, 0, 0, 0.525],
              "104": [0, 0.61111, 0, 0, 0.525],
              "105": [0, 0.61111, 0, 0, 0.525],
              "106": [0.22222, 0.61111, 0, 0, 0.525],
              "107": [0, 0.61111, 0, 0, 0.525],
              "108": [0, 0.61111, 0, 0, 0.525],
              "109": [0, 0.43056, 0, 0, 0.525],
              "110": [0, 0.43056, 0, 0, 0.525],
              "111": [0, 0.43056, 0, 0, 0.525],
              "112": [0.22222, 0.43056, 0, 0, 0.525],
              "113": [0.22222, 0.43056, 0, 0, 0.525],
              "114": [0, 0.43056, 0, 0, 0.525],
              "115": [0, 0.43056, 0, 0, 0.525],
              "116": [0, 0.55358, 0, 0, 0.525],
              "117": [0, 0.43056, 0, 0, 0.525],
              "118": [0, 0.43056, 0, 0, 0.525],
              "119": [0, 0.43056, 0, 0, 0.525],
              "120": [0, 0.43056, 0, 0, 0.525],
              "121": [0.22222, 0.43056, 0, 0, 0.525],
              "122": [0, 0.43056, 0, 0, 0.525],
              "123": [0.08333, 0.69444, 0, 0, 0.525],
              "124": [0.08333, 0.69444, 0, 0, 0.525],
              "125": [0.08333, 0.69444, 0, 0, 0.525],
              "126": [0, 0.61111, 0, 0, 0.525],
              "127": [0, 0.61111, 0, 0, 0.525],
              "176": [0, 0.61111, 0, 0, 0.525],
              "305": [0, 0.43056, 0, 0, 0.525],
              "567": [0.22222, 0.43056, 0, 0, 0.525],
              "711": [0, 0.56597, 0, 0, 0.525],
              "713": [0, 0.56555, 0, 0, 0.525],
              "714": [0, 0.61111, 0, 0, 0.525],
              "715": [0, 0.61111, 0, 0, 0.525],
              "728": [0, 0.61111, 0, 0, 0.525],
              "730": [0, 0.61111, 0, 0, 0.525],
              "770": [0, 0.61111, 0, 0, 0.525],
              "771": [0, 0.61111, 0, 0, 0.525],
              "776": [0, 0.61111, 0, 0, 0.525],
              "915": [0, 0.61111, 0, 0, 0.525],
              "916": [0, 0.61111, 0, 0, 0.525],
              "920": [0, 0.61111, 0, 0, 0.525],
              "923": [0, 0.61111, 0, 0, 0.525],
              "926": [0, 0.61111, 0, 0, 0.525],
              "928": [0, 0.61111, 0, 0, 0.525],
              "931": [0, 0.61111, 0, 0, 0.525],
              "933": [0, 0.61111, 0, 0, 0.525],
              "934": [0, 0.61111, 0, 0, 0.525],
              "936": [0, 0.61111, 0, 0, 0.525],
              "937": [0, 0.61111, 0, 0, 0.525],
              "8216": [0, 0.61111, 0, 0, 0.525],
              "8217": [0, 0.61111, 0, 0, 0.525],
              "8242": [0, 0.61111, 0, 0, 0.525],
              "9251": [0.11111, 0.21944, 0, 0, 0.525]
            }
          };
          /***/
        },
        /* 60 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony export (immutable) */

          __webpack_exports__["a"] = sizingGroup;
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(5);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__buildMathML__ = __webpack_require__(2);

          function sizingGroup(value, options, baseOptions) {
            var inner = __WEBPACK_IMPORTED_MODULE_4__buildHTML__["a"
            /* buildExpression */
            ](value, options, false);

            var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier; // Add size-resetting classes to the inner list and set maxFontSize
            // manually. Handle nested size changes.

            for (var i = 0; i < inner.length; i++) {
              var pos = __WEBPACK_IMPORTED_MODULE_3__utils__["a"
              /* default */
              ].indexOf(inner[i].classes, "sizing");

              if (pos < 0) {
                Array.prototype.push.apply(inner[i].classes, options.sizingClasses(baseOptions));
              } else if (inner[i].classes[pos + 1] === "reset-size" + options.size) {
                // This is a nested size change: e.g., inner[i] is the "b" in
                // `\Huge a \small b`. Override the old size (the `reset-` class)
                // but not the new size.
                inner[i].classes[pos + 1] = "reset-size" + baseOptions.size;
              }

              inner[i].height *= multiplier;
              inner[i].depth *= multiplier;
            }

            return __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"
            /* default */
            ].makeFragment(inner);
          }

          var sizeFuncs = ["\\tiny", "\\sixptsize", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"];
          Object(__WEBPACK_IMPORTED_MODULE_1__defineFunction__["b"
          /* default */
          ])({
            type: "sizing",
            names: sizeFuncs,
            props: {
              numArgs: 0,
              allowedInText: true
            },
            handler: function handler(context, args) {
              var breakOnTokenText = context.breakOnTokenText,
                  funcName = context.funcName,
                  parser = context.parser;
              parser.consumeSpaces();
              var body = parser.parseExpression(false, breakOnTokenText);
              return {
                type: "sizing",
                // Figure out what size to use based on the list of functions above
                size: __WEBPACK_IMPORTED_MODULE_3__utils__["a"
                /* default */
                ].indexOf(sizeFuncs, funcName) + 1,
                value: body
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              // Handle sizing operators like \Huge. Real TeX doesn't actually allow
              // these functions inside of math expressions, so we do some special
              // handling.
              var newOptions = options.havingSize(group.value.size);
              return sizingGroup(group.value.value, newOptions, options);
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              var newOptions = options.havingSize(group.value.size);

              var inner = __WEBPACK_IMPORTED_MODULE_5__buildMathML__["a"
              /* buildExpression */
              ](group.value.value, newOptions);

              var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mstyle", inner); // TODO(emily): This doesn't produce the correct size for nested size
              // changes, because we don't keep state of what style we're currently
              // in, so we can't reset the size to normal before changing it.  Now
              // that we're passing an options parameter we should be able to fix
              // this.

              node.setAttribute("mathsize", newOptions.sizeMultiplier + "em");
              return node;
            }
          });
          /***/
        },
        /* 61 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony export (binding) */

          __webpack_require__.d(__webpack_exports__, "a", function () {
            return _environments;
          });
          /* harmony export (immutable) */


          __webpack_exports__["b"] = defineEnvironment;
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildMathML__ = __webpack_require__(2);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__Options__ = __webpack_require__(43);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__ParseNode__ = __webpack_require__(14);
          /**
           * The context contains the following properties:
           *  - mode: current parsing mode.
           *  - envName: the name of the environment, one of the listed names.
           *  - parser: the parser object.
           */

          /**
           *  - context: information and references provided by the parser
           *  - args: an array of arguments passed to \begin{name}
           *  - optArgs: an array of optional arguments passed to \begin{name}
           */

          /**
           *  - numArgs: (default 0) The number of arguments after the \begin{name} function.
           *  - argTypes: (optional) Just like for a function
           *  - allowedInText: (default false) Whether or not the environment is allowed
           *                   inside text mode (not enforced yet).
           *  - numOptionalArgs: (default 0) Just like for a function
           */

          /**
           * Final enviornment spec for use at parse time.
           * This is almost identical to `EnvDefSpec`, except it
           * 1. includes the function handler
           * 2. requires all arguments except argType
           * It is generated by `defineEnvironment()` below.
           */

          /**
           * All registered environments.
           * `environments.js` exports this same dictionary again and makes it public.
           * `Parser.js` requires this dictionary via `environments.js`.
           */


          var _environments = {};

          function defineEnvironment(_ref) {
            var type = _ref.type,
                names = _ref.names,
                props = _ref.props,
                handler = _ref.handler,
                htmlBuilder = _ref.htmlBuilder,
                mathmlBuilder = _ref.mathmlBuilder; // Set default values of environments

            var data = {
              numArgs: props.numArgs || 0,
              greediness: 1,
              allowedInText: false,
              numOptionalArgs: 0,
              handler: handler
            };

            for (var i = 0; i < names.length; ++i) {
              _environments[names[i]] = data;
            }

            if (htmlBuilder) {
              __WEBPACK_IMPORTED_MODULE_0__buildHTML__["d"
              /* groupTypes */
              ][type] = htmlBuilder;
            }

            if (mathmlBuilder) {
              __WEBPACK_IMPORTED_MODULE_1__buildMathML__["d"
              /* groupTypes */
              ][type] = mathmlBuilder;
            }
          }
          /***/

        },
        /* 62 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony export (binding) */

          __webpack_require__.d(__webpack_exports__, "a", function () {
            return combiningDiacriticalMarksEndRegex;
          });
          /* harmony export (binding) */


          __webpack_require__.d(__webpack_exports__, "b", function () {
            return controlWordRegex;
          });
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__ = __webpack_require__(7);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__ = __webpack_require__(10);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2_match_at__ = __webpack_require__(145);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2_match_at___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_match_at__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__ParseError__ = __webpack_require__(6);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__SourceLocation__ = __webpack_require__(31);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__Token__ = __webpack_require__(27);
          /**
           * The Lexer class handles tokenizing the input in various ways. Since our
           * parser expects us to be able to backtrack, the lexer allows lexing from any
           * given starting point.
           *
           * Its main exposed function is the `lex` function, which takes a position to
           * lex from and a type of token to lex. It defers to the appropriate `_innerLex`
           * function.
           *
           * The various `_innerLex` functions perform the actual lexing of different
           * kinds.
           */

          /* The following tokenRegex
           * - matches typical whitespace (but not NBSP etc.) using its first group
           * - matches comments (must have trailing newlines)
           * - does not match any control character \x00-\x1f except whitespace
           * - does not match a bare backslash
           * - matches any ASCII character except those just mentioned
           * - does not match the BMP private use area \uE000-\uF8FF
           * - does not match bare surrogate code units
           * - matches any BMP character except for those just described
           * - matches any valid Unicode surrogate pair
           * - matches a backslash followed by one or more letters
           * - matches a backslash followed by any BMP character, including newline
           * Just because the Lexer matches something doesn't mean it's valid input:
           * If there is no matching function or symbol definition, the Parser will
           * still reject the input.
           */


          var commentRegexString = "%[^\n]*[\n]";
          var controlWordRegexString = "\\\\[a-zA-Z@]+";
          var controlSymbolRegexString = "\\\\[^\uD800-\uDFFF]";
          var combiningDiacriticalMarkString = "[\u0300-\u036F]";
          var combiningDiacriticalMarksEndRegex = new RegExp(combiningDiacriticalMarkString + "+$");
          var tokenRegex = new RegExp("([ \r\n\t]+)|" + ( // whitespace
          "(" + commentRegexString) + // comments
          "|[!-\\[\\]-\u2027\u202A-\uD7FF\uF900-\uFFFF]" + ( // single codepoint
          combiningDiacriticalMarkString + "*") + // ...plus accents
          "|[\uD800-\uDBFF][\uDC00-\uDFFF]" + ( // surrogate pair
          combiningDiacriticalMarkString + "*") + // ...plus accents
          "|\\\\verb\\*([^]).*?\\3" + // \verb*
          "|\\\\verb([^*a-zA-Z]).*?\\4" + ( // \verb unstarred
          "|" + controlWordRegexString) + ( // \macroName
          "|" + controlSymbolRegexString) + // \\, \', etc.
          ")"); // tokenRegex has no ^ marker, as required by matchAt.
          // These regexs are for matching results from tokenRegex,
          // so they do have ^ markers.

          var controlWordRegex = new RegExp("^" + controlWordRegexString);
          var commentRegex = new RegExp("^" + commentRegexString);
          /** Main Lexer class */

          var Lexer = function () {
            function Lexer(input) {
              __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this, Lexer); // Separate accents from characters


              this.input = input;
              this.pos = 0;
            }
            /**
             * This function lexes a single token.
             */


            __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default()(Lexer, [{
              key: "lex",
              value: function lex() {
                var input = this.input;
                var pos = this.pos;

                if (pos === input.length) {
                  return new __WEBPACK_IMPORTED_MODULE_5__Token__["a"
                  /* Token */
                  ]("EOF", new __WEBPACK_IMPORTED_MODULE_4__SourceLocation__["a"
                  /* default */
                  ](this, pos, pos));
                }

                var match = __WEBPACK_IMPORTED_MODULE_2_match_at___default()(tokenRegex, input, pos);

                if (match === null) {
                  throw new __WEBPACK_IMPORTED_MODULE_3__ParseError__["a"
                  /* default */
                  ]("Unexpected character: '" + input[pos] + "'", new __WEBPACK_IMPORTED_MODULE_5__Token__["a"
                  /* Token */
                  ](input[pos], new __WEBPACK_IMPORTED_MODULE_4__SourceLocation__["a"
                  /* default */
                  ](this, pos, pos + 1)));
                }

                var text = match[2] || " ";
                var start = this.pos;
                this.pos += match[0].length;
                var end = this.pos;

                if (commentRegex.test(text)) {
                  return this.lex();
                } else {
                  return new __WEBPACK_IMPORTED_MODULE_5__Token__["a"
                  /* Token */
                  ](text, new __WEBPACK_IMPORTED_MODULE_4__SourceLocation__["a"
                  /* default */
                  ](this, start, end));
                }
              }
            }]);

            return Lexer;
          }();
          /* harmony default export */


          __webpack_exports__["c"] = Lexer;
          /***/
        },
        /* 63 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";

          Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
          });
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__src_katex_less__ = __webpack_require__(64);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0__src_katex_less___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__src_katex_less__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__katex_js__ = __webpack_require__(65);
          /**
           * This is the webpack entry point for KaTeX. As flow[1] and jest[2] doesn't support
           * CSS modules natively, a separate entry point is used and it is not flowtyped.
           *
           * [1] https://gist.github.com/lambdahands/d19e0da96285b749f0ef
           * [2] https://facebook.github.io/jest/docs/en/webpack.html
           */

          /* harmony default export */


          __webpack_exports__["default"] = __WEBPACK_IMPORTED_MODULE_1__katex_js__["a"
          /* default */
          ];
          /***/
        },
        /* 64 */

        /***/
        function (module, exports) {// removed by extract-text-webpack-plugin

          /***/
        },
        /* 65 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__src_ParseError__ = __webpack_require__(6);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__src_Settings__ = __webpack_require__(34);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__src_buildTree__ = __webpack_require__(76);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__src_parseTree__ = __webpack_require__(113);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__src_utils__ = __webpack_require__(5);
          /* eslint no-console:0 */

          /**
           * This is the main entry point for KaTeX. Here, we expose functions for
           * rendering expressions either to DOM nodes or to markup strings.
           *
           * We also expose the ParseError class to check if errors thrown from KaTeX are
           * errors in the expression, or errors in javascript handling.
           */

          /**
           * Parse and build an expression, and place that expression in the DOM node
           * given.
           */


          var render = function render(expression, baseNode, options) {
            __WEBPACK_IMPORTED_MODULE_4__src_utils__["a"
            /* default */
            ].clearNode(baseNode);

            var node = renderToDomTree(expression, options).toNode();
            baseNode.appendChild(node);
          }; // KaTeX's styles don't work properly in quirks mode. Print out an error, and
          // disable rendering.


          if (typeof document !== "undefined") {
            if (document.compatMode !== "CSS1Compat") {
              typeof console !== "undefined" && console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your " + "website has a suitable doctype.");

              render = function render() {
                throw new __WEBPACK_IMPORTED_MODULE_0__src_ParseError__["a"
                /* default */
                ]("KaTeX doesn't work in quirks mode.");
              };
            }
          }
          /**
           * Parse and build an expression, and return the markup for that.
           */


          var renderToString = function renderToString(expression, options) {
            var markup = renderToDomTree(expression, options).toMarkup();
            return markup;
          };
          /**
           * Parse an expression and return the parse tree.
           */


          var generateParseTree = function generateParseTree(expression, options) {
            var settings = new __WEBPACK_IMPORTED_MODULE_1__src_Settings__["a"
            /* default */
            ](options);
            return Object(__WEBPACK_IMPORTED_MODULE_3__src_parseTree__["a"
            /* default */
            ])(expression, settings);
          };
          /**
           * Generates and returns the katex build tree. This is used for advanced
           * use cases (like rendering to custom output).
           */


          var renderToDomTree = function renderToDomTree(expression, options) {
            var settings = new __WEBPACK_IMPORTED_MODULE_1__src_Settings__["a"
            /* default */
            ](options);
            var tree = Object(__WEBPACK_IMPORTED_MODULE_3__src_parseTree__["a"
            /* default */
            ])(expression, settings);
            return Object(__WEBPACK_IMPORTED_MODULE_2__src_buildTree__["b"
            /* buildTree */
            ])(tree, expression, settings);
          };
          /**
           * Generates and returns the katex build tree, with just HTML (no MathML).
           * This is used for advanced use cases (like rendering to custom output).
           */


          var renderToHTMLTree = function renderToHTMLTree(expression, options) {
            var settings = new __WEBPACK_IMPORTED_MODULE_1__src_Settings__["a"
            /* default */
            ](options);
            var tree = Object(__WEBPACK_IMPORTED_MODULE_3__src_parseTree__["a"
            /* default */
            ])(expression, settings);
            return Object(__WEBPACK_IMPORTED_MODULE_2__src_buildTree__["a"
            /* buildHTMLTree */
            ])(tree, expression, settings);
          };
          /* harmony default export */


          __webpack_exports__["a"] = {
            /**
             * Renders the given LaTeX into an HTML+MathML combination, and adds
             * it as a child to the specified DOM node.
             */
            render: render,

            /**
             * Renders the given LaTeX into an HTML+MathML combination string,
             * for sending to the client.
             */
            renderToString: renderToString,

            /**
             * KaTeX error, usually during parsing.
             */
            ParseError: __WEBPACK_IMPORTED_MODULE_0__src_ParseError__["a"
            /* default */
            ],

            /**
             * Parses the given LaTeX into KaTeX's internal parse tree structure,
             * without rendering to HTML or MathML.
             *
             * NOTE: This method is not currently recommended for public use.
             * The internal tree representation is unstable and is very likely
             * to change. Use at your own risk.
             */
            __parse: generateParseTree,

            /**
             * Renders the given LaTeX into an HTML+MathML internal DOM tree
             * representation, without flattening that representation to a string.
             *
             * NOTE: This method is not currently recommended for public use.
             * The internal tree representation is unstable and is very likely
             * to change. Use at your own risk.
             */
            __renderToDomTree: renderToDomTree,

            /**
             * Renders the given LaTeX into an HTML internal DOM tree representation,
             * without MathML and without flattening that representation to a string.
             *
             * NOTE: This method is not currently recommended for public use.
             * The internal tree representation is unstable and is very likely
             * to change. Use at your own risk.
             */
            __renderToHTMLTree: renderToHTMLTree
          };
          /***/
        },
        /* 66 */

        /***/
        function (module, exports, __webpack_require__) {
          module.exports = {
            "default": __webpack_require__(67),
            __esModule: true
          };
          /***/
        },
        /* 67 */

        /***/
        function (module, exports, __webpack_require__) {
          __webpack_require__(68);

          module.exports = __webpack_require__(8).Object.freeze;
          /***/
        },
        /* 68 */

        /***/
        function (module, exports, __webpack_require__) {
          // 19.1.2.5 Object.freeze(O)
          var isObject = __webpack_require__(20),
              meta = __webpack_require__(69).onFreeze;

          __webpack_require__(46)('freeze', function ($freeze) {
            return function freeze(it) {
              return $freeze && isObject(it) ? $freeze(meta(it)) : it;
            };
          });
          /***/

        },
        /* 69 */

        /***/
        function (module, exports, __webpack_require__) {
          var META = __webpack_require__(32)('meta'),
              isObject = __webpack_require__(20),
              has = __webpack_require__(21),
              setDesc = __webpack_require__(15).f,
              id = 0;

          var isExtensible = Object.isExtensible || function () {
            return true;
          };

          var FREEZE = !__webpack_require__(24)(function () {
            return isExtensible(Object.preventExtensions({}));
          });

          var setMeta = function setMeta(it) {
            setDesc(it, META, {
              value: {
                i: 'O' + ++id,
                // object ID
                w: {} // weak collections IDs

              }
            });
          };

          var fastKey = function fastKey(it, create) {
            // return primitive with prefix
            if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

            if (!has(it, META)) {
              // can't set metadata to uncaught frozen object
              if (!isExtensible(it)) return 'F'; // not necessary to add metadata

              if (!create) return 'E'; // add missing metadata

              setMeta(it); // return object ID
            }

            return it[META].i;
          };

          var getWeak = function getWeak(it, create) {
            if (!has(it, META)) {
              // can't set metadata to uncaught frozen object
              if (!isExtensible(it)) return true; // not necessary to add metadata

              if (!create) return false; // add missing metadata

              setMeta(it); // return hash weak collections IDs
            }

            return it[META].w;
          }; // add metadata on freeze-family methods calling


          var onFreeze = function onFreeze(it) {
            if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
            return it;
          };

          var meta = module.exports = {
            KEY: META,
            NEED: false,
            fastKey: fastKey,
            getWeak: getWeak,
            onFreeze: onFreeze
          };
          /***/
        },
        /* 70 */

        /***/
        function (module, exports, __webpack_require__) {
          module.exports = !__webpack_require__(23) && !__webpack_require__(24)(function () {
            return Object.defineProperty(__webpack_require__(45)('div'), 'a', {
              get: function get() {
                return 7;
              }
            }).a != 7;
          });
          /***/
        },
        /* 71 */

        /***/
        function (module, exports, __webpack_require__) {
          // 7.1.1 ToPrimitive(input [, PreferredType])
          var isObject = __webpack_require__(20); // instead of the ES6 spec version, we didn't implement @@toPrimitive case
          // and the second argument - flag - preferred type is a string


          module.exports = function (it, S) {
            if (!isObject(it)) return it;
            var fn, val;
            if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
            if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
            if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
            throw TypeError("Can't convert object to primitive value");
          };
          /***/

        },
        /* 72 */

        /***/
        function (module, exports) {
          module.exports = function (it) {
            if (typeof it != 'function') throw TypeError(it + ' is not a function!');
            return it;
          };
          /***/

        },
        /* 73 */

        /***/
        function (module, exports, __webpack_require__) {
          module.exports = {
            "default": __webpack_require__(74),
            __esModule: true
          };
          /***/
        },
        /* 74 */

        /***/
        function (module, exports, __webpack_require__) {
          __webpack_require__(75);

          var $Object = __webpack_require__(8).Object;

          module.exports = function defineProperty(it, key, desc) {
            return $Object.defineProperty(it, key, desc);
          };
          /***/

        },
        /* 75 */

        /***/
        function (module, exports, __webpack_require__) {
          var $export = __webpack_require__(25); // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)


          $export($export.S + $export.F * !__webpack_require__(23), 'Object', {
            defineProperty: __webpack_require__(15).f
          });
          /***/
        },
        /* 76 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony export (binding) */

          __webpack_require__.d(__webpack_exports__, "b", function () {
            return buildTree;
          });
          /* harmony export (binding) */


          __webpack_require__.d(__webpack_exports__, "a", function () {
            return buildHTMLTree;
          });
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildMathML__ = __webpack_require__(2);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__Options__ = __webpack_require__(43);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__Settings__ = __webpack_require__(34);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__Style__ = __webpack_require__(9);

          var optionsFromSettings = function optionsFromSettings(settings) {
            return new __WEBPACK_IMPORTED_MODULE_3__Options__["a"
            /* default */
            ]({
              style: settings.displayMode ? __WEBPACK_IMPORTED_MODULE_5__Style__["a"
              /* default */
              ].DISPLAY : __WEBPACK_IMPORTED_MODULE_5__Style__["a"
              /* default */
              ].TEXT,
              maxSize: settings.maxSize
            });
          };

          var buildTree = function buildTree(tree, expression, settings) {
            var options = optionsFromSettings(settings); // `buildHTML` sometimes messes with the parse tree (like turning bins ->
            // ords), so we build the MathML version first.

            var mathMLNode = Object(__WEBPACK_IMPORTED_MODULE_1__buildMathML__["c"
            /* default */
            ])(tree, expression, options);
            var htmlNode = Object(__WEBPACK_IMPORTED_MODULE_0__buildHTML__["c"
            /* default */
            ])(tree, options);

            var katexNode = __WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"
            /* default */
            ].makeSpan(["katex"], [mathMLNode, htmlNode]);

            if (settings.displayMode) {
              return __WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"
              /* default */
              ].makeSpan(["katex-display"], [katexNode]);
            } else {
              return katexNode;
            }
          };

          var buildHTMLTree = function buildHTMLTree(tree, expression, settings) {
            var options = optionsFromSettings(settings);
            var htmlNode = Object(__WEBPACK_IMPORTED_MODULE_0__buildHTML__["c"
            /* default */
            ])(tree, options);

            var katexNode = __WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"
            /* default */
            ].makeSpan(["katex"], [htmlNode]);

            if (settings.displayMode) {
              return __WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"
              /* default */
              ].makeSpan(["katex-display"], [katexNode]);
            } else {
              return katexNode;
            }
          };
          /* unused harmony default export */


          var _unused_webpack_default_export = buildTree;
          /***/
        },
        /* 77 */

        /***/
        function (module, exports, __webpack_require__) {
          module.exports = {
            "default": __webpack_require__(78),
            __esModule: true
          };
          /***/
        },
        /* 78 */

        /***/
        function (module, exports, __webpack_require__) {
          var core = __webpack_require__(8),
              $JSON = core.JSON || (core.JSON = {
            stringify: JSON.stringify
          });

          module.exports = function stringify(it) {
            // eslint-disable-line no-unused-vars
            return $JSON.stringify.apply($JSON, arguments);
          };
          /***/

        },
        /* 79 */

        /***/
        function (module, exports, __webpack_require__) {
          module.exports = {
            "default": __webpack_require__(80),
            __esModule: true
          };
          /***/
        },
        /* 80 */

        /***/
        function (module, exports, __webpack_require__) {
          __webpack_require__(36);

          __webpack_require__(92);

          module.exports = __webpack_require__(8).Array.from;
          /***/
        },
        /* 81 */

        /***/
        function (module, exports, __webpack_require__) {
          var toInteger = __webpack_require__(37),
              defined = __webpack_require__(38); // true  -> String#at
          // false -> String#codePointAt


          module.exports = function (TO_STRING) {
            return function (that, pos) {
              var s = String(defined(that)),
                  i = toInteger(pos),
                  l = s.length,
                  a,
                  b;
              if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
              a = s.charCodeAt(i);
              return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
            };
          };
          /***/

        },
        /* 82 */

        /***/
        function (module, exports) {
          module.exports = true;
          /***/
        },
        /* 83 */

        /***/
        function (module, exports, __webpack_require__) {
          module.exports = __webpack_require__(26);
          /***/
        },
        /* 84 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict";

          var create = __webpack_require__(85),
              descriptor = __webpack_require__(33),
              setToStringTag = __webpack_require__(54),
              IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()


          __webpack_require__(26)(IteratorPrototype, __webpack_require__(11)('iterator'), function () {
            return this;
          });

          module.exports = function (Constructor, NAME, next) {
            Constructor.prototype = create(IteratorPrototype, {
              next: descriptor(1, next)
            });
            setToStringTag(Constructor, NAME + ' Iterator');
          };
          /***/

        },
        /* 85 */

        /***/
        function (module, exports, __webpack_require__) {
          // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
          var anObject = __webpack_require__(22),
              dPs = __webpack_require__(86),
              enumBugKeys = __webpack_require__(53),
              IE_PROTO = __webpack_require__(41)('IE_PROTO'),
              Empty = function Empty() {
            /* empty */
          },
              PROTOTYPE = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype


          var _createDict = function createDict() {
            // Thrash, waste and sodomy: IE GC bug
            var iframe = __webpack_require__(45)('iframe'),
                i = enumBugKeys.length,
                lt = '<',
                gt = '>',
                iframeDocument;

            iframe.style.display = 'none';

            __webpack_require__(90).appendChild(iframe);

            iframe.src = 'javascript:'; // eslint-disable-line no-script-url
            // createDict = iframe.contentWindow.Object;
            // html.removeChild(iframe);

            iframeDocument = iframe.contentWindow.document;
            iframeDocument.open();
            iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
            iframeDocument.close();
            _createDict = iframeDocument.F;

            while (i--) {
              delete _createDict[PROTOTYPE][enumBugKeys[i]];
            }

            return _createDict();
          };

          module.exports = Object.create || function create(O, Properties) {
            var result;

            if (O !== null) {
              Empty[PROTOTYPE] = anObject(O);
              result = new Empty();
              Empty[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

              result[IE_PROTO] = O;
            } else result = _createDict();

            return Properties === undefined ? result : dPs(result, Properties);
          };
          /***/

        },
        /* 86 */

        /***/
        function (module, exports, __webpack_require__) {
          var dP = __webpack_require__(15),
              anObject = __webpack_require__(22),
              getKeys = __webpack_require__(39);

          module.exports = __webpack_require__(23) ? Object.defineProperties : function defineProperties(O, Properties) {
            anObject(O);
            var keys = getKeys(Properties),
                length = keys.length,
                i = 0,
                P;

            while (length > i) {
              dP.f(O, P = keys[i++], Properties[P]);
            }

            return O;
          };
          /***/
        },
        /* 87 */

        /***/
        function (module, exports, __webpack_require__) {
          var has = __webpack_require__(21),
              toIObject = __webpack_require__(40),
              arrayIndexOf = __webpack_require__(88)(false),
              IE_PROTO = __webpack_require__(41)('IE_PROTO');

          module.exports = function (object, names) {
            var O = toIObject(object),
                i = 0,
                result = [],
                key;

            for (key in O) {
              if (key != IE_PROTO) has(O, key) && result.push(key);
            } // Don't enum bug & hidden keys


            while (names.length > i) {
              if (has(O, key = names[i++])) {
                ~arrayIndexOf(result, key) || result.push(key);
              }
            }

            return result;
          };
          /***/

        },
        /* 88 */

        /***/
        function (module, exports, __webpack_require__) {
          // false -> Array#indexOf
          // true  -> Array#includes
          var toIObject = __webpack_require__(40),
              toLength = __webpack_require__(51),
              toIndex = __webpack_require__(89);

          module.exports = function (IS_INCLUDES) {
            return function ($this, el, fromIndex) {
              var O = toIObject($this),
                  length = toLength(O.length),
                  index = toIndex(fromIndex, length),
                  value; // Array#includes uses SameValueZero equality algorithm

              if (IS_INCLUDES && el != el) while (length > index) {
                value = O[index++];
                if (value != value) return true; // Array#toIndex ignores holes, Array#includes - not
              } else for (; length > index; index++) {
                if (IS_INCLUDES || index in O) {
                  if (O[index] === el) return IS_INCLUDES || index || 0;
                }
              }
              return !IS_INCLUDES && -1;
            };
          };
          /***/

        },
        /* 89 */

        /***/
        function (module, exports, __webpack_require__) {
          var toInteger = __webpack_require__(37),
              max = Math.max,
              min = Math.min;

          module.exports = function (index, length) {
            index = toInteger(index);
            return index < 0 ? max(index + length, 0) : min(index, length);
          };
          /***/

        },
        /* 90 */

        /***/
        function (module, exports, __webpack_require__) {
          module.exports = __webpack_require__(16).document && document.documentElement;
          /***/
        },
        /* 91 */

        /***/
        function (module, exports, __webpack_require__) {
          // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
          var has = __webpack_require__(21),
              toObject = __webpack_require__(29),
              IE_PROTO = __webpack_require__(41)('IE_PROTO'),
              ObjectProto = Object.prototype;

          module.exports = Object.getPrototypeOf || function (O) {
            O = toObject(O);
            if (has(O, IE_PROTO)) return O[IE_PROTO];

            if (typeof O.constructor == 'function' && O instanceof O.constructor) {
              return O.constructor.prototype;
            }

            return O instanceof Object ? ObjectProto : null;
          };
          /***/

        },
        /* 92 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict";

          var ctx = __webpack_require__(47),
              $export = __webpack_require__(25),
              toObject = __webpack_require__(29),
              call = __webpack_require__(93),
              isArrayIter = __webpack_require__(94),
              toLength = __webpack_require__(51),
              createProperty = __webpack_require__(95),
              getIterFn = __webpack_require__(55);

          $export($export.S + $export.F * !__webpack_require__(96)(function (iter) {
            Array.from(iter);
          }), 'Array', {
            // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
            from: function from(arrayLike
            /*, mapfn = undefined, thisArg = undefined*/
            ) {
              var O = toObject(arrayLike),
                  C = typeof this == 'function' ? this : Array,
                  aLen = arguments.length,
                  mapfn = aLen > 1 ? arguments[1] : undefined,
                  mapping = mapfn !== undefined,
                  index = 0,
                  iterFn = getIterFn(O),
                  length,
                  result,
                  step,
                  iterator;
              if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2); // if object isn't iterable or it's array with default iterator - use simple case

              if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
                for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
                  createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
                }
              } else {
                length = toLength(O.length);

                for (result = new C(length); length > index; index++) {
                  createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
                }
              }

              result.length = index;
              return result;
            }
          });
          /***/
        },
        /* 93 */

        /***/
        function (module, exports, __webpack_require__) {
          // call something on iterator step with safe closing on error
          var anObject = __webpack_require__(22);

          module.exports = function (iterator, fn, value, entries) {
            try {
              return entries ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
            } catch (e) {
              var ret = iterator['return'];
              if (ret !== undefined) anObject(ret.call(iterator));
              throw e;
            }
          };
          /***/

        },
        /* 94 */

        /***/
        function (module, exports, __webpack_require__) {
          // check on default Array iterator
          var Iterators = __webpack_require__(17),
              ITERATOR = __webpack_require__(11)('iterator'),
              ArrayProto = Array.prototype;

          module.exports = function (it) {
            return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
          };
          /***/

        },
        /* 95 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict";

          var $defineProperty = __webpack_require__(15),
              createDesc = __webpack_require__(33);

          module.exports = function (object, index, value) {
            if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
          };
          /***/

        },
        /* 96 */

        /***/
        function (module, exports, __webpack_require__) {
          var ITERATOR = __webpack_require__(11)('iterator'),
              SAFE_CLOSING = false;

          try {
            var riter = [7][ITERATOR]();

            riter['return'] = function () {
              SAFE_CLOSING = true;
            };

            Array.from(riter, function () {
              throw 2;
            });
          } catch (e) {
            /* empty */
          }

          module.exports = function (exec, skipClosing) {
            if (!skipClosing && !SAFE_CLOSING) return false;
            var safe = false;

            try {
              var arr = [7],
                  iter = arr[ITERATOR]();

              iter.next = function () {
                return {
                  done: safe = true
                };
              };

              arr[ITERATOR] = function () {
                return iter;
              };

              exec(arr);
            } catch (e) {
              /* empty */
            }

            return safe;
          };
          /***/

        },
        /* 97 */

        /***/
        function (module, exports, __webpack_require__) {
          module.exports = {
            "default": __webpack_require__(98),
            __esModule: true
          };
          /***/
        },
        /* 98 */

        /***/
        function (module, exports, __webpack_require__) {
          __webpack_require__(58);

          __webpack_require__(36);

          module.exports = __webpack_require__(102);
          /***/
        },
        /* 99 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict";

          var addToUnscopables = __webpack_require__(100),
              step = __webpack_require__(101),
              Iterators = __webpack_require__(17),
              toIObject = __webpack_require__(40); // 22.1.3.4 Array.prototype.entries()
          // 22.1.3.13 Array.prototype.keys()
          // 22.1.3.29 Array.prototype.values()
          // 22.1.3.30 Array.prototype[@@iterator]()


          module.exports = __webpack_require__(48)(Array, 'Array', function (iterated, kind) {
            this._t = toIObject(iterated); // target

            this._i = 0; // next index

            this._k = kind; // kind
            // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
          }, function () {
            var O = this._t,
                kind = this._k,
                index = this._i++;

            if (!O || index >= O.length) {
              this._t = undefined;
              return step(1);
            }

            if (kind == 'keys') return step(0, index);
            if (kind == 'values') return step(0, O[index]);
            return step(0, [index, O[index]]);
          }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

          Iterators.Arguments = Iterators.Array;
          addToUnscopables('keys');
          addToUnscopables('values');
          addToUnscopables('entries');
          /***/
        },
        /* 100 */

        /***/
        function (module, exports) {
          module.exports = function () {
            /* empty */
          };
          /***/

        },
        /* 101 */

        /***/
        function (module, exports) {
          module.exports = function (done, value) {
            return {
              value: value,
              done: !!done
            };
          };
          /***/

        },
        /* 102 */

        /***/
        function (module, exports, __webpack_require__) {
          var classof = __webpack_require__(56),
              ITERATOR = __webpack_require__(11)('iterator'),
              Iterators = __webpack_require__(17);

          module.exports = __webpack_require__(8).isIterable = function (it) {
            var O = Object(it);
            return O[ITERATOR] !== undefined || '@@iterator' in O || Iterators.hasOwnProperty(classof(O));
          };
          /***/

        },
        /* 103 */

        /***/
        function (module, exports, __webpack_require__) {
          __webpack_require__(58);

          __webpack_require__(36);

          module.exports = __webpack_require__(104);
          /***/
        },
        /* 104 */

        /***/
        function (module, exports, __webpack_require__) {
          var anObject = __webpack_require__(22),
              get = __webpack_require__(55);

          module.exports = __webpack_require__(8).getIterator = function (it) {
            var iterFn = get(it);
            if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
            return anObject(iterFn.call(it));
          };
          /***/

        },
        /* 105 */

        /***/
        function (module, exports, __webpack_require__) {
          module.exports = {
            "default": __webpack_require__(106),
            __esModule: true
          };
          /***/
        },
        /* 106 */

        /***/
        function (module, exports, __webpack_require__) {
          __webpack_require__(107);

          module.exports = __webpack_require__(8).Object.assign;
          /***/
        },
        /* 107 */

        /***/
        function (module, exports, __webpack_require__) {
          // 19.1.3.1 Object.assign(target, source)
          var $export = __webpack_require__(25);

          $export($export.S + $export.F, 'Object', {
            assign: __webpack_require__(108)
          });
          /***/
        },
        /* 108 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict"; // 19.1.2.1 Object.assign(target, source, ...)

          var getKeys = __webpack_require__(39),
              gOPS = __webpack_require__(109),
              pIE = __webpack_require__(110),
              toObject = __webpack_require__(29),
              IObject = __webpack_require__(49),
              $assign = Object.assign; // should work with symbols and should have deterministic property order (V8 bug)


          module.exports = !$assign || __webpack_require__(24)(function () {
            var A = {},
                B = {},
                S = Symbol(),
                K = 'abcdefghijklmnopqrst';
            A[S] = 7;
            K.split('').forEach(function (k) {
              B[k] = k;
            });
            return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
          }) ? function assign(target, source) {
            // eslint-disable-line no-unused-vars
            var T = toObject(target),
                aLen = arguments.length,
                index = 1,
                getSymbols = gOPS.f,
                isEnum = pIE.f;

            while (aLen > index) {
              var S = IObject(arguments[index++]),
                  keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S),
                  length = keys.length,
                  j = 0,
                  key;

              while (length > j) {
                if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
              }
            }

            return T;
          } : $assign;
          /***/
        },
        /* 109 */

        /***/
        function (module, exports) {
          exports.f = Object.getOwnPropertySymbols;
          /***/
        },
        /* 110 */

        /***/
        function (module, exports) {
          exports.f = {}.propertyIsEnumerable;
          /***/
        },
        /* 111 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /**
           * This file provides support to domTree.js
           * It's a storehouse of path geometry for SVG images.
           */
          // We do frac-lines, underlines, and overlines with an SVG path and we put that
          // path is into a viewBox that is 5 times as thick as the line. That way,
          // any browser rounding error on the size of the surrounding span will
          // not pinch the ink of the line.  Think of it as padding for the line.
          // As usual, the viewBox-to-em scale is 1000.

          var hLinePad = 80; // padding above and below a std 0.04em horiz rule.

          var vLinePad = 100; // padding on either side of a std vert 0.05em rule.

          var path = {
            // stdHorizRule is used for frac-lines, underlines, and overlines.
            // It is 0.04em thick if the line comes from normalsize/textstyle.
            stdHorizRule: "M0 " + hLinePad + "H400000 v40H0z M0 " + hLinePad + "H400000 v40H0z",
            // vertSeparator is used in arrays. It is 0.05em wide in a 0.25em viewBox.
            vertSeparator: "M" + vLinePad + " 0h50V400000h-50zM" + vLinePad + " 0h50V400000h-50z",
            // sqrtMain path geometry is from glyph U221A in the font KaTeX Main
            // All surds have 80 units padding above the viniculumn.
            sqrtMain: "M95," + (622 + hLinePad) + "c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,\n-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,\n-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,\n35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,\n-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467\ns-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422\ns-65,47,-65,47z M834 " + hLinePad + "H400000v40H845z",
            // size1 is from glyph U221A in the font KaTeX_Size1-Regular
            sqrtSize1: "M263," + (601 + hLinePad) + "c0.7,0,18,39.7,52,119c34,79.3,68.167,\n158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067\nc4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,\n175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71\nc-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,\n-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26\ns76,-59,76,-59s76,-60,76,-60z M1001 " + hLinePad + "H40000v40H1012z",
            // size2 is from glyph U221A in the font KaTeX_Size2-Regular
            // The 80 units padding is most obvious here. Note start node at M1001 80.
            sqrtSize2: "M1001," + hLinePad + "H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,\n572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,\n-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39\nc-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60\ns208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,\n-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10z\nM1001 " + hLinePad + "H400000v40H1013z",
            // size3 is from glyph U221A in the font KaTeX_Size3-Regular
            sqrtSize3: "M424," + (2398 + hLinePad) + "c-1.3,-0.7,-38.5,-172,-111.5,-514c-73,\n-342,-109.8,-513.3,-110.5,-514c0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,\n25c-5.7,9.3,-9.8,16,-12.5,20s-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,\n-13s76,-122,76,-122s77,-121,77,-121s209,968,209,968c0,-2,84.7,-361.7,254,-1079\nc169.3,-717.3,254.7,-1077.7,256,-1081c4,-6.7,10,-10,18,-10H400000v40H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185c-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M1001 " + hLinePad + "H400000v40H1014z",
            // size4 is from glyph U221A in the font KaTeX_Size4-Regular
            sqrtSize4: "M473," + (2713 + hLinePad) + "c339.3,-1799.3,509.3,-2700,510,-2702\nc3.3,-7.3,9.3,-11,18,-11H400000v40H1017.7s-90.5,478,-276.2,1466c-185.7,988,\n-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9c-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,\n-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200c0,-1.3,-5.3,8.7,-16,30c-10.7,\n21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26s76,-153,76,-153s77,-151,\n77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,606z\nM1001 " + hLinePad + "H400000v40H1017z",
            // The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main
            doubleleftarrow: "M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",
            // doublerightarrow is from glyph U+21D2 in font KaTeX Main
            doublerightarrow: "M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",
            // leftarrow is from glyph U+2190 in font KaTeX Main
            leftarrow: "M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",
            // overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular
            leftbrace: "M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",
            leftbraceunder: "M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",
            // overgroup is from the MnSymbol package (public domain)
            leftgroup: "M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",
            leftgroupunder: "M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",
            // Harpoons are from glyph U+21BD in font KaTeX Main
            leftharpoon: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",
            leftharpoonplus: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",
            leftharpoondown: "M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",
            leftharpoondownplus: "M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",
            // hook is from glyph U+21A9 in font KaTeX Main
            lefthook: "M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",
            leftlinesegment: "M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",
            leftmapsto: "M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",
            // tofrom is from glyph U+21C4 in font KaTeX AMS Regular
            leftToFrom: "M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",
            longequal: "M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",
            midbrace: "M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",
            midbraceunder: "M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",
            rightarrow: "M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",
            rightbrace: "M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",
            rightbraceunder: "M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",
            rightgroup: "M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",
            rightgroupunder: "M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",
            rightharpoon: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",
            rightharpoonplus: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",
            rightharpoondown: "M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",
            rightharpoondownplus: "M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",
            righthook: "M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",
            rightlinesegment: "M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",
            rightToFrom: "M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",
            // twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular
            twoheadleftarrow: "M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",
            twoheadrightarrow: "M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",
            // tilde1 is a modified version of a glyph from the MnSymbol package
            tilde1: "M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",
            // ditto tilde2, tilde3, & tilde4
            tilde2: "M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",
            tilde3: "M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",
            tilde4: "M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",
            // vec is from glyph U+20D7 in font KaTeX Main
            vec: "M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z",
            // widehat1 is a modified version of a glyph from the MnSymbol package
            widehat1: "M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",
            // ditto widehat2, widehat3, & widehat4
            widehat2: "M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
            widehat3: "M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
            widehat4: "M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
            // baraboveleftarrow is from glyph U+21C4 in font KaTeX AMS Regular
            baraboveleftarrow: "M1 500c30.67-18 59-41.833 85-71.5s45-61.17 57-94.5h23\nc15.33 0 23 .33 23 1 0 .67-5.33 12.67-16 36-16.67 34.67-39 67.33-67 98l-10 11\nh39904v40H96l9 10c27.33 30.67 50.67 65 70 103l14 33c0 .67-7.67 1-23 1h-22\nC116.67 596.33 69 540.67 1 500z M96 480 H400000 v40 H96z\nM1 147 H399905 v40  H1z M0 147 H399905 v40  H0z",
            // ditto rightarrowabovebar
            rightarrowabovebar: "M400000 167c-70.67 42-118 97.67-142 167h-23c-15.33 0\n-23-.33-23-1 0-1.33 5.33-13.67 16-37 18-35.33 41.33-69 70-101l7-8h-39905\nv-40h39905c-389 0 0 0 0 0l-7-8c-28.67-32-52-65.67-70-101-10.67-23.33-16-35.67\n-16-37 0-.67 7.67-1 23-1h23c11.33 33.33 30 64.833 56 94.5s54.67 53.83 86 72.5z\nM0 147 H399905 v40  H0z M96 480 H400000 v40 H0z M96 480 H400000 v40 H0z",
            // The next eight paths support reaction arrows from the mhchem package.
            // The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.
            // Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em
            baraboveshortleftharpoon: "M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z",
            rightharpoonaboveshortbar: "M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z",
            shortbaraboveleftharpoon: "M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z",
            shortrightharpoonabovebar: "M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z"
          };
          /* harmony default export */

          __webpack_exports__["a"] = {
            path: path
          };
          /***/
        },
        /* 112 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony export (binding) */

          __webpack_require__.d(__webpack_exports__, "a", function () {
            return spacings;
          });
          /* harmony export (binding) */


          __webpack_require__.d(__webpack_exports__, "b", function () {
            return tightSpacings;
          });
          /**
           * Describes spaces between different classes of atoms.
           */


          var thinspace = {
            number: 3,
            unit: "mu"
          };
          var mediumspace = {
            number: 4,
            unit: "mu"
          };
          var thickspace = {
            number: 5,
            unit: "mu"
          }; // Spacing relationships for display and text styles

          var spacings = {
            mord: {
              mop: thinspace,
              mbin: mediumspace,
              mrel: thickspace,
              minner: thinspace
            },
            mop: {
              mord: thinspace,
              mop: thinspace,
              mrel: thickspace,
              minner: thinspace
            },
            mbin: {
              mord: mediumspace,
              mop: mediumspace,
              mopen: mediumspace,
              minner: mediumspace
            },
            mrel: {
              mord: thickspace,
              mop: thickspace,
              mopen: thickspace,
              minner: thickspace
            },
            mopen: {},
            mclose: {
              mop: thinspace,
              mbin: mediumspace,
              mrel: thickspace,
              minner: thinspace
            },
            mpunct: {
              mord: thinspace,
              mop: thinspace,
              mrel: thickspace,
              mopen: thinspace,
              mclose: thinspace,
              mpunct: thinspace,
              minner: thinspace
            },
            minner: {
              mord: thinspace,
              mop: thinspace,
              mbin: mediumspace,
              mrel: thickspace,
              mopen: thinspace,
              mpunct: thinspace,
              minner: thinspace
            }
          }; // Spacing relationships for script and scriptscript styles

          var tightSpacings = {
            mord: {
              mop: thinspace
            },
            mop: {
              mord: thinspace,
              mop: thinspace
            },
            mbin: {},
            mrel: {},
            mopen: {},
            mclose: {
              mop: thinspace
            },
            mpunct: {},
            minner: {
              mop: thinspace
            }
          };
          /***/
        },
        /* 113 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__Parser__ = __webpack_require__(114);
          /**
           * Provides a single function for parsing an expression using a Parser
           * TODO(emily): Remove this
           */

          /**
           * Parses an expression using a Parser, then returns the parsed result.
           */


          var parseTree = function parseTree(toParse, settings) {
            if (!(typeof toParse === 'string' || toParse instanceof String)) {
              throw new TypeError('KaTeX can only parse string typed expression');
            }

            var parser = new __WEBPACK_IMPORTED_MODULE_0__Parser__["a"
            /* default */
            ](toParse, settings);
            return parser.parse();
          };
          /* harmony default export */


          __webpack_exports__["a"] = parseTree;
          /***/
        },
        /* 114 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__ = __webpack_require__(7);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__ = __webpack_require__(10);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__functions__ = __webpack_require__(115);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__environments__ = __webpack_require__(142);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__MacroExpander__ = __webpack_require__(144);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__symbols__ = __webpack_require__(28);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_6__units__ = __webpack_require__(19);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_7__unicodeScripts__ = __webpack_require__(42);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_8__unicodeAccents__ = __webpack_require__(148);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_8__unicodeAccents___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8__unicodeAccents__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_9__unicodeSymbols__ = __webpack_require__(149);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_10__ParseNode__ = __webpack_require__(14);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_11__ParseError__ = __webpack_require__(6);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_12__Lexer_js__ = __webpack_require__(62);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_13__Settings__ = __webpack_require__(34);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_14__Token__ = __webpack_require__(27);
          /* eslint no-constant-condition:0 */

          /* eslint no-console:0 */

          /**
           * This file contains the parser used to parse out a TeX expression from the
           * input. Since TeX isn't context-free, standard parsers don't work particularly
           * well.
           *
           * The strategy of this parser is as such:
           *
           * The main functions (the `.parse...` ones) take a position in the current
           * parse string to parse tokens from. The lexer (found in Lexer.js, stored at
           * this.lexer) also supports pulling out tokens at arbitrary places. When
           * individual tokens are needed at a position, the lexer is called to pull out a
           * token, which is then used.
           *
           * The parser has a property called "mode" indicating the mode that
           * the parser is currently in. Currently it has to be one of "math" or
           * "text", which denotes whether the current environment is a math-y
           * one or a text-y one (e.g. inside \text). Currently, this serves to
           * limit the functions which can be used in text mode.
           *
           * The main functions then return an object which contains the useful data that
           * was parsed at its given point, and a new position at the end of the parsed
           * data. The main functions can call each other and continue the parsing by
           * using the returned position as a new starting point.
           *
           * There are also extra `.handle...` functions, which pull out some reused
           * functionality into self-contained functions.
           *
           * The earlier functions return ParseNodes.
           * The later functions (which are called deeper in the parse) sometimes return
           * ParsedFuncOrArgOrDollar, which contain a ParseNode as well as some data about
           * whether the parsed object is a function which is missing some arguments, or a
           * standalone object which can be used as an argument to another function.
           */


          function newArgument(result, token) {
            return {
              type: "arg",
              result: result,
              token: token
            };
          }

          function newFunction(token) {
            return {
              type: "fn",
              result: token.text,
              token: token
            };
          }

          function newDollar(token) {
            return {
              type: "$",
              result: "$",
              token: token
            };
          }

          function assertFuncOrArg(parsed) {
            if (parsed.type === "$") {
              throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
              /* default */
              ]("Unexpected $", parsed.token);
            }

            return parsed;
          }

          var Parser = function () {
            function Parser(input, settings) {
              __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this, Parser); // Start in math mode


              this.mode = "math"; // Create a new macro expander (gullet) and (indirectly via that) also a
              // new lexer (mouth) for this parser (stomach, in the language of TeX)

              this.gullet = new __WEBPACK_IMPORTED_MODULE_4__MacroExpander__["a"
              /* default */
              ](input, settings.macros, this.mode); // Use old \color behavior (same as LaTeX's \textcolor) if requested.
              // We do this after the macros object has been copied by MacroExpander.

              if (settings.colorIsTextColor) {
                this.gullet.macros["\\color"] = "\\textcolor";
              } // Store the settings for use in parsing


              this.settings = settings; // Count leftright depth (for \middle errors)

              this.leftrightDepth = 0;
            }
            /**
             * Checks a result to make sure it has the right type, and throws an
             * appropriate error otherwise.
             */


            __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default()(Parser, [{
              key: "expect",
              value: function expect(text) {
                var consume = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

                if (this.nextToken.text !== text) {
                  throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                  /* default */
                  ]("Expected '" + text + "', got '" + this.nextToken.text + "'", this.nextToken);
                }

                if (consume) {
                  this.consume();
                }
              }
              /**
               * Considers the current look ahead token as consumed,
               * and fetches the one after that as the new look ahead.
               */

            }, {
              key: "consume",
              value: function consume() {
                this.nextToken = this.gullet.expandNextToken();
              }
              /**
               * Switches between "text" and "math" modes.
               */

            }, {
              key: "switchMode",
              value: function switchMode(newMode) {
                this.mode = newMode;
                this.gullet.switchMode(newMode);
              }
              /**
               * Main parsing function, which parses an entire input.
               */

            }, {
              key: "parse",
              value: function parse() {
                // Try to parse the input
                this.consume();
                var parse = this.parseInput();
                return parse;
              }
              /**
               * Parses an entire input tree.
               */

            }, {
              key: "parseInput",
              value: function parseInput() {
                // Parse an expression
                var expression = this.parseExpression(false); // If we succeeded, make sure there's an EOF at the end

                this.expect("EOF", false);
                return expression;
              }
            }, {
              key: "parseExpression",

              /**
               * Parses an "expression", which is a list of atoms.
               *
               * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This
               *                 happens when functions have higher precendence han infix
               *                 nodes in implicit parses.
               *
               * `breakOnTokenText`: The text of the token that the expression should end
               *                     with, or `null` if something else should end the
               *                     expression.
               */
              value: function parseExpression(breakOnInfix, breakOnTokenText) {
                var body = []; // Keep adding atoms to the body until we can't parse any more atoms (either
                // we reached the end, a }, or a \right)

                while (true) {
                  // Ignore spaces in math mode
                  if (this.mode === "math") {
                    this.consumeSpaces();
                  }

                  var lex = this.nextToken;

                  if (Parser.endOfExpression.indexOf(lex.text) !== -1) {
                    break;
                  }

                  if (breakOnTokenText && lex.text === breakOnTokenText) {
                    break;
                  }

                  if (breakOnInfix && __WEBPACK_IMPORTED_MODULE_2__functions__["a"
                  /* default */
                  ][lex.text] && __WEBPACK_IMPORTED_MODULE_2__functions__["a"
                  /* default */
                  ][lex.text].infix) {
                    break;
                  }

                  var atom = this.parseAtom(breakOnTokenText);

                  if (!atom) {
                    if (!this.settings.throwOnError && lex.text[0] === "\\") {
                      var errorNode = this.handleUnsupportedCmd();
                      body.push(errorNode);
                      continue;
                    }

                    break;
                  }

                  body.push(atom);
                }

                return this.handleInfixNodes(body);
              }
              /**
               * Rewrites infix operators such as \over with corresponding commands such
               * as \frac.
               *
               * There can only be one infix operator per group.  If there's more than one
               * then the expression is ambiguous.  This can be resolved by adding {}.
               */

            }, {
              key: "handleInfixNodes",
              value: function handleInfixNodes(body) {
                var overIndex = -1;
                var funcName = void 0;

                for (var i = 0; i < body.length; i++) {
                  var node = body[i];

                  if (node.type === "infix") {
                    if (overIndex !== -1) {
                      throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                      /* default */
                      ]("only one infix operator per group", node.value.token);
                    }

                    overIndex = i;
                    funcName = node.value.replaceWith;
                  }
                }

                if (overIndex !== -1 && funcName) {
                  var numerNode = void 0;
                  var denomNode = void 0;
                  var numerBody = body.slice(0, overIndex);
                  var denomBody = body.slice(overIndex + 1);

                  if (numerBody.length === 1 && numerBody[0].type === "ordgroup") {
                    numerNode = numerBody[0];
                  } else {
                    numerNode = new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                    /* default */
                    ]("ordgroup", numerBody, this.mode);
                  }

                  if (denomBody.length === 1 && denomBody[0].type === "ordgroup") {
                    denomNode = denomBody[0];
                  } else {
                    denomNode = new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                    /* default */
                    ]("ordgroup", denomBody, this.mode);
                  }

                  var value = this.callFunction(funcName, [numerNode, denomNode], []);
                  return [new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                  /* default */
                  ](value.type, value, this.mode)];
                } else {
                  return body;
                }
              } // The greediness of a superscript or subscript

            }, {
              key: "handleSupSubscript",

              /**
               * Handle a subscript or superscript with nice errors.
               */
              value: function handleSupSubscript(name) {
                var symbolToken = this.nextToken;
                var symbol = symbolToken.text;
                this.consume();
                this.consumeSpaces(); // ignore spaces before sup/subscript argument

                var group = this.parseGroup();

                if (!group) {
                  if (!this.settings.throwOnError && this.nextToken.text[0] === "\\") {
                    return this.handleUnsupportedCmd();
                  } else {
                    throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                    /* default */
                    ]("Expected group after '" + symbol + "'", symbolToken);
                  }
                }

                var arg = assertFuncOrArg(group);

                if (arg.type === "fn") {
                  // ^ and _ have a greediness, so handle interactions with functions'
                  // greediness
                  var funcGreediness = __WEBPACK_IMPORTED_MODULE_2__functions__["a"
                  /* default */
                  ][arg.result].greediness;

                  if (funcGreediness > Parser.SUPSUB_GREEDINESS) {
                    return this.parseGivenFunction(group);
                  } else {
                    throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                    /* default */
                    ]("Got function '" + arg.result + "' with no arguments " + "as " + name, symbolToken);
                  }
                } else {
                  return arg.result;
                }
              }
              /**
               * Converts the textual input of an unsupported command into a text node
               * contained within a color node whose color is determined by errorColor
               */

            }, {
              key: "handleUnsupportedCmd",
              value: function handleUnsupportedCmd() {
                var text = this.nextToken.text;
                var textordArray = [];

                for (var i = 0; i < text.length; i++) {
                  textordArray.push(new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                  /* default */
                  ]("textord", text[i], "text"));
                }

                var textNode = new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                /* default */
                ]("text", {
                  body: textordArray,
                  type: "text"
                }, this.mode);
                var colorNode = new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                /* default */
                ]("color", {
                  color: this.settings.errorColor,
                  value: [textNode],
                  type: "color"
                }, this.mode);
                this.consume();
                return colorNode;
              }
              /**
               * Parses a group with optional super/subscripts.
               */

            }, {
              key: "parseAtom",
              value: function parseAtom(breakOnTokenText) {
                // The body of an atom is an implicit group, so that things like
                // \left(x\right)^2 work correctly.
                var base = this.parseImplicitGroup(breakOnTokenText); // In text mode, we don't have superscripts or subscripts

                if (this.mode === "text") {
                  return base;
                } // Note that base may be empty (i.e. null) at this point.


                var superscript = void 0;
                var subscript = void 0;

                while (true) {
                  // Guaranteed in math mode, so eat any spaces first.
                  this.consumeSpaces(); // Lex the first token

                  var lex = this.nextToken;

                  if (lex.text === "\\limits" || lex.text === "\\nolimits") {
                    // We got a limit control
                    if (!base || base.type !== "op") {
                      throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                      /* default */
                      ]("Limit controls must follow a math operator", lex);
                    } else {
                      var limits = lex.text === "\\limits";
                      base.value.limits = limits;
                      base.value.alwaysHandleSupSub = true;
                    }

                    this.consume();
                  } else if (lex.text === "^") {
                    // We got a superscript start
                    if (superscript) {
                      throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                      /* default */
                      ]("Double superscript", lex);
                    }

                    superscript = this.handleSupSubscript("superscript");
                  } else if (lex.text === "_") {
                    // We got a subscript start
                    if (subscript) {
                      throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                      /* default */
                      ]("Double subscript", lex);
                    }

                    subscript = this.handleSupSubscript("subscript");
                  } else if (lex.text === "'") {
                    // We got a prime
                    if (superscript) {
                      throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                      /* default */
                      ]("Double superscript", lex);
                    }

                    var prime = new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                    /* default */
                    ]("textord", "\\prime", this.mode); // Many primes can be grouped together, so we handle this here

                    var primes = [prime];
                    this.consume(); // Keep lexing tokens until we get something that's not a prime

                    while (this.nextToken.text === "'") {
                      // For each one, add another prime to the list
                      primes.push(prime);
                      this.consume();
                    } // If there's a superscript following the primes, combine that
                    // superscript in with the primes.


                    if (this.nextToken.text === "^") {
                      primes.push(this.handleSupSubscript("superscript"));
                    } // Put everything into an ordgroup as the superscript


                    superscript = new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                    /* default */
                    ]("ordgroup", primes, this.mode);
                  } else {
                    // If it wasn't ^, _, or ', stop parsing super/subscripts
                    break;
                  }
                }

                if (superscript || subscript) {
                  // If we got either a superscript or subscript, create a supsub
                  return new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                  /* default */
                  ]("supsub", {
                    base: base,
                    sup: superscript,
                    sub: subscript
                  }, this.mode);
                } else {
                  // Otherwise return the original body
                  return base;
                }
              }
              /**
               * Parses an implicit group, which is a group that starts at the end of a
               * specified, and ends right before a higher explicit group ends, or at EOL. It
               * is used for functions that appear to affect the current style, like \Large or
               * \textrm, where instead of keeping a style we just pretend that there is an
               * implicit grouping after it until the end of the group. E.g.
               *   small text {\Large large text} small text again
               */

            }, {
              key: "parseImplicitGroup",
              value: function parseImplicitGroup(breakOnTokenText) {
                var start = this.parseSymbol();

                if (start == null) {
                  // If we didn't get anything we handle, fall back to parseFunction
                  return this.parseFunction();
                } else if (start.type === "arg") {
                  // Defer to parseGivenFunction if it's not a function we handle
                  return this.parseGivenFunction(start);
                }

                var func = start.result;

                if (func === "$") {
                  if (this.mode === "math") {
                    throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                    /* default */
                    ]("$ within math mode");
                  }

                  var outerMode = this.mode;
                  this.switchMode("math"); // Expand next symbol now that we're in math mode.

                  this.consume();
                  var body = this.parseExpression(false, "$"); // We can't expand the next symbol after the $ until after
                  // switching modes back.  So don't consume within expect.

                  this.expect("$", false);
                  this.switchMode(outerMode);
                  this.consume();
                  return new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                  /* default */
                  ]("styling", {
                    style: "text",
                    value: body
                  }, "math");
                } else if (func === "\\begin") {
                  // begin...end is similar to left...right
                  var begin = this.parseGivenFunction(start);
                  var envName = begin.value.name;

                  if (!__WEBPACK_IMPORTED_MODULE_3__environments__["a"
                  /* default */
                  ].hasOwnProperty(envName)) {
                    throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                    /* default */
                    ]("No such environment: " + envName, begin.value.nameGroup);
                  } // Build the environment object. Arguments and other information will
                  // be made available to the begin and end methods using properties.


                  var env = __WEBPACK_IMPORTED_MODULE_3__environments__["a"
                  /* default */
                  ][envName];

                  var _parseArguments = this.parseArguments("\\begin{" + envName + "}", env),
                      args = _parseArguments.args,
                      optArgs = _parseArguments.optArgs;

                  var context = {
                    mode: this.mode,
                    envName: envName,
                    parser: this
                  };

                  var _result = env.handler(context, args, optArgs);

                  this.expect("\\end", false);
                  var endNameToken = this.nextToken;
                  var end = this.parseFunction();

                  if (!end) {
                    throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                    /* default */
                    ]("failed to parse function after \\end");
                  } else if (end.value.name !== envName) {
                    throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                    /* default */
                    ]("Mismatch: \\begin{" + envName + "} matched " + "by \\end{" + end.value.name + "}", endNameToken);
                  }

                  return _result;
                } else {
                  // Defer to parseGivenFunction if it's not a function we handle
                  return this.parseGivenFunction(start, breakOnTokenText);
                }
              }
              /**
               * Parses an entire function, including its base and all of its arguments.
               * It also handles the case where the parsed node is not a function.
               */

            }, {
              key: "parseFunction",
              value: function parseFunction() {
                var baseGroup = this.parseGroup();
                return baseGroup ? this.parseGivenFunction(baseGroup) : null;
              }
              /**
               * Same as parseFunction(), except that the base is provided, guaranteeing a
               * non-nullable result.
               */

            }, {
              key: "parseGivenFunction",
              value: function parseGivenFunction(baseGroup, breakOnTokenText) {
                baseGroup = assertFuncOrArg(baseGroup);

                if (baseGroup.type === "fn") {
                  var func = baseGroup.result;
                  var funcData = __WEBPACK_IMPORTED_MODULE_2__functions__["a"
                  /* default */
                  ][func];

                  if (this.mode === "text" && !funcData.allowedInText) {
                    throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                    /* default */
                    ]("Can't use function '" + func + "' in text mode", baseGroup.token);
                  } else if (this.mode === "math" && funcData.allowedInMath === false) {
                    throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                    /* default */
                    ]("Can't use function '" + func + "' in math mode", baseGroup.token);
                  }

                  var _parseArguments2 = this.parseArguments(func, funcData),
                      args = _parseArguments2.args,
                      optArgs = _parseArguments2.optArgs;

                  var _token = baseGroup.token;

                  var _result2 = this.callFunction(func, args, optArgs, _token, breakOnTokenText);

                  return new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                  /* default */
                  ](_result2.type, _result2, this.mode);
                } else {
                  return baseGroup.result;
                }
              }
              /**
               * Call a function handler with a suitable context and arguments.
               */

            }, {
              key: "callFunction",
              value: function callFunction(name, args, optArgs, token, breakOnTokenText) {
                var context = {
                  funcName: name,
                  parser: this,
                  token: token,
                  breakOnTokenText: breakOnTokenText
                };
                var func = __WEBPACK_IMPORTED_MODULE_2__functions__["a"
                /* default */
                ][name];

                if (func && func.handler) {
                  return func.handler(context, args, optArgs);
                } else {
                  throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                  /* default */
                  ]("No function handler for " + name);
                }
              }
              /**
               * Parses the arguments of a function or environment
               */

            }, {
              key: "parseArguments",
              value: function parseArguments(func, // Should look like "\name" or "\begin{name}".
              funcData) {
                var totalArgs = funcData.numArgs + funcData.numOptionalArgs;

                if (totalArgs === 0) {
                  return {
                    args: [],
                    optArgs: []
                  };
                }

                var baseGreediness = funcData.greediness;
                var args = [];
                var optArgs = [];

                for (var i = 0; i < totalArgs; i++) {
                  var argType = funcData.argTypes && funcData.argTypes[i];
                  var isOptional = i < funcData.numOptionalArgs; // Ignore spaces between arguments.  As the TeXbook says:
                  // "After you have said ‘\def\row#1#2{...}’, you are allowed to
                  //  put spaces between the arguments (e.g., ‘\row x n’), because
                  //  TeX doesn’t use single spaces as undelimited arguments."

                  if (i > 0 && !isOptional) {
                    this.consumeSpaces();
                  } // Also consume leading spaces in math mode, as parseSymbol
                  // won't know what to do with them.  This can only happen with
                  // macros, e.g. \frac\foo\foo where \foo expands to a space symbol.
                  // In LaTeX, the \foo's get treated as (blank) arguments).
                  // In KaTeX, for now, both spaces will get consumed.
                  // TODO(edemaine)


                  if (i === 0 && !isOptional && this.mode === "math") {
                    this.consumeSpaces();
                  }

                  var nextToken = this.nextToken;
                  var arg = argType ? this.parseGroupOfType(argType, isOptional) : this.parseGroup(isOptional);

                  if (!arg) {
                    if (isOptional) {
                      optArgs.push(null);
                      continue;
                    }

                    if (!this.settings.throwOnError && this.nextToken.text[0] === "\\") {
                      arg = newArgument(this.handleUnsupportedCmd(), nextToken);
                    } else {
                      throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                      /* default */
                      ]("Expected group after '" + func + "'", nextToken);
                    }
                  }

                  var argNode = void 0;
                  arg = assertFuncOrArg(arg);

                  if (arg.type === "fn") {
                    var argGreediness = __WEBPACK_IMPORTED_MODULE_2__functions__["a"
                    /* default */
                    ][arg.result].greediness;

                    if (argGreediness > baseGreediness) {
                      argNode = this.parseGivenFunction(arg);
                    } else {
                      throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                      /* default */
                      ]("Got function '" + arg.result + "' as " + "argument to '" + func + "'", nextToken);
                    }
                  } else {
                    argNode = arg.result;
                  }

                  (isOptional ? optArgs : args).push(argNode);
                }

                return {
                  args: args,
                  optArgs: optArgs
                };
              }
              /**
               * Parses a group when the mode is changing.
               */

            }, {
              key: "parseGroupOfType",
              value: function parseGroupOfType(type, // Used to describe the mode in error messages.
              optional) {
                // Handle `original` argTypes
                if (type === "original") {
                  type = this.mode;
                }

                if (type === "color") {
                  return this.parseColorGroup(optional);
                }

                if (type === "size") {
                  return this.parseSizeGroup(optional);
                }

                if (type === "url") {
                  return this.parseUrlGroup(optional);
                } // By the time we get here, type is one of "text" or "math".
                // Specify this as mode to parseGroup.


                return this.parseGroup(optional, type);
              }
            }, {
              key: "consumeSpaces",
              value: function consumeSpaces() {
                while (this.nextToken.text === " ") {
                  this.consume();
                }
              }
              /**
               * Parses a group, essentially returning the string formed by the
               * brace-enclosed tokens plus some position information.
               */

            }, {
              key: "parseStringGroup",
              value: function parseStringGroup(modeName, // Used to describe the mode in error messages.
              optional) {
                if (optional && this.nextToken.text !== "[") {
                  return null;
                }

                var outerMode = this.mode;
                this.mode = "text";
                this.expect(optional ? "[" : "{");
                var str = "";
                var firstToken = this.nextToken;
                var lastToken = firstToken;

                while (this.nextToken.text !== (optional ? "]" : "}")) {
                  if (this.nextToken.text === "EOF") {
                    throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                    /* default */
                    ]("Unexpected end of input in " + modeName, firstToken.range(this.nextToken, str));
                  }

                  lastToken = this.nextToken;
                  str += lastToken.text;
                  this.consume();
                }

                this.mode = outerMode;
                this.expect(optional ? "]" : "}");
                return firstToken.range(lastToken, str);
              }
              /**
               * Parses a group, essentially returning the string formed by the
               * brace-enclosed tokens plus some position information, possibly
               * with nested braces.
               */

            }, {
              key: "parseStringGroupWithBalancedBraces",
              value: function parseStringGroupWithBalancedBraces(modeName, // Used to describe the mode in error messages.
              optional) {
                if (optional && this.nextToken.text !== "[") {
                  return null;
                }

                var outerMode = this.mode;
                this.mode = "text";
                this.expect(optional ? "[" : "{");
                var str = "";
                var nest = 0;
                var firstToken = this.nextToken;
                var lastToken = firstToken;

                while (nest > 0 || this.nextToken.text !== (optional ? "]" : "}")) {
                  if (this.nextToken.text === "EOF") {
                    throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                    /* default */
                    ]("Unexpected end of input in " + modeName, firstToken.range(this.nextToken, str));
                  }

                  lastToken = this.nextToken;
                  str += lastToken.text;

                  if (lastToken.text === "{") {
                    nest += 1;
                  } else if (lastToken.text === "}") {
                    if (nest <= 0) {
                      throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                      /* default */
                      ]("Unbalanced brace of input in " + modeName, firstToken.range(this.nextToken, str));
                    } else {
                      nest -= 1;
                    }
                  }

                  this.consume();
                }

                this.mode = outerMode;
                this.expect(optional ? "]" : "}");
                return firstToken.range(lastToken, str);
              }
              /**
               * Parses a regex-delimited group: the largest sequence of tokens
               * whose concatenated strings match `regex`. Returns the string
               * formed by the tokens plus some position information.
               */

            }, {
              key: "parseRegexGroup",
              value: function parseRegexGroup(regex, modeName) {
                var outerMode = this.mode;
                this.mode = "text";
                var firstToken = this.nextToken;
                var lastToken = firstToken;
                var str = "";

                while (this.nextToken.text !== "EOF" && regex.test(str + this.nextToken.text)) {
                  lastToken = this.nextToken;
                  str += lastToken.text;
                  this.consume();
                }

                if (str === "") {
                  throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                  /* default */
                  ]("Invalid " + modeName + ": '" + firstToken.text + "'", firstToken);
                }

                this.mode = outerMode;
                return firstToken.range(lastToken, str);
              }
              /**
               * Parses a color description.
               */

            }, {
              key: "parseColorGroup",
              value: function parseColorGroup(optional) {
                var res = this.parseStringGroup("color", optional);

                if (!res) {
                  return null;
                }

                var match = /^(#[a-f0-9]{3}|#[a-f0-9]{6}|[a-z]+)$/i.exec(res.text);

                if (!match) {
                  throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                  /* default */
                  ]("Invalid color: '" + res.text + "'", res);
                }

                return newArgument(new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                /* default */
                ]("color", match[0], this.mode), res);
              }
              /**
               * Parses a url string.
               */

            }, {
              key: "parseUrlGroup",
              value: function parseUrlGroup(optional) {
                var res = this.parseStringGroupWithBalancedBraces("url", optional);

                if (!res) {
                  return null;
                }

                var raw = res.text; // hyperref package allows backslashes alone in href, but doesn't generate
                // valid links in such cases; we interpret this as "undefiend" behaviour,
                // and keep them as-is. Some browser will replace backslashes with
                // forward slashes.

                var url = raw.replace(/\\([#$%&~_^{}])/g, '$1');
                return newArgument(new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                /* default */
                ]("url", url, this.mode), res);
              }
              /**
               * Parses a size specification, consisting of magnitude and unit.
               */

            }, {
              key: "parseSizeGroup",
              value: function parseSizeGroup(optional) {
                var res = void 0;

                if (!optional && this.nextToken.text !== "{") {
                  res = this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/, "size");
                } else {
                  res = this.parseStringGroup("size", optional);
                }

                if (!res) {
                  return null;
                }

                var match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(res.text);

                if (!match) {
                  throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                  /* default */
                  ]("Invalid size: '" + res.text + "'", res);
                }

                var data = {
                  number: +(match[1] + match[2]),
                  // sign + magnitude, cast to number
                  unit: match[3]
                };

                if (!Object(__WEBPACK_IMPORTED_MODULE_6__units__["b"
                /* validUnit */
                ])(data)) {
                  throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                  /* default */
                  ]("Invalid unit: '" + data.unit + "'", res);
                }

                return newArgument(new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                /* default */
                ]("size", data, this.mode), res);
              }
              /**
               * If `optional` is false or absent, this parses an ordinary group,
               * which is either a single nucleus (like "x") or an expression
               * in braces (like "{x+y}").
               * If `optional` is true, it parses either a bracket-delimited expression
               * (like "[x+y]") or returns null to indicate the absence of a
               * bracket-enclosed group.
               * If `mode` is present, switches to that mode while parsing the group,
               * and switches back after.
               */

            }, {
              key: "parseGroup",
              value: function parseGroup(optional, mode) {
                var outerMode = this.mode;
                var firstToken = this.nextToken; // Try to parse an open brace

                if (this.nextToken.text === (optional ? "[" : "{")) {
                  // Switch to specified mode before we expand symbol after brace
                  if (mode) {
                    this.switchMode(mode);
                  } // If we get a brace, parse an expression


                  this.consume();
                  var expression = this.parseExpression(false, optional ? "]" : "}");
                  var lastToken = this.nextToken; // Switch mode back before consuming symbol after close brace

                  if (mode) {
                    this.switchMode(outerMode);
                  } // Make sure we get a close brace


                  this.expect(optional ? "]" : "}");

                  if (mode === "text") {
                    this.formLigatures(expression);
                  }

                  return newArgument(new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                  /* default */
                  ]("ordgroup", expression, this.mode, firstToken, lastToken), firstToken.range(lastToken, firstToken.text));
                } else {
                  // Otherwise, just return a nucleus, or nothing for an optional group
                  if (mode) {
                    this.switchMode(mode);
                  }

                  var _result3 = optional ? null : this.parseSymbol();

                  if (mode) {
                    this.switchMode(outerMode);
                  }

                  return _result3;
                }
              }
              /**
               * Form ligature-like combinations of characters for text mode.
               * This includes inputs like "--", "---", "``" and "''".
               * The result will simply replace multiple textord nodes with a single
               * character in each value by a single textord node having multiple
               * characters in its value.  The representation is still ASCII source.
               * The group will be modified in place.
               */

            }, {
              key: "formLigatures",
              value: function formLigatures(group) {
                var n = group.length - 1;

                for (var i = 0; i < n; ++i) {
                  var a = group[i];
                  var v = a.value;

                  if (v === "-" && group[i + 1].value === "-") {
                    if (i + 1 < n && group[i + 2].value === "-") {
                      group.splice(i, 3, new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                      /* default */
                      ]("textord", "---", "text", a, group[i + 2]));
                      n -= 2;
                    } else {
                      group.splice(i, 2, new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                      /* default */
                      ]("textord", "--", "text", a, group[i + 1]));
                      n -= 1;
                    }
                  }

                  if ((v === "'" || v === "`") && group[i + 1].value === v) {
                    group.splice(i, 2, new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                    /* default */
                    ]("textord", v + v, "text", a, group[i + 1]));
                    n -= 1;
                  }
                }
              }
              /**
               * Parse a single symbol out of the string. Here, we handle both the functions
               * we have defined, as well as the single character symbols
               */

            }, {
              key: "parseSymbol",
              value: function parseSymbol() {
                var nucleus = this.nextToken;
                var text = nucleus.text;

                if (__WEBPACK_IMPORTED_MODULE_2__functions__["a"
                /* default */
                ][text]) {
                  this.consume(); // If there exists a function with this name, we return the function and
                  // say that it is a function.

                  return newFunction(nucleus);
                } else if (/^\\verb[^a-zA-Z]/.test(text)) {
                  this.consume();
                  var arg = text.slice(5);
                  var star = arg.charAt(0) === "*";

                  if (star) {
                    arg = arg.slice(1);
                  } // Lexer's tokenRegex is constructed to always have matching
                  // first/last characters.


                  if (arg.length < 2 || arg.charAt(0) !== arg.slice(-1)) {
                    throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                    /* default */
                    ]("\\verb assertion failed --\n                    please report what input caused this bug");
                  }

                  arg = arg.slice(1, -1); // remove first and last char

                  return newArgument(new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                  /* default */
                  ]("verb", {
                    body: arg,
                    star: star
                  }, "text"), nucleus);
                } else if (text === "$") {
                  return newDollar(nucleus);
                } // At this point, we should have a symbol, possibly with accents.
                // First expand any accented base symbol according to unicodeSymbols.


                if (__WEBPACK_IMPORTED_MODULE_9__unicodeSymbols__["a"
                /* default */
                ].hasOwnProperty(text[0]) && !__WEBPACK_IMPORTED_MODULE_5__symbols__["a"
                /* default */
                ][this.mode][text[0]]) {
                  text = __WEBPACK_IMPORTED_MODULE_9__unicodeSymbols__["a"
                  /* default */
                  ][text[0]] + text.substr(1);
                } // Strip off any combining characters


                var match = __WEBPACK_IMPORTED_MODULE_12__Lexer_js__["a"
                /* combiningDiacriticalMarksEndRegex */
                ].exec(text);

                if (match) {
                  text = text.substring(0, match.index);

                  if (text === 'i') {
                    text = "\u0131"; // dotless i, in math and text mode
                  } else if (text === 'j') {
                    text = "\u0237"; // dotless j, in math and text mode
                  }
                } // Recognize base symbol


                var symbol = null;

                if (__WEBPACK_IMPORTED_MODULE_5__symbols__["a"
                /* default */
                ][this.mode][text]) {
                  symbol = new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                  /* default */
                  ](__WEBPACK_IMPORTED_MODULE_5__symbols__["a"
                  /* default */
                  ][this.mode][text].group, text, this.mode, nucleus);
                } else if (this.mode === "text" && Object(__WEBPACK_IMPORTED_MODULE_7__unicodeScripts__["b"
                /* supportedCodepoint */
                ])(text.charCodeAt(0))) {
                  symbol = new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                  /* default */
                  ]("textord", text, this.mode, nucleus);
                } else {
                  return null; // EOF, ^, _, {, }, etc.
                }

                this.consume(); // Transform combining characters into accents

                if (match) {
                  for (var i = 0; i < match[0].length; i++) {
                    var accent = match[0][i];

                    if (!__WEBPACK_IMPORTED_MODULE_8__unicodeAccents___default.a[accent]) {
                      throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                      /* default */
                      ]("Unknown accent ' " + accent + "'", nucleus);
                    }

                    var command = __WEBPACK_IMPORTED_MODULE_8__unicodeAccents___default.a[accent][this.mode];

                    if (!command) {
                      throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"
                      /* default */
                      ]("Accent " + accent + " unsupported in " + this.mode + " mode", nucleus);
                    }

                    symbol = new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"
                    /* default */
                    ]("accent", {
                      type: "accent",
                      label: command,
                      isStretchy: false,
                      isShifty: true,
                      base: symbol
                    }, this.mode, nucleus);
                  }
                }

                return newArgument(symbol, nucleus);
              }
            }]);

            return Parser;
          }();

          Parser.endOfExpression = ["}", "\\end", "\\right", "&", "\\\\", "\\cr"];
          Parser.SUPSUB_GREEDINESS = 1;
          /* harmony default export */

          __webpack_exports__["a"] = Parser;
          /***/
        },
        /* 115 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__ParseError__ = __webpack_require__(6);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__ParseNode__ = __webpack_require__(14);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__functions_sqrt__ = __webpack_require__(116);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__functions_color__ = __webpack_require__(117);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__functions_text__ = __webpack_require__(118);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_6__functions_enclose__ = __webpack_require__(119);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_7__functions_overline__ = __webpack_require__(120);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_8__functions_underline__ = __webpack_require__(121);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_9__functions_rule__ = __webpack_require__(122);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_10__functions_kern__ = __webpack_require__(123);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_11__functions_phantom__ = __webpack_require__(124);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_12__functions_mod__ = __webpack_require__(125);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_13__functions_op__ = __webpack_require__(126);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_14__functions_operatorname__ = __webpack_require__(127);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_15__functions_genfrac__ = __webpack_require__(128);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_16__functions_lap__ = __webpack_require__(129);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_17__functions_smash__ = __webpack_require__(130);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_18__functions_delimsizing__ = __webpack_require__(131);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_19__functions_sizing__ = __webpack_require__(60);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_20__functions_styling__ = __webpack_require__(132);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_21__functions_font__ = __webpack_require__(133);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_22__functions_accent__ = __webpack_require__(137);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_23__functions_accentunder__ = __webpack_require__(138);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_24__functions_verb__ = __webpack_require__(139);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_25__functions_href__ = __webpack_require__(140);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_26__functions_mathchoice__ = __webpack_require__(141);
          /** Include this to ensure that all functions are defined. */
          // WARNING: New functions should be added to src/functions and imported here.


          var functions = __WEBPACK_IMPORTED_MODULE_2__defineFunction__["a"
          /* _functions */
          ];
          /* harmony default export */

          __webpack_exports__["a"] = functions; // Define a convenience function that mimcs the old semantics of defineFunction
          // to support existing code so that we can migrate it a little bit at a time.

          var defineFunction = function defineFunction(names, props, handler) // null only if handled in parser
          {
            Object(__WEBPACK_IMPORTED_MODULE_2__defineFunction__["b"
            /* default */
            ])({
              names: names,
              props: props,
              handler: handler
            });
          }; // TODO(kevinb): have functions return an object and call defineFunction with
          // that object in this file instead of relying on side-effects.
          // Math class commands except \mathop


          defineFunction(["\\mathord", "\\mathbin", "\\mathrel", "\\mathopen", "\\mathclose", "\\mathpunct", "\\mathinner"], {
            numArgs: 1
          }, function (context, args) {
            var body = args[0];
            return {
              type: "mclass",
              mclass: "m" + context.funcName.substr(5),
              value: Object(__WEBPACK_IMPORTED_MODULE_2__defineFunction__["c"
              /* ordargument */
              ])(body)
            };
          }); // Build a relation by placing one symbol on top of another

          defineFunction(["\\stackrel"], {
            numArgs: 2
          }, function (context, args) {
            var top = args[0];
            var bottom = args[1];
            var bottomop = new __WEBPACK_IMPORTED_MODULE_1__ParseNode__["a"
            /* default */
            ]("op", {
              type: "op",
              limits: true,
              alwaysHandleSupSub: true,
              symbol: false,
              value: Object(__WEBPACK_IMPORTED_MODULE_2__defineFunction__["c"
              /* ordargument */
              ])(bottom)
            }, bottom.mode);
            var supsub = new __WEBPACK_IMPORTED_MODULE_1__ParseNode__["a"
            /* default */
            ]("supsub", {
              base: bottomop,
              sup: top,
              sub: null
            }, top.mode);
            return {
              type: "mclass",
              mclass: "mrel",
              value: [supsub]
            };
          });
          var singleCharIntegrals = {
            "\u222B": "\\int",
            "\u222C": "\\iint",
            "\u222D": "\\iiint",
            "\u222E": "\\oint"
          }; // There are 2 flags for operators; whether they produce limits in
          // displaystyle, and whether they are symbols and should grow in
          // displaystyle. These four groups cover the four possible choices.
          // No limits, not symbols

          defineFunction(["\\arcsin", "\\arccos", "\\arctan", "\\arctg", "\\arcctg", "\\arg", "\\ch", "\\cos", "\\cosec", "\\cosh", "\\cot", "\\cotg", "\\coth", "\\csc", "\\ctg", "\\cth", "\\deg", "\\dim", "\\exp", "\\hom", "\\ker", "\\lg", "\\ln", "\\log", "\\sec", "\\sin", "\\sinh", "\\sh", "\\tan", "\\tanh", "\\tg", "\\th"], {
            numArgs: 0
          }, function (context) {
            return {
              type: "op",
              limits: false,
              symbol: false,
              body: context.funcName
            };
          }); // Limits, not symbols

          defineFunction(["\\det", "\\gcd", "\\inf", "\\lim", "\\max", "\\min", "\\Pr", "\\sup"], {
            numArgs: 0
          }, function (context) {
            return {
              type: "op",
              limits: true,
              symbol: false,
              body: context.funcName
            };
          }); // No limits, symbols

          defineFunction(["\\int", "\\iint", "\\iiint", "\\oint", "\u222B", "\u222C", "\u222D", "\u222E"], {
            numArgs: 0
          }, function (context) {
            var fName = context.funcName;

            if (fName.length === 1) {
              fName = singleCharIntegrals[fName];
            }

            return {
              type: "op",
              limits: false,
              symbol: true,
              body: fName
            };
          }); // Horizontal stretchy braces

          defineFunction(["\\overbrace", "\\underbrace"], {
            numArgs: 1
          }, function (context, args) {
            var base = args[0];
            return {
              type: "horizBrace",
              label: context.funcName,
              isOver: /^\\over/.test(context.funcName),
              base: base
            };
          }); // Stretchy accents under the body
          // Stretchy arrows with an optional argument

          defineFunction(["\\xleftarrow", "\\xrightarrow", "\\xLeftarrow", "\\xRightarrow", "\\xleftrightarrow", "\\xLeftrightarrow", "\\xhookleftarrow", "\\xhookrightarrow", "\\xmapsto", "\\xrightharpoondown", "\\xrightharpoonup", "\\xleftharpoondown", "\\xleftharpoonup", "\\xrightleftharpoons", "\\xleftrightharpoons", "\\xlongequal", "\\xtwoheadrightarrow", "\\xtwoheadleftarrow", "\\xtofrom", // The next 3 functions are here to support the mhchem extension.
          // Direct use of these functions is discouraged and may break someday.
          "\\xrightleftarrows", "\\xrightequilibrium", "\\xleftequilibrium"], {
            numArgs: 1,
            numOptionalArgs: 1
          }, function (context, args, optArgs) {
            var below = optArgs[0];
            var body = args[0];
            return {
              type: "xArrow",
              // x for extensible
              label: context.funcName,
              body: body,
              below: below
            };
          }); // Infix generalized fractions

          defineFunction(["\\over", "\\choose", "\\atop"], {
            numArgs: 0,
            infix: true
          }, function (context) {
            var replaceWith = void 0;

            switch (context.funcName) {
              case "\\over":
                replaceWith = "\\frac";
                break;

              case "\\choose":
                replaceWith = "\\binom";
                break;

              case "\\atop":
                replaceWith = "\\\\atopfrac";
                break;

              default:
                throw new Error("Unrecognized infix genfrac command");
            }

            return {
              type: "infix",
              replaceWith: replaceWith,
              token: context.token
            };
          }); // Row breaks for aligned data

          defineFunction(["\\\\", "\\cr"], {
            numArgs: 0,
            numOptionalArgs: 1,
            argTypes: ["size"]
          }, function (context, args, optArgs) {
            var size = optArgs[0];
            return {
              type: "cr",
              size: size
            };
          }); // Environment delimiters

          defineFunction(["\\begin", "\\end"], {
            numArgs: 1,
            argTypes: ["text"]
          }, function (context, args) {
            var nameGroup = args[0];

            if (nameGroup.type !== "ordgroup") {
              throw new __WEBPACK_IMPORTED_MODULE_0__ParseError__["a"
              /* default */
              ]("Invalid environment name", nameGroup);
            }

            var name = "";

            for (var i = 0; i < nameGroup.value.length; ++i) {
              name += nameGroup.value[i].value;
            }

            return {
              type: "environment",
              name: name,
              nameGroup: nameGroup
            };
          }); // Box manipulation

          defineFunction(["\\raisebox"], {
            numArgs: 2,
            argTypes: ["size", "text"],
            allowedInText: true
          }, function (context, args) {
            var amount = args[0];
            var body = args[1];
            return {
              type: "raisebox",
              dy: amount,
              body: body,
              value: Object(__WEBPACK_IMPORTED_MODULE_2__defineFunction__["c"
              /* ordargument */
              ])(body)
            };
          }); // Hyperlinks
          // MathChoice

          /***/
        },
        /* 116 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__domTree__ = __webpack_require__(12);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__delimiter__ = __webpack_require__(44);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__Style__ = __webpack_require__(9);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_6__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_7__buildMathML__ = __webpack_require__(2);

          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "sqrt",
            names: ["\\sqrt"],
            props: {
              numArgs: 1,
              numOptionalArgs: 1
            },
            handler: function handler(context, args, optArgs) {
              var index = optArgs[0];
              var body = args[0];
              return {
                type: "sqrt",
                body: body,
                index: index
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              // Square roots are handled in the TeXbook pg. 443, Rule 11.
              // First, we do the same steps as in overline to build the inner group
              // and line
              var inner = __WEBPACK_IMPORTED_MODULE_6__buildHTML__["b"
              /* buildGroup */
              ](group.value.body, options.havingCrampedStyle());

              if (inner.height === 0) {
                // Render a small surd.
                inner.height = options.fontMetrics().xHeight;
              } // Some groups can return document fragments.  Handle those by wrapping
              // them in a span.


              if (inner instanceof __WEBPACK_IMPORTED_MODULE_2__domTree__["a"
              /* default */
              ].documentFragment) {
                inner = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeSpan([], [inner], options);
              } // Calculate the minimum size for the \surd delimiter


              var metrics = options.fontMetrics();
              var theta = metrics.defaultRuleThickness;
              var phi = theta;

              if (options.style.id < __WEBPACK_IMPORTED_MODULE_5__Style__["a"
              /* default */
              ].TEXT.id) {
                phi = options.fontMetrics().xHeight;
              } // Calculate the clearance between the body and line


              var lineClearance = theta + phi / 4;
              var minDelimiterHeight = (inner.height + inner.depth + lineClearance + theta) * options.sizeMultiplier; // Create a sqrt SVG of the required minimum size

              var _delimiter$sqrtImage = __WEBPACK_IMPORTED_MODULE_4__delimiter__["a"
              /* default */
              ].sqrtImage(minDelimiterHeight, options),
                  img = _delimiter$sqrtImage.span,
                  ruleWidth = _delimiter$sqrtImage.ruleWidth;

              var delimDepth = img.height - ruleWidth; // Adjust the clearance based on the delimiter size

              if (delimDepth > inner.height + inner.depth + lineClearance) {
                lineClearance = (lineClearance + delimDepth - inner.height - inner.depth) / 2;
              } // Shift the sqrt image


              var imgShift = img.height - inner.height - lineClearance - ruleWidth;
              inner.style.paddingLeft = img.advanceWidth + "em"; // Overlay the image and the argument.

              var body = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeVList({
                positionType: "firstBaseline",
                children: [{
                  type: "elem",
                  elem: inner,
                  wrapperClasses: ["svg-align"]
                }, {
                  type: "kern",
                  size: -(inner.height + imgShift)
                }, {
                  type: "elem",
                  elem: img
                }, {
                  type: "kern",
                  size: ruleWidth
                }]
              }, options);

              if (!group.value.index) {
                return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeSpan(["mord", "sqrt"], [body], options);
              } else {
                // Handle the optional root index
                // The index is always in scriptscript style
                var newOptions = options.havingStyle(__WEBPACK_IMPORTED_MODULE_5__Style__["a"
                /* default */
                ].SCRIPTSCRIPT);

                var rootm = __WEBPACK_IMPORTED_MODULE_6__buildHTML__["b"
                /* buildGroup */
                ](group.value.index, newOptions, options); // The amount the index is shifted by. This is taken from the TeX
                // source, in the definition of `\r@@t`.


                var toShift = 0.6 * (body.height - body.depth); // Build a VList with the superscript shifted up correctly

                var rootVList = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeVList({
                  positionType: "shift",
                  positionData: -toShift,
                  children: [{
                    type: "elem",
                    elem: rootm
                  }]
                }, options); // Add a class surrounding it so we can add on the appropriate
                // kerning


                var rootVListWrap = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeSpan(["root"], [rootVList]);

                return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeSpan(["mord", "sqrt"], [rootVListWrap, body], options);
              }
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              var node = void 0;

              if (group.value.index) {
                node = new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
                /* default */
                ].MathNode("mroot", [__WEBPACK_IMPORTED_MODULE_7__buildMathML__["b"
                /* buildGroup */
                ](group.value.body, options), __WEBPACK_IMPORTED_MODULE_7__buildMathML__["b"
                /* buildGroup */
                ](group.value.index, options)]);
              } else {
                node = new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
                /* default */
                ].MathNode("msqrt", [__WEBPACK_IMPORTED_MODULE_7__buildMathML__["b"
                /* buildGroup */
                ](group.value.body, options)]);
              }

              return node;
            }
          });
          /***/
        },
        /* 117 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__ParseError__ = __webpack_require__(6);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__buildMathML__ = __webpack_require__(2);

          var htmlBuilder = function htmlBuilder(group, options) {
            var elements = __WEBPACK_IMPORTED_MODULE_4__buildHTML__["a"
            /* buildExpression */
            ](group.value.value, options.withColor(group.value.color), false); // \color isn't supposed to affect the type of the elements it contains.
            // To accomplish this, we wrap the results in a fragment, so the inner
            // elements will be able to directly interact with their neighbors. For
            // example, `\color{red}{2 +} 3` has the same spacing as `2 + 3`


            return new __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
            /* default */
            ].makeFragment(elements);
          };

          var mathmlBuilder = function mathmlBuilder(group, options) {
            var inner = __WEBPACK_IMPORTED_MODULE_5__buildMathML__["a"
            /* buildExpression */
            ](group.value.value, options);

            var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode("mstyle", inner);
            node.setAttribute("mathcolor", group.value.color);
            return node;
          };

          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "color",
            names: ["\\textcolor"],
            props: {
              numArgs: 2,
              allowedInText: true,
              greediness: 3,
              argTypes: ["color", "original"]
            },
            handler: function handler(context, args) {
              var color = args[0];
              var body = args[1];
              return {
                type: "color",
                color: color.value,
                value: Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"
                /* ordargument */
                ])(body)
              };
            },
            htmlBuilder: htmlBuilder,
            mathmlBuilder: mathmlBuilder
          }); // TODO(kevinb): define these using macros

          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "color",
            names: ["\\blue", "\\orange", "\\pink", "\\red", "\\green", "\\gray", "\\purple", "\\blueA", "\\blueB", "\\blueC", "\\blueD", "\\blueE", "\\tealA", "\\tealB", "\\tealC", "\\tealD", "\\tealE", "\\greenA", "\\greenB", "\\greenC", "\\greenD", "\\greenE", "\\goldA", "\\goldB", "\\goldC", "\\goldD", "\\goldE", "\\redA", "\\redB", "\\redC", "\\redD", "\\redE", "\\maroonA", "\\maroonB", "\\maroonC", "\\maroonD", "\\maroonE", "\\purpleA", "\\purpleB", "\\purpleC", "\\purpleD", "\\purpleE", "\\mintA", "\\mintB", "\\mintC", "\\grayA", "\\grayB", "\\grayC", "\\grayD", "\\grayE", "\\grayF", "\\grayG", "\\grayH", "\\grayI", "\\kaBlue", "\\kaGreen"],
            props: {
              numArgs: 1,
              allowedInText: true,
              greediness: 3
            },
            handler: function handler(context, args) {
              var body = args[0];
              return {
                type: "color",
                color: "katex-" + context.funcName.slice(1),
                value: Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"
                /* ordargument */
                ])(body)
              };
            },
            htmlBuilder: htmlBuilder,
            mathmlBuilder: mathmlBuilder
          });
          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "color",
            names: ["\\color"],
            props: {
              numArgs: 1,
              allowedInText: true,
              greediness: 3,
              argTypes: ["color"]
            },
            handler: function handler(context, args) {
              var parser = context.parser,
                  breakOnTokenText = context.breakOnTokenText;
              var color = args[0];

              if (!color) {
                throw new __WEBPACK_IMPORTED_MODULE_3__ParseError__["a"
                /* default */
                ]("\\color not followed by color");
              } // If we see a styling function, parse out the implicit body


              var body = parser.parseExpression(true, breakOnTokenText);
              return {
                type: "color",
                color: color.value,
                value: body
              };
            },
            htmlBuilder: htmlBuilder,
            mathmlBuilder: mathmlBuilder
          });
          /***/
        },
        /* 118 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__buildMathML__ = __webpack_require__(2); // Non-mathy text, possibly in a font


          var textFontFamilies = {
            "\\text": undefined,
            "\\textrm": "textrm",
            "\\textsf": "textsf",
            "\\texttt": "texttt",
            "\\textnormal": "textrm"
          };
          var textFontWeights = {
            "\\textbf": "textbf"
          };
          var textFontShapes = {
            "\\textit": "textit"
          };
          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "text",
            names: [// Font families
            "\\text", "\\textrm", "\\textsf", "\\texttt", "\\textnormal", // Font weights
            "\\textbf", // Font Shapes
            "\\textit"],
            props: {
              numArgs: 1,
              argTypes: ["text"],
              greediness: 2,
              allowedInText: true
            },
            handler: function handler(context, args) {
              var body = args[0];
              return {
                type: "text",
                body: Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"
                /* ordargument */
                ])(body),
                font: context.funcName
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              var font = group.value.font; // Checks if the argument is a font family or a font style.

              var newOptions = void 0;

              if (textFontFamilies[font]) {
                newOptions = options.withFontFamily(textFontFamilies[font]);
              } else if (textFontWeights[font]) {
                newOptions = options.withFontWeight(textFontWeights[font]);
              } else {
                newOptions = options.withFontShape(textFontShapes[font]);
              }

              var inner = __WEBPACK_IMPORTED_MODULE_3__buildHTML__["a"
              /* buildExpression */
              ](group.value.body, newOptions, true);

              __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].tryCombineChars(inner);

              return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["mord", "text"], inner, newOptions);
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              var body = group.value.body; // Convert each element of the body into MathML, and combine consecutive
              // <mtext> outputs into a single <mtext> tag.  In this way, we don't
              // nest non-text items (e.g., $nested-math$) within an <mtext>.

              var inner = [];
              var currentText = null;

              for (var i = 0; i < body.length; i++) {
                var _group = __WEBPACK_IMPORTED_MODULE_4__buildMathML__["b"
                /* buildGroup */
                ](body[i], options);

                if (_group.type === 'mtext' && currentText != null) {
                  Array.prototype.push.apply(currentText.children, _group.children);
                } else {
                  inner.push(_group);

                  if (_group.type === 'mtext') {
                    currentText = _group;
                  }
                }
              } // If there is a single tag in the end (presumably <mtext>),
              // just return it.  Otherwise, wrap them in an <mrow>.


              if (inner.length === 1) {
                return inner[0];
              } else {
                return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
                /* default */
                ].MathNode("mrow", inner);
              }
            }
          });
          /***/
        },
        /* 119 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(5);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__stretchy__ = __webpack_require__(13);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_6__buildMathML__ = __webpack_require__(2);

          var htmlBuilder = function htmlBuilder(group, options) {
            // \cancel, \bcancel, \xcancel, \sout, \fbox, \colorbox, \fcolorbox
            var inner = __WEBPACK_IMPORTED_MODULE_5__buildHTML__["b"
            /* buildGroup */
            ](group.value.body, options);

            var label = group.value.label.substr(1);
            var scale = options.sizeMultiplier;
            var img = void 0;
            var imgShift = 0;
            var isColorbox = /color/.test(label);

            if (label === "sout") {
              img = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["stretchy", "sout"]);
              img.height = options.fontMetrics().defaultRuleThickness / scale;
              imgShift = -0.5 * options.fontMetrics().xHeight;
            } else {
              // Add horizontal padding
              inner.classes.push(/cancel/.test(label) ? "cancel-pad" : "boxpad"); // Add vertical padding

              var vertPad = 0; // ref: LaTeX source2e: \fboxsep = 3pt;  \fboxrule = .4pt
              // ref: cancel package: \advance\totalheight2\p@ % "+2"

              if (/box/.test(label)) {
                vertPad = label === "colorbox" ? 0.3 : 0.34;
              } else {
                vertPad = __WEBPACK_IMPORTED_MODULE_3__utils__["a"
                /* default */
                ].isCharacterBox(group.value.body) ? 0.2 : 0;
              }

              img = __WEBPACK_IMPORTED_MODULE_4__stretchy__["a"
              /* default */
              ].encloseSpan(inner, label, vertPad, options);
              imgShift = inner.depth + vertPad;

              if (isColorbox) {
                img.style.backgroundColor = group.value.backgroundColor.value;

                if (label === "fcolorbox") {
                  img.style.borderColor = group.value.borderColor.value;
                }
              }
            }

            var vlist = void 0;

            if (isColorbox) {
              vlist = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeVList({
                positionType: "individualShift",
                children: [// Put the color background behind inner;
                {
                  type: "elem",
                  elem: img,
                  shift: imgShift
                }, {
                  type: "elem",
                  elem: inner,
                  shift: 0
                }]
              }, options);
            } else {
              vlist = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeVList({
                positionType: "individualShift",
                children: [// Write the \cancel stroke on top of inner.
                {
                  type: "elem",
                  elem: inner,
                  shift: 0
                }, {
                  type: "elem",
                  elem: img,
                  shift: imgShift,
                  wrapperClasses: /cancel/.test(label) ? ["svg-align"] : []
                }]
              }, options);
            }

            if (/cancel/.test(label)) {
              // cancel does not create horiz space for its line extension.
              // That is, not when adjacent to a mord.
              return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["mord", "cancel-lap"], [vlist], options);
            } else {
              return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["mord"], [vlist], options);
            }
          };

          var mathmlBuilder = function mathmlBuilder(group, options) {
            var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode("menclose", [__WEBPACK_IMPORTED_MODULE_6__buildMathML__["b"
            /* buildGroup */
            ](group.value.body, options)]);

            switch (group.value.label) {
              case "\\cancel":
                node.setAttribute("notation", "updiagonalstrike");
                break;

              case "\\bcancel":
                node.setAttribute("notation", "downdiagonalstrike");
                break;

              case "\\sout":
                node.setAttribute("notation", "horizontalstrike");
                break;

              case "\\fbox":
                node.setAttribute("notation", "box");
                break;

              case "\\colorbox":
                node.setAttribute("mathbackground", group.value.backgroundColor.value);
                break;

              case "\\fcolorbox":
                node.setAttribute("mathbackground", group.value.backgroundColor.value); // TODO(ron): I don't know any way to set the border color.

                node.setAttribute("notation", "box");
                break;

              default:
                // xcancel
                node.setAttribute("notation", "updiagonalstrike downdiagonalstrike");
            }

            return node;
          };

          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "enclose",
            names: ["\\colorbox"],
            props: {
              numArgs: 2,
              allowedInText: true,
              greediness: 3,
              argTypes: ["color", "text"]
            },
            handler: function handler(context, args, optArgs) {
              var color = args[0];
              var body = args[1];
              return {
                type: "enclose",
                label: context.funcName,
                backgroundColor: color,
                body: body
              };
            },
            htmlBuilder: htmlBuilder,
            mathmlBuilder: mathmlBuilder
          });
          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "enclose",
            names: ["\\fcolorbox"],
            props: {
              numArgs: 3,
              allowedInText: true,
              greediness: 3,
              argTypes: ["color", "color", "text"]
            },
            handler: function handler(context, args, optArgs) {
              var borderColor = args[0];
              var backgroundColor = args[1];
              var body = args[2];
              return {
                type: "enclose",
                label: context.funcName,
                backgroundColor: backgroundColor,
                borderColor: borderColor,
                body: body
              };
            },
            htmlBuilder: htmlBuilder,
            mathmlBuilder: mathmlBuilder
          });
          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "enclose",
            names: ["\\cancel", "\\bcancel", "\\xcancel", "\\sout", "\\fbox"],
            props: {
              numArgs: 1
            },
            handler: function handler(context, args, optArgs) {
              var body = args[0];
              return {
                type: "enclose",
                label: context.funcName,
                body: body
              };
            },
            htmlBuilder: htmlBuilder,
            mathmlBuilder: mathmlBuilder
          });
          /***/
        },
        /* 120 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__buildMathML__ = __webpack_require__(2);

          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "overline",
            names: ["\\overline"],
            props: {
              numArgs: 1
            },
            handler: function handler(context, args) {
              var body = args[0];
              return {
                type: "overline",
                body: body
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              // Overlines are handled in the TeXbook pg 443, Rule 9.
              // Build the inner group in the cramped style.
              var innerGroup = __WEBPACK_IMPORTED_MODULE_3__buildHTML__["b"
              /* buildGroup */
              ](group.value.body, options.havingCrampedStyle()); // Create the line above the body


              var line = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeLineSpan("overline-line", options); // Generate the vlist, with the appropriate kerns


              var vlist = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeVList({
                positionType: "firstBaseline",
                children: [{
                  type: "elem",
                  elem: innerGroup
                }, // The kern on the next line would ordinarily be 3 * line.height
                // But we put the line into a span that is 5 lines tall, to
                // overcome a Chrome rendering issue. The SVG has a space in
                // the bottom that is 2 lines high. That and the 1-line-high
                // kern sum up to the same distance as the old 3 line kern.
                {
                  type: "kern",
                  size: line.height
                }, {
                  type: "elem",
                  elem: line
                }]
              }, options);

              return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["mord", "overline"], [vlist], options);
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              var operator = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mo", [new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].TextNode("\u203E")]);
              operator.setAttribute("stretchy", "true");
              var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mover", [__WEBPACK_IMPORTED_MODULE_4__buildMathML__["b"
              /* buildGroup */
              ](group.value.body, options), operator]);
              node.setAttribute("accent", "true");
              return node;
            }
          });
          /***/
        },
        /* 121 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__buildMathML__ = __webpack_require__(2);

          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "underline",
            names: ["\\underline"],
            props: {
              numArgs: 1,
              allowedInText: true
            },
            handler: function handler(context, args) {
              var body = args[0];
              return {
                type: "underline",
                body: body
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              // Underlines are handled in the TeXbook pg 443, Rule 10.
              // Build the inner group.
              var innerGroup = __WEBPACK_IMPORTED_MODULE_3__buildHTML__["b"
              /* buildGroup */
              ](group.value.body, options); // Create the line to go below the body


              var line = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeLineSpan("underline-line", options); // Generate the vlist, with the appropriate kerns


              var vlist = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeVList({
                positionType: "top",
                positionData: innerGroup.height,
                children: [// The SVG image is 5x as tall as the line.
                // The bottom 2/5 of the image is blank and acts like a kern.
                // So we omit the kern that would otherwise go at the bottom.
                {
                  type: "elem",
                  elem: line
                }, {
                  type: "kern",
                  size: 5 * line.height
                }, {
                  type: "elem",
                  elem: innerGroup
                }]
              }, options);

              return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["mord", "underline"], [vlist], options);
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              var operator = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mo", [new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].TextNode("\u203E")]);
              operator.setAttribute("stretchy", "true");
              var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("munder", [__WEBPACK_IMPORTED_MODULE_4__buildMathML__["b"
              /* buildGroup */
              ](group.value.body, options), operator]);
              node.setAttribute("accentunder", "true");
              return node;
            }
          });
          /***/
        },
        /* 122 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__units__ = __webpack_require__(19);

          Object(__WEBPACK_IMPORTED_MODULE_1__defineFunction__["b"
          /* default */
          ])({
            type: "rule",
            names: ["\\rule"],
            props: {
              numArgs: 2,
              numOptionalArgs: 1,
              argTypes: ["size", "size", "size"]
            },
            handler: function handler(context, args, optArgs) {
              var shift = optArgs[0];
              var width = args[0];
              var height = args[1];
              return {
                type: "rule",
                shift: shift && shift.value,
                width: width.value,
                height: height.value
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              // Make an empty span for the rule
              var rule = __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"
              /* default */
              ].makeSpan(["mord", "rule"], [], options); // Calculate the shift, width, and height of the rule, and account for units


              var shift = 0;

              if (group.value.shift) {
                shift = Object(__WEBPACK_IMPORTED_MODULE_3__units__["a"
                /* calculateSize */
                ])(group.value.shift, options);
              }

              var width = Object(__WEBPACK_IMPORTED_MODULE_3__units__["a"
              /* calculateSize */
              ])(group.value.width, options);
              var height = Object(__WEBPACK_IMPORTED_MODULE_3__units__["a"
              /* calculateSize */
              ])(group.value.height, options); // Style the rule to the right size

              rule.style.borderRightWidth = width + "em";
              rule.style.borderTopWidth = height + "em";
              rule.style.bottom = shift + "em"; // Record the height and width

              rule.width = width;
              rule.height = height + shift;
              rule.depth = -shift; // Font size is the number large enough that the browser will
              // reserve at least `absHeight` space above the baseline.
              // The 1.125 factor was empirically determined

              rule.maxFontSize = height * 1.125 * options.sizeMultiplier;
              return rule;
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              // TODO(emily): Figure out if there's an actual way to draw black boxes
              // in MathML.
              var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mrow");
              return node;
            }
          });
          /***/
        },
        /* 123 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__units__ = __webpack_require__(19);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__ParseError__ = __webpack_require__(6);
          /* eslint no-console:0 */
          // Horizontal spacing commands
          // TODO: \hskip and \mskip should support plus and minus in lengths


          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "kern",
            names: ["\\kern", "\\mkern", "\\hskip", "\\mskip"],
            props: {
              numArgs: 1,
              argTypes: ["size"],
              allowedInText: true
            },
            handler: function handler(context, args) {
              var mathFunction = context.funcName[1] === 'm'; // \mkern, \mskip

              var muUnit = args[0].value.unit === 'mu';

              if (mathFunction) {
                if (!muUnit) {
                  typeof console !== "undefined" && console.warn("In LaTeX, " + context.funcName + " supports only mu units, " + ("not " + args[0].value.unit + " units"));
                }

                if (context.parser.mode !== "math") {
                  throw new __WEBPACK_IMPORTED_MODULE_4__ParseError__["a"
                  /* default */
                  ]("Can't use function '" + context.funcName + "' in text mode");
                }
              } else {
                // !mathFunction
                if (muUnit) {
                  typeof console !== "undefined" && console.warn("In LaTeX, " + context.funcName + " does not support mu units");
                }
              }

              return {
                type: "kern",
                dimension: args[0].value
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeGlue(group.value.dimension, options);
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mspace");
              var dimension = Object(__WEBPACK_IMPORTED_MODULE_3__units__["a"
              /* calculateSize */
              ])(group.value.dimension, options);
              node.setAttribute("width", dimension + "em");
              return node;
            }
          });
          /***/
        },
        /* 124 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__buildMathML__ = __webpack_require__(2);

          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "phantom",
            names: ["\\phantom"],
            props: {
              numArgs: 1
            },
            handler: function handler(context, args) {
              var body = args[0];
              return {
                type: "phantom",
                value: Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"
                /* ordargument */
                ])(body)
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              var elements = __WEBPACK_IMPORTED_MODULE_3__buildHTML__["a"
              /* buildExpression */
              ](group.value.value, options.withPhantom(), false); // \phantom isn't supposed to affect the elements it contains.
              // See "color" for more details.


              return new __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeFragment(elements);
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              var inner = __WEBPACK_IMPORTED_MODULE_4__buildMathML__["a"
              /* buildExpression */
              ](group.value.value, options);

              return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mphantom", inner);
            }
          });
          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "hphantom",
            names: ["\\hphantom"],
            props: {
              numArgs: 1
            },
            handler: function handler(context, args) {
              var body = args[0];
              return {
                type: "hphantom",
                value: Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"
                /* ordargument */
                ])(body),
                body: body
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              var node = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan([], [__WEBPACK_IMPORTED_MODULE_3__buildHTML__["b"
              /* buildGroup */
              ](group.value.body, options.withPhantom())]);

              node.height = 0;
              node.depth = 0;

              if (node.children) {
                for (var i = 0; i < node.children.length; i++) {
                  node.children[i].height = 0;
                  node.children[i].depth = 0;
                }
              } // See smash for comment re: use of makeVList


              node = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeVList({
                positionType: "firstBaseline",
                children: [{
                  type: "elem",
                  elem: node
                }]
              }, options);
              return node;
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              var inner = __WEBPACK_IMPORTED_MODULE_4__buildMathML__["a"
              /* buildExpression */
              ](group.value.value, options);

              var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mphantom", inner);
              node.setAttribute("height", "0px");
              return node;
            }
          });
          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "vphantom",
            names: ["\\vphantom"],
            props: {
              numArgs: 1
            },
            handler: function handler(context, args) {
              var body = args[0];
              return {
                type: "vphantom",
                value: Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"
                /* ordargument */
                ])(body),
                body: body
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              var inner = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["inner"], [__WEBPACK_IMPORTED_MODULE_3__buildHTML__["b"
              /* buildGroup */
              ](group.value.body, options.withPhantom())]);

              var fix = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["fix"], []);

              return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["mord", "rlap"], [inner, fix], options);
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              var inner = __WEBPACK_IMPORTED_MODULE_4__buildMathML__["a"
              /* buildExpression */
              ](group.value.value, options);

              var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mphantom", inner);
              node.setAttribute("width", "0px");
              return node;
            }
          });
          /***/
        },
        /* 125 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__Style__ = __webpack_require__(9);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__buildMathML__ = __webpack_require__(2); // \mod-type functions


          var htmlModBuilder = function htmlModBuilder(group, options) {
            var inner = [];

            if (group.value.modType === "bmod") {
              // “\nonscript\mskip-\medmuskip\mkern5mu”, where \medmuskip is
              // 4mu plus 2mu minus 1mu, translates to 1mu space in
              // display/textstyle and 5mu space in script/scriptscriptstyle.
              if (!options.style.isTight()) {
                inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeSpan(["mspace", "muspace"], [], options));
              } else {
                inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeSpan(["mspace", "thickspace"], [], options));
              }
            } else if (options.style.size === __WEBPACK_IMPORTED_MODULE_3__Style__["a"
            /* default */
            ].DISPLAY.size) {
              inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["mspace", "quad"], [], options));
            } else if (group.value.modType === "mod") {
              inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["mspace", "twelvemuspace"], [], options));
            } else {
              inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["mspace", "eightmuspace"], [], options));
            }

            if (group.value.modType === "pod" || group.value.modType === "pmod") {
              inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].mathsym("(", group.mode));
            }

            if (group.value.modType !== "pod") {
              var modInner = [__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].mathsym("m", group.mode), __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].mathsym("o", group.mode), __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].mathsym("d", group.mode)];

              if (group.value.modType === "bmod") {
                inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeSpan(["mbin"], modInner, options)); // “\mkern5mu\nonscript\mskip-\medmuskip” as above

                if (!options.style.isTight()) {
                  inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                  /* default */
                  ].makeSpan(["mspace", "muspace"], [], options));
                } else {
                  inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                  /* default */
                  ].makeSpan(["mspace", "thickspace"], [], options));
                }
              } else {
                Array.prototype.push.apply(inner, modInner);
                inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeSpan(["mspace", "sixmuspace"], [], options));
              }
            }

            if (group.value.value) {
              Array.prototype.push.apply(inner, __WEBPACK_IMPORTED_MODULE_4__buildHTML__["a"
              /* buildExpression */
              ](group.value.value, options, false));
            }

            if (group.value.modType === "pod" || group.value.modType === "pmod") {
              inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].mathsym(")", group.mode));
            }

            return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
            /* default */
            ].makeFragment(inner);
          };

          var mmlModBuilder = function mmlModBuilder(group, options) {
            var inner = [];

            if (group.value.modType === "pod" || group.value.modType === "pmod") {
              inner.push(new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mo", [__WEBPACK_IMPORTED_MODULE_5__buildMathML__["e"
              /* makeText */
              ]("(", group.mode)]));
            }

            if (group.value.modType !== "pod") {
              inner.push(new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mo", [__WEBPACK_IMPORTED_MODULE_5__buildMathML__["e"
              /* makeText */
              ]("mod", group.mode)]));
            }

            if (group.value.value) {
              var space = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mspace");
              space.setAttribute("width", "0.333333em");
              inner.push(space);
              inner = inner.concat(__WEBPACK_IMPORTED_MODULE_5__buildMathML__["a"
              /* buildExpression */
              ](group.value.value, options));
            }

            if (group.value.modType === "pod" || group.value.modType === "pmod") {
              inner.push(new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mo", [__WEBPACK_IMPORTED_MODULE_5__buildMathML__["e"
              /* makeText */
              ](")", group.mode)]));
            }

            return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode("mo", inner);
          };

          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "mod",
            names: ["\\bmod"],
            props: {
              numArgs: 0
            },
            handler: function handler(context, args) {
              return {
                type: "mod",
                modType: "bmod",
                value: null
              };
            },
            htmlBuilder: htmlModBuilder,
            mathmlBuilder: mmlModBuilder
          }); // Note: calling defineFunction with a type that's already been defined only
          // works because the same htmlBuilder and mathmlBuilder are being used.

          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "mod",
            names: ["\\pod", "\\pmod", "\\mod"],
            props: {
              numArgs: 1
            },
            handler: function handler(context, args) {
              var body = args[0];
              return {
                type: "mod",
                modType: context.funcName.substr(1),
                value: Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"
                /* ordargument */
                ])(body)
              };
            },
            htmlBuilder: htmlModBuilder,
            mathmlBuilder: mmlModBuilder
          });
          /***/
        },
        /* 126 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__domTree__ = __webpack_require__(12);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__utils__ = __webpack_require__(5);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__Style__ = __webpack_require__(9);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_6__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_7__buildMathML__ = __webpack_require__(2); // Limits, symbols


          var htmlBuilder = function htmlBuilder(group, options) {
            // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
            var supGroup = void 0;
            var subGroup = void 0;
            var hasLimits = false;

            if (group.type === "supsub") {
              // If we have limits, supsub will pass us its group to handle. Pull
              // out the superscript and subscript and set the group to the op in
              // its base.
              supGroup = group.value.sup;
              subGroup = group.value.sub;
              group = group.value.base;
              hasLimits = true;
            }

            var style = options.style; // Most operators have a large successor symbol, but these don't.

            var noSuccessor = ["\\smallint"];
            var large = false;

            if (style.size === __WEBPACK_IMPORTED_MODULE_5__Style__["a"
            /* default */
            ].DISPLAY.size && group.value.symbol && !__WEBPACK_IMPORTED_MODULE_4__utils__["a"
            /* default */
            ].contains(noSuccessor, group.value.body)) {
              // Most symbol operators get larger in displaystyle (rule 13)
              large = true;
            }

            var base = void 0;

            if (group.value.symbol) {
              // If this is a symbol, create the symbol.
              var fontName = large ? "Size2-Regular" : "Size1-Regular";
              base = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSymbol(group.value.body, fontName, "math", options, ["mop", "op-symbol", large ? "large-op" : "small-op"]);
            } else if (group.value.value) {
              // If this is a list, compose that list.
              var inner = __WEBPACK_IMPORTED_MODULE_6__buildHTML__["a"
              /* buildExpression */
              ](group.value.value, options, true);

              if (inner.length === 1 && inner[0] instanceof __WEBPACK_IMPORTED_MODULE_2__domTree__["a"
              /* default */
              ].symbolNode) {
                base = inner[0];
                base.classes[0] = "mop"; // replace old mclass
              } else {
                base = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeSpan(["mop"], inner, options);
              }
            } else {
              // Otherwise, this is a text operator. Build the text from the
              // operator's name.
              // TODO(emily): Add a space in the middle of some of these
              // operators, like \limsup
              var output = [];

              for (var i = 1; i < group.value.body.length; i++) {
                output.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].mathsym(group.value.body[i], group.mode));
              }

              base = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["mop"], output, options);
            } // If content of op is a single symbol, shift it vertically.


            var baseShift = 0;
            var slant = 0;

            if (base instanceof __WEBPACK_IMPORTED_MODULE_2__domTree__["a"
            /* default */
            ].symbolNode) {
              // Shift the symbol so its center lies on the axis (rule 13). It
              // appears that our fonts have the centers of the symbols already
              // almost on the axis, so these numbers are very small. Note we
              // don't actually apply this here, but instead it is used either in
              // the vlist creation or separately when there are no limits.
              baseShift = (base.height - base.depth) / 2 - options.fontMetrics().axisHeight; // The slant of the symbol is just its italic correction.

              slant = base.italic;
            }

            if (hasLimits) {
              // IE 8 clips \int if it is in a display: inline-block. We wrap it
              // in a new span so it is an inline, and works.
              base = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan([], [base]);
              var sub = void 0;
              var sup = void 0; // We manually have to handle the superscripts and subscripts. This,
              // aside from the kern calculations, is copied from supsub.

              if (supGroup) {
                var elem = __WEBPACK_IMPORTED_MODULE_6__buildHTML__["b"
                /* buildGroup */
                ](supGroup, options.havingStyle(style.sup()), options);

                sup = {
                  elem: elem,
                  kern: Math.max(options.fontMetrics().bigOpSpacing1, options.fontMetrics().bigOpSpacing3 - elem.depth)
                };
              }

              if (subGroup) {
                var _elem = __WEBPACK_IMPORTED_MODULE_6__buildHTML__["b"
                /* buildGroup */
                ](subGroup, options.havingStyle(style.sub()), options);

                sub = {
                  elem: _elem,
                  kern: Math.max(options.fontMetrics().bigOpSpacing2, options.fontMetrics().bigOpSpacing4 - _elem.height)
                };
              } // Build the final group as a vlist of the possible subscript, base,
              // and possible superscript.


              var finalGroup = void 0;

              if (sup && sub) {
                var bottom = options.fontMetrics().bigOpSpacing5 + sub.elem.height + sub.elem.depth + sub.kern + base.depth + baseShift;
                finalGroup = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeVList({
                  positionType: "bottom",
                  positionData: bottom,
                  children: [{
                    type: "kern",
                    size: options.fontMetrics().bigOpSpacing5
                  }, {
                    type: "elem",
                    elem: sub.elem,
                    marginLeft: -slant + "em"
                  }, {
                    type: "kern",
                    size: sub.kern
                  }, {
                    type: "elem",
                    elem: base
                  }, {
                    type: "kern",
                    size: sup.kern
                  }, {
                    type: "elem",
                    elem: sup.elem,
                    marginLeft: slant + "em"
                  }, {
                    type: "kern",
                    size: options.fontMetrics().bigOpSpacing5
                  }]
                }, options);
              } else if (sub) {
                var top = base.height - baseShift; // Shift the limits by the slant of the symbol. Note
                // that we are supposed to shift the limits by 1/2 of the slant,
                // but since we are centering the limits adding a full slant of
                // margin will shift by 1/2 that.

                finalGroup = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeVList({
                  positionType: "top",
                  positionData: top,
                  children: [{
                    type: "kern",
                    size: options.fontMetrics().bigOpSpacing5
                  }, {
                    type: "elem",
                    elem: sub.elem,
                    marginLeft: -slant + "em"
                  }, {
                    type: "kern",
                    size: sub.kern
                  }, {
                    type: "elem",
                    elem: base
                  }]
                }, options);
              } else if (sup) {
                var _bottom = base.depth + baseShift;

                finalGroup = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeVList({
                  positionType: "bottom",
                  positionData: _bottom,
                  children: [{
                    type: "elem",
                    elem: base
                  }, {
                    type: "kern",
                    size: sup.kern
                  }, {
                    type: "elem",
                    elem: sup.elem,
                    marginLeft: slant + "em"
                  }, {
                    type: "kern",
                    size: options.fontMetrics().bigOpSpacing5
                  }]
                }, options);
              } else {
                // This case probably shouldn't occur (this would mean the
                // supsub was sending us a group with no superscript or
                // subscript) but be safe.
                return base;
              }

              return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["mop", "op-limits"], [finalGroup], options);
            } else {
              if (baseShift) {
                base.style.position = "relative";
                base.style.top = baseShift + "em";
              }

              return base;
            }
          };

          var mathmlBuilder = function mathmlBuilder(group, options) {
            var node = void 0; // TODO(emily): handle big operators using the `largeop` attribute

            if (group.value.symbol) {
              // This is a symbol. Just add the symbol.
              node = new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
              /* default */
              ].MathNode("mo", [__WEBPACK_IMPORTED_MODULE_7__buildMathML__["e"
              /* makeText */
              ](group.value.body, group.mode)]);
            } else if (group.value.value) {
              // This is an operator with children. Add them.
              node = new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
              /* default */
              ].MathNode("mo", __WEBPACK_IMPORTED_MODULE_7__buildMathML__["a"
              /* buildExpression */
              ](group.value.value, options));
            } else {
              // This is a text operator. Add all of the characters from the
              // operator's name.
              // TODO(emily): Add a space in the middle of some of these
              // operators, like \limsup.
              node = new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
              /* default */
              ].MathNode("mi", [new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
              /* default */
              ].TextNode(group.value.body.slice(1))]); // Append an <mo>&ApplyFunction;</mo>.
              // ref: https://www.w3.org/TR/REC-MathML/chap3_2.html#sec3.2.4

              var operator = new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
              /* default */
              ].MathNode("mo", [__WEBPACK_IMPORTED_MODULE_7__buildMathML__["e"
              /* makeText */
              ]("\u2061", "text")]);
              return new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"
              /* default */
              ].documentFragment([node, operator]);
            }

            return node;
          };

          var singleCharBigOps = {
            "\u220F": "\\prod",
            "\u2210": "\\coprod",
            "\u2211": "\\sum",
            "\u22C0": "\\bigwedge",
            "\u22C1": "\\bigvee",
            "\u22C2": "\\bigcap",
            "\u22C3": "\\bigcap",
            "\u2A00": "\\bigodot",
            "\u2A01": "\\bigoplus",
            "\u2A02": "\\bigotimes",
            "\u2A04": "\\biguplus",
            "\u2A06": "\\bigsqcup"
          };
          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "op",
            names: ["\\coprod", "\\bigvee", "\\bigwedge", "\\biguplus", "\\bigcap", "\\bigcup", "\\intop", "\\prod", "\\sum", "\\bigotimes", "\\bigoplus", "\\bigodot", "\\bigsqcup", "\\smallint", "\u220F", "\u2210", "\u2211", "\u22C0", "\u22C1", "\u22C2", "\u22C3", "\u2A00", "\u2A01", "\u2A02", "\u2A04", "\u2A06"],
            props: {
              numArgs: 0
            },
            handler: function handler(context, args) {
              var fName = context.funcName;

              if (fName.length === 1) {
                fName = singleCharBigOps[fName];
              }

              return {
                type: "op",
                limits: true,
                symbol: true,
                body: fName
              };
            },
            htmlBuilder: htmlBuilder,
            mathmlBuilder: mathmlBuilder
          }); // Note: calling defineFunction with a type that's already been defined only
          // works because the same htmlBuilder and mathmlBuilder are being used.

          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "op",
            names: ["\\mathop"],
            props: {
              numArgs: 1
            },
            handler: function handler(context, args) {
              var body = args[0];
              return {
                type: "op",
                limits: false,
                symbol: false,
                value: Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"
                /* ordargument */
                ])(body)
              };
            },
            htmlBuilder: htmlBuilder,
            mathmlBuilder: mathmlBuilder
          });
          /***/
        },
        /* 127 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__ = __webpack_require__(18);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__domTree__ = __webpack_require__(12);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_6__buildMathML__ = __webpack_require__(2); // \operatorname
          // amsopn.dtx: \mathop{#1\kern\z@\operator@font#3}\newmcodes@


          Object(__WEBPACK_IMPORTED_MODULE_1__defineFunction__["b"
          /* default */
          ])({
            type: "operatorname",
            names: ["\\operatorname"],
            props: {
              numArgs: 1
            },
            handler: function handler(context, args) {
              var body = args[0];
              return {
                type: "operatorname",
                value: Object(__WEBPACK_IMPORTED_MODULE_1__defineFunction__["c"
                /* ordargument */
                ])(body)
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              var output = [];

              if (group.value.value.length > 0) {
                var letter = "";
                var mode = "";
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                  for (var _iterator = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(group.value.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var child = _step.value; // In the amsopn package, \newmcodes@ changes four
                    // characters, *-/:’, from math operators back into text.

                    if ("*-/:".indexOf(child.value) !== -1) {
                      child.type = "textord";
                    }
                  } // Consolidate Greek letter function names into symbol characters.

                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion && _iterator["return"]) {
                      _iterator["return"]();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }

                var temp = __WEBPACK_IMPORTED_MODULE_5__buildHTML__["a"
                /* buildExpression */
                ](group.value.value, options.withFontFamily("mathrm"), true); // All we want from temp are the letters. With them, we'll
                // create a text operator similar to \tan or \cos.


                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                  for (var _iterator2 = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(temp), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _child = _step2.value;

                    if (_child instanceof __WEBPACK_IMPORTED_MODULE_4__domTree__["a"
                    /* default */
                    ].symbolNode) {
                      letter = _child.value; // In the amsopn package, \newmcodes@ changes four
                      // characters, *-/:’, from math operators back into text.
                      // Given what is in temp, we have to address two of them.

                      letter = letter.replace(/\u2212/, "-"); // minus => hyphen

                      letter = letter.replace(/\u2217/, "*"); // Use math mode for Greek letters

                      mode = /[\u0391-\u03D7]/.test(letter) ? "math" : "text";
                      output.push(__WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"
                      /* default */
                      ].mathsym(letter, mode));
                    } else {
                      output.push(_child);
                    }
                  }
                } catch (err) {
                  _didIteratorError2 = true;
                  _iteratorError2 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
                      _iterator2["return"]();
                    }
                  } finally {
                    if (_didIteratorError2) {
                      throw _iteratorError2;
                    }
                  }
                }
              }

              return __WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"
              /* default */
              ].makeSpan(["mop"], output, options);
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              // The steps taken here are similar to the html version.
              var output = [];

              if (group.value.value.length > 0) {
                var temp = __WEBPACK_IMPORTED_MODULE_6__buildMathML__["a"
                /* buildExpression */
                ](group.value.value, options.withFontFamily("mathrm"));

                var word = temp.map(function (node) {
                  return node.toText();
                }).join("");
                word = word.replace(/\u2212/g, "-");
                word = word.replace(/\u2217/g, "*");
                output = [new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
                /* default */
                ].TextNode(word)];
              }

              var identifier = new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
              /* default */
              ].MathNode("mi", output);
              identifier.setAttribute("mathvariant", "normal"); // \u2061 is the same as &ApplyFunction;
              // ref: https://www.w3schools.com/charsets/ref_html_entities_a.asp

              var operator = new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
              /* default */
              ].MathNode("mo", [__WEBPACK_IMPORTED_MODULE_6__buildMathML__["e"
              /* makeText */
              ]("\u2061", "text")]);
              return new __WEBPACK_IMPORTED_MODULE_4__domTree__["a"
              /* default */
              ].documentFragment([identifier, operator]);
            }
          });
          /***/
        },
        /* 128 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__delimiter__ = __webpack_require__(44);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__Style__ = __webpack_require__(9);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_6__buildMathML__ = __webpack_require__(2);

          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "genfrac",
            names: ["\\dfrac", "\\frac", "\\tfrac", "\\dbinom", "\\binom", "\\tbinom", "\\\\atopfrac"],
            props: {
              numArgs: 2,
              greediness: 2
            },
            handler: function handler(context, args) {
              var numer = args[0];
              var denom = args[1];
              var hasBarLine = void 0;
              var leftDelim = null;
              var rightDelim = null;
              var size = "auto";

              switch (context.funcName) {
                case "\\dfrac":
                case "\\frac":
                case "\\tfrac":
                  hasBarLine = true;
                  break;

                case "\\\\atopfrac":
                  hasBarLine = false;
                  break;

                case "\\dbinom":
                case "\\binom":
                case "\\tbinom":
                  hasBarLine = false;
                  leftDelim = "(";
                  rightDelim = ")";
                  break;

                default:
                  throw new Error("Unrecognized genfrac command");
              }

              switch (context.funcName) {
                case "\\dfrac":
                case "\\dbinom":
                  size = "display";
                  break;

                case "\\tfrac":
                case "\\tbinom":
                  size = "text";
                  break;
              }

              return {
                type: "genfrac",
                numer: numer,
                denom: denom,
                hasBarLine: hasBarLine,
                leftDelim: leftDelim,
                rightDelim: rightDelim,
                size: size
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              // Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).
              // Figure out what style this fraction should be in based on the
              // function used
              var style = options.style;

              if (group.value.size === "display") {
                style = __WEBPACK_IMPORTED_MODULE_4__Style__["a"
                /* default */
                ].DISPLAY;
              } else if (group.value.size === "text") {
                style = __WEBPACK_IMPORTED_MODULE_4__Style__["a"
                /* default */
                ].TEXT;
              }

              var nstyle = style.fracNum();
              var dstyle = style.fracDen();
              var newOptions = void 0;
              newOptions = options.havingStyle(nstyle);

              var numerm = __WEBPACK_IMPORTED_MODULE_5__buildHTML__["b"
              /* buildGroup */
              ](group.value.numer, newOptions, options);

              newOptions = options.havingStyle(dstyle);

              var denomm = __WEBPACK_IMPORTED_MODULE_5__buildHTML__["b"
              /* buildGroup */
              ](group.value.denom, newOptions, options);

              var rule = void 0;
              var ruleWidth = void 0;
              var ruleSpacing = void 0;

              if (group.value.hasBarLine) {
                rule = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeLineSpan("frac-line", options);
                ruleWidth = rule.height;
                ruleSpacing = rule.height;
              } else {
                rule = null;
                ruleWidth = 0;
                ruleSpacing = options.fontMetrics().defaultRuleThickness;
              } // Rule 15b


              var numShift = void 0;
              var clearance = void 0;
              var denomShift = void 0;

              if (style.size === __WEBPACK_IMPORTED_MODULE_4__Style__["a"
              /* default */
              ].DISPLAY.size) {
                numShift = options.fontMetrics().num1;

                if (ruleWidth > 0) {
                  clearance = 3 * ruleSpacing;
                } else {
                  clearance = 7 * ruleSpacing;
                }

                denomShift = options.fontMetrics().denom1;
              } else {
                if (ruleWidth > 0) {
                  numShift = options.fontMetrics().num2;
                  clearance = ruleSpacing;
                } else {
                  numShift = options.fontMetrics().num3;
                  clearance = 3 * ruleSpacing;
                }

                denomShift = options.fontMetrics().denom2;
              }

              var frac = void 0;

              if (!rule) {
                // Rule 15c
                var candidateClearance = numShift - numerm.depth - (denomm.height - denomShift);

                if (candidateClearance < clearance) {
                  numShift += 0.5 * (clearance - candidateClearance);
                  denomShift += 0.5 * (clearance - candidateClearance);
                }

                frac = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeVList({
                  positionType: "individualShift",
                  children: [{
                    type: "elem",
                    elem: denomm,
                    shift: denomShift
                  }, {
                    type: "elem",
                    elem: numerm,
                    shift: -numShift
                  }]
                }, options);
              } else {
                // Rule 15d
                var axisHeight = options.fontMetrics().axisHeight;

                if (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth) < clearance) {
                  numShift += clearance - (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth));
                }

                if (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift) < clearance) {
                  denomShift += clearance - (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift));
                }

                var midShift = -(axisHeight - 0.5 * ruleWidth);
                frac = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeVList({
                  positionType: "individualShift",
                  children: [{
                    type: "elem",
                    elem: denomm,
                    shift: denomShift
                  }, // The next line would ordinarily contain "shift: midShift".
                  // But we put the rule into a a span that is 5 rules tall,
                  // to overcome a Chrome rendering issue. Put another way,
                  // we've replaced a kern of width = 2 * ruleWidth with a
                  // bottom padding inside the SVG = 2 * ruleWidth.
                  {
                    type: "elem",
                    elem: rule,
                    shift: midShift + 2 * ruleWidth
                  }, {
                    type: "elem",
                    elem: numerm,
                    shift: -numShift
                  }]
                }, options);
              } // Since we manually change the style sometimes (with \dfrac or \tfrac),
              // account for the possible size change here.


              newOptions = options.havingStyle(style);
              frac.height *= newOptions.sizeMultiplier / options.sizeMultiplier;
              frac.depth *= newOptions.sizeMultiplier / options.sizeMultiplier; // Rule 15e

              var delimSize = void 0;

              if (style.size === __WEBPACK_IMPORTED_MODULE_4__Style__["a"
              /* default */
              ].DISPLAY.size) {
                delimSize = options.fontMetrics().delim1;
              } else {
                delimSize = options.fontMetrics().delim2;
              }

              var leftDelim = void 0;
              var rightDelim = void 0;

              if (group.value.leftDelim == null) {
                leftDelim = __WEBPACK_IMPORTED_MODULE_5__buildHTML__["e"
                /* makeNullDelimiter */
                ](options, ["mopen"]);
              } else {
                leftDelim = __WEBPACK_IMPORTED_MODULE_2__delimiter__["a"
                /* default */
                ].customSizedDelim(group.value.leftDelim, delimSize, true, options.havingStyle(style), group.mode, ["mopen"]);
              }

              if (group.value.rightDelim == null) {
                rightDelim = __WEBPACK_IMPORTED_MODULE_5__buildHTML__["e"
                /* makeNullDelimiter */
                ](options, ["mclose"]);
              } else {
                rightDelim = __WEBPACK_IMPORTED_MODULE_2__delimiter__["a"
                /* default */
                ].customSizedDelim(group.value.rightDelim, delimSize, true, options.havingStyle(style), group.mode, ["mclose"]);
              }

              return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["mord"].concat(newOptions.sizingClasses(options)), [leftDelim, __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["mfrac"], [frac]), rightDelim], options);
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              var node = new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
              /* default */
              ].MathNode("mfrac", [__WEBPACK_IMPORTED_MODULE_6__buildMathML__["b"
              /* buildGroup */
              ](group.value.numer, options), __WEBPACK_IMPORTED_MODULE_6__buildMathML__["b"
              /* buildGroup */
              ](group.value.denom, options)]);

              if (!group.value.hasBarLine) {
                node.setAttribute("linethickness", "0px");
              }

              if (group.value.leftDelim != null || group.value.rightDelim != null) {
                var withDelims = [];

                if (group.value.leftDelim != null) {
                  var leftOp = new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
                  /* default */
                  ].MathNode("mo", [new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
                  /* default */
                  ].TextNode(group.value.leftDelim)]);
                  leftOp.setAttribute("fence", "true");
                  withDelims.push(leftOp);
                }

                withDelims.push(node);

                if (group.value.rightDelim != null) {
                  var rightOp = new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
                  /* default */
                  ].MathNode("mo", [new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
                  /* default */
                  ].TextNode(group.value.rightDelim)]);
                  rightOp.setAttribute("fence", "true");
                  withDelims.push(rightOp);
                }

                var outerNode = new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
                /* default */
                ].MathNode("mrow", withDelims);
                return outerNode;
              }

              return node;
            }
          });
          /***/
        },
        /* 129 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__buildMathML__ = __webpack_require__(2); // Horizontal overlap functions


          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "lap",
            names: ["\\mathllap", "\\mathrlap", "\\mathclap"],
            props: {
              numArgs: 1,
              allowedInText: true
            },
            handler: function handler(context, args) {
              var body = args[0];
              return {
                type: "lap",
                alignment: context.funcName.slice(5),
                body: body
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              // mathllap, mathrlap, mathclap
              var inner = void 0;

              if (group.value.alignment === "clap") {
                // ref: https://www.math.lsu.edu/~aperlis/publications/mathclap/
                inner = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeSpan([], [__WEBPACK_IMPORTED_MODULE_3__buildHTML__["b"
                /* buildGroup */
                ](group.value.body, options)]); // wrap, since CSS will center a .clap > .inner > span

                inner = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeSpan(["inner"], [inner], options);
              } else {
                inner = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeSpan(["inner"], [__WEBPACK_IMPORTED_MODULE_3__buildHTML__["b"
                /* buildGroup */
                ](group.value.body, options)]);
              }

              var fix = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["fix"], []);

              return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["mord", group.value.alignment], [inner, fix], options);
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              // mathllap, mathrlap, mathclap
              var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mpadded", [__WEBPACK_IMPORTED_MODULE_4__buildMathML__["b"
              /* buildGroup */
              ](group.value.body, options)]);

              if (group.value.alignment !== "rlap") {
                var offset = group.value.alignment === "llap" ? "-1" : "-0.5";
                node.setAttribute("lspace", offset + "width");
              }

              node.setAttribute("width", "0px");
              return node;
            }
          });
          /***/
        },
        /* 130 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__buildMathML__ = __webpack_require__(2); // smash, with optional [tb], as in AMS


          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "smash",
            names: ["\\smash"],
            props: {
              numArgs: 1,
              numOptionalArgs: 1,
              allowedInText: true
            },
            handler: function handler(context, args, optArgs) {
              var smashHeight = false;
              var smashDepth = false;
              var tbArg = optArgs[0];

              if (tbArg) {
                // Optional [tb] argument is engaged.
                // ref: amsmath: \renewcommand{\smash}[1][tb]{%
                //               def\mb@t{\ht}\def\mb@b{\dp}\def\mb@tb{\ht\z@\z@\dp}%
                var letter = "";

                for (var i = 0; i < tbArg.value.length; ++i) {
                  letter = tbArg.value[i].value;

                  if (letter === "t") {
                    smashHeight = true;
                  } else if (letter === "b") {
                    smashDepth = true;
                  } else {
                    smashHeight = false;
                    smashDepth = false;
                    break;
                  }
                }
              } else {
                smashHeight = true;
                smashDepth = true;
              }

              var body = args[0];
              return {
                type: "smash",
                body: body,
                smashHeight: smashHeight,
                smashDepth: smashDepth
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              var node = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["mord"], [__WEBPACK_IMPORTED_MODULE_3__buildHTML__["b"
              /* buildGroup */
              ](group.value.body, options)]);

              if (!group.value.smashHeight && !group.value.smashDepth) {
                return node;
              }

              if (group.value.smashHeight) {
                node.height = 0; // In order to influence makeVList, we have to reset the children.

                if (node.children) {
                  for (var i = 0; i < node.children.length; i++) {
                    node.children[i].height = 0;
                  }
                }
              }

              if (group.value.smashDepth) {
                node.depth = 0;

                if (node.children) {
                  for (var _i = 0; _i < node.children.length; _i++) {
                    node.children[_i].depth = 0;
                  }
                }
              } // At this point, we've reset the TeX-like height and depth values.
              // But the span still has an HTML line height.
              // makeVList applies "display: table-cell", which prevents the browser
              // from acting on that line height. So we'll call makeVList now.


              return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeVList({
                positionType: "firstBaseline",
                children: [{
                  type: "elem",
                  elem: node
                }]
              }, options);
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mpadded", [__WEBPACK_IMPORTED_MODULE_4__buildMathML__["b"
              /* buildGroup */
              ](group.value.body, options)]);

              if (group.value.smashHeight) {
                node.setAttribute("height", "0px");
              }

              if (group.value.smashDepth) {
                node.setAttribute("depth", "0px");
              }

              return node;
            }
          });
          /***/
        },
        /* 131 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__delimiter__ = __webpack_require__(44);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__ParseError__ = __webpack_require__(6);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__utils__ = __webpack_require__(5);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_6__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_7__buildMathML__ = __webpack_require__(2); // Extra data needed for the delimiter handler down below


          var delimiterSizes = {
            "\\bigl": {
              mclass: "mopen",
              size: 1
            },
            "\\Bigl": {
              mclass: "mopen",
              size: 2
            },
            "\\biggl": {
              mclass: "mopen",
              size: 3
            },
            "\\Biggl": {
              mclass: "mopen",
              size: 4
            },
            "\\bigr": {
              mclass: "mclose",
              size: 1
            },
            "\\Bigr": {
              mclass: "mclose",
              size: 2
            },
            "\\biggr": {
              mclass: "mclose",
              size: 3
            },
            "\\Biggr": {
              mclass: "mclose",
              size: 4
            },
            "\\bigm": {
              mclass: "mrel",
              size: 1
            },
            "\\Bigm": {
              mclass: "mrel",
              size: 2
            },
            "\\biggm": {
              mclass: "mrel",
              size: 3
            },
            "\\Biggm": {
              mclass: "mrel",
              size: 4
            },
            "\\big": {
              mclass: "mord",
              size: 1
            },
            "\\Big": {
              mclass: "mord",
              size: 2
            },
            "\\bigg": {
              mclass: "mord",
              size: 3
            },
            "\\Bigg": {
              mclass: "mord",
              size: 4
            }
          };
          var delimiters = ["(", ")", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\\lceil", "\\rceil", "<", ">", "\\langle", "\u27E8", "\\rangle", "\u27E9", "\\lt", "\\gt", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\\lmoustache", "\\rmoustache", "/", "\\backslash", "|", "\\vert", "\\|", "\\Vert", "\\uparrow", "\\Uparrow", "\\downarrow", "\\Downarrow", "\\updownarrow", "\\Updownarrow", "."]; // Delimiter functions

          function checkDelimiter(delim, context) {
            if (__WEBPACK_IMPORTED_MODULE_5__utils__["a"
            /* default */
            ].contains(delimiters, delim.value)) {
              return delim;
            } else {
              throw new __WEBPACK_IMPORTED_MODULE_4__ParseError__["a"
              /* default */
              ]("Invalid delimiter: '" + delim.value + "' after '" + context.funcName + "'", delim);
            }
          }

          Object(__WEBPACK_IMPORTED_MODULE_1__defineFunction__["b"
          /* default */
          ])({
            type: "delimsizing",
            names: ["\\bigl", "\\Bigl", "\\biggl", "\\Biggl", "\\bigr", "\\Bigr", "\\biggr", "\\Biggr", "\\bigm", "\\Bigm", "\\biggm", "\\Biggm", "\\big", "\\Big", "\\bigg", "\\Bigg"],
            props: {
              numArgs: 1
            },
            handler: function handler(context, args) {
              var delim = checkDelimiter(args[0], context);
              return {
                type: "delimsizing",
                size: delimiterSizes[context.funcName].size,
                mclass: delimiterSizes[context.funcName].mclass,
                value: delim.value
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              var delim = group.value.value;

              if (delim === ".") {
                // Empty delimiters still count as elements, even though they don't
                // show anything.
                return __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"
                /* default */
                ].makeSpan([group.value.mclass]);
              } // Use delimiter.sizedDelim to generate the delimiter.


              return __WEBPACK_IMPORTED_MODULE_2__delimiter__["a"
              /* default */
              ].sizedDelim(delim, group.value.size, options, group.mode, [group.value.mclass]);
            },
            mathmlBuilder: function mathmlBuilder(group) {
              var children = [];

              if (group.value.value !== ".") {
                children.push(__WEBPACK_IMPORTED_MODULE_7__buildMathML__["e"
                /* makeText */
                ](group.value.value, group.mode));
              }

              var node = new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
              /* default */
              ].MathNode("mo", children);

              if (group.value.mclass === "mopen" || group.value.mclass === "mclose") {
                // Only some of the delimsizing functions act as fences, and they
                // return "mopen" or "mclose" mclass.
                node.setAttribute("fence", "true");
              } else {
                // Explicitly disable fencing if it's not a fence, to override the
                // defaults.
                node.setAttribute("fence", "false");
              }

              return node;
            }
          });
          Object(__WEBPACK_IMPORTED_MODULE_1__defineFunction__["b"
          /* default */
          ])({
            type: "leftright",
            names: ["\\left", "\\right"],
            props: {
              numArgs: 1
            },
            handler: function handler(context, args) {
              var delim = checkDelimiter(args[0], context);

              if (context.funcName === "\\left") {
                var parser = context.parser; // Parse out the implicit body

                ++parser.leftrightDepth; // parseExpression stops before '\\right'

                var body = parser.parseExpression(false);
                --parser.leftrightDepth; // Check the next token

                parser.expect("\\right", false);
                var right = parser.parseFunction();

                if (!right) {
                  throw new __WEBPACK_IMPORTED_MODULE_4__ParseError__["a"
                  /* default */
                  ]('failed to parse function after \\right');
                }

                return {
                  type: "leftright",
                  body: body,
                  left: delim.value,
                  right: right.value.value
                };
              } else {
                // This is a little weird. We return this object which gets turned
                // into a ParseNode which gets returned by
                // `const right = parser.parseFunction();` up above.
                return {
                  type: "leftright",
                  value: delim.value
                };
              }
            },
            htmlBuilder: function htmlBuilder(group, options) {
              // Build the inner expression
              var inner = __WEBPACK_IMPORTED_MODULE_6__buildHTML__["a"
              /* buildExpression */
              ](group.value.body, options, true, [null, "mclose"]);

              var innerHeight = 0;
              var innerDepth = 0;
              var hadMiddle = false; // Calculate its height and depth

              for (var i = 0; i < inner.length; i++) {
                if (inner[i].isMiddle) {
                  hadMiddle = true;
                } else {
                  innerHeight = Math.max(inner[i].height, innerHeight);
                  innerDepth = Math.max(inner[i].depth, innerDepth);
                }
              } // The size of delimiters is the same, regardless of what style we are
              // in. Thus, to correctly calculate the size of delimiter we need around
              // a group, we scale down the inner size based on the size.


              innerHeight *= options.sizeMultiplier;
              innerDepth *= options.sizeMultiplier;
              var leftDelim = void 0;

              if (group.value.left === ".") {
                // Empty delimiters in \left and \right make null delimiter spaces.
                leftDelim = __WEBPACK_IMPORTED_MODULE_6__buildHTML__["e"
                /* makeNullDelimiter */
                ](options, ["mopen"]);
              } else {
                // Otherwise, use leftRightDelim to generate the correct sized
                // delimiter.
                leftDelim = __WEBPACK_IMPORTED_MODULE_2__delimiter__["a"
                /* default */
                ].leftRightDelim(group.value.left, innerHeight, innerDepth, options, group.mode, ["mopen"]);
              } // Add it to the beginning of the expression


              inner.unshift(leftDelim); // Handle middle delimiters

              if (hadMiddle) {
                for (var _i = 1; _i < inner.length; _i++) {
                  var middleDelim = inner[_i];

                  if (middleDelim.isMiddle) {
                    // Apply the options that were active when \middle was called
                    inner[_i] = __WEBPACK_IMPORTED_MODULE_2__delimiter__["a"
                    /* default */
                    ].leftRightDelim(middleDelim.isMiddle.value, innerHeight, innerDepth, middleDelim.isMiddle.options, group.mode, []);
                  }
                }
              }

              var rightDelim = void 0; // Same for the right delimiter

              if (group.value.right === ".") {
                rightDelim = __WEBPACK_IMPORTED_MODULE_6__buildHTML__["e"
                /* makeNullDelimiter */
                ](options, ["mclose"]);
              } else {
                rightDelim = __WEBPACK_IMPORTED_MODULE_2__delimiter__["a"
                /* default */
                ].leftRightDelim(group.value.right, innerHeight, innerDepth, options, group.mode, ["mclose"]);
              } // Add it to the end of the expression.


              inner.push(rightDelim);
              return __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"
              /* default */
              ].makeSpan(["minner"], inner, options);
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              var inner = __WEBPACK_IMPORTED_MODULE_7__buildMathML__["a"
              /* buildExpression */
              ](group.value.body, options);

              if (group.value.left !== ".") {
                var leftNode = new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
                /* default */
                ].MathNode("mo", [__WEBPACK_IMPORTED_MODULE_7__buildMathML__["e"
                /* makeText */
                ](group.value.left, group.mode)]);
                leftNode.setAttribute("fence", "true");
                inner.unshift(leftNode);
              }

              if (group.value.right !== ".") {
                var rightNode = new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
                /* default */
                ].MathNode("mo", [__WEBPACK_IMPORTED_MODULE_7__buildMathML__["e"
                /* makeText */
                ](group.value.right, group.mode)]);
                rightNode.setAttribute("fence", "true");
                inner.push(rightNode);
              }

              var outerNode = new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
              /* default */
              ].MathNode("mrow", inner);
              return outerNode;
            }
          });
          Object(__WEBPACK_IMPORTED_MODULE_1__defineFunction__["b"
          /* default */
          ])({
            type: "middle",
            names: ["\\middle"],
            props: {
              numArgs: 1
            },
            handler: function handler(context, args) {
              var delim = checkDelimiter(args[0], context);

              if (!context.parser.leftrightDepth) {
                throw new __WEBPACK_IMPORTED_MODULE_4__ParseError__["a"
                /* default */
                ]("\\middle without preceding \\left", delim);
              }

              return {
                type: "middle",
                value: delim.value
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              var middleDelim = void 0;

              if (group.value.value === ".") {
                middleDelim = __WEBPACK_IMPORTED_MODULE_6__buildHTML__["e"
                /* makeNullDelimiter */
                ](options, []);
              } else {
                middleDelim = __WEBPACK_IMPORTED_MODULE_2__delimiter__["a"
                /* default */
                ].sizedDelim(group.value.value, 1, options, group.mode, []);
                middleDelim.isMiddle = {
                  value: group.value.value,
                  options: options
                };
              }

              return middleDelim;
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              var middleNode = new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"
              /* default */
              ].MathNode("mo", [__WEBPACK_IMPORTED_MODULE_7__buildMathML__["e"
              /* makeText */
              ](group.value.middle, group.mode)]);
              middleNode.setAttribute("fence", "true");
              return middleNode;
            }
          });
          /***/
        },
        /* 132 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__Style__ = __webpack_require__(9);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__sizing__ = __webpack_require__(60);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__buildMathML__ = __webpack_require__(2);

          var styleMap = {
            "display": __WEBPACK_IMPORTED_MODULE_2__Style__["a"
            /* default */
            ].DISPLAY,
            "text": __WEBPACK_IMPORTED_MODULE_2__Style__["a"
            /* default */
            ].TEXT,
            "script": __WEBPACK_IMPORTED_MODULE_2__Style__["a"
            /* default */
            ].SCRIPT,
            "scriptscript": __WEBPACK_IMPORTED_MODULE_2__Style__["a"
            /* default */
            ].SCRIPTSCRIPT
          };
          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "styling",
            names: ["\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"],
            props: {
              numArgs: 0,
              allowedInText: true
            },
            handler: function handler(context, args) {
              var breakOnTokenText = context.breakOnTokenText,
                  funcName = context.funcName,
                  parser = context.parser; // parse out the implicit body

              parser.consumeSpaces();
              var body = parser.parseExpression(true, breakOnTokenText);
              return {
                type: "styling",
                // Figure out what style to use by pulling out the style from
                // the function name
                style: funcName.slice(1, funcName.length - 5),
                value: body
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              // Style changes are handled in the TeXbook on pg. 442, Rule 3.
              var newStyle = styleMap[group.value.style];
              var newOptions = options.havingStyle(newStyle);
              return Object(__WEBPACK_IMPORTED_MODULE_3__sizing__["a"
              /* sizingGroup */
              ])(group.value.value, newOptions, options);
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              // Figure out what style we're changing to.
              // TODO(kevinb): dedupe this with buildHTML.js
              // This will be easier of handling of styling nodes is in the same file.
              var styleMap = {
                "display": __WEBPACK_IMPORTED_MODULE_2__Style__["a"
                /* default */
                ].DISPLAY,
                "text": __WEBPACK_IMPORTED_MODULE_2__Style__["a"
                /* default */
                ].TEXT,
                "script": __WEBPACK_IMPORTED_MODULE_2__Style__["a"
                /* default */
                ].SCRIPT,
                "scriptscript": __WEBPACK_IMPORTED_MODULE_2__Style__["a"
                /* default */
                ].SCRIPTSCRIPT
              };
              var newStyle = styleMap[group.value.style];
              var newOptions = options.havingStyle(newStyle);

              var inner = __WEBPACK_IMPORTED_MODULE_4__buildMathML__["a"
              /* buildExpression */
              ](group.value.value, newOptions);

              var node = new __WEBPACK_IMPORTED_MODULE_1__mathMLTree__["a"
              /* default */
              ].MathNode("mstyle", inner);
              var styleAttributes = {
                "display": ["0", "true"],
                "text": ["0", "false"],
                "script": ["1", "false"],
                "scriptscript": ["2", "false"]
              };
              var attr = styleAttributes[group.value.style];
              node.setAttribute("scriptlevel", attr[0]);
              node.setAttribute("displaystyle", attr[1]);
              return node;
            }
          });
          /***/
        },
        /* 133 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys__ = __webpack_require__(134);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__ParseNode__ = __webpack_require__(14);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__buildMathML__ = __webpack_require__(2); // TODO(kevinb): implement \\sl and \\sc


          var htmlBuilder = function htmlBuilder(group, options) {
            var font = group.value.font;
            return __WEBPACK_IMPORTED_MODULE_3__buildHTML__["b"
            /* buildGroup */
            ](group.value.body, options.withFontFamily(font));
          };

          var mathmlBuilder = function mathmlBuilder(group, options) {
            var font = group.value.font;
            return __WEBPACK_IMPORTED_MODULE_4__buildMathML__["b"
            /* buildGroup */
            ](group.value.body, options.withFontFamily(font));
          };

          var fontAliases = {
            "\\Bbb": "\\mathbb",
            "\\bold": "\\mathbf",
            "\\frak": "\\mathfrak",
            "\\bm": "\\boldsymbol"
          };
          Object(__WEBPACK_IMPORTED_MODULE_1__defineFunction__["b"
          /* default */
          ])({
            type: "font",
            names: [// styles
            "\\mathrm", "\\mathit", "\\mathbf", "\\boldsymbol", // families
            "\\mathbb", "\\mathcal", "\\mathfrak", "\\mathscr", "\\mathsf", "\\mathtt", // aliases
            "\\Bbb", "\\bold", "\\frak", "\\bm"],
            props: {
              numArgs: 1,
              greediness: 2
            },
            handler: function handler(context, args) {
              var body = args[0];
              var func = context.funcName;

              if (func in fontAliases) {
                func = fontAliases[func];
              }

              return {
                type: "font",
                font: func.slice(1),
                body: body
              };
            },
            htmlBuilder: htmlBuilder,
            mathmlBuilder: mathmlBuilder
          });
          var oldFontFuncsMap = {
            "\\rm": "mathrm",
            "\\sf": "mathsf",
            "\\tt": "mathtt",
            "\\bf": "mathbf",
            "\\it": "mathit"
          }; // Old font changing functions

          Object(__WEBPACK_IMPORTED_MODULE_1__defineFunction__["b"
          /* default */
          ])({
            type: "font",
            names: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys___default()(oldFontFuncsMap),
            props: {
              numArgs: 0,
              allowedInText: true
            },
            handler: function handler(context, args) {
              var parser = context.parser,
                  funcName = context.funcName,
                  breakOnTokenText = context.breakOnTokenText;
              parser.consumeSpaces();
              var body = parser.parseExpression(true, breakOnTokenText);
              var style = oldFontFuncsMap[funcName];
              return {
                type: "font",
                font: style,
                body: new __WEBPACK_IMPORTED_MODULE_2__ParseNode__["a"
                /* default */
                ]("ordgroup", body, parser.mode)
              };
            },
            htmlBuilder: htmlBuilder,
            mathmlBuilder: mathmlBuilder
          });
          /***/
        },
        /* 134 */

        /***/
        function (module, exports, __webpack_require__) {
          module.exports = {
            "default": __webpack_require__(135),
            __esModule: true
          };
          /***/
        },
        /* 135 */

        /***/
        function (module, exports, __webpack_require__) {
          __webpack_require__(136);

          module.exports = __webpack_require__(8).Object.keys;
          /***/
        },
        /* 136 */

        /***/
        function (module, exports, __webpack_require__) {
          // 19.1.2.14 Object.keys(O)
          var toObject = __webpack_require__(29),
              $keys = __webpack_require__(39);

          __webpack_require__(46)('keys', function () {
            return function keys(it) {
              return $keys(toObject(it));
            };
          });
          /***/

        },
        /* 137 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(5);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__stretchy__ = __webpack_require__(13);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_6__buildMathML__ = __webpack_require__(2);

          var htmlBuilder = function htmlBuilder(group, options) {
            // Accents are handled in the TeXbook pg. 443, rule 12.
            var base = group.value.base;
            var supsubGroup = void 0;

            if (group.type === "supsub") {
              // If our base is a character box, and we have superscripts and
              // subscripts, the supsub will defer to us. In particular, we want
              // to attach the superscripts and subscripts to the inner body (so
              // that the position of the superscripts and subscripts won't be
              // affected by the height of the accent). We accomplish this by
              // sticking the base of the accent into the base of the supsub, and
              // rendering that, while keeping track of where the accent is.
              // The supsub group is the group that was passed in
              var supsub = group; // The real accent group is the base of the supsub group

              group = supsub.value.base; // The character box is the base of the accent group

              base = group.value.base; // Stick the character box into the base of the supsub group

              supsub.value.base = base; // Rerender the supsub group with its new base, and store that
              // result.

              supsubGroup = __WEBPACK_IMPORTED_MODULE_5__buildHTML__["b"
              /* buildGroup */
              ](supsub, options);
            } // Build the base group


            var body = __WEBPACK_IMPORTED_MODULE_5__buildHTML__["b"
            /* buildGroup */
            ](base, options.havingCrampedStyle()); // Does the accent need to shift for the skew of a character?


            var mustShift = group.value.isShifty && __WEBPACK_IMPORTED_MODULE_3__utils__["a"
            /* default */
            ].isCharacterBox(base); // Calculate the skew of the accent. This is based on the line "If the
            // nucleus is not a single character, let s = 0; otherwise set s to the
            // kern amount for the nucleus followed by the \skewchar of its font."
            // Note that our skew metrics are just the kern between each character
            // and the skewchar.


            var skew = 0;

            if (mustShift) {
              // If the base is a character box, then we want the skew of the
              // innermost character. To do that, we find the innermost character:
              var baseChar = __WEBPACK_IMPORTED_MODULE_3__utils__["a"
              /* default */
              ].getBaseElem(base); // Then, we render its group to get the symbol inside it


              var baseGroup = __WEBPACK_IMPORTED_MODULE_5__buildHTML__["b"
              /* buildGroup */
              ](baseChar, options.havingCrampedStyle()); // Finally, we pull the skew off of the symbol.


              skew = baseGroup.skew; // Note that we now throw away baseGroup, because the layers we
              // removed with getBaseElem might contain things like \color which
              // we can't get rid of.
              // TODO(emily): Find a better way to get the skew
            } // calculate the amount of space between the body and the accent


            var clearance = Math.min(body.height, options.fontMetrics().xHeight); // Build the accent

            var accentBody = void 0;

            if (!group.value.isStretchy) {
              var accent = void 0;
              var width = void 0;

              if (group.value.label === "\\vec") {
                // Before version 0.9, \vec used the combining font glyph U+20D7.
                // But browsers, especially Safari, are not consistent in how they
                // render combining characters when not preceded by a character.
                // So now we use an SVG.
                // If Safari reforms, we should consider reverting to the glyph.
                accent = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].staticSvg("vec", options);
                width = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].svgData.vec[1];
              } else {
                accent = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                /* default */
                ].makeSymbol(group.value.label, "Main-Regular", group.mode, options); // Remove the italic correction of the accent, because it only serves to
                // shift the accent over to a place we don't want.

                accent.italic = 0;
                width = accent.width;
              }

              accentBody = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["accent-body"], [accent]); // CSS defines `.katex .accent .accent-body { width: 0 }`
              // so that the accent doesn't contribute to the bounding box.
              // We need to shift the character by its width (effectively half
              // its width) to compensate.

              var left = -width / 2; // Shift the accent over by the skew.

              left += skew;
              accentBody.style.left = left + "em";
              accentBody = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeVList({
                positionType: "firstBaseline",
                children: [{
                  type: "elem",
                  elem: body
                }, {
                  type: "kern",
                  size: -clearance
                }, {
                  type: "elem",
                  elem: accentBody
                }]
              }, options);
            } else {
              accentBody = __WEBPACK_IMPORTED_MODULE_4__stretchy__["a"
              /* default */
              ].svgSpan(group, options);
              accentBody = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeVList({
                positionType: "firstBaseline",
                children: [{
                  type: "elem",
                  elem: body
                }, {
                  type: "elem",
                  elem: accentBody,
                  wrapperClasses: ["svg-align"],
                  wrapperStyle: skew > 0 ? {
                    width: "calc(100% - " + 2 * skew + "em)",
                    marginLeft: 2 * skew + "em"
                  } : undefined
                }]
              }, options);
            }

            var accentWrap = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
            /* default */
            ].makeSpan(["mord", "accent"], [accentBody], options);

            if (supsubGroup) {
              // Here, we replace the "base" child of the supsub with our newly
              // generated accent.
              supsubGroup.children[0] = accentWrap; // Since we don't rerun the height calculation after replacing the
              // accent, we manually recalculate height.

              supsubGroup.height = Math.max(accentWrap.height, supsubGroup.height); // Accents should always be ords, even when their innards are not.

              supsubGroup.classes[0] = "mord";
              return supsubGroup;
            } else {
              return accentWrap;
            }
          };

          var mathmlBuilder = function mathmlBuilder(group, options) {
            var accentNode = void 0;

            if (group.value.isStretchy) {
              accentNode = __WEBPACK_IMPORTED_MODULE_4__stretchy__["a"
              /* default */
              ].mathMLnode(group.value.label);
            } else {
              accentNode = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mo", [__WEBPACK_IMPORTED_MODULE_6__buildMathML__["e"
              /* makeText */
              ](group.value.label, group.mode)]);
            }

            var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode("mover", [__WEBPACK_IMPORTED_MODULE_6__buildMathML__["b"
            /* buildGroup */
            ](group.value.base, options), accentNode]);
            node.setAttribute("accent", "true");
            return node;
          };

          var NON_STRETCHY_ACCENT_REGEX = new RegExp(["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring"].map(function (accent) {
            return "\\" + accent;
          }).join("|")); // Accents

          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "accent",
            names: ["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring", "\\widehat", "\\widetilde", "\\overrightarrow", "\\overleftarrow", "\\Overrightarrow", "\\overleftrightarrow", "\\overgroup", "\\overlinesegment", "\\overleftharpoon", "\\overrightharpoon"],
            props: {
              numArgs: 1
            },
            handler: function handler(context, args) {
              var base = args[0];
              var isStretchy = !NON_STRETCHY_ACCENT_REGEX.test(context.funcName);
              var isShifty = !isStretchy || context.funcName === "\\widehat" || context.funcName === "\\widetilde";
              return {
                type: "accent",
                label: context.funcName,
                isStretchy: isStretchy,
                isShifty: isShifty,
                base: base
              };
            },
            htmlBuilder: htmlBuilder,
            mathmlBuilder: mathmlBuilder
          }); // Text-mode accents

          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "accent",
            names: ["\\'", "\\`", "\\^", "\\~", "\\=", "\\u", "\\.", '\\"', "\\r", "\\H", "\\v"],
            props: {
              numArgs: 1,
              allowedInText: true,
              allowedInMath: false
            },
            handler: function handler(context, args) {
              var base = args[0];
              return {
                type: "accent",
                label: context.funcName,
                isStretchy: false,
                isShifty: true,
                base: base
              };
            },
            htmlBuilder: htmlBuilder,
            mathmlBuilder: mathmlBuilder
          });
          /***/
        },
        /* 138 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__stretchy__ = __webpack_require__(13);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__buildMathML__ = __webpack_require__(2); // Horizontal overlap functions


          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "accentUnder",
            names: ["\\underleftarrow", "\\underrightarrow", "\\underleftrightarrow", "\\undergroup", "\\underlinesegment", "\\utilde"],
            props: {
              numArgs: 1
            },
            handler: function handler(context, args) {
              var base = args[0];
              return {
                type: "accentUnder",
                label: context.funcName,
                base: base
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              // Treat under accents much like underlines.
              var innerGroup = __WEBPACK_IMPORTED_MODULE_4__buildHTML__["b"
              /* buildGroup */
              ](group.value.base, options);

              var accentBody = __WEBPACK_IMPORTED_MODULE_3__stretchy__["a"
              /* default */
              ].svgSpan(group, options);

              var kern = group.value.label === "\\utilde" ? 0.12 : 0; // Generate the vlist, with the appropriate kerns

              var vlist = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeVList({
                positionType: "bottom",
                positionData: accentBody.height + kern,
                children: [{
                  type: "elem",
                  elem: accentBody,
                  wrapperClasses: ["svg-align"]
                }, {
                  type: "kern",
                  size: kern
                }, {
                  type: "elem",
                  elem: innerGroup
                }]
              }, options);

              return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["mord", "accentunder"], [vlist], options);
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              var accentNode = __WEBPACK_IMPORTED_MODULE_3__stretchy__["a"
              /* default */
              ].mathMLnode(group.value.label);

              var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("munder", [__WEBPACK_IMPORTED_MODULE_5__buildMathML__["b"
              /* buildGroup */
              ](group.value.body, options), accentNode]);
              node.setAttribute("accentunder", "true");
              return node;
            }
          });
          /***/
        },
        /* 139 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__ParseError__ = __webpack_require__(6);

          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "verb",
            names: ["\\verb"],
            props: {
              numArgs: 0,
              allowedInText: true
            },
            handler: function handler(context, args, optArgs) {
              // \verb and \verb* are dealt with directly in Parser.js.
              // If we end up here, it's because of a failure to match the two delimiters
              // in the regex in Lexer.js.  LaTeX raises the following error when \verb is
              // terminated by end of line (or file).
              throw new __WEBPACK_IMPORTED_MODULE_3__ParseError__["a"
              /* default */
              ]("\\verb ended by end of line instead of matching delimiter");
            },
            htmlBuilder: function htmlBuilder(group, options) {
              var text = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeVerb(group, options);

              var body = []; // \verb enters text mode and therefore is sized like \textstyle

              var newOptions = options.havingStyle(options.style.text());

              for (var i = 0; i < text.length; i++) {
                if (text[i] === '\xA0') {
                  // spaces appear as nonbreaking space
                  // The space character isn't in the Typewriter-Regular font,
                  // so we implement it as a kern of the same size as a character.
                  // 0.525 is the width of a texttt character in LaTeX.
                  // It automatically gets scaled by the font size.
                  var rule = __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                  /* default */
                  ].makeSpan(["mord", "rule"], [], newOptions);

                  rule.style.marginLeft = "0.525em";
                  body.push(rule);
                } else {
                  body.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
                  /* default */
                  ].makeSymbol(text[i], "Typewriter-Regular", group.mode, newOptions, ["mathtt"]));
                }
              }

              __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].tryCombineChars(body);

              return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeSpan(["mord", "text"].concat(newOptions.sizingClasses(options)), // tryCombinChars expects CombinableDomNode[] while makeSpan expects
              // DomChildNode[].
              // $FlowFixMe: CombinableDomNode[] is not compatible with DomChildNode[]
              body, newOptions);
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              var text = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].TextNode(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeVerb(group, options));
              var node = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mtext", [text]);
              node.setAttribute("mathvariant", __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].fontMap["mathtt"].variant);
              return node;
            }
          });
          /***/
        },
        /* 140 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__buildMathML__ = __webpack_require__(2);

          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "href",
            names: ["\\href"],
            props: {
              numArgs: 2,
              argTypes: ["url", "original"]
            },
            handler: function handler(context, args) {
              var body = args[1];
              var href = args[0].value;
              return {
                type: "href",
                href: href,
                body: Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"
                /* ordargument */
                ])(body)
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              var elements = __WEBPACK_IMPORTED_MODULE_3__buildHTML__["a"
              /* buildExpression */
              ](group.value.body, options, false);

              var href = group.value.href;
              return new __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeAnchor(href, [], elements, options);
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              var inner = __WEBPACK_IMPORTED_MODULE_4__buildMathML__["a"
              /* buildExpression */
              ](group.value.body, options);

              var math = new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mrow", inner);
              math.setAttribute("href", group.value.href);
              return math;
            }
          });
          /***/
        },
        /* 141 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineFunction__ = __webpack_require__(3);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__Style__ = __webpack_require__(9);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__buildMathML__ = __webpack_require__(2);

          var chooseMathStyle = function chooseMathStyle(group, options) {
            var style = options.style;

            if (style.size === __WEBPACK_IMPORTED_MODULE_3__Style__["a"
            /* default */
            ].DISPLAY.size) {
              return group.value.display;
            } else if (style.size === __WEBPACK_IMPORTED_MODULE_3__Style__["a"
            /* default */
            ].TEXT.size) {
              return group.value.text;
            } else if (style.size === __WEBPACK_IMPORTED_MODULE_3__Style__["a"
            /* default */
            ].SCRIPT.size) {
              return group.value.script;
            } else if (style.size === __WEBPACK_IMPORTED_MODULE_3__Style__["a"
            /* default */
            ].SCRIPTSCRIPT.size) {
              return group.value.scriptscript;
            }

            return group.value.text;
          };

          Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"
          /* default */
          ])({
            type: "mathchoice",
            names: ["\\mathchoice"],
            props: {
              numArgs: 4
            },
            handler: function handler(context, args) {
              return {
                type: "mathchoice",
                display: Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"
                /* ordargument */
                ])(args[0]),
                text: Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"
                /* ordargument */
                ])(args[1]),
                script: Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"
                /* ordargument */
                ])(args[2]),
                scriptscript: Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"
                /* ordargument */
                ])(args[3])
              };
            },
            htmlBuilder: function htmlBuilder(group, options) {
              var body = chooseMathStyle(group, options);

              var elements = __WEBPACK_IMPORTED_MODULE_4__buildHTML__["a"
              /* buildExpression */
              ](body, options, false);

              return new __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"
              /* default */
              ].makeFragment(elements);
            },
            mathmlBuilder: function mathmlBuilder(group, options) {
              var body = chooseMathStyle(group, options);

              var elements = __WEBPACK_IMPORTED_MODULE_5__buildMathML__["a"
              /* buildExpression */
              ](body, options, false);

              return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mrow", elements);
            }
          });
          /***/
        },
        /* 142 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__defineEnvironment__ = __webpack_require__(61);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__environments_array_js__ = __webpack_require__(143);

          var environments = __WEBPACK_IMPORTED_MODULE_0__defineEnvironment__["a"
          /* _environments */
          ];
          /* harmony default export */

          __webpack_exports__["a"] = environments; // All environment definitions should be imported below

          /***/
        },
        /* 143 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__buildCommon__ = __webpack_require__(0);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__defineEnvironment__ = __webpack_require__(61);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__ParseError__ = __webpack_require__(6);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__ParseNode__ = __webpack_require__(14);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__units__ = __webpack_require__(19);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_6__utils__ = __webpack_require__(5);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_7__stretchy__ = __webpack_require__(13);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_8__buildHTML__ = __webpack_require__(4);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_9__buildMathML__ = __webpack_require__(2); // Data stored in the ParseNode associated with the environment.

          /**
           * Parse the body of the environment, with rows delimited by \\ and
           * columns delimited by &, and create a nested list in row-major order
           * with one group per cell.  If given an optional argument style
           * ("text", "display", etc.), then each cell is cast into that style.
           */


          function parseArray(parser, result, style) {
            var row = [];
            var body = [row];
            var rowGaps = [];

            while (true) {
              // eslint-disable-line no-constant-condition
              var cell = parser.parseExpression(false, undefined);
              cell = new __WEBPACK_IMPORTED_MODULE_4__ParseNode__["a"
              /* default */
              ]("ordgroup", cell, parser.mode);

              if (style) {
                cell = new __WEBPACK_IMPORTED_MODULE_4__ParseNode__["a"
                /* default */
                ]("styling", {
                  style: style,
                  value: [cell]
                }, parser.mode);
              }

              row.push(cell);
              var next = parser.nextToken.text;

              if (next === "&") {
                parser.consume();
              } else if (next === "\\end") {
                // Arrays terminate newlines with `\crcr` which consumes a `\cr` if
                // the last line is empty.
                var lastRow = body[body.length - 1];

                if (body.length > 1 && lastRow.length === 1 && lastRow[0].value.value[0].value.length === 0) {
                  body.pop();
                }

                break;
              } else if (next === "\\\\" || next === "\\cr") {
                var cr = parser.parseFunction();

                if (!cr) {
                  throw new __WEBPACK_IMPORTED_MODULE_3__ParseError__["a"
                  /* default */
                  ]("Failed to parse function after " + next);
                }

                rowGaps.push(cr.value.size);
                row = [];
                body.push(row);
              } else {
                throw new __WEBPACK_IMPORTED_MODULE_3__ParseError__["a"
                /* default */
                ]("Expected & or \\\\ or \\end", parser.nextToken);
              }
            }

            result.body = body;
            result.rowGaps = rowGaps;
            return new __WEBPACK_IMPORTED_MODULE_4__ParseNode__["a"
            /* default */
            ](result.type, result, parser.mode);
          } // Decides on a style for cells in an array according to whether the given
          // environment name starts with the letter 'd'.


          function dCellStyle(envName) {
            if (envName.substr(0, 1) === "d") {
              return "display";
            } else {
              return "text";
            }
          }

          var htmlBuilder = function htmlBuilder(group, options) {
            var r = void 0;
            var c = void 0;
            var nr = group.value.body.length;
            var nc = 0;
            var body = new Array(nr); // Horizontal spacing

            var pt = 1 / options.fontMetrics().ptPerEm;
            var arraycolsep = 5 * pt; // \arraycolsep in article.cls
            // Vertical spacing

            var baselineskip = 12 * pt; // see size10.clo
            // Default \jot from ltmath.dtx
            // TODO(edemaine): allow overriding \jot via \setlength (#687)

            var jot = 3 * pt; // Default \arraystretch from lttab.dtx
            // TODO(gagern): may get redefined once we have user-defined macros

            var arraystretch = __WEBPACK_IMPORTED_MODULE_6__utils__["a"
            /* default */
            ].deflt(group.value.arraystretch, 1);

            var arrayskip = arraystretch * baselineskip;
            var arstrutHeight = 0.7 * arrayskip; // \strutbox in ltfsstrc.dtx and

            var arstrutDepth = 0.3 * arrayskip; // \@arstrutbox in lttab.dtx

            var totalHeight = 0;

            for (r = 0; r < group.value.body.length; ++r) {
              var inrow = group.value.body[r];
              var _height = arstrutHeight; // \@array adds an \@arstrut

              var _depth = arstrutDepth; // to each tow (via the template)

              if (nc < inrow.length) {
                nc = inrow.length;
              }

              var outrow = new Array(inrow.length);

              for (c = 0; c < inrow.length; ++c) {
                var elt = __WEBPACK_IMPORTED_MODULE_8__buildHTML__["b"
                /* buildGroup */
                ](inrow[c], options);

                if (_depth < elt.depth) {
                  _depth = elt.depth;
                }

                if (_height < elt.height) {
                  _height = elt.height;
                }

                outrow[c] = elt;
              }

              var gap = 0;

              if (group.value.rowGaps[r]) {
                gap = Object(__WEBPACK_IMPORTED_MODULE_5__units__["a"
                /* calculateSize */
                ])(group.value.rowGaps[r].value, options);

                if (gap > 0) {
                  // \@argarraycr
                  gap += arstrutDepth;

                  if (_depth < gap) {
                    _depth = gap; // \@xargarraycr
                  }

                  gap = 0;
                }
              } // In AMS multiline environments such as aligned and gathered, rows
              // correspond to lines that have additional \jot added to the
              // \baselineskip via \openup.


              if (group.value.addJot) {
                _depth += jot;
              }

              outrow.height = _height;
              outrow.depth = _depth;
              totalHeight += _height;
              outrow.pos = totalHeight;
              totalHeight += _depth + gap; // \@yargarraycr

              body[r] = outrow;
            }

            var offset = totalHeight / 2 + options.fontMetrics().axisHeight;
            var colDescriptions = group.value.cols || [];
            var cols = [];
            var colSep = void 0;
            var colDescrNum = void 0;

            for (c = 0, colDescrNum = 0; // Continue while either there are more columns or more column
            // descriptions, so trailing separators don't get lost.
            c < nc || colDescrNum < colDescriptions.length; ++c, ++colDescrNum) {
              var colDescr = colDescriptions[colDescrNum] || {};
              var firstSeparator = true;

              while (colDescr.type === "separator") {
                // If there is more than one separator in a row, add a space
                // between them.
                if (!firstSeparator) {
                  colSep = __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"
                  /* default */
                  ].makeSpan(["arraycolsep"], []);
                  colSep.style.width = options.fontMetrics().doubleRuleSep + "em";
                  cols.push(colSep);
                }

                if (colDescr.separator === "|") {
                  var _separator = __WEBPACK_IMPORTED_MODULE_7__stretchy__["a"
                  /* default */
                  ].ruleSpan("vertical-separator", 0.05, options);

                  _separator.style.height = totalHeight + "em";
                  _separator.style.verticalAlign = -(totalHeight - offset) + "em";
                  cols.push(_separator);
                } else {
                  throw new __WEBPACK_IMPORTED_MODULE_3__ParseError__["a"
                  /* default */
                  ]("Invalid separator type: " + colDescr.separator);
                }

                colDescrNum++;
                colDescr = colDescriptions[colDescrNum] || {};
                firstSeparator = false;
              }

              if (c >= nc) {
                continue;
              }

              var sepwidth = void 0;

              if (c > 0 || group.value.hskipBeforeAndAfter) {
                sepwidth = __WEBPACK_IMPORTED_MODULE_6__utils__["a"
                /* default */
                ].deflt(colDescr.pregap, arraycolsep);

                if (sepwidth !== 0) {
                  colSep = __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"
                  /* default */
                  ].makeSpan(["arraycolsep"], []);
                  colSep.style.width = sepwidth + "em";
                  cols.push(colSep);
                }
              }

              var col = [];

              for (r = 0; r < nr; ++r) {
                var row = body[r];
                var elem = row[c];

                if (!elem) {
                  continue;
                }

                var shift = row.pos - offset;
                elem.depth = row.depth;
                elem.height = row.height;
                col.push({
                  type: "elem",
                  elem: elem,
                  shift: shift
                });
              }

              col = __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"
              /* default */
              ].makeVList({
                positionType: "individualShift",
                children: col
              }, options);
              col = __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"
              /* default */
              ].makeSpan(["col-align-" + (colDescr.align || "c")], [col]);
              cols.push(col);

              if (c < nc - 1 || group.value.hskipBeforeAndAfter) {
                sepwidth = __WEBPACK_IMPORTED_MODULE_6__utils__["a"
                /* default */
                ].deflt(colDescr.postgap, arraycolsep);

                if (sepwidth !== 0) {
                  colSep = __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"
                  /* default */
                  ].makeSpan(["arraycolsep"], []);
                  colSep.style.width = sepwidth + "em";
                  cols.push(colSep);
                }
              }
            }

            body = __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"
            /* default */
            ].makeSpan(["mtable"], cols);
            return __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"
            /* default */
            ].makeSpan(["mord"], [body], options);
          };

          var mathmlBuilder = function mathmlBuilder(group, options) {
            return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
            /* default */
            ].MathNode("mtable", group.value.body.map(function (row) {
              return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
              /* default */
              ].MathNode("mtr", row.map(function (cell) {
                return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"
                /* default */
                ].MathNode("mtd", [__WEBPACK_IMPORTED_MODULE_9__buildMathML__["b"
                /* buildGroup */
                ](cell, options)]);
              }));
            }));
          }; // Convinient function for aligned and alignedat environments.


          var alignedHandler = function alignedHandler(context, args) {
            var res = {
              type: "array",
              cols: [],
              addJot: true
            };
            res = parseArray(context.parser, res, "display"); // Determining number of columns.
            // 1. If the first argument is given, we use it as a number of columns,
            //    and makes sure that each row doesn't exceed that number.
            // 2. Otherwise, just count number of columns = maximum number
            //    of cells in each row ("aligned" mode -- isAligned will be true).
            //
            // At the same time, prepend empty group {} at beginning of every second
            // cell in each row (starting with second cell) so that operators become
            // binary.  This behavior is implemented in amsmath's \start@aligned.

            var numMaths = void 0;
            var numCols = 0;
            var emptyGroup = new __WEBPACK_IMPORTED_MODULE_4__ParseNode__["a"
            /* default */
            ]("ordgroup", [], context.mode);

            if (args[0] && args[0].value) {
              var arg0 = "";

              for (var i = 0; i < args[0].value.length; i++) {
                arg0 += args[0].value[i].value;
              }

              numMaths = Number(arg0);
              numCols = numMaths * 2;
            }

            var isAligned = !numCols;
            res.value.body.forEach(function (row) {
              for (var _i = 1; _i < row.length; _i += 2) {
                // Modify ordgroup node within styling node
                var ordgroup = row[_i].value.value[0];
                ordgroup.value.unshift(emptyGroup);
              }

              if (!isAligned) {
                // Case 1
                var curMaths = row.length / 2;

                if (numMaths < curMaths) {
                  throw new __WEBPACK_IMPORTED_MODULE_3__ParseError__["a"
                  /* default */
                  ]("Too many math in a row: " + ("expected " + numMaths + ", but got " + curMaths), row);
                }
              } else if (numCols < row.length) {
                // Case 2
                numCols = row.length;
              }
            }); // Adjusting alignment.
            // In aligned mode, we add one \qquad between columns;
            // otherwise we add nothing.

            for (var _i2 = 0; _i2 < numCols; ++_i2) {
              var _align = "r";
              var _pregap = 0;

              if (_i2 % 2 === 1) {
                _align = "l";
              } else if (_i2 > 0 && isAligned) {
                // "aligned" mode.
                _pregap = 1; // add one \quad
              }

              res.value.cols[_i2] = {
                type: "align",
                align: _align,
                pregap: _pregap,
                postgap: 0
              };
            }

            return res;
          }; // Arrays are part of LaTeX, defined in lttab.dtx so its documentation
          // is part of the source2e.pdf file of LaTeX2e source documentation.
          // {darray} is an {array} environment where cells are set in \displaystyle,
          // as defined in nccmath.sty.


          Object(__WEBPACK_IMPORTED_MODULE_1__defineEnvironment__["b"
          /* default */
          ])({
            type: "array",
            names: ["array", "darray"],
            props: {
              numArgs: 1
            },
            handler: function handler(context, args) {
              var colalign = args[0];
              colalign = colalign.value.map ? colalign.value : [colalign];
              var cols = colalign.map(function (node) {
                var ca = node.value;

                if ("lcr".indexOf(ca) !== -1) {
                  return {
                    type: "align",
                    align: ca
                  };
                } else if (ca === "|") {
                  return {
                    type: "separator",
                    separator: "|"
                  };
                }

                throw new __WEBPACK_IMPORTED_MODULE_3__ParseError__["a"
                /* default */
                ]("Unknown column alignment: " + node.value, node);
              });
              var res = {
                type: "array",
                cols: cols,
                hskipBeforeAndAfter: true // \@preamble in lttab.dtx

              };
              res = parseArray(context.parser, res, dCellStyle(context.envName));
              return res;
            },
            htmlBuilder: htmlBuilder,
            mathmlBuilder: mathmlBuilder
          }); // The matrix environments of amsmath builds on the array environment
          // of LaTeX, which is discussed above.

          Object(__WEBPACK_IMPORTED_MODULE_1__defineEnvironment__["b"
          /* default */
          ])({
            type: "array",
            names: ["matrix", "pmatrix", "bmatrix", "Bmatrix", "vmatrix", "Vmatrix"],
            props: {
              numArgs: 0
            },
            handler: function handler(context) {
              var delimiters = {
                "matrix": null,
                "pmatrix": ["(", ")"],
                "bmatrix": ["[", "]"],
                "Bmatrix": ["\\{", "\\}"],
                "vmatrix": ["|", "|"],
                "Vmatrix": ["\\Vert", "\\Vert"]
              }[context.envName];
              var res = {
                type: "array",
                hskipBeforeAndAfter: false // \hskip -\arraycolsep in amsmath

              };
              res = parseArray(context.parser, res, dCellStyle(context.envName));

              if (delimiters) {
                res = new __WEBPACK_IMPORTED_MODULE_4__ParseNode__["a"
                /* default */
                ]("leftright", {
                  body: [res],
                  left: delimiters[0],
                  right: delimiters[1]
                }, context.mode);
              }

              return res;
            },
            htmlBuilder: htmlBuilder,
            mathmlBuilder: mathmlBuilder
          }); // A cases environment (in amsmath.sty) is almost equivalent to
          // \def\arraystretch{1.2}%
          // \left\{\begin{array}{@{}l@{\quad}l@{}} … \end{array}\right.
          // {dcases} is a {cases} environment where cells are set in \displaystyle,
          // as defined in mathtools.sty.

          Object(__WEBPACK_IMPORTED_MODULE_1__defineEnvironment__["b"
          /* default */
          ])({
            type: "array",
            names: ["cases", "dcases"],
            props: {
              numArgs: 0
            },
            handler: function handler(context) {
              var res = {
                type: "array",
                arraystretch: 1.2,
                cols: [{
                  type: "align",
                  align: "l",
                  pregap: 0,
                  // TODO(kevinb) get the current style.
                  // For now we use the metrics for TEXT style which is what we were
                  // doing before.  Before attempting to get the current style we
                  // should look at TeX's behavior especially for \over and matrices.
                  postgap: 1.0
                  /* 1em quad */

                }, {
                  type: "align",
                  align: "l",
                  pregap: 0,
                  postgap: 0
                }]
              };
              res = parseArray(context.parser, res, dCellStyle(context.envName));
              res = new __WEBPACK_IMPORTED_MODULE_4__ParseNode__["a"
              /* default */
              ]("leftright", {
                body: [res],
                left: "\\{",
                right: "."
              }, context.mode);
              return res;
            },
            htmlBuilder: htmlBuilder,
            mathmlBuilder: mathmlBuilder
          }); // An aligned environment is like the align* environment
          // except it operates within math mode.
          // Note that we assume \nomallineskiplimit to be zero,
          // so that \strut@ is the same as \strut.

          Object(__WEBPACK_IMPORTED_MODULE_1__defineEnvironment__["b"
          /* default */
          ])({
            type: "array",
            names: ["aligned"],
            props: {
              numArgs: 0
            },
            handler: alignedHandler,
            htmlBuilder: htmlBuilder,
            mathmlBuilder: mathmlBuilder
          }); // A gathered environment is like an array environment with one centered
          // column, but where rows are considered lines so get \jot line spacing
          // and contents are set in \displaystyle.

          Object(__WEBPACK_IMPORTED_MODULE_1__defineEnvironment__["b"
          /* default */
          ])({
            type: "array",
            names: ["gathered"],
            props: {
              numArgs: 0
            },
            handler: function handler(context) {
              var res = {
                type: "array",
                cols: [{
                  type: "align",
                  align: "c"
                }],
                addJot: true
              };
              res = parseArray(context.parser, res, "display");
              return res;
            },
            htmlBuilder: htmlBuilder,
            mathmlBuilder: mathmlBuilder
          }); // alignat environment is like an align environment, but one must explicitly
          // specify maximum number of columns in each row, and can adjust spacing between
          // each columns.

          Object(__WEBPACK_IMPORTED_MODULE_1__defineEnvironment__["b"
          /* default */
          ])({
            type: "array",
            names: ["alignedat"],
            // One for numbered and for unnumbered;
            // but, KaTeX doesn't supports math numbering yet,
            // they make no difference for now.
            props: {
              numArgs: 1
            },
            handler: alignedHandler,
            htmlBuilder: htmlBuilder,
            mathmlBuilder: mathmlBuilder
          });
          /***/
        },
        /* 144 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__ = __webpack_require__(35);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__ = __webpack_require__(7);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass__ = __webpack_require__(10);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass__);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__Lexer__ = __webpack_require__(62);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_4__Token__ = __webpack_require__(27);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_5__macros__ = __webpack_require__(146);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_6__ParseError__ = __webpack_require__(6);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_7_object_assign__ = __webpack_require__(147);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_7_object_assign___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_object_assign__);
          /**
           * This file contains the “gullet” where macros are expanded
           * until only non-macro tokens remain.
           */


          var MacroExpander = function () {
            function MacroExpander(input, macros, mode) {
              __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default()(this, MacroExpander);

              this.lexer = new __WEBPACK_IMPORTED_MODULE_3__Lexer__["c"
              /* default */
              ](input);
              this.macros = __WEBPACK_IMPORTED_MODULE_7_object_assign___default()({}, __WEBPACK_IMPORTED_MODULE_5__macros__["a"
              /* default */
              ], macros);
              this.mode = mode;
              this.stack = []; // contains tokens in REVERSE order
            }
            /**
             * Switches between "text" and "math" modes.
             */


            __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass___default()(MacroExpander, [{
              key: "switchMode",
              value: function switchMode(newMode) {
                this.mode = newMode;
              }
              /**
               * Returns the topmost token on the stack, without expanding it.
               * Similar in behavior to TeX's `\futurelet`.
               */

            }, {
              key: "future",
              value: function future() {
                if (this.stack.length === 0) {
                  this.pushToken(this.lexer.lex());
                }

                return this.stack[this.stack.length - 1];
              }
              /**
               * Remove and return the next unexpanded token.
               */

            }, {
              key: "popToken",
              value: function popToken() {
                this.future(); // ensure non-empty stack

                return this.stack.pop();
              }
              /**
               * Add a given token to the token stack.  In particular, this get be used
               * to put back a token returned from one of the other methods.
               */

            }, {
              key: "pushToken",
              value: function pushToken(token) {
                this.stack.push(token);
              }
              /**
               * Append an array of tokens to the token stack.
               */

            }, {
              key: "pushTokens",
              value: function pushTokens(tokens) {
                var _stack;

                (_stack = this.stack).push.apply(_stack, __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default()(tokens));
              }
              /**
               * Consume all following space tokens, without expansion.
               */

            }, {
              key: "consumeSpaces",
              value: function consumeSpaces() {
                for (;;) {
                  var token = this.future();

                  if (token.text === " ") {
                    this.stack.pop();
                  } else {
                    break;
                  }
                }
              }
              /**
               * Consume the specified number of arguments from the token stream,
               * and return the resulting array of arguments.
               */

            }, {
              key: "consumeArgs",
              value: function consumeArgs(numArgs) {
                var args = []; // obtain arguments, either single token or balanced {…} group

                for (var i = 0; i < numArgs; ++i) {
                  this.consumeSpaces(); // ignore spaces before each argument

                  var startOfArg = this.popToken();

                  if (startOfArg.text === "{") {
                    var arg = [];
                    var depth = 1;

                    while (depth !== 0) {
                      var tok = this.popToken();
                      arg.push(tok);

                      if (tok.text === "{") {
                        ++depth;
                      } else if (tok.text === "}") {
                        --depth;
                      } else if (tok.text === "EOF") {
                        throw new __WEBPACK_IMPORTED_MODULE_6__ParseError__["a"
                        /* default */
                        ]("End of input in macro argument", startOfArg);
                      }
                    }

                    arg.pop(); // remove last }

                    arg.reverse(); // like above, to fit in with stack order

                    args[i] = arg;
                  } else if (startOfArg.text === "EOF") {
                    throw new __WEBPACK_IMPORTED_MODULE_6__ParseError__["a"
                    /* default */
                    ]("End of input expecting macro argument");
                  } else {
                    args[i] = [startOfArg];
                  }
                }

                return args;
              }
              /**
               * Expand the next token only once if possible.
               *
               * If the token is expanded, the resulting tokens will be pushed onto
               * the stack in reverse order and will be returned as an array,
               * also in reverse order.
               *
               * If not, the next token will be returned without removing it
               * from the stack.  This case can be detected by a `Token` return value
               * instead of an `Array` return value.
               *
               * In either case, the next token will be on the top of the stack,
               * or the stack will be empty.
               *
               * Used to implement `expandAfterFuture` and `expandNextToken`.
               *
               * At the moment, macro expansion doesn't handle delimited macros,
               * i.e. things like those defined by \def\foo#1\end{…}.
               * See the TeX book page 202ff. for details on how those should behave.
               */

            }, {
              key: "expandOnce",
              value: function expandOnce() {
                var topToken = this.popToken();
                var name = topToken.text;
                var isMacro = name.charAt(0) === "\\";

                if (isMacro && __WEBPACK_IMPORTED_MODULE_3__Lexer__["b"
                /* controlWordRegex */
                ].test(name)) {
                  // Consume all spaces after \macro (but not \\, \', etc.)
                  this.consumeSpaces();
                }

                if (!this.macros.hasOwnProperty(name)) {
                  // Fully expanded
                  this.pushToken(topToken);
                  return topToken;
                }

                var _getExpansion2 = this._getExpansion(name),
                    tokens = _getExpansion2.tokens,
                    numArgs = _getExpansion2.numArgs;

                var expansion = tokens;

                if (numArgs) {
                  var args = this.consumeArgs(numArgs); // paste arguments in place of the placeholders

                  expansion = expansion.slice(); // make a shallow copy

                  for (var i = expansion.length - 1; i >= 0; --i) {
                    var tok = expansion[i];

                    if (tok.text === "#") {
                      if (i === 0) {
                        throw new __WEBPACK_IMPORTED_MODULE_6__ParseError__["a"
                        /* default */
                        ]("Incomplete placeholder at end of macro body", tok);
                      }

                      tok = expansion[--i]; // next token on stack

                      if (tok.text === "#") {
                        // ## → #
                        expansion.splice(i + 1, 1); // drop first #
                      } else if (/^[1-9]$/.test(tok.text)) {
                        var _expansion; // replace the placeholder with the indicated argument


                        (_expansion = expansion).splice.apply(_expansion, [i, 2].concat(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default()(args[+tok.text - 1])));
                      } else {
                        throw new __WEBPACK_IMPORTED_MODULE_6__ParseError__["a"
                        /* default */
                        ]("Not a valid argument number", tok);
                      }
                    }
                  }
                } // Concatenate expansion onto top of stack.


                this.pushTokens(expansion);
                return expansion;
              }
              /**
               * Expand the next token only once (if possible), and return the resulting
               * top token on the stack (without removing anything from the stack).
               * Similar in behavior to TeX's `\expandafter\futurelet`.
               * Equivalent to expandOnce() followed by future().
               */

            }, {
              key: "expandAfterFuture",
              value: function expandAfterFuture() {
                this.expandOnce();
                return this.future();
              }
              /**
               * Recursively expand first token, then return first non-expandable token.
               */

            }, {
              key: "expandNextToken",
              value: function expandNextToken() {
                for (;;) {
                  var expanded = this.expandOnce(); // expandOnce returns Token if and only if it's fully expanded.

                  if (expanded instanceof __WEBPACK_IMPORTED_MODULE_4__Token__["a"
                  /* Token */
                  ]) {
                    // \relax stops the expansion, but shouldn't get returned (a
                    // null return value couldn't get implemented as a function).
                    if (expanded.text === "\\relax") {
                      this.stack.pop();
                    } else {
                      return this.stack.pop(); // === expanded
                    }
                  }
                } // Flow unable to figure out that this pathway is impossible.
                // https://github.com/facebook/flow/issues/4808


                throw new Error(); // eslint-disable-line no-unreachable
              }
              /**
               * Returns the expanded macro as a reversed array of tokens and a macro
               * argument count.
               * Caches macro expansions for those that were defined simple TeX strings.
               */

            }, {
              key: "_getExpansion",
              value: function _getExpansion(name) {
                var definition = this.macros[name];
                var expansion = typeof definition === "function" ? definition(this) : definition;

                if (typeof expansion === "string") {
                  var numArgs = 0;

                  if (expansion.indexOf("#") !== -1) {
                    var stripped = expansion.replace(/##/g, "");

                    while (stripped.indexOf("#" + (numArgs + 1)) !== -1) {
                      ++numArgs;
                    }
                  }

                  var bodyLexer = new __WEBPACK_IMPORTED_MODULE_3__Lexer__["c"
                  /* default */
                  ](expansion);
                  var tokens = [];
                  var tok = bodyLexer.lex();

                  while (tok.text !== "EOF") {
                    tokens.push(tok);
                    tok = bodyLexer.lex();
                  }

                  tokens.reverse(); // to fit in with stack using push and pop

                  var expanded = {
                    tokens: tokens,
                    numArgs: numArgs
                  }; // Cannot cache a macro defined using a function since it relies on
                  // parser context.

                  if (typeof definition !== "function") {
                    this.macros[name] = expanded;
                  }

                  return expanded;
                }

                return expansion;
              }
            }]);

            return MacroExpander;
          }();
          /* harmony default export */


          __webpack_exports__["a"] = MacroExpander;
          /***/
        },
        /* 145 */

        /***/
        function (module, exports) {
          function getRelocatable(re) {
            // In the future, this could use a WeakMap instead of an expando.
            if (!re.__matchAtRelocatable) {
              // Disjunctions are the lowest-precedence operator, so we can make any
              // pattern match the empty string by appending `|()` to it:
              // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-patterns
              var source = re.source + '|()'; // We always make the new regex global.

              var flags = 'g' + (re.ignoreCase ? 'i' : '') + (re.multiline ? 'm' : '') + (re.unicode ? 'u' : '') // sticky (/.../y) doesn't make sense in conjunction with our relocation
              // logic, so we ignore it here.
              ;
              re.__matchAtRelocatable = new RegExp(source, flags);
            }

            return re.__matchAtRelocatable;
          }

          function matchAt(re, str, pos) {
            if (re.global || re.sticky) {
              throw new Error('matchAt(...): Only non-global regexes are supported');
            }

            var reloc = getRelocatable(re);
            reloc.lastIndex = pos;
            var match = reloc.exec(str); // Last capturing group is our sentinel that indicates whether the regex
            // matched at the given location.

            if (match[match.length - 1] == null) {
              // Original regex matched.
              match.length = match.length - 1;
              return match;
            } else {
              return null;
            }
          }

          module.exports = matchAt;
          /***/
        },
        /* 146 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";
          /* unused harmony export defineMacro */

          /* harmony import */

          var __WEBPACK_IMPORTED_MODULE_0__submodules_katex_fonts_fontMetricsData__ = __webpack_require__(59);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_1__symbols__ = __webpack_require__(28);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(5);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_3__Token__ = __webpack_require__(27);
          /**
           * Predefined macros for KaTeX.
           * This can be used to define some commands in terms of others.
           */

          /**
           * Provides context to macros defined by functions. Implemented by
           * MacroExpander.
           */

          /** Macro tokens (in reverse order). */


          var builtinMacros = {};
          /* harmony default export */

          __webpack_exports__["a"] = builtinMacros; // This function might one day accept an additional argument and do more things.

          function defineMacro(name, body) {
            builtinMacros[name] = body;
          } //////////////////////////////////////////////////////////////////////
          // macro tools
          // LaTeX's \@firstoftwo{#1}{#2} expands to #1, skipping #2
          // TeX source: \long\def\@firstoftwo#1#2{#1}


          defineMacro("\\@firstoftwo", function (context) {
            var args = context.consumeArgs(2);
            return {
              tokens: args[0],
              numArgs: 0
            };
          }); // LaTeX's \@secondoftwo{#1}{#2} expands to #2, skipping #1
          // TeX source: \long\def\@secondoftwo#1#2{#2}

          defineMacro("\\@secondoftwo", function (context) {
            var args = context.consumeArgs(2);
            return {
              tokens: args[1],
              numArgs: 0
            };
          }); // LaTeX's \@ifnextchar{#1}{#2}{#3} looks ahead to the next (unexpanded)
          // symbol.  If it matches #1, then the macro expands to #2; otherwise, #3.
          // Note, however, that it does not consume the next symbol in either case.

          defineMacro("\\@ifnextchar", function (context) {
            var args = context.consumeArgs(3); // symbol, if, else

            var nextToken = context.future();

            if (args[0].length === 1 && args[0][0].text === nextToken.text) {
              return {
                tokens: args[1],
                numArgs: 0
              };
            } else {
              return {
                tokens: args[2],
                numArgs: 0
              };
            }
          }); // LaTeX's \@ifstar{#1}{#2} looks ahead to the next (unexpanded) symbol.
          // If it is `*`, then it consumes the symbol, and the macro expands to #1;
          // otherwise, the macro expands to #2 (without consuming the symbol).
          // TeX source: \def\@ifstar#1{\@ifnextchar *{\@firstoftwo{#1}}}

          defineMacro("\\@ifstar", "\\@ifnextchar *{\\@firstoftwo{#1}}"); // LaTeX's \TextOrMath{#1}{#2} expands to #1 in text mode, #2 in math mode

          defineMacro("\\TextOrMath", function (context) {
            var args = context.consumeArgs(2);

            if (context.mode === 'text') {
              return {
                tokens: args[0],
                numArgs: 0
              };
            } else {
              return {
                tokens: args[1],
                numArgs: 0
              };
            }
          }); //////////////////////////////////////////////////////////////////////
          // Grouping
          // \let\bgroup={ \let\egroup=}

          defineMacro("\\bgroup", "{");
          defineMacro("\\egroup", "}");
          defineMacro("\\begingroup", "{");
          defineMacro("\\endgroup", "}"); // Symbols from latex.ltx:
          // \def\lq{`}
          // \def\rq{'}
          // \def\lbrack{[}
          // \def\rbrack{]}
          // \def \aa {\r a}
          // \def \AA {\r A}

          defineMacro("\\lq", "`");
          defineMacro("\\rq", "'");
          defineMacro("\\lbrack", "[");
          defineMacro("\\rbrack", "]");
          defineMacro("\\aa", "\\r a");
          defineMacro("\\AA", "\\r A"); // Unicode double-struck letters

          defineMacro("\u2102", "\\mathbb{C}");
          defineMacro("\u210D", "\\mathbb{H}");
          defineMacro("\u2115", "\\mathbb{N}");
          defineMacro("\u2119", "\\mathbb{P}");
          defineMacro("\u211A", "\\mathbb{Q}");
          defineMacro("\u211D", "\\mathbb{R}");
          defineMacro("\u2124", "\\mathbb{Z}"); // Unicode middle dot
          // The KaTeX fonts do not contain U+00B7. Instead, \cdotp displays
          // the dot at U+22C5 and gives it punct spacing.

          defineMacro("\xB7", "\\cdotp"); // \llap and \rlap render their contents in text mode

          defineMacro("\\llap", "\\mathllap{\\textrm{#1}}");
          defineMacro("\\rlap", "\\mathrlap{\\textrm{#1}}");
          defineMacro("\\clap", "\\mathclap{\\textrm{#1}}"); //////////////////////////////////////////////////////////////////////
          // amsmath.sty
          // http://mirrors.concertpass.com/tex-archive/macros/latex/required/amsmath/amsmath.pdf
          // Italic Greek capital letters.  AMS defines these with \DeclareMathSymbol,
          // but they are equivalent to \mathit{\Letter}.

          defineMacro("\\varGamma", "\\mathit{\\Gamma}");
          defineMacro("\\varDelta", "\\mathit{\\Delta}");
          defineMacro("\\varTheta", "\\mathit{\\Theta}");
          defineMacro("\\varLambda", "\\mathit{\\Lambda}");
          defineMacro("\\varXi", "\\mathit{\\Xi}");
          defineMacro("\\varPi", "\\mathit{\\Pi}");
          defineMacro("\\varSigma", "\\mathit{\\Sigma}");
          defineMacro("\\varUpsilon", "\\mathit{\\Upsilon}");
          defineMacro("\\varPhi", "\\mathit{\\Phi}");
          defineMacro("\\varPsi", "\\mathit{\\Psi}");
          defineMacro("\\varOmega", "\\mathit{\\Omega}"); // \def\overset#1#2{\binrel@{#2}\binrel@@{\mathop{\kern\z@#2}\limits^{#1}}}

          defineMacro("\\overset", "\\mathop{#2}\\limits^{#1}");
          defineMacro("\\underset", "\\mathop{#2}\\limits_{#1}"); // \newcommand{\boxed}[1]{\fbox{\m@th$\displaystyle#1$}}

          defineMacro("\\boxed", "\\fbox{\\displaystyle{#1}}"); // \def\iff{\DOTSB\;\Longleftrightarrow\;}
          // \def\implies{\DOTSB\;\Longrightarrow\;}
          // \def\impliedby{\DOTSB\;\Longleftarrow\;}

          defineMacro("\\iff", "\\DOTSB\\;\\Longleftrightarrow\\;");
          defineMacro("\\implies", "\\DOTSB\\;\\Longrightarrow\\;");
          defineMacro("\\impliedby", "\\DOTSB\\;\\Longleftarrow\\;"); // AMSMath's automatic \dots, based on \mdots@@ macro.

          var dotsByToken = {
            ',': '\\dotsc',
            '\\not': '\\dotsb',
            // \keybin@ checks for the following:
            '+': '\\dotsb',
            '=': '\\dotsb',
            '<': '\\dotsb',
            '>': '\\dotsb',
            '-': '\\dotsb',
            '*': '\\dotsb',
            ':': '\\dotsb',
            // Symbols whose definition starts with \DOTSB:
            '\\DOTSB': '\\dotsb',
            '\\coprod': '\\dotsb',
            '\\bigvee': '\\dotsb',
            '\\bigwedge': '\\dotsb',
            '\\biguplus': '\\dotsb',
            '\\bigcap': '\\dotsb',
            '\\bigcup': '\\dotsb',
            '\\prod': '\\dotsb',
            '\\sum': '\\dotsb',
            '\\bigotimes': '\\dotsb',
            '\\bigoplus': '\\dotsb',
            '\\bigodot': '\\dotsb',
            '\\bigsqcup': '\\dotsb',
            '\\implies': '\\dotsb',
            '\\impliedby': '\\dotsb',
            '\\And': '\\dotsb',
            '\\longrightarrow': '\\dotsb',
            '\\Longrightarrow': '\\dotsb',
            '\\longleftarrow': '\\dotsb',
            '\\Longleftarrow': '\\dotsb',
            '\\longleftrightarrow': '\\dotsb',
            '\\Longleftrightarrow': '\\dotsb',
            '\\mapsto': '\\dotsb',
            '\\longmapsto': '\\dotsb',
            '\\hookrightarrow': '\\dotsb',
            '\\iff': '\\dotsb',
            '\\doteq': '\\dotsb',
            // Symbols whose definition starts with \mathbin:
            '\\mathbin': '\\dotsb',
            '\\bmod': '\\dotsb',
            // Symbols whose definition starts with \mathrel:
            '\\mathrel': '\\dotsb',
            '\\relbar': '\\dotsb',
            '\\Relbar': '\\dotsb',
            '\\xrightarrow': '\\dotsb',
            '\\xleftarrow': '\\dotsb',
            // Symbols whose definition starts with \DOTSI:
            '\\DOTSI': '\\dotsi',
            '\\int': '\\dotsi',
            '\\oint': '\\dotsi',
            '\\iint': '\\dotsi',
            '\\iiint': '\\dotsi',
            '\\iiiint': '\\dotsi',
            '\\idotsint': '\\dotsi',
            // Symbols whose definition starts with \DOTSX:
            '\\DOTSX': '\\dotsx'
          };
          defineMacro("\\dots", function (context) {
            // TODO: If used in text mode, should expand to \textellipsis.
            // However, in KaTeX, \textellipsis and \ldots behave the same
            // (in text mode), and it's unlikely we'd see any of the math commands
            // that affect the behavior of \dots when in text mode.  So fine for now
            // (until we support \ifmmode ... \else ... \fi).
            var thedots = '\\dotso';
            var next = context.expandAfterFuture().text;

            if (next in dotsByToken) {
              thedots = dotsByToken[next];
            } else if (next.substr(0, 4) === '\\not') {
              thedots = '\\dotsb';
            } else if (next in __WEBPACK_IMPORTED_MODULE_1__symbols__["a"
            /* default */
            ].math) {
              if (__WEBPACK_IMPORTED_MODULE_2__utils__["a"
              /* default */
              ].contains(['bin', 'rel'], __WEBPACK_IMPORTED_MODULE_1__symbols__["a"
              /* default */
              ].math[next].group)) {
                thedots = '\\dotsb';
              }
            }

            return thedots;
          });
          var spaceAfterDots = {
            // \rightdelim@ checks for the following:
            ')': true,
            ']': true,
            '\\rbrack': true,
            '\\}': true,
            '\\rbrace': true,
            '\\rangle': true,
            '\\rceil': true,
            '\\rfloor': true,
            '\\rgroup': true,
            '\\rmoustache': true,
            '\\right': true,
            '\\bigr': true,
            '\\biggr': true,
            '\\Bigr': true,
            '\\Biggr': true,
            // \extra@ also tests for the following:
            '$': true,
            // \extrap@ checks for the following:
            ';': true,
            '.': true,
            ',': true
          };
          defineMacro("\\dotso", function (context) {
            var next = context.future().text;

            if (next in spaceAfterDots) {
              return "\\ldots\\,";
            } else {
              return "\\ldots";
            }
          });
          defineMacro("\\dotsc", function (context) {
            var next = context.future().text; // \dotsc uses \extra@ but not \extrap@, instead specially checking for
            // ';' and '.', but doesn't check for ','.

            if (next in spaceAfterDots && next !== ',') {
              return "\\ldots\\,";
            } else {
              return "\\ldots";
            }
          });
          defineMacro("\\cdots", function (context) {
            var next = context.future().text;

            if (next in spaceAfterDots) {
              return "\\@cdots\\,";
            } else {
              return "\\@cdots";
            }
          });
          defineMacro("\\dotsb", "\\cdots");
          defineMacro("\\dotsm", "\\cdots");
          defineMacro("\\dotsi", "\\!\\cdots"); // amsmath doesn't actually define \dotsx, but \dots followed by a macro
          // starting with \DOTSX implies \dotso, and then \extra@ detects this case
          // and forces the added `\,`.

          defineMacro("\\dotsx", "\\ldots\\,"); // \let\DOTSI\relax
          // \let\DOTSB\relax
          // \let\DOTSX\relax

          defineMacro("\\DOTSI", "\\relax");
          defineMacro("\\DOTSB", "\\relax");
          defineMacro("\\DOTSX", "\\relax"); // http://texdoc.net/texmf-dist/doc/latex/amsmath/amsmath.pdf

          defineMacro("\\thinspace", "\\,"); //   \let\thinspace\,

          defineMacro("\\medspace", "\\:"); //   \let\medspace\:

          defineMacro("\\thickspace", "\\;"); //   \let\thickspace\;
          //////////////////////////////////////////////////////////////////////
          // LaTeX source2e
          // \def\TeX{T\kern-.1667em\lower.5ex\hbox{E}\kern-.125emX\@}
          // TODO: Doesn't normally work in math mode because \@ fails.  KaTeX doesn't
          // support \@ yet, so that's omitted, and we add \text so that the result
          // doesn't look funny in math mode.

          defineMacro("\\TeX", "\\textrm{T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX}"); // \DeclareRobustCommand{\LaTeX}{L\kern-.36em%
          //         {\sbox\z@ T%
          //          \vbox to\ht\z@{\hbox{\check@mathfonts
          //                               \fontsize\sf@size\z@
          //                               \math@fontsfalse\selectfont
          //                               A}%
          //                         \vss}%
          //         }%
          //         \kern-.15em%
          //         \TeX}
          // This code aligns the top of the A with the T (from the perspective of TeX's
          // boxes, though visually the A appears to extend above slightly).
          // We compute the corresponding \raisebox when A is rendered at \scriptsize,
          // which is size3, which has a scale factor of 0.7 (see Options.js).

          var latexRaiseA = __WEBPACK_IMPORTED_MODULE_0__submodules_katex_fonts_fontMetricsData__["a"
          /* default */
          ]['Main-Regular']["T".charCodeAt(0)][1] - 0.7 * __WEBPACK_IMPORTED_MODULE_0__submodules_katex_fonts_fontMetricsData__["a"
          /* default */
          ]['Main-Regular']["A".charCodeAt(0)][1] + "em";
          defineMacro("\\LaTeX", "\\textrm{L\\kern-.36em\\raisebox{" + latexRaiseA + "}{\\scriptsize A}" + "\\kern-.15em\\TeX}"); // New KaTeX logo based on tweaking LaTeX logo

          defineMacro("\\KaTeX", "\\textrm{K\\kern-.17em\\raisebox{" + latexRaiseA + "}{\\scriptsize A}" + "\\kern-.15em\\TeX}"); // \DeclareRobustCommand\hspace{\@ifstar\@hspacer\@hspace}
          // \def\@hspace#1{\hskip  #1\relax}
          // KaTeX doesn't do line breaks, so \hspace and \hspace* are the same as \kern

          defineMacro("\\hspace", "\\@ifstar\\kern\\kern"); //////////////////////////////////////////////////////////////////////
          // mathtools.sty
          //\providecommand\ordinarycolon{:}

          defineMacro("\\ordinarycolon", ":"); //\def\vcentcolon{\mathrel{\mathop\ordinarycolon}}
          //TODO(edemaine): Not yet centered. Fix via \raisebox or #726

          defineMacro("\\vcentcolon", "\\mathrel{\\mathop\\ordinarycolon}"); // \providecommand*\dblcolon{\vcentcolon\mathrel{\mkern-.9mu}\vcentcolon}

          defineMacro("\\dblcolon", "\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon"); // \providecommand*\coloneqq{\vcentcolon\mathrel{\mkern-1.2mu}=}

          defineMacro("\\coloneqq", "\\vcentcolon\\mathrel{\\mkern-1.2mu}="); // \providecommand*\Coloneqq{\dblcolon\mathrel{\mkern-1.2mu}=}

          defineMacro("\\Coloneqq", "\\dblcolon\\mathrel{\\mkern-1.2mu}="); // \providecommand*\coloneq{\vcentcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

          defineMacro("\\coloneq", "\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}"); // \providecommand*\Coloneq{\dblcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

          defineMacro("\\Coloneq", "\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}"); // \providecommand*\eqqcolon{=\mathrel{\mkern-1.2mu}\vcentcolon}

          defineMacro("\\eqqcolon", "=\\mathrel{\\mkern-1.2mu}\\vcentcolon"); // \providecommand*\Eqqcolon{=\mathrel{\mkern-1.2mu}\dblcolon}

          defineMacro("\\Eqqcolon", "=\\mathrel{\\mkern-1.2mu}\\dblcolon"); // \providecommand*\eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\vcentcolon}

          defineMacro("\\eqcolon", "\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon"); // \providecommand*\Eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\dblcolon}

          defineMacro("\\Eqcolon", "\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon"); // \providecommand*\colonapprox{\vcentcolon\mathrel{\mkern-1.2mu}\approx}

          defineMacro("\\colonapprox", "\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx"); // \providecommand*\Colonapprox{\dblcolon\mathrel{\mkern-1.2mu}\approx}

          defineMacro("\\Colonapprox", "\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx"); // \providecommand*\colonsim{\vcentcolon\mathrel{\mkern-1.2mu}\sim}

          defineMacro("\\colonsim", "\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim"); // \providecommand*\Colonsim{\dblcolon\mathrel{\mkern-1.2mu}\sim}

          defineMacro("\\Colonsim", "\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim"); // Some Unicode characters are implemented with macros to mathtools functions.

          defineMacro("\u2254", "\\coloneqq"); // :=

          defineMacro("\u2255", "\\eqqcolon"); // =:

          defineMacro("\u2A74", "\\Coloneqq"); // ::=
          //////////////////////////////////////////////////////////////////////
          // colonequals.sty
          // Alternate names for mathtools's macros:

          defineMacro("\\ratio", "\\vcentcolon");
          defineMacro("\\coloncolon", "\\dblcolon");
          defineMacro("\\colonequals", "\\coloneqq");
          defineMacro("\\coloncolonequals", "\\Coloneqq");
          defineMacro("\\equalscolon", "\\eqqcolon");
          defineMacro("\\equalscoloncolon", "\\Eqqcolon");
          defineMacro("\\colonminus", "\\coloneq");
          defineMacro("\\coloncolonminus", "\\Coloneq");
          defineMacro("\\minuscolon", "\\eqcolon");
          defineMacro("\\minuscoloncolon", "\\Eqcolon"); // \colonapprox name is same in mathtools and colonequals.

          defineMacro("\\coloncolonapprox", "\\Colonapprox"); // \colonsim name is same in mathtools and colonequals.

          defineMacro("\\coloncolonsim", "\\Colonsim"); // Additional macros, implemented by analogy with mathtools definitions:

          defineMacro("\\simcolon", "\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon");
          defineMacro("\\simcoloncolon", "\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon");
          defineMacro("\\approxcolon", "\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon");
          defineMacro("\\approxcoloncolon", "\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon"); // Present in newtxmath, pxfonts and txfonts
          // TODO: The unicode character U+220C ∌ should be added to the font, and this
          //       macro turned into a propper defineSymbol in symbols.js. That way, the
          //       MathML result will be much cleaner.

          defineMacro("\\notni", "\\not\\ni");
          defineMacro("\\limsup", "\\DOTSB\\mathop{\\operatorname{lim\\,sup}}\\limits");
          defineMacro("\\liminf", "\\DOTSB\\mathop{\\operatorname{lim\\,inf}}\\limits");
          /***/
        },
        /* 147 */

        /***/
        function (module, exports, __webpack_require__) {
          "use strict";
          /*
          object-assign
          (c) Sindre Sorhus
          @license MIT
          */

          /* eslint-disable no-unused-vars */

          var getOwnPropertySymbols = Object.getOwnPropertySymbols;
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var propIsEnumerable = Object.prototype.propertyIsEnumerable;

          function toObject(val) {
            if (val === null || val === undefined) {
              throw new TypeError('Object.assign cannot be called with null or undefined');
            }

            return Object(val);
          }

          function shouldUseNative() {
            try {
              if (!Object.assign) {
                return false;
              } // Detect buggy property enumeration order in older V8 versions.
              // https://bugs.chromium.org/p/v8/issues/detail?id=4118


              var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

              test1[5] = 'de';

              if (Object.getOwnPropertyNames(test1)[0] === '5') {
                return false;
              } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


              var test2 = {};

              for (var i = 0; i < 10; i++) {
                test2['_' + String.fromCharCode(i)] = i;
              }

              var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
                return test2[n];
              });

              if (order2.join('') !== '0123456789') {
                return false;
              } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


              var test3 = {};
              'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
                test3[letter] = letter;
              });

              if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
                return false;
              }

              return true;
            } catch (err) {
              // We don't expect any of the above to throw, but better to be safe.
              return false;
            }
          }

          module.exports = shouldUseNative() ? Object.assign : function (target, source) {
            var from;
            var to = toObject(target);
            var symbols;

            for (var s = 1; s < arguments.length; s++) {
              from = Object(arguments[s]);

              for (var key in from) {
                if (hasOwnProperty.call(from, key)) {
                  to[key] = from[key];
                }
              }

              if (getOwnPropertySymbols) {
                symbols = getOwnPropertySymbols(from);

                for (var i = 0; i < symbols.length; i++) {
                  if (propIsEnumerable.call(from, symbols[i])) {
                    to[symbols[i]] = from[symbols[i]];
                  }
                }
              }
            }

            return to;
          };
          /***/
        },
        /* 148 */

        /***/
        function (module, exports) {
          // Mapping of Unicode accent characters to their LaTeX equivalent in text and
          // math mode (when they exist).
          // NOTE: This module needs to be written with Node-style modules (not
          // ES6 modules) so that unicodeMake.js (a Node application) can import it.
          module.exports = {
            "\u0301": {
              text: "\\'",
              math: '\\acute'
            },
            "\u0300": {
              text: '\\`',
              math: '\\grave'
            },
            "\u0308": {
              text: '\\"',
              math: '\\ddot'
            },
            "\u0303": {
              text: '\\~',
              math: '\\tilde'
            },
            "\u0304": {
              text: '\\=',
              math: '\\bar'
            },
            "\u0306": {
              text: "\\u",
              math: '\\breve'
            },
            "\u030C": {
              text: '\\v',
              math: '\\check'
            },
            "\u0302": {
              text: '\\^',
              math: '\\hat'
            },
            "\u0307": {
              text: '\\.',
              math: '\\dot'
            },
            "\u030A": {
              text: '\\r',
              math: '\\mathring'
            },
            "\u030B": {
              text: '\\H'
            }
          };
          /***/
        },
        /* 149 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict"; // This file is GENERATED by unicodeMake.js. DO NOT MODIFY.

          /* harmony default export */

          __webpack_exports__["a"] = {
            "\xE1": "a\u0301",
            // á = \'{a}
            "\xE0": "a\u0300",
            // à = \`{a}
            "\xE4": "a\u0308",
            // ä = \"{a}
            "\u01DF": "a\u0308\u0304",
            // ǟ = \"\={a}
            "\xE3": "a\u0303",
            // ã = \~{a}
            "\u0101": "a\u0304",
            // ā = \={a}
            "\u0103": "a\u0306",
            // ă = \u{a}
            "\u1EAF": "a\u0306\u0301",
            // ắ = \u\'{a}
            "\u1EB1": "a\u0306\u0300",
            // ằ = \u\`{a}
            "\u1EB5": "a\u0306\u0303",
            // ẵ = \u\~{a}
            "\u01CE": "a\u030C",
            // ǎ = \v{a}
            "\xE2": "a\u0302",
            // â = \^{a}
            "\u1EA5": "a\u0302\u0301",
            // ấ = \^\'{a}
            "\u1EA7": "a\u0302\u0300",
            // ầ = \^\`{a}
            "\u1EAB": "a\u0302\u0303",
            // ẫ = \^\~{a}
            "\u0227": "a\u0307",
            // ȧ = \.{a}
            "\u01E1": "a\u0307\u0304",
            // ǡ = \.\={a}
            "\xE5": "a\u030A",
            // å = \r{a}
            "\u01FB": "a\u030A\u0301",
            // ǻ = \r\'{a}
            "\u1E03": "b\u0307",
            // ḃ = \.{b}
            "\u0107": "c\u0301",
            // ć = \'{c}
            "\u010D": "c\u030C",
            // č = \v{c}
            "\u0109": "c\u0302",
            // ĉ = \^{c}
            "\u010B": "c\u0307",
            // ċ = \.{c}
            "\u010F": "d\u030C",
            // ď = \v{d}
            "\u1E0B": "d\u0307",
            // ḋ = \.{d}
            "\xE9": "e\u0301",
            // é = \'{e}
            "\xE8": "e\u0300",
            // è = \`{e}
            "\xEB": "e\u0308",
            // ë = \"{e}
            "\u1EBD": "e\u0303",
            // ẽ = \~{e}
            "\u0113": "e\u0304",
            // ē = \={e}
            "\u1E17": "e\u0304\u0301",
            // ḗ = \=\'{e}
            "\u1E15": "e\u0304\u0300",
            // ḕ = \=\`{e}
            "\u0115": "e\u0306",
            // ĕ = \u{e}
            "\u011B": "e\u030C",
            // ě = \v{e}
            "\xEA": "e\u0302",
            // ê = \^{e}
            "\u1EBF": "e\u0302\u0301",
            // ế = \^\'{e}
            "\u1EC1": "e\u0302\u0300",
            // ề = \^\`{e}
            "\u1EC5": "e\u0302\u0303",
            // ễ = \^\~{e}
            "\u0117": "e\u0307",
            // ė = \.{e}
            "\u1E1F": "f\u0307",
            // ḟ = \.{f}
            "\u01F5": "g\u0301",
            // ǵ = \'{g}
            "\u1E21": "g\u0304",
            // ḡ = \={g}
            "\u011F": "g\u0306",
            // ğ = \u{g}
            "\u01E7": "g\u030C",
            // ǧ = \v{g}
            "\u011D": "g\u0302",
            // ĝ = \^{g}
            "\u0121": "g\u0307",
            // ġ = \.{g}
            "\u1E27": "h\u0308",
            // ḧ = \"{h}
            "\u021F": "h\u030C",
            // ȟ = \v{h}
            "\u0125": "h\u0302",
            // ĥ = \^{h}
            "\u1E23": "h\u0307",
            // ḣ = \.{h}
            "\xED": "i\u0301",
            // í = \'{i}
            "\xEC": "i\u0300",
            // ì = \`{i}
            "\xEF": "i\u0308",
            // ï = \"{i}
            "\u1E2F": "i\u0308\u0301",
            // ḯ = \"\'{i}
            "\u0129": "i\u0303",
            // ĩ = \~{i}
            "\u012B": "i\u0304",
            // ī = \={i}
            "\u012D": "i\u0306",
            // ĭ = \u{i}
            "\u01D0": "i\u030C",
            // ǐ = \v{i}
            "\xEE": "i\u0302",
            // î = \^{i}
            "\u01F0": "j\u030C",
            // ǰ = \v{j}
            "\u0135": "j\u0302",
            // ĵ = \^{j}
            "\u1E31": "k\u0301",
            // ḱ = \'{k}
            "\u01E9": "k\u030C",
            // ǩ = \v{k}
            "\u013A": "l\u0301",
            // ĺ = \'{l}
            "\u013E": "l\u030C",
            // ľ = \v{l}
            "\u1E3F": "m\u0301",
            // ḿ = \'{m}
            "\u1E41": "m\u0307",
            // ṁ = \.{m}
            "\u0144": "n\u0301",
            // ń = \'{n}
            "\u01F9": "n\u0300",
            // ǹ = \`{n}
            "\xF1": "n\u0303",
            // ñ = \~{n}
            "\u0148": "n\u030C",
            // ň = \v{n}
            "\u1E45": "n\u0307",
            // ṅ = \.{n}
            "\xF3": "o\u0301",
            // ó = \'{o}
            "\xF2": "o\u0300",
            // ò = \`{o}
            "\xF6": "o\u0308",
            // ö = \"{o}
            "\u022B": "o\u0308\u0304",
            // ȫ = \"\={o}
            "\xF5": "o\u0303",
            // õ = \~{o}
            "\u1E4D": "o\u0303\u0301",
            // ṍ = \~\'{o}
            "\u1E4F": "o\u0303\u0308",
            // ṏ = \~\"{o}
            "\u022D": "o\u0303\u0304",
            // ȭ = \~\={o}
            "\u014D": "o\u0304",
            // ō = \={o}
            "\u1E53": "o\u0304\u0301",
            // ṓ = \=\'{o}
            "\u1E51": "o\u0304\u0300",
            // ṑ = \=\`{o}
            "\u014F": "o\u0306",
            // ŏ = \u{o}
            "\u01D2": "o\u030C",
            // ǒ = \v{o}
            "\xF4": "o\u0302",
            // ô = \^{o}
            "\u1ED1": "o\u0302\u0301",
            // ố = \^\'{o}
            "\u1ED3": "o\u0302\u0300",
            // ồ = \^\`{o}
            "\u1ED7": "o\u0302\u0303",
            // ỗ = \^\~{o}
            "\u022F": "o\u0307",
            // ȯ = \.{o}
            "\u0231": "o\u0307\u0304",
            // ȱ = \.\={o}
            "\u0151": "o\u030B",
            // ő = \H{o}
            "\u1E55": "p\u0301",
            // ṕ = \'{p}
            "\u1E57": "p\u0307",
            // ṗ = \.{p}
            "\u0155": "r\u0301",
            // ŕ = \'{r}
            "\u0159": "r\u030C",
            // ř = \v{r}
            "\u1E59": "r\u0307",
            // ṙ = \.{r}
            "\u015B": "s\u0301",
            // ś = \'{s}
            "\u1E65": "s\u0301\u0307",
            // ṥ = \'\.{s}
            "\u0161": "s\u030C",
            // š = \v{s}
            "\u1E67": "s\u030C\u0307",
            // ṧ = \v\.{s}
            "\u015D": "s\u0302",
            // ŝ = \^{s}
            "\u1E61": "s\u0307",
            // ṡ = \.{s}
            "\u1E97": "t\u0308",
            // ẗ = \"{t}
            "\u0165": "t\u030C",
            // ť = \v{t}
            "\u1E6B": "t\u0307",
            // ṫ = \.{t}
            "\xFA": "u\u0301",
            // ú = \'{u}
            "\xF9": "u\u0300",
            // ù = \`{u}
            "\xFC": "u\u0308",
            // ü = \"{u}
            "\u01D8": "u\u0308\u0301",
            // ǘ = \"\'{u}
            "\u01DC": "u\u0308\u0300",
            // ǜ = \"\`{u}
            "\u01D6": "u\u0308\u0304",
            // ǖ = \"\={u}
            "\u01DA": "u\u0308\u030C",
            // ǚ = \"\v{u}
            "\u0169": "u\u0303",
            // ũ = \~{u}
            "\u1E79": "u\u0303\u0301",
            // ṹ = \~\'{u}
            "\u016B": "u\u0304",
            // ū = \={u}
            "\u1E7B": "u\u0304\u0308",
            // ṻ = \=\"{u}
            "\u016D": "u\u0306",
            // ŭ = \u{u}
            "\u01D4": "u\u030C",
            // ǔ = \v{u}
            "\xFB": "u\u0302",
            // û = \^{u}
            "\u016F": "u\u030A",
            // ů = \r{u}
            "\u0171": "u\u030B",
            // ű = \H{u}
            "\u1E7D": "v\u0303",
            // ṽ = \~{v}
            "\u1E83": "w\u0301",
            // ẃ = \'{w}
            "\u1E81": "w\u0300",
            // ẁ = \`{w}
            "\u1E85": "w\u0308",
            // ẅ = \"{w}
            "\u0175": "w\u0302",
            // ŵ = \^{w}
            "\u1E87": "w\u0307",
            // ẇ = \.{w}
            "\u1E98": "w\u030A",
            // ẘ = \r{w}
            "\u1E8D": "x\u0308",
            // ẍ = \"{x}
            "\u1E8B": "x\u0307",
            // ẋ = \.{x}
            "\xFD": "y\u0301",
            // ý = \'{y}
            "\u1EF3": "y\u0300",
            // ỳ = \`{y}
            "\xFF": "y\u0308",
            // ÿ = \"{y}
            "\u1EF9": "y\u0303",
            // ỹ = \~{y}
            "\u0233": "y\u0304",
            // ȳ = \={y}
            "\u0177": "y\u0302",
            // ŷ = \^{y}
            "\u1E8F": "y\u0307",
            // ẏ = \.{y}
            "\u1E99": "y\u030A",
            // ẙ = \r{y}
            "\u017A": "z\u0301",
            // ź = \'{z}
            "\u017E": "z\u030C",
            // ž = \v{z}
            "\u1E91": "z\u0302",
            // ẑ = \^{z}
            "\u017C": "z\u0307",
            // ż = \.{z}
            "\xC1": "A\u0301",
            // Á = \'{A}
            "\xC0": "A\u0300",
            // À = \`{A}
            "\xC4": "A\u0308",
            // Ä = \"{A}
            "\u01DE": "A\u0308\u0304",
            // Ǟ = \"\={A}
            "\xC3": "A\u0303",
            // Ã = \~{A}
            "\u0100": "A\u0304",
            // Ā = \={A}
            "\u0102": "A\u0306",
            // Ă = \u{A}
            "\u1EAE": "A\u0306\u0301",
            // Ắ = \u\'{A}
            "\u1EB0": "A\u0306\u0300",
            // Ằ = \u\`{A}
            "\u1EB4": "A\u0306\u0303",
            // Ẵ = \u\~{A}
            "\u01CD": "A\u030C",
            // Ǎ = \v{A}
            "\xC2": "A\u0302",
            // Â = \^{A}
            "\u1EA4": "A\u0302\u0301",
            // Ấ = \^\'{A}
            "\u1EA6": "A\u0302\u0300",
            // Ầ = \^\`{A}
            "\u1EAA": "A\u0302\u0303",
            // Ẫ = \^\~{A}
            "\u0226": "A\u0307",
            // Ȧ = \.{A}
            "\u01E0": "A\u0307\u0304",
            // Ǡ = \.\={A}
            "\xC5": "A\u030A",
            // Å = \r{A}
            "\u01FA": "A\u030A\u0301",
            // Ǻ = \r\'{A}
            "\u1E02": "B\u0307",
            // Ḃ = \.{B}
            "\u0106": "C\u0301",
            // Ć = \'{C}
            "\u010C": "C\u030C",
            // Č = \v{C}
            "\u0108": "C\u0302",
            // Ĉ = \^{C}
            "\u010A": "C\u0307",
            // Ċ = \.{C}
            "\u010E": "D\u030C",
            // Ď = \v{D}
            "\u1E0A": "D\u0307",
            // Ḋ = \.{D}
            "\xC9": "E\u0301",
            // É = \'{E}
            "\xC8": "E\u0300",
            // È = \`{E}
            "\xCB": "E\u0308",
            // Ë = \"{E}
            "\u1EBC": "E\u0303",
            // Ẽ = \~{E}
            "\u0112": "E\u0304",
            // Ē = \={E}
            "\u1E16": "E\u0304\u0301",
            // Ḗ = \=\'{E}
            "\u1E14": "E\u0304\u0300",
            // Ḕ = \=\`{E}
            "\u0114": "E\u0306",
            // Ĕ = \u{E}
            "\u011A": "E\u030C",
            // Ě = \v{E}
            "\xCA": "E\u0302",
            // Ê = \^{E}
            "\u1EBE": "E\u0302\u0301",
            // Ế = \^\'{E}
            "\u1EC0": "E\u0302\u0300",
            // Ề = \^\`{E}
            "\u1EC4": "E\u0302\u0303",
            // Ễ = \^\~{E}
            "\u0116": "E\u0307",
            // Ė = \.{E}
            "\u1E1E": "F\u0307",
            // Ḟ = \.{F}
            "\u01F4": "G\u0301",
            // Ǵ = \'{G}
            "\u1E20": "G\u0304",
            // Ḡ = \={G}
            "\u011E": "G\u0306",
            // Ğ = \u{G}
            "\u01E6": "G\u030C",
            // Ǧ = \v{G}
            "\u011C": "G\u0302",
            // Ĝ = \^{G}
            "\u0120": "G\u0307",
            // Ġ = \.{G}
            "\u1E26": "H\u0308",
            // Ḧ = \"{H}
            "\u021E": "H\u030C",
            // Ȟ = \v{H}
            "\u0124": "H\u0302",
            // Ĥ = \^{H}
            "\u1E22": "H\u0307",
            // Ḣ = \.{H}
            "\xCD": "I\u0301",
            // Í = \'{I}
            "\xCC": "I\u0300",
            // Ì = \`{I}
            "\xCF": "I\u0308",
            // Ï = \"{I}
            "\u1E2E": "I\u0308\u0301",
            // Ḯ = \"\'{I}
            "\u0128": "I\u0303",
            // Ĩ = \~{I}
            "\u012A": "I\u0304",
            // Ī = \={I}
            "\u012C": "I\u0306",
            // Ĭ = \u{I}
            "\u01CF": "I\u030C",
            // Ǐ = \v{I}
            "\xCE": "I\u0302",
            // Î = \^{I}
            "\u0130": "I\u0307",
            // İ = \.{I}
            "\u0134": "J\u0302",
            // Ĵ = \^{J}
            "\u1E30": "K\u0301",
            // Ḱ = \'{K}
            "\u01E8": "K\u030C",
            // Ǩ = \v{K}
            "\u0139": "L\u0301",
            // Ĺ = \'{L}
            "\u013D": "L\u030C",
            // Ľ = \v{L}
            "\u1E3E": "M\u0301",
            // Ḿ = \'{M}
            "\u1E40": "M\u0307",
            // Ṁ = \.{M}
            "\u0143": "N\u0301",
            // Ń = \'{N}
            "\u01F8": "N\u0300",
            // Ǹ = \`{N}
            "\xD1": "N\u0303",
            // Ñ = \~{N}
            "\u0147": "N\u030C",
            // Ň = \v{N}
            "\u1E44": "N\u0307",
            // Ṅ = \.{N}
            "\xD3": "O\u0301",
            // Ó = \'{O}
            "\xD2": "O\u0300",
            // Ò = \`{O}
            "\xD6": "O\u0308",
            // Ö = \"{O}
            "\u022A": "O\u0308\u0304",
            // Ȫ = \"\={O}
            "\xD5": "O\u0303",
            // Õ = \~{O}
            "\u1E4C": "O\u0303\u0301",
            // Ṍ = \~\'{O}
            "\u1E4E": "O\u0303\u0308",
            // Ṏ = \~\"{O}
            "\u022C": "O\u0303\u0304",
            // Ȭ = \~\={O}
            "\u014C": "O\u0304",
            // Ō = \={O}
            "\u1E52": "O\u0304\u0301",
            // Ṓ = \=\'{O}
            "\u1E50": "O\u0304\u0300",
            // Ṑ = \=\`{O}
            "\u014E": "O\u0306",
            // Ŏ = \u{O}
            "\u01D1": "O\u030C",
            // Ǒ = \v{O}
            "\xD4": "O\u0302",
            // Ô = \^{O}
            "\u1ED0": "O\u0302\u0301",
            // Ố = \^\'{O}
            "\u1ED2": "O\u0302\u0300",
            // Ồ = \^\`{O}
            "\u1ED6": "O\u0302\u0303",
            // Ỗ = \^\~{O}
            "\u022E": "O\u0307",
            // Ȯ = \.{O}
            "\u0230": "O\u0307\u0304",
            // Ȱ = \.\={O}
            "\u0150": "O\u030B",
            // Ő = \H{O}
            "\u1E54": "P\u0301",
            // Ṕ = \'{P}
            "\u1E56": "P\u0307",
            // Ṗ = \.{P}
            "\u0154": "R\u0301",
            // Ŕ = \'{R}
            "\u0158": "R\u030C",
            // Ř = \v{R}
            "\u1E58": "R\u0307",
            // Ṙ = \.{R}
            "\u015A": "S\u0301",
            // Ś = \'{S}
            "\u1E64": "S\u0301\u0307",
            // Ṥ = \'\.{S}
            "\u0160": "S\u030C",
            // Š = \v{S}
            "\u1E66": "S\u030C\u0307",
            // Ṧ = \v\.{S}
            "\u015C": "S\u0302",
            // Ŝ = \^{S}
            "\u1E60": "S\u0307",
            // Ṡ = \.{S}
            "\u0164": "T\u030C",
            // Ť = \v{T}
            "\u1E6A": "T\u0307",
            // Ṫ = \.{T}
            "\xDA": "U\u0301",
            // Ú = \'{U}
            "\xD9": "U\u0300",
            // Ù = \`{U}
            "\xDC": "U\u0308",
            // Ü = \"{U}
            "\u01D7": "U\u0308\u0301",
            // Ǘ = \"\'{U}
            "\u01DB": "U\u0308\u0300",
            // Ǜ = \"\`{U}
            "\u01D5": "U\u0308\u0304",
            // Ǖ = \"\={U}
            "\u01D9": "U\u0308\u030C",
            // Ǚ = \"\v{U}
            "\u0168": "U\u0303",
            // Ũ = \~{U}
            "\u1E78": "U\u0303\u0301",
            // Ṹ = \~\'{U}
            "\u016A": "U\u0304",
            // Ū = \={U}
            "\u1E7A": "U\u0304\u0308",
            // Ṻ = \=\"{U}
            "\u016C": "U\u0306",
            // Ŭ = \u{U}
            "\u01D3": "U\u030C",
            // Ǔ = \v{U}
            "\xDB": "U\u0302",
            // Û = \^{U}
            "\u016E": "U\u030A",
            // Ů = \r{U}
            "\u0170": "U\u030B",
            // Ű = \H{U}
            "\u1E7C": "V\u0303",
            // Ṽ = \~{V}
            "\u1E82": "W\u0301",
            // Ẃ = \'{W}
            "\u1E80": "W\u0300",
            // Ẁ = \`{W}
            "\u1E84": "W\u0308",
            // Ẅ = \"{W}
            "\u0174": "W\u0302",
            // Ŵ = \^{W}
            "\u1E86": "W\u0307",
            // Ẇ = \.{W}
            "\u1E8C": "X\u0308",
            // Ẍ = \"{X}
            "\u1E8A": "X\u0307",
            // Ẋ = \.{X}
            "\xDD": "Y\u0301",
            // Ý = \'{Y}
            "\u1EF2": "Y\u0300",
            // Ỳ = \`{Y}
            "\u0178": "Y\u0308",
            // Ÿ = \"{Y}
            "\u1EF8": "Y\u0303",
            // Ỹ = \~{Y}
            "\u0232": "Y\u0304",
            // Ȳ = \={Y}
            "\u0176": "Y\u0302",
            // Ŷ = \^{Y}
            "\u1E8E": "Y\u0307",
            // Ẏ = \.{Y}
            "\u0179": "Z\u0301",
            // Ź = \'{Z}
            "\u017D": "Z\u030C",
            // Ž = \v{Z}
            "\u1E90": "Z\u0302",
            // Ẑ = \^{Z}
            "\u017B": "Z\u0307",
            // Ż = \.{Z}
            "\u03AC": "\u03B1\u0301",
            // ά = \'{α}
            "\u1F70": "\u03B1\u0300",
            // ὰ = \`{α}
            "\u1FB1": "\u03B1\u0304",
            // ᾱ = \={α}
            "\u1FB0": "\u03B1\u0306",
            // ᾰ = \u{α}
            "\u03AD": "\u03B5\u0301",
            // έ = \'{ε}
            "\u1F72": "\u03B5\u0300",
            // ὲ = \`{ε}
            "\u03AE": "\u03B7\u0301",
            // ή = \'{η}
            "\u1F74": "\u03B7\u0300",
            // ὴ = \`{η}
            "\u03AF": "\u03B9\u0301",
            // ί = \'{ι}
            "\u1F76": "\u03B9\u0300",
            // ὶ = \`{ι}
            "\u03CA": "\u03B9\u0308",
            // ϊ = \"{ι}
            "\u0390": "\u03B9\u0308\u0301",
            // ΐ = \"\'{ι}
            "\u1FD2": "\u03B9\u0308\u0300",
            // ῒ = \"\`{ι}
            "\u1FD1": "\u03B9\u0304",
            // ῑ = \={ι}
            "\u1FD0": "\u03B9\u0306",
            // ῐ = \u{ι}
            "\u03CC": "\u03BF\u0301",
            // ό = \'{ο}
            "\u1F78": "\u03BF\u0300",
            // ὸ = \`{ο}
            "\u03CD": "\u03C5\u0301",
            // ύ = \'{υ}
            "\u1F7A": "\u03C5\u0300",
            // ὺ = \`{υ}
            "\u03CB": "\u03C5\u0308",
            // ϋ = \"{υ}
            "\u03B0": "\u03C5\u0308\u0301",
            // ΰ = \"\'{υ}
            "\u1FE2": "\u03C5\u0308\u0300",
            // ῢ = \"\`{υ}
            "\u1FE1": "\u03C5\u0304",
            // ῡ = \={υ}
            "\u1FE0": "\u03C5\u0306",
            // ῠ = \u{υ}
            "\u03CE": "\u03C9\u0301",
            // ώ = \'{ω}
            "\u1F7C": "\u03C9\u0300",
            // ὼ = \`{ω}
            "\u038E": "\u03A5\u0301",
            // Ύ = \'{Υ}
            "\u1FEA": "\u03A5\u0300",
            // Ὺ = \`{Υ}
            "\u03AB": "\u03A5\u0308",
            // Ϋ = \"{Υ}
            "\u1FE9": "\u03A5\u0304",
            // Ῡ = \={Υ}
            "\u1FE8": "\u03A5\u0306",
            // Ῠ = \u{Υ}
            "\u038F": "\u03A9\u0301",
            // Ώ = \'{Ω}
            "\u1FFA": "\u03A9\u0300" // Ὼ = \`{Ω}

          };
          /***/
        }
        /******/
        ])["default"]
      );
    });
    /***/

  },

  /***/
  "./node_modules/markdown-it-mark/index.js":
  /*!************************************************!*\
    !*** ./node_modules/markdown-it-mark/index.js ***!
    \************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItMarkIndexJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function ins_plugin(md) {
      // Insert each marker as a separate text token, and add it to delimiter list
      //
      function tokenize(state, silent) {
        var i,
            scanned,
            token,
            len,
            ch,
            start = state.pos,
            marker = state.src.charCodeAt(start);

        if (silent) {
          return false;
        }

        if (marker !== 0x3D
        /* = */
        ) {
            return false;
          }

        scanned = state.scanDelims(state.pos, true);
        len = scanned.length;
        ch = String.fromCharCode(marker);

        if (len < 2) {
          return false;
        }

        if (len % 2) {
          token = state.push('text', '', 0);
          token.content = ch;
          len--;
        }

        for (i = 0; i < len; i += 2) {
          token = state.push('text', '', 0);
          token.content = ch + ch;

          if (!scanned.can_open && !scanned.can_close) {
            continue;
          }

          state.delimiters.push({
            marker: marker,
            length: 0,
            // disable "rule of 3" length checks meant for emphasis
            jump: i,
            token: state.tokens.length - 1,
            end: -1,
            open: scanned.can_open,
            close: scanned.can_close
          });
        }

        state.pos += scanned.length;
        return true;
      } // Walk through delimiter list and replace text tokens with tags
      //


      function postProcess(state, delimiters) {
        var i,
            j,
            startDelim,
            endDelim,
            token,
            loneMarkers = [],
            max = delimiters.length;

        for (i = 0; i < max; i++) {
          startDelim = delimiters[i];

          if (startDelim.marker !== 0x3D
          /* = */
          ) {
              continue;
            }

          if (startDelim.end === -1) {
            continue;
          }

          endDelim = delimiters[startDelim.end];
          token = state.tokens[startDelim.token];
          token.type = 'mark_open';
          token.tag = 'mark';
          token.nesting = 1;
          token.markup = '==';
          token.content = '';
          token = state.tokens[endDelim.token];
          token.type = 'mark_close';
          token.tag = 'mark';
          token.nesting = -1;
          token.markup = '==';
          token.content = '';

          if (state.tokens[endDelim.token - 1].type === 'text' && state.tokens[endDelim.token - 1].content === '=') {
            loneMarkers.push(endDelim.token - 1);
          }
        } // If a marker sequence has an odd number of characters, it's splitted
        // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the
        // start of the sequence.
        //
        // So, we have to move all those markers after subsequent s_close tags.
        //


        while (loneMarkers.length) {
          i = loneMarkers.pop();
          j = i + 1;

          while (j < state.tokens.length && state.tokens[j].type === 'mark_close') {
            j++;
          }

          j--;

          if (i !== j) {
            token = state.tokens[j];
            state.tokens[j] = state.tokens[i];
            state.tokens[i] = token;
          }
        }
      }

      md.inline.ruler.before('emphasis', 'mark', tokenize);
      md.inline.ruler2.before('emphasis', 'mark', function (state) {
        var curr,
            tokens_meta = state.tokens_meta,
            max = (state.tokens_meta || []).length;
        postProcess(state, state.delimiters);

        for (curr = 0; curr < max; curr++) {
          if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
            postProcess(state, tokens_meta[curr].delimiters);
          }
        }
      });
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it-sub/index.js":
  /*!***********************************************!*\
    !*** ./node_modules/markdown-it-sub/index.js ***!
    \***********************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItSubIndexJs(module, exports, __webpack_require__) {
    "use strict"; // Process ~subscript~
    // same as UNESCAPE_MD_RE plus a space

    var UNESCAPE_RE = /\\([ \\!"#$%&'()*+,.\/:;<=>?@[\]^_`{|}~-])/g;

    function subscript(state, silent) {
      var found,
          content,
          token,
          max = state.posMax,
          start = state.pos;

      if (state.src.charCodeAt(start) !== 0x7E
      /* ~ */
      ) {
          return false;
        }

      if (silent) {
        return false;
      } // don't run any pairs in validation mode


      if (start + 2 >= max) {
        return false;
      }

      state.pos = start + 1;

      while (state.pos < max) {
        if (state.src.charCodeAt(state.pos) === 0x7E
        /* ~ */
        ) {
            found = true;
            break;
          }

        state.md.inline.skipToken(state);
      }

      if (!found || start + 1 === state.pos) {
        state.pos = start;
        return false;
      }

      content = state.src.slice(start + 1, state.pos); // don't allow unescaped spaces/newlines inside

      if (content.match(/(^|[^\\])(\\\\)*\s/)) {
        state.pos = start;
        return false;
      } // found!


      state.posMax = state.pos;
      state.pos = start + 1; // Earlier we checked !silent, but this implementation does not need it

      token = state.push('sub_open', 'sub', 1);
      token.markup = '~';
      token = state.push('text', '', 0);
      token.content = content.replace(UNESCAPE_RE, '$1');
      token = state.push('sub_close', 'sub', -1);
      token.markup = '~';
      state.pos = state.posMax + 1;
      state.posMax = max;
      return true;
    }

    module.exports = function sub_plugin(md) {
      md.inline.ruler.after('emphasis', 'sub', subscript);
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it-sup/index.js":
  /*!***********************************************!*\
    !*** ./node_modules/markdown-it-sup/index.js ***!
    \***********************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItSupIndexJs(module, exports, __webpack_require__) {
    "use strict"; // Process ^superscript^
    // same as UNESCAPE_MD_RE plus a space

    var UNESCAPE_RE = /\\([ \\!"#$%&'()*+,.\/:;<=>?@[\]^_`{|}~-])/g;

    function superscript(state, silent) {
      var found,
          content,
          token,
          max = state.posMax,
          start = state.pos;

      if (state.src.charCodeAt(start) !== 0x5E
      /* ^ */
      ) {
          return false;
        }

      if (silent) {
        return false;
      } // don't run any pairs in validation mode


      if (start + 2 >= max) {
        return false;
      }

      state.pos = start + 1;

      while (state.pos < max) {
        if (state.src.charCodeAt(state.pos) === 0x5E
        /* ^ */
        ) {
            found = true;
            break;
          }

        state.md.inline.skipToken(state);
      }

      if (!found || start + 1 === state.pos) {
        state.pos = start;
        return false;
      }

      content = state.src.slice(start + 1, state.pos); // don't allow unescaped spaces/newlines inside

      if (content.match(/(^|[^\\])(\\\\)*\s/)) {
        state.pos = start;
        return false;
      } // found!


      state.posMax = state.pos;
      state.pos = start + 1; // Earlier we checked !silent, but this implementation does not need it

      token = state.push('sup_open', 'sup', 1);
      token.markup = '^';
      token = state.push('text', '', 0);
      token.content = content.replace(UNESCAPE_RE, '$1');
      token = state.push('sup_close', 'sup', -1);
      token.markup = '^';
      state.pos = state.posMax + 1;
      state.posMax = max;
      return true;
    }

    module.exports = function sup_plugin(md) {
      md.inline.ruler.after('emphasis', 'sup', superscript);
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it-task-lists/index.js":
  /*!******************************************************!*\
    !*** ./node_modules/markdown-it-task-lists/index.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItTaskListsIndexJs(module, exports) {
    // Markdown-it plugin to render GitHub-style task lists; see
    //
    // https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments
    // https://github.com/blog/1825-task-lists-in-all-markdown-documents
    var disableCheckboxes = true;
    var useLabelWrapper = false;
    var useLabelAfter = false;

    module.exports = function (md, options) {
      if (options) {
        disableCheckboxes = !options.enabled;
        useLabelWrapper = !!options.label;
        useLabelAfter = !!options.labelAfter;
      }

      md.core.ruler.after('inline', 'github-task-lists', function (state) {
        var tokens = state.tokens;

        for (var i = 2; i < tokens.length; i++) {
          if (isTodoItem(tokens, i)) {
            todoify(tokens[i], state.Token);
            attrSet(tokens[i - 2], 'class', 'task-list-item' + (!disableCheckboxes ? ' enabled' : ''));
            attrSet(tokens[parentToken(tokens, i - 2)], 'class', 'contains-task-list');
          }
        }
      });
    };

    function attrSet(token, name, value) {
      var index = token.attrIndex(name);
      var attr = [name, value];

      if (index < 0) {
        token.attrPush(attr);
      } else {
        token.attrs[index] = attr;
      }
    }

    function parentToken(tokens, index) {
      var targetLevel = tokens[index].level - 1;

      for (var i = index - 1; i >= 0; i--) {
        if (tokens[i].level === targetLevel) {
          return i;
        }
      }

      return -1;
    }

    function isTodoItem(tokens, index) {
      return isInline(tokens[index]) && isParagraph(tokens[index - 1]) && isListItem(tokens[index - 2]) && startsWithTodoMarkdown(tokens[index]);
    }

    function todoify(token, TokenConstructor) {
      token.children.unshift(makeCheckbox(token, TokenConstructor));
      token.children[1].content = token.children[1].content.slice(3);
      token.content = token.content.slice(3);

      if (useLabelWrapper) {
        if (useLabelAfter) {
          token.children.pop(); // Use large random number as id property of the checkbox.

          var id = 'task-item-' + Math.ceil(Math.random() * (10000 * 1000) - 1000);
          token.children[0].content = token.children[0].content.slice(0, -1) + ' id="' + id + '">';
          token.children.push(afterLabel(token.content, id, TokenConstructor));
        } else {
          token.children.unshift(beginLabel(TokenConstructor));
          token.children.push(endLabel(TokenConstructor));
        }
      }
    }

    function makeCheckbox(token, TokenConstructor) {
      var checkbox = new TokenConstructor('html_inline', '', 0);
      var disabledAttr = disableCheckboxes ? ' disabled="" ' : '';

      if (token.content.indexOf('[ ] ') === 0) {
        checkbox.content = '<input class="task-list-item-checkbox"' + disabledAttr + 'type="checkbox">';
      } else if (token.content.indexOf('[x] ') === 0 || token.content.indexOf('[X] ') === 0) {
        checkbox.content = '<input class="task-list-item-checkbox" checked=""' + disabledAttr + 'type="checkbox">';
      }

      return checkbox;
    } // these next two functions are kind of hacky; probably should really be a
    // true block-level token with .tag=='label'


    function beginLabel(TokenConstructor) {
      var token = new TokenConstructor('html_inline', '', 0);
      token.content = '<label>';
      return token;
    }

    function endLabel(TokenConstructor) {
      var token = new TokenConstructor('html_inline', '', 0);
      token.content = '</label>';
      return token;
    }

    function afterLabel(content, id, TokenConstructor) {
      var token = new TokenConstructor('html_inline', '', 0);
      token.content = '<label class="task-list-item-label" for="' + id + '">' + content + '</label>';
      token.attrs = [{
        "for": id
      }];
      return token;
    }

    function isInline(token) {
      return token.type === 'inline';
    }

    function isParagraph(token) {
      return token.type === 'paragraph_open';
    }

    function isListItem(token) {
      return token.type === 'list_item_open';
    }

    function startsWithTodoMarkdown(token) {
      // leading whitespace in a list item is already trimmed off by markdown-it
      return token.content.indexOf('[ ] ') === 0 || token.content.indexOf('[x] ') === 0 || token.content.indexOf('[X] ') === 0;
    }
    /***/

  },

  /***/
  "./node_modules/markdown-it-video/index.js":
  /*!*************************************************!*\
    !*** ./node_modules/markdown-it-video/index.js ***!
    \*************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItVideoIndexJs(module, exports) {
    // Process @[youtube](youtubeVideoID)
    // Process @[vimeo](vimeoVideoID)
    // Process @[vine](vineVideoID)
    // Process @[prezi](preziID)
    // Process @[osf](guid)
    var ytRegex = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&?]*).*/;

    function youtubeParser(url) {
      var match = url.match(ytRegex);
      return match && match[7].length === 11 ? match[7] : url;
    }
    /* eslint-disable max-len */


    var vimeoRegex = /https?:\/\/(?:www\.|player\.)?vimeo.com\/(?:channels\/(?:\w+\/)?|groups\/([^/]*)\/videos\/|album\/(\d+)\/video\/|)(\d+)(?:$|\/|\?)/;
    /* eslint-enable max-len */

    function vimeoParser(url) {
      var match = url.match(vimeoRegex);
      return match && typeof match[3] === 'string' ? match[3] : url;
    }

    var vineRegex = /^http(?:s?):\/\/(?:www\.)?vine\.co\/v\/([a-zA-Z0-9]{1,13}).*/;

    function vineParser(url) {
      var match = url.match(vineRegex);
      return match && match[1].length === 11 ? match[1] : url;
    }

    var preziRegex = /^https:\/\/prezi.com\/(.[^/]+)/;

    function preziParser(url) {
      var match = url.match(preziRegex);
      return match ? match[1] : url;
    } // TODO: Write regex for staging and local servers.


    var mfrRegex = /^http(?:s?):\/\/(?:www\.)?mfr\.osf\.io\/render\?url=http(?:s?):\/\/osf\.io\/([a-zA-Z0-9]{1,5})\/\?action=download/;

    function mfrParser(url) {
      var match = url.match(mfrRegex);
      return match ? match[1] : url;
    }

    var EMBED_REGEX = /@\[([a-zA-Z].+)]\([\s]*(.*?)[\s]*[)]/im;

    function videoEmbed(md, options) {
      function videoReturn(state, silent) {
        var serviceEnd;
        var serviceStart;
        var token;
        var videoID;
        var theState = state;
        var oldPos = state.pos;

        if (state.src.charCodeAt(oldPos) !== 0x40
        /* @ */
        || state.src.charCodeAt(oldPos + 1) !== 0x5B
        /* [ */
        ) {
            return false;
          }

        var match = EMBED_REGEX.exec(state.src.slice(state.pos, state.src.length));

        if (!match || match.length < 3) {
          return false;
        }

        var service = match[1];
        videoID = match[2];
        var serviceLower = service.toLowerCase();

        if (serviceLower === 'youtube') {
          videoID = youtubeParser(videoID);
        } else if (serviceLower === 'vimeo') {
          videoID = vimeoParser(videoID);
        } else if (serviceLower === 'vine') {
          videoID = vineParser(videoID);
        } else if (serviceLower === 'prezi') {
          videoID = preziParser(videoID);
        } else if (serviceLower === 'osf') {
          videoID = mfrParser(videoID);
        } else if (!options[serviceLower]) {
          return false;
        } // If the videoID field is empty, regex currently make it the close parenthesis.


        if (videoID === ')') {
          videoID = '';
        }

        serviceStart = oldPos + 2;
        serviceEnd = md.helpers.parseLinkLabel(state, oldPos + 1, false); //
        // We found the end of the link, and know for a fact it's a valid link;
        // so all that's left to do is to call tokenizer.
        //

        if (!silent) {
          theState.pos = serviceStart;
          theState.service = theState.src.slice(serviceStart, serviceEnd);
          var newState = new theState.md.inline.State(service, theState.md, theState.env, []);
          newState.md.inline.tokenize(newState);
          token = theState.push('video', '');
          token.videoID = videoID;
          token.service = service;
          token.level = theState.level;
        }

        theState.pos += theState.src.indexOf(')', theState.pos);
        return true;
      }

      return videoReturn;
    }

    function videoUrl(service, videoID, options) {
      switch (service) {
        case 'youtube':
          return 'https://www.youtube.com/embed/' + videoID;

        case 'vimeo':
          return 'https://player.vimeo.com/video/' + videoID;

        case 'vine':
          return 'https://vine.co/v/' + videoID + '/embed/' + options.vine.embed;

        case 'prezi':
          return 'https://prezi.com/embed/' + videoID + '/?bgcolor=ffffff&amp;lock_to_path=0&amp;autoplay=0&amp;autohide_ctrls=0&amp;' + 'landing_data=bHVZZmNaNDBIWnNjdEVENDRhZDFNZGNIUE43MHdLNWpsdFJLb2ZHanI5N1lQVHkxSHFxazZ0UUNCRHloSXZROHh3PT0&amp;' + 'landing_sign=1kD6c0N6aYpMUS0wxnQjxzSqZlEB8qNFdxtdjYhwSuI';

        case 'osf':
          return 'https://mfr.osf.io/render?url=https://osf.io/' + videoID + '/?action=download';

        default:
          return service;
      }
    }

    function tokenizeVideo(md, options) {
      function tokenizeReturn(tokens, idx) {
        var videoID = md.utils.escapeHtml(tokens[idx].videoID);
        var service = md.utils.escapeHtml(tokens[idx].service).toLowerCase();
        var checkUrl = /http(?:s?):\/\/(?:www\.)?[a-zA-Z0-9-:.]{1,}\/render(?:\/)?[a-zA-Z0-9.&;?=:%]{1,}url=http(?:s?):\/\/[a-zA-Z0-9 -:.]{1,}\/[a-zA-Z0-9]{1,5}\/\?[a-zA-Z0-9.=:%]{1,}/;
        var num;

        if (service === 'osf' && videoID) {
          num = Math.random() * 0x10000;

          if (videoID.match(checkUrl)) {
            return '<div id="' + num + '" class="mfr mfr-file"></div><script>' + '$(document).ready(function () {new mfr.Render("' + num + '", "' + videoID + '");' + '    }); </script>';
          }

          return '<div id="' + num + '" class="mfr mfr-file"></div><script>' + '$(document).ready(function () {new mfr.Render("' + num + '", "https://mfr.osf.io/' + 'render?url=https://osf.io/' + videoID + '/?action=download%26mode=render");' + '    }); </script>';
        }

        return videoID === '' ? '' : '<div class="embed-responsive embed-responsive-16by9"><iframe class="embed-responsive-item ' + service + '-player" type="text/html" width="' + options[service].width + '" height="' + options[service].height + '" src="' + options.url(service, videoID, options) + '" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div>';
      }

      return tokenizeReturn;
    }

    var defaults = {
      url: videoUrl,
      youtube: {
        width: 640,
        height: 390
      },
      vimeo: {
        width: 500,
        height: 281
      },
      vine: {
        width: 600,
        height: 600,
        embed: 'simple'
      },
      prezi: {
        width: 550,
        height: 400
      },
      osf: {
        width: '100%',
        height: '100%'
      }
    };

    module.exports = function videoPlugin(md, options) {
      var theOptions = options;
      var theMd = md;

      if (theOptions) {
        Object.keys(defaults).forEach(function checkForKeys(key) {
          if (typeof theOptions[key] === 'undefined') {
            theOptions[key] = defaults[key];
          }
        });
      } else {
        theOptions = defaults;
      }

      theMd.renderer.rules.video = tokenizeVideo(theMd, theOptions);
      theMd.inline.ruler.before('emphasis', 'video', videoEmbed(theMd, theOptions));
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/index.js":
  /*!*******************************************!*\
    !*** ./node_modules/markdown-it/index.js ***!
    \*******************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItIndexJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = __webpack_require__(
    /*! ./lib/ */
    "./node_modules/markdown-it/lib/index.js");
    /***/
  },

  /***/
  "./node_modules/markdown-it/lib/common/entities.js":
  /*!*********************************************************!*\
    !*** ./node_modules/markdown-it/lib/common/entities.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibCommonEntitiesJs(module, exports, __webpack_require__) {
    "use strict"; // HTML5 entities map: { name -> utf16string }
    //

    /*eslint quotes:0*/

    module.exports = __webpack_require__(
    /*! entities/lib/maps/entities.json */
    "./node_modules/markdown-it/node_modules/entities/lib/maps/entities.json");
    /***/
  },

  /***/
  "./node_modules/markdown-it/lib/common/html_blocks.js":
  /*!************************************************************!*\
    !*** ./node_modules/markdown-it/lib/common/html_blocks.js ***!
    \************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibCommonHtml_blocksJs(module, exports, __webpack_require__) {
    "use strict"; // List of valid html blocks names, accorting to commonmark spec
    // http://jgm.github.io/CommonMark/spec.html#html-blocks

    module.exports = ['address', 'article', 'aside', 'base', 'basefont', 'blockquote', 'body', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dialog', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hr', 'html', 'iframe', 'legend', 'li', 'link', 'main', 'menu', 'menuitem', 'meta', 'nav', 'noframes', 'ol', 'optgroup', 'option', 'p', 'param', 'section', 'source', 'summary', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul'];
    /***/
  },

  /***/
  "./node_modules/markdown-it/lib/common/html_re.js":
  /*!********************************************************!*\
    !*** ./node_modules/markdown-it/lib/common/html_re.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibCommonHtml_reJs(module, exports, __webpack_require__) {
    "use strict"; // Regexps to match html elements

    var attr_name = '[a-zA-Z_:][a-zA-Z0-9:._-]*';
    var unquoted = '[^"\'=<>`\\x00-\\x20]+';
    var single_quoted = "'[^']*'";
    var double_quoted = '"[^"]*"';
    var attr_value = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';
    var attribute = '(?:\\s+' + attr_name + '(?:\\s*=\\s*' + attr_value + ')?)';
    var open_tag = '<[A-Za-z][A-Za-z0-9\\-]*' + attribute + '*\\s*\\/?>';
    var close_tag = '<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>';
    var comment = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';
    var processing = '<[?].*?[?]>';
    var declaration = '<![A-Z]+\\s+[^>]*>';
    var cdata = '<!\\[CDATA\\[[\\s\\S]*?\\]\\]>';
    var HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment + '|' + processing + '|' + declaration + '|' + cdata + ')');
    var HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');
    module.exports.HTML_TAG_RE = HTML_TAG_RE;
    module.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;
    /***/
  },

  /***/
  "./node_modules/markdown-it/lib/common/utils.js":
  /*!******************************************************!*\
    !*** ./node_modules/markdown-it/lib/common/utils.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibCommonUtilsJs(module, exports, __webpack_require__) {
    "use strict"; // Utilities
    //

    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }

    function isString(obj) {
      return _class(obj) === '[object String]';
    }

    var _hasOwnProperty = Object.prototype.hasOwnProperty;

    function has(object, key) {
      return _hasOwnProperty.call(object, key);
    } // Merge objects
    //


    function assign(obj
    /*from1, from2, from3, ...*/
    ) {
      var sources = Array.prototype.slice.call(arguments, 1);
      sources.forEach(function (source) {
        if (!source) {
          return;
        }

        if (typeof source !== 'object') {
          throw new TypeError(source + 'must be object');
        }

        Object.keys(source).forEach(function (key) {
          obj[key] = source[key];
        });
      });
      return obj;
    } // Remove element from array and put another array at those position.
    // Useful for some operations with tokens


    function arrayReplaceAt(src, pos, newElements) {
      return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));
    } ////////////////////////////////////////////////////////////////////////////////


    function isValidEntityCode(c) {
      /*eslint no-bitwise:0*/
      // broken sequence
      if (c >= 0xD800 && c <= 0xDFFF) {
        return false;
      } // never used


      if (c >= 0xFDD0 && c <= 0xFDEF) {
        return false;
      }

      if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) {
        return false;
      } // control codes


      if (c >= 0x00 && c <= 0x08) {
        return false;
      }

      if (c === 0x0B) {
        return false;
      }

      if (c >= 0x0E && c <= 0x1F) {
        return false;
      }

      if (c >= 0x7F && c <= 0x9F) {
        return false;
      } // out of range


      if (c > 0x10FFFF) {
        return false;
      }

      return true;
    }

    function fromCodePoint(c) {
      /*eslint no-bitwise:0*/
      if (c > 0xffff) {
        c -= 0x10000;
        var surrogate1 = 0xd800 + (c >> 10),
            surrogate2 = 0xdc00 + (c & 0x3ff);
        return String.fromCharCode(surrogate1, surrogate2);
      }

      return String.fromCharCode(c);
    }

    var UNESCAPE_MD_RE = /\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g;
    var ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;
    var UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');
    var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;

    var entities = __webpack_require__(
    /*! ./entities */
    "./node_modules/markdown-it/lib/common/entities.js");

    function replaceEntityPattern(match, name) {
      var code = 0;

      if (has(entities, name)) {
        return entities[name];
      }

      if (name.charCodeAt(0) === 0x23
      /* # */
      && DIGITAL_ENTITY_TEST_RE.test(name)) {
        code = name[1].toLowerCase() === 'x' ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);

        if (isValidEntityCode(code)) {
          return fromCodePoint(code);
        }
      }

      return match;
    }
    /*function replaceEntities(str) {
      if (str.indexOf('&') < 0) { return str; }
    
      return str.replace(ENTITY_RE, replaceEntityPattern);
    }*/


    function unescapeMd(str) {
      if (str.indexOf('\\') < 0) {
        return str;
      }

      return str.replace(UNESCAPE_MD_RE, '$1');
    }

    function unescapeAll(str) {
      if (str.indexOf('\\') < 0 && str.indexOf('&') < 0) {
        return str;
      }

      return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {
        if (escaped) {
          return escaped;
        }

        return replaceEntityPattern(match, entity);
      });
    } ////////////////////////////////////////////////////////////////////////////////


    var HTML_ESCAPE_TEST_RE = /[&<>"]/;
    var HTML_ESCAPE_REPLACE_RE = /[&<>"]/g;
    var HTML_REPLACEMENTS = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;'
    };

    function replaceUnsafeChar(ch) {
      return HTML_REPLACEMENTS[ch];
    }

    function escapeHtml(str) {
      if (HTML_ESCAPE_TEST_RE.test(str)) {
        return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);
      }

      return str;
    } ////////////////////////////////////////////////////////////////////////////////


    var REGEXP_ESCAPE_RE = /[.?*+^$[\]\\(){}|-]/g;

    function escapeRE(str) {
      return str.replace(REGEXP_ESCAPE_RE, '\\$&');
    } ////////////////////////////////////////////////////////////////////////////////


    function isSpace(code) {
      switch (code) {
        case 0x09:
        case 0x20:
          return true;
      }

      return false;
    } // Zs (unicode class) || [\t\f\v\r\n]


    function isWhiteSpace(code) {
      if (code >= 0x2000 && code <= 0x200A) {
        return true;
      }

      switch (code) {
        case 0x09: // \t

        case 0x0A: // \n

        case 0x0B: // \v

        case 0x0C: // \f

        case 0x0D: // \r

        case 0x20:
        case 0xA0:
        case 0x1680:
        case 0x202F:
        case 0x205F:
        case 0x3000:
          return true;
      }

      return false;
    } ////////////////////////////////////////////////////////////////////////////////

    /*eslint-disable max-len*/


    var UNICODE_PUNCT_RE = __webpack_require__(
    /*! uc.micro/categories/P/regex */
    "./node_modules/uc.micro/categories/P/regex.js"); // Currently without astral characters support.


    function isPunctChar(ch) {
      return UNICODE_PUNCT_RE.test(ch);
    } // Markdown ASCII punctuation characters.
    //
    // !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~
    // http://spec.commonmark.org/0.15/#ascii-punctuation-character
    //
    // Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.
    //


    function isMdAsciiPunct(ch) {
      switch (ch) {
        case 0x21
        /* ! */
        :
        case 0x22
        /* " */
        :
        case 0x23
        /* # */
        :
        case 0x24
        /* $ */
        :
        case 0x25
        /* % */
        :
        case 0x26
        /* & */
        :
        case 0x27
        /* ' */
        :
        case 0x28
        /* ( */
        :
        case 0x29
        /* ) */
        :
        case 0x2A
        /* * */
        :
        case 0x2B
        /* + */
        :
        case 0x2C
        /* , */
        :
        case 0x2D
        /* - */
        :
        case 0x2E
        /* . */
        :
        case 0x2F
        /* / */
        :
        case 0x3A
        /* : */
        :
        case 0x3B
        /* ; */
        :
        case 0x3C
        /* < */
        :
        case 0x3D
        /* = */
        :
        case 0x3E
        /* > */
        :
        case 0x3F
        /* ? */
        :
        case 0x40
        /* @ */
        :
        case 0x5B
        /* [ */
        :
        case 0x5C
        /* \ */
        :
        case 0x5D
        /* ] */
        :
        case 0x5E
        /* ^ */
        :
        case 0x5F
        /* _ */
        :
        case 0x60
        /* ` */
        :
        case 0x7B
        /* { */
        :
        case 0x7C
        /* | */
        :
        case 0x7D
        /* } */
        :
        case 0x7E
        /* ~ */
        :
          return true;

        default:
          return false;
      }
    } // Hepler to unify [reference labels].
    //


    function normalizeReference(str) {
      // Trim and collapse whitespace
      //
      str = str.trim().replace(/\s+/g, ' '); // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug
      // fixed in v12 (couldn't find any details).
      //
      // So treat this one as a special case
      // (remove this when node v10 is no longer supported).
      //

      if ('ẞ'.toLowerCase() === 'Ṿ') {
        str = str.replace(/ẞ/g, 'ß');
      } // .toLowerCase().toUpperCase() should get rid of all differences
      // between letter variants.
      //
      // Simple .toLowerCase() doesn't normalize 125 code points correctly,
      // and .toUpperCase doesn't normalize 6 of them (list of exceptions:
      // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently
      // uppercased versions).
      //
      // Here's an example showing how it happens. Lets take greek letter omega:
      // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)
      //
      // Unicode entries:
      // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;
      // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398
      // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398
      // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;
      //
      // Case-insensitive comparison should treat all of them as equivalent.
      //
      // But .toLowerCase() doesn't change ϑ (it's already lowercase),
      // and .toUpperCase() doesn't change ϴ (already uppercase).
      //
      // Applying first lower then upper case normalizes any character:
      // '\u0398\u03f4\u03b8\u03d1'.toLowerCase().toUpperCase() === '\u0398\u0398\u0398\u0398'
      //
      // Note: this is equivalent to unicode case folding; unicode normalization
      // is a different step that is not required here.
      //
      // Final result should be uppercased, because it's later stored in an object
      // (this avoid a conflict with Object.prototype members,
      // most notably, `__proto__`)
      //


      return str.toLowerCase().toUpperCase();
    } ////////////////////////////////////////////////////////////////////////////////
    // Re-export libraries commonly used in both markdown-it and its plugins,
    // so plugins won't have to depend on them explicitly, which reduces their
    // bundled size (e.g. a browser build).
    //


    exports.lib = {};
    exports.lib.mdurl = __webpack_require__(
    /*! mdurl */
    "./node_modules/mdurl/index.js");
    exports.lib.ucmicro = __webpack_require__(
    /*! uc.micro */
    "./node_modules/uc.micro/index.js");
    exports.assign = assign;
    exports.isString = isString;
    exports.has = has;
    exports.unescapeMd = unescapeMd;
    exports.unescapeAll = unescapeAll;
    exports.isValidEntityCode = isValidEntityCode;
    exports.fromCodePoint = fromCodePoint; // exports.replaceEntities     = replaceEntities;

    exports.escapeHtml = escapeHtml;
    exports.arrayReplaceAt = arrayReplaceAt;
    exports.isSpace = isSpace;
    exports.isWhiteSpace = isWhiteSpace;
    exports.isMdAsciiPunct = isMdAsciiPunct;
    exports.isPunctChar = isPunctChar;
    exports.escapeRE = escapeRE;
    exports.normalizeReference = normalizeReference;
    /***/
  },

  /***/
  "./node_modules/markdown-it/lib/helpers/index.js":
  /*!*******************************************************!*\
    !*** ./node_modules/markdown-it/lib/helpers/index.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibHelpersIndexJs(module, exports, __webpack_require__) {
    "use strict"; // Just a shortcut for bulk export

    exports.parseLinkLabel = __webpack_require__(
    /*! ./parse_link_label */
    "./node_modules/markdown-it/lib/helpers/parse_link_label.js");
    exports.parseLinkDestination = __webpack_require__(
    /*! ./parse_link_destination */
    "./node_modules/markdown-it/lib/helpers/parse_link_destination.js");
    exports.parseLinkTitle = __webpack_require__(
    /*! ./parse_link_title */
    "./node_modules/markdown-it/lib/helpers/parse_link_title.js");
    /***/
  },

  /***/
  "./node_modules/markdown-it/lib/helpers/parse_link_destination.js":
  /*!************************************************************************!*\
    !*** ./node_modules/markdown-it/lib/helpers/parse_link_destination.js ***!
    \************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibHelpersParse_link_destinationJs(module, exports, __webpack_require__) {
    "use strict"; // Parse link destination
    //

    var unescapeAll = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").unescapeAll;

    module.exports = function parseLinkDestination(str, pos, max) {
      var code,
          level,
          lines = 0,
          start = pos,
          result = {
        ok: false,
        pos: 0,
        lines: 0,
        str: ''
      };

      if (str.charCodeAt(pos) === 0x3C
      /* < */
      ) {
          pos++;

          while (pos < max) {
            code = str.charCodeAt(pos);

            if (code === 0x0A
            /* \n */
            ) {
                return result;
              }

            if (code === 0x3E
            /* > */
            ) {
                result.pos = pos + 1;
                result.str = unescapeAll(str.slice(start + 1, pos));
                result.ok = true;
                return result;
              }

            if (code === 0x5C
            /* \ */
            && pos + 1 < max) {
              pos += 2;
              continue;
            }

            pos++;
          } // no closing '>'


          return result;
        } // this should be ... } else { ... branch


      level = 0;

      while (pos < max) {
        code = str.charCodeAt(pos);

        if (code === 0x20) {
          break;
        } // ascii control characters


        if (code < 0x20 || code === 0x7F) {
          break;
        }

        if (code === 0x5C
        /* \ */
        && pos + 1 < max) {
          pos += 2;
          continue;
        }

        if (code === 0x28
        /* ( */
        ) {
            level++;
          }

        if (code === 0x29
        /* ) */
        ) {
            if (level === 0) {
              break;
            }

            level--;
          }

        pos++;
      }

      if (start === pos) {
        return result;
      }

      if (level !== 0) {
        return result;
      }

      result.str = unescapeAll(str.slice(start, pos));
      result.lines = lines;
      result.pos = pos;
      result.ok = true;
      return result;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/helpers/parse_link_label.js":
  /*!******************************************************************!*\
    !*** ./node_modules/markdown-it/lib/helpers/parse_link_label.js ***!
    \******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibHelpersParse_link_labelJs(module, exports, __webpack_require__) {
    "use strict"; // Parse link label
    //
    // this function assumes that first character ("[") already matches;
    // returns the end of the label
    //

    module.exports = function parseLinkLabel(state, start, disableNested) {
      var level,
          found,
          marker,
          prevPos,
          labelEnd = -1,
          max = state.posMax,
          oldPos = state.pos;
      state.pos = start + 1;
      level = 1;

      while (state.pos < max) {
        marker = state.src.charCodeAt(state.pos);

        if (marker === 0x5D
        /* ] */
        ) {
            level--;

            if (level === 0) {
              found = true;
              break;
            }
          }

        prevPos = state.pos;
        state.md.inline.skipToken(state);

        if (marker === 0x5B
        /* [ */
        ) {
            if (prevPos === state.pos - 1) {
              // increase level if we find text `[`, which is not a part of any token
              level++;
            } else if (disableNested) {
              state.pos = oldPos;
              return -1;
            }
          }
      }

      if (found) {
        labelEnd = state.pos;
      } // restore old state


      state.pos = oldPos;
      return labelEnd;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/helpers/parse_link_title.js":
  /*!******************************************************************!*\
    !*** ./node_modules/markdown-it/lib/helpers/parse_link_title.js ***!
    \******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibHelpersParse_link_titleJs(module, exports, __webpack_require__) {
    "use strict"; // Parse link title
    //

    var unescapeAll = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").unescapeAll;

    module.exports = function parseLinkTitle(str, pos, max) {
      var code,
          marker,
          lines = 0,
          start = pos,
          result = {
        ok: false,
        pos: 0,
        lines: 0,
        str: ''
      };

      if (pos >= max) {
        return result;
      }

      marker = str.charCodeAt(pos);

      if (marker !== 0x22
      /* " */
      && marker !== 0x27
      /* ' */
      && marker !== 0x28
      /* ( */
      ) {
          return result;
        }

      pos++; // if opening marker is "(", switch it to closing marker ")"

      if (marker === 0x28) {
        marker = 0x29;
      }

      while (pos < max) {
        code = str.charCodeAt(pos);

        if (code === marker) {
          result.pos = pos + 1;
          result.lines = lines;
          result.str = unescapeAll(str.slice(start + 1, pos));
          result.ok = true;
          return result;
        } else if (code === 0x0A) {
          lines++;
        } else if (code === 0x5C
        /* \ */
        && pos + 1 < max) {
          pos++;

          if (str.charCodeAt(pos) === 0x0A) {
            lines++;
          }
        }

        pos++;
      }

      return result;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/index.js":
  /*!***********************************************!*\
    !*** ./node_modules/markdown-it/lib/index.js ***!
    \***********************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibIndexJs(module, exports, __webpack_require__) {
    "use strict"; // Main parser class

    var utils = __webpack_require__(
    /*! ./common/utils */
    "./node_modules/markdown-it/lib/common/utils.js");

    var helpers = __webpack_require__(
    /*! ./helpers */
    "./node_modules/markdown-it/lib/helpers/index.js");

    var Renderer = __webpack_require__(
    /*! ./renderer */
    "./node_modules/markdown-it/lib/renderer.js");

    var ParserCore = __webpack_require__(
    /*! ./parser_core */
    "./node_modules/markdown-it/lib/parser_core.js");

    var ParserBlock = __webpack_require__(
    /*! ./parser_block */
    "./node_modules/markdown-it/lib/parser_block.js");

    var ParserInline = __webpack_require__(
    /*! ./parser_inline */
    "./node_modules/markdown-it/lib/parser_inline.js");

    var LinkifyIt = __webpack_require__(
    /*! linkify-it */
    "./node_modules/linkify-it/index.js");

    var mdurl = __webpack_require__(
    /*! mdurl */
    "./node_modules/mdurl/index.js");

    var punycode = __webpack_require__(
    /*! punycode */
    "./node_modules/punycode/punycode.es6.js");

    var config = {
      'default': __webpack_require__(
      /*! ./presets/default */
      "./node_modules/markdown-it/lib/presets/default.js"),
      zero: __webpack_require__(
      /*! ./presets/zero */
      "./node_modules/markdown-it/lib/presets/zero.js"),
      commonmark: __webpack_require__(
      /*! ./presets/commonmark */
      "./node_modules/markdown-it/lib/presets/commonmark.js")
    }; ////////////////////////////////////////////////////////////////////////////////
    //
    // This validator can prohibit more than really needed to prevent XSS. It's a
    // tradeoff to keep code simple and to be secure by default.
    //
    // If you need different setup - override validator method as you wish. Or
    // replace it with dummy function and use external sanitizer.
    //

    var BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;
    var GOOD_DATA_RE = /^data:image\/(gif|png|jpeg|webp);/;

    function validateLink(url) {
      // url should be normalized at this point, and existing entities are decoded
      var str = url.trim().toLowerCase();
      return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) ? true : false : true;
    } ////////////////////////////////////////////////////////////////////////////////


    var RECODE_HOSTNAME_FOR = ['http:', 'https:', 'mailto:'];

    function normalizeLink(url) {
      var parsed = mdurl.parse(url, true);

      if (parsed.hostname) {
        // Encode hostnames in urls like:
        // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
        //
        // We don't encode unknown schemas, because it's likely that we encode
        // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
        //
        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
          try {
            parsed.hostname = punycode.toASCII(parsed.hostname);
          } catch (er) {
            /**/
          }
        }
      }

      return mdurl.encode(mdurl.format(parsed));
    }

    function normalizeLinkText(url) {
      var parsed = mdurl.parse(url, true);

      if (parsed.hostname) {
        // Encode hostnames in urls like:
        // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
        //
        // We don't encode unknown schemas, because it's likely that we encode
        // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
        //
        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
          try {
            parsed.hostname = punycode.toUnicode(parsed.hostname);
          } catch (er) {
            /**/
          }
        }
      }

      return mdurl.decode(mdurl.format(parsed));
    }
    /**
     * class MarkdownIt
     *
     * Main parser/renderer class.
     *
     * ##### Usage
     *
     * ```javascript
     * // node.js, "classic" way:
     * var MarkdownIt = require('markdown-it'),
     *     md = new MarkdownIt();
     * var result = md.render('# markdown-it rulezz!');
     *
     * // node.js, the same, but with sugar:
     * var md = require('markdown-it')();
     * var result = md.render('# markdown-it rulezz!');
     *
     * // browser without AMD, added to "window" on script load
     * // Note, there are no dash.
     * var md = window.markdownit();
     * var result = md.render('# markdown-it rulezz!');
     * ```
     *
     * Single line rendering, without paragraph wrap:
     *
     * ```javascript
     * var md = require('markdown-it')();
     * var result = md.renderInline('__markdown-it__ rulezz!');
     * ```
     **/

    /**
     * new MarkdownIt([presetName, options])
     * - presetName (String): optional, `commonmark` / `zero`
     * - options (Object)
     *
     * Creates parser instanse with given config. Can be called without `new`.
     *
     * ##### presetName
     *
     * MarkdownIt provides named presets as a convenience to quickly
     * enable/disable active syntax rules and options for common use cases.
     *
     * - ["commonmark"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -
     *   configures parser to strict [CommonMark](http://commonmark.org/) mode.
     * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -
     *   similar to GFM, used when no preset name given. Enables all available rules,
     *   but still without html, typographer & autolinker.
     * - ["zero"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -
     *   all rules disabled. Useful to quickly setup your config via `.enable()`.
     *   For example, when you need only `bold` and `italic` markup and nothing else.
     *
     * ##### options:
     *
     * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!
     *   That's not safe! You may need external sanitizer to protect output from XSS.
     *   It's better to extend features via plugins, instead of enabling HTML.
     * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags
     *   (`<br />`). This is needed only for full CommonMark compatibility. In real
     *   world you will need HTML output.
     * - __breaks__ - `false`. Set `true` to convert `\n` in paragraphs into `<br>`.
     * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.
     *   Can be useful for external highlighters.
     * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.
     * - __typographer__  - `false`. Set `true` to enable [some language-neutral
     *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +
     *   quotes beautification (smartquotes).
     * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement
     *   pairs, when typographer enabled and smartquotes on. For example, you can
     *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and
     *   `['«\xA0', '\xA0»', '‹\xA0', '\xA0›']` for French (including nbsp).
     * - __highlight__ - `null`. Highlighter function for fenced code blocks.
     *   Highlighter `function (str, lang)` should return escaped HTML. It can also
     *   return empty string if the source was not changed and should be escaped
     *   externaly. If result starts with <pre... internal wrapper is skipped.
     *
     * ##### Example
     *
     * ```javascript
     * // commonmark mode
     * var md = require('markdown-it')('commonmark');
     *
     * // default mode
     * var md = require('markdown-it')();
     *
     * // enable everything
     * var md = require('markdown-it')({
     *   html: true,
     *   linkify: true,
     *   typographer: true
     * });
     * ```
     *
     * ##### Syntax highlighting
     *
     * ```js
     * var hljs = require('highlight.js') // https://highlightjs.org/
     *
     * var md = require('markdown-it')({
     *   highlight: function (str, lang) {
     *     if (lang && hljs.getLanguage(lang)) {
     *       try {
     *         return hljs.highlight(lang, str, true).value;
     *       } catch (__) {}
     *     }
     *
     *     return ''; // use external default escaping
     *   }
     * });
     * ```
     *
     * Or with full wrapper override (if you need assign class to `<pre>`):
     *
     * ```javascript
     * var hljs = require('highlight.js') // https://highlightjs.org/
     *
     * // Actual default values
     * var md = require('markdown-it')({
     *   highlight: function (str, lang) {
     *     if (lang && hljs.getLanguage(lang)) {
     *       try {
     *         return '<pre class="hljs"><code>' +
     *                hljs.highlight(lang, str, true).value +
     *                '</code></pre>';
     *       } catch (__) {}
     *     }
     *
     *     return '<pre class="hljs"><code>' + md.utils.escapeHtml(str) + '</code></pre>';
     *   }
     * });
     * ```
     *
     **/


    function MarkdownIt(presetName, options) {
      if (!(this instanceof MarkdownIt)) {
        return new MarkdownIt(presetName, options);
      }

      if (!options) {
        if (!utils.isString(presetName)) {
          options = presetName || {};
          presetName = 'default';
        }
      }
      /**
       * MarkdownIt#inline -> ParserInline
       *
       * Instance of [[ParserInline]]. You may need it to add new rules when
       * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
       * [[MarkdownIt.enable]].
       **/


      this.inline = new ParserInline();
      /**
       * MarkdownIt#block -> ParserBlock
       *
       * Instance of [[ParserBlock]]. You may need it to add new rules when
       * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
       * [[MarkdownIt.enable]].
       **/

      this.block = new ParserBlock();
      /**
       * MarkdownIt#core -> Core
       *
       * Instance of [[Core]] chain executor. You may need it to add new rules when
       * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
       * [[MarkdownIt.enable]].
       **/

      this.core = new ParserCore();
      /**
       * MarkdownIt#renderer -> Renderer
       *
       * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering
       * rules for new token types, generated by plugins.
       *
       * ##### Example
       *
       * ```javascript
       * var md = require('markdown-it')();
       *
       * function myToken(tokens, idx, options, env, self) {
       *   //...
       *   return result;
       * };
       *
       * md.renderer.rules['my_token'] = myToken
       * ```
       *
       * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).
       **/

      this.renderer = new Renderer();
      /**
       * MarkdownIt#linkify -> LinkifyIt
       *
       * [linkify-it](https://github.com/markdown-it/linkify-it) instance.
       * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)
       * rule.
       **/

      this.linkify = new LinkifyIt();
      /**
       * MarkdownIt#validateLink(url) -> Boolean
       *
       * Link validation function. CommonMark allows too much in links. By default
       * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas
       * except some embedded image types.
       *
       * You can change this behaviour:
       *
       * ```javascript
       * var md = require('markdown-it')();
       * // enable everything
       * md.validateLink = function () { return true; }
       * ```
       **/

      this.validateLink = validateLink;
      /**
       * MarkdownIt#normalizeLink(url) -> String
       *
       * Function used to encode link url to a machine-readable format,
       * which includes url-encoding, punycode, etc.
       **/

      this.normalizeLink = normalizeLink;
      /**
       * MarkdownIt#normalizeLinkText(url) -> String
       *
       * Function used to decode link url to a human-readable format`
       **/

      this.normalizeLinkText = normalizeLinkText; // Expose utils & helpers for easy acces from plugins

      /**
       * MarkdownIt#utils -> utils
       *
       * Assorted utility functions, useful to write plugins. See details
       * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).
       **/

      this.utils = utils;
      /**
       * MarkdownIt#helpers -> helpers
       *
       * Link components parser functions, useful to write plugins. See details
       * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).
       **/

      this.helpers = utils.assign({}, helpers);
      this.options = {};
      this.configure(presetName);

      if (options) {
        this.set(options);
      }
    }
    /** chainable
     * MarkdownIt.set(options)
     *
     * Set parser options (in the same format as in constructor). Probably, you
     * will never need it, but you can change options after constructor call.
     *
     * ##### Example
     *
     * ```javascript
     * var md = require('markdown-it')()
     *             .set({ html: true, breaks: true })
     *             .set({ typographer, true });
     * ```
     *
     * __Note:__ To achieve the best possible performance, don't modify a
     * `markdown-it` instance options on the fly. If you need multiple configurations
     * it's best to create multiple instances and initialize each with separate
     * config.
     **/


    MarkdownIt.prototype.set = function (options) {
      utils.assign(this.options, options);
      return this;
    };
    /** chainable, internal
     * MarkdownIt.configure(presets)
     *
     * Batch load of all options and compenent settings. This is internal method,
     * and you probably will not need it. But if you will - see available presets
     * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)
     *
     * We strongly recommend to use presets instead of direct config loads. That
     * will give better compatibility with next versions.
     **/


    MarkdownIt.prototype.configure = function (presets) {
      var self = this,
          presetName;

      if (utils.isString(presets)) {
        presetName = presets;
        presets = config[presetName];

        if (!presets) {
          throw new Error('Wrong `markdown-it` preset "' + presetName + '", check name');
        }
      }

      if (!presets) {
        throw new Error('Wrong `markdown-it` preset, can\'t be empty');
      }

      if (presets.options) {
        self.set(presets.options);
      }

      if (presets.components) {
        Object.keys(presets.components).forEach(function (name) {
          if (presets.components[name].rules) {
            self[name].ruler.enableOnly(presets.components[name].rules);
          }

          if (presets.components[name].rules2) {
            self[name].ruler2.enableOnly(presets.components[name].rules2);
          }
        });
      }

      return this;
    };
    /** chainable
     * MarkdownIt.enable(list, ignoreInvalid)
     * - list (String|Array): rule name or list of rule names to enable
     * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
     *
     * Enable list or rules. It will automatically find appropriate components,
     * containing rules with given names. If rule not found, and `ignoreInvalid`
     * not set - throws exception.
     *
     * ##### Example
     *
     * ```javascript
     * var md = require('markdown-it')()
     *             .enable(['sub', 'sup'])
     *             .disable('smartquotes');
     * ```
     **/


    MarkdownIt.prototype.enable = function (list, ignoreInvalid) {
      var result = [];

      if (!Array.isArray(list)) {
        list = [list];
      }

      ['core', 'block', 'inline'].forEach(function (chain) {
        result = result.concat(this[chain].ruler.enable(list, true));
      }, this);
      result = result.concat(this.inline.ruler2.enable(list, true));
      var missed = list.filter(function (name) {
        return result.indexOf(name) < 0;
      });

      if (missed.length && !ignoreInvalid) {
        throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);
      }

      return this;
    };
    /** chainable
     * MarkdownIt.disable(list, ignoreInvalid)
     * - list (String|Array): rule name or list of rule names to disable.
     * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
     *
     * The same as [[MarkdownIt.enable]], but turn specified rules off.
     **/


    MarkdownIt.prototype.disable = function (list, ignoreInvalid) {
      var result = [];

      if (!Array.isArray(list)) {
        list = [list];
      }

      ['core', 'block', 'inline'].forEach(function (chain) {
        result = result.concat(this[chain].ruler.disable(list, true));
      }, this);
      result = result.concat(this.inline.ruler2.disable(list, true));
      var missed = list.filter(function (name) {
        return result.indexOf(name) < 0;
      });

      if (missed.length && !ignoreInvalid) {
        throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);
      }

      return this;
    };
    /** chainable
     * MarkdownIt.use(plugin, params)
     *
     * Load specified plugin with given params into current parser instance.
     * It's just a sugar to call `plugin(md, params)` with curring.
     *
     * ##### Example
     *
     * ```javascript
     * var iterator = require('markdown-it-for-inline');
     * var md = require('markdown-it')()
     *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {
     *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');
     *             });
     * ```
     **/


    MarkdownIt.prototype.use = function (plugin
    /*, params, ... */
    ) {
      var args = [this].concat(Array.prototype.slice.call(arguments, 1));
      plugin.apply(plugin, args);
      return this;
    };
    /** internal
     * MarkdownIt.parse(src, env) -> Array
     * - src (String): source string
     * - env (Object): environment sandbox
     *
     * Parse input string and return list of block tokens (special token type
     * "inline" will contain list of inline tokens). You should not call this
     * method directly, until you write custom renderer (for example, to produce
     * AST).
     *
     * `env` is used to pass data between "distributed" rules and return additional
     * metadata like reference info, needed for the renderer. It also can be used to
     * inject data in specific cases. Usually, you will be ok to pass `{}`,
     * and then pass updated object to renderer.
     **/


    MarkdownIt.prototype.parse = function (src, env) {
      if (typeof src !== 'string') {
        throw new Error('Input data should be a String');
      }

      var state = new this.core.State(src, this, env);
      this.core.process(state);
      return state.tokens;
    };
    /**
     * MarkdownIt.render(src [, env]) -> String
     * - src (String): source string
     * - env (Object): environment sandbox
     *
     * Render markdown string into html. It does all magic for you :).
     *
     * `env` can be used to inject additional metadata (`{}` by default).
     * But you will not need it with high probability. See also comment
     * in [[MarkdownIt.parse]].
     **/


    MarkdownIt.prototype.render = function (src, env) {
      env = env || {};
      return this.renderer.render(this.parse(src, env), this.options, env);
    };
    /** internal
     * MarkdownIt.parseInline(src, env) -> Array
     * - src (String): source string
     * - env (Object): environment sandbox
     *
     * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the
     * block tokens list with the single `inline` element, containing parsed inline
     * tokens in `children` property. Also updates `env` object.
     **/


    MarkdownIt.prototype.parseInline = function (src, env) {
      var state = new this.core.State(src, this, env);
      state.inlineMode = true;
      this.core.process(state);
      return state.tokens;
    };
    /**
     * MarkdownIt.renderInline(src [, env]) -> String
     * - src (String): source string
     * - env (Object): environment sandbox
     *
     * Similar to [[MarkdownIt.render]] but for single paragraph content. Result
     * will NOT be wrapped into `<p>` tags.
     **/


    MarkdownIt.prototype.renderInline = function (src, env) {
      env = env || {};
      return this.renderer.render(this.parseInline(src, env), this.options, env);
    };

    module.exports = MarkdownIt;
    /***/
  },

  /***/
  "./node_modules/markdown-it/lib/parser_block.js":
  /*!******************************************************!*\
    !*** ./node_modules/markdown-it/lib/parser_block.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibParser_blockJs(module, exports, __webpack_require__) {
    "use strict";
    /** internal
     * class ParserBlock
     *
     * Block-level tokenizer.
     **/

    var Ruler = __webpack_require__(
    /*! ./ruler */
    "./node_modules/markdown-it/lib/ruler.js");

    var _rules = [// First 2 params - rule name & source. Secondary array - list of rules,
    // which can be terminated by this one.
    ['table', __webpack_require__(
    /*! ./rules_block/table */
    "./node_modules/markdown-it/lib/rules_block/table.js"), ['paragraph', 'reference']], ['code', __webpack_require__(
    /*! ./rules_block/code */
    "./node_modules/markdown-it/lib/rules_block/code.js")], ['fence', __webpack_require__(
    /*! ./rules_block/fence */
    "./node_modules/markdown-it/lib/rules_block/fence.js"), ['paragraph', 'reference', 'blockquote', 'list']], ['blockquote', __webpack_require__(
    /*! ./rules_block/blockquote */
    "./node_modules/markdown-it/lib/rules_block/blockquote.js"), ['paragraph', 'reference', 'blockquote', 'list']], ['hr', __webpack_require__(
    /*! ./rules_block/hr */
    "./node_modules/markdown-it/lib/rules_block/hr.js"), ['paragraph', 'reference', 'blockquote', 'list']], ['list', __webpack_require__(
    /*! ./rules_block/list */
    "./node_modules/markdown-it/lib/rules_block/list.js"), ['paragraph', 'reference', 'blockquote']], ['reference', __webpack_require__(
    /*! ./rules_block/reference */
    "./node_modules/markdown-it/lib/rules_block/reference.js")], ['heading', __webpack_require__(
    /*! ./rules_block/heading */
    "./node_modules/markdown-it/lib/rules_block/heading.js"), ['paragraph', 'reference', 'blockquote']], ['lheading', __webpack_require__(
    /*! ./rules_block/lheading */
    "./node_modules/markdown-it/lib/rules_block/lheading.js")], ['html_block', __webpack_require__(
    /*! ./rules_block/html_block */
    "./node_modules/markdown-it/lib/rules_block/html_block.js"), ['paragraph', 'reference', 'blockquote']], ['paragraph', __webpack_require__(
    /*! ./rules_block/paragraph */
    "./node_modules/markdown-it/lib/rules_block/paragraph.js")]];
    /**
     * new ParserBlock()
     **/

    function ParserBlock() {
      /**
       * ParserBlock#ruler -> Ruler
       *
       * [[Ruler]] instance. Keep configuration of block rules.
       **/
      this.ruler = new Ruler();

      for (var i = 0; i < _rules.length; i++) {
        this.ruler.push(_rules[i][0], _rules[i][1], {
          alt: (_rules[i][2] || []).slice()
        });
      }
    } // Generate tokens for input range
    //


    ParserBlock.prototype.tokenize = function (state, startLine, endLine) {
      var ok,
          i,
          rules = this.ruler.getRules(''),
          len = rules.length,
          line = startLine,
          hasEmptyLines = false,
          maxNesting = state.md.options.maxNesting;

      while (line < endLine) {
        state.line = line = state.skipEmptyLines(line);

        if (line >= endLine) {
          break;
        } // Termination condition for nested calls.
        // Nested calls currently used for blockquotes & lists


        if (state.sCount[line] < state.blkIndent) {
          break;
        } // If nesting level exceeded - skip tail to the end. That's not ordinary
        // situation and we should not care about content.


        if (state.level >= maxNesting) {
          state.line = endLine;
          break;
        } // Try all possible rules.
        // On success, rule should:
        //
        // - update `state.line`
        // - update `state.tokens`
        // - return true


        for (i = 0; i < len; i++) {
          ok = rules[i](state, line, endLine, false);

          if (ok) {
            break;
          }
        } // set state.tight if we had an empty line before current tag
        // i.e. latest empty line should not count


        state.tight = !hasEmptyLines; // paragraph might "eat" one newline after it in nested lists

        if (state.isEmpty(state.line - 1)) {
          hasEmptyLines = true;
        }

        line = state.line;

        if (line < endLine && state.isEmpty(line)) {
          hasEmptyLines = true;
          line++;
          state.line = line;
        }
      }
    };
    /**
     * ParserBlock.parse(str, md, env, outTokens)
     *
     * Process input string and push block tokens into `outTokens`
     **/


    ParserBlock.prototype.parse = function (src, md, env, outTokens) {
      var state;

      if (!src) {
        return;
      }

      state = new this.State(src, md, env, outTokens);
      this.tokenize(state, state.line, state.lineMax);
    };

    ParserBlock.prototype.State = __webpack_require__(
    /*! ./rules_block/state_block */
    "./node_modules/markdown-it/lib/rules_block/state_block.js");
    module.exports = ParserBlock;
    /***/
  },

  /***/
  "./node_modules/markdown-it/lib/parser_core.js":
  /*!*****************************************************!*\
    !*** ./node_modules/markdown-it/lib/parser_core.js ***!
    \*****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibParser_coreJs(module, exports, __webpack_require__) {
    "use strict";
    /** internal
     * class Core
     *
     * Top-level rules executor. Glues block/inline parsers and does intermediate
     * transformations.
     **/

    var Ruler = __webpack_require__(
    /*! ./ruler */
    "./node_modules/markdown-it/lib/ruler.js");

    var _rules = [['normalize', __webpack_require__(
    /*! ./rules_core/normalize */
    "./node_modules/markdown-it/lib/rules_core/normalize.js")], ['block', __webpack_require__(
    /*! ./rules_core/block */
    "./node_modules/markdown-it/lib/rules_core/block.js")], ['inline', __webpack_require__(
    /*! ./rules_core/inline */
    "./node_modules/markdown-it/lib/rules_core/inline.js")], ['linkify', __webpack_require__(
    /*! ./rules_core/linkify */
    "./node_modules/markdown-it/lib/rules_core/linkify.js")], ['replacements', __webpack_require__(
    /*! ./rules_core/replacements */
    "./node_modules/markdown-it/lib/rules_core/replacements.js")], ['smartquotes', __webpack_require__(
    /*! ./rules_core/smartquotes */
    "./node_modules/markdown-it/lib/rules_core/smartquotes.js")]];
    /**
     * new Core()
     **/

    function Core() {
      /**
       * Core#ruler -> Ruler
       *
       * [[Ruler]] instance. Keep configuration of core rules.
       **/
      this.ruler = new Ruler();

      for (var i = 0; i < _rules.length; i++) {
        this.ruler.push(_rules[i][0], _rules[i][1]);
      }
    }
    /**
     * Core.process(state)
     *
     * Executes core chain rules.
     **/


    Core.prototype.process = function (state) {
      var i, l, rules;
      rules = this.ruler.getRules('');

      for (i = 0, l = rules.length; i < l; i++) {
        rules[i](state);
      }
    };

    Core.prototype.State = __webpack_require__(
    /*! ./rules_core/state_core */
    "./node_modules/markdown-it/lib/rules_core/state_core.js");
    module.exports = Core;
    /***/
  },

  /***/
  "./node_modules/markdown-it/lib/parser_inline.js":
  /*!*******************************************************!*\
    !*** ./node_modules/markdown-it/lib/parser_inline.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibParser_inlineJs(module, exports, __webpack_require__) {
    "use strict";
    /** internal
     * class ParserInline
     *
     * Tokenizes paragraph content.
     **/

    var Ruler = __webpack_require__(
    /*! ./ruler */
    "./node_modules/markdown-it/lib/ruler.js"); ////////////////////////////////////////////////////////////////////////////////
    // Parser rules


    var _rules = [['text', __webpack_require__(
    /*! ./rules_inline/text */
    "./node_modules/markdown-it/lib/rules_inline/text.js")], ['newline', __webpack_require__(
    /*! ./rules_inline/newline */
    "./node_modules/markdown-it/lib/rules_inline/newline.js")], ['escape', __webpack_require__(
    /*! ./rules_inline/escape */
    "./node_modules/markdown-it/lib/rules_inline/escape.js")], ['backticks', __webpack_require__(
    /*! ./rules_inline/backticks */
    "./node_modules/markdown-it/lib/rules_inline/backticks.js")], ['strikethrough', __webpack_require__(
    /*! ./rules_inline/strikethrough */
    "./node_modules/markdown-it/lib/rules_inline/strikethrough.js").tokenize], ['emphasis', __webpack_require__(
    /*! ./rules_inline/emphasis */
    "./node_modules/markdown-it/lib/rules_inline/emphasis.js").tokenize], ['link', __webpack_require__(
    /*! ./rules_inline/link */
    "./node_modules/markdown-it/lib/rules_inline/link.js")], ['image', __webpack_require__(
    /*! ./rules_inline/image */
    "./node_modules/markdown-it/lib/rules_inline/image.js")], ['autolink', __webpack_require__(
    /*! ./rules_inline/autolink */
    "./node_modules/markdown-it/lib/rules_inline/autolink.js")], ['html_inline', __webpack_require__(
    /*! ./rules_inline/html_inline */
    "./node_modules/markdown-it/lib/rules_inline/html_inline.js")], ['entity', __webpack_require__(
    /*! ./rules_inline/entity */
    "./node_modules/markdown-it/lib/rules_inline/entity.js")]];
    var _rules2 = [['balance_pairs', __webpack_require__(
    /*! ./rules_inline/balance_pairs */
    "./node_modules/markdown-it/lib/rules_inline/balance_pairs.js")], ['strikethrough', __webpack_require__(
    /*! ./rules_inline/strikethrough */
    "./node_modules/markdown-it/lib/rules_inline/strikethrough.js").postProcess], ['emphasis', __webpack_require__(
    /*! ./rules_inline/emphasis */
    "./node_modules/markdown-it/lib/rules_inline/emphasis.js").postProcess], ['text_collapse', __webpack_require__(
    /*! ./rules_inline/text_collapse */
    "./node_modules/markdown-it/lib/rules_inline/text_collapse.js")]];
    /**
     * new ParserInline()
     **/

    function ParserInline() {
      var i;
      /**
       * ParserInline#ruler -> Ruler
       *
       * [[Ruler]] instance. Keep configuration of inline rules.
       **/

      this.ruler = new Ruler();

      for (i = 0; i < _rules.length; i++) {
        this.ruler.push(_rules[i][0], _rules[i][1]);
      }
      /**
       * ParserInline#ruler2 -> Ruler
       *
       * [[Ruler]] instance. Second ruler used for post-processing
       * (e.g. in emphasis-like rules).
       **/


      this.ruler2 = new Ruler();

      for (i = 0; i < _rules2.length; i++) {
        this.ruler2.push(_rules2[i][0], _rules2[i][1]);
      }
    } // Skip single token by running all rules in validation mode;
    // returns `true` if any rule reported success
    //


    ParserInline.prototype.skipToken = function (state) {
      var ok,
          i,
          pos = state.pos,
          rules = this.ruler.getRules(''),
          len = rules.length,
          maxNesting = state.md.options.maxNesting,
          cache = state.cache;

      if (typeof cache[pos] !== 'undefined') {
        state.pos = cache[pos];
        return;
      }

      if (state.level < maxNesting) {
        for (i = 0; i < len; i++) {
          // Increment state.level and decrement it later to limit recursion.
          // It's harmless to do here, because no tokens are created. But ideally,
          // we'd need a separate private state variable for this purpose.
          //
          state.level++;
          ok = rules[i](state, true);
          state.level--;

          if (ok) {
            break;
          }
        }
      } else {
        // Too much nesting, just skip until the end of the paragraph.
        //
        // NOTE: this will cause links to behave incorrectly in the following case,
        //       when an amount of `[` is exactly equal to `maxNesting + 1`:
        //
        //       [[[[[[[[[[[[[[[[[[[[[foo]()
        //
        // TODO: remove this workaround when CM standard will allow nested links
        //       (we can replace it by preventing links from being parsed in
        //       validation mode)
        //
        state.pos = state.posMax;
      }

      if (!ok) {
        state.pos++;
      }

      cache[pos] = state.pos;
    }; // Generate tokens for input range
    //


    ParserInline.prototype.tokenize = function (state) {
      var ok,
          i,
          rules = this.ruler.getRules(''),
          len = rules.length,
          end = state.posMax,
          maxNesting = state.md.options.maxNesting;

      while (state.pos < end) {
        // Try all possible rules.
        // On success, rule should:
        //
        // - update `state.pos`
        // - update `state.tokens`
        // - return true
        if (state.level < maxNesting) {
          for (i = 0; i < len; i++) {
            ok = rules[i](state, false);

            if (ok) {
              break;
            }
          }
        }

        if (ok) {
          if (state.pos >= end) {
            break;
          }

          continue;
        }

        state.pending += state.src[state.pos++];
      }

      if (state.pending) {
        state.pushPending();
      }
    };
    /**
     * ParserInline.parse(str, md, env, outTokens)
     *
     * Process input string and push inline tokens into `outTokens`
     **/


    ParserInline.prototype.parse = function (str, md, env, outTokens) {
      var i, rules, len;
      var state = new this.State(str, md, env, outTokens);
      this.tokenize(state);
      rules = this.ruler2.getRules('');
      len = rules.length;

      for (i = 0; i < len; i++) {
        rules[i](state);
      }
    };

    ParserInline.prototype.State = __webpack_require__(
    /*! ./rules_inline/state_inline */
    "./node_modules/markdown-it/lib/rules_inline/state_inline.js");
    module.exports = ParserInline;
    /***/
  },

  /***/
  "./node_modules/markdown-it/lib/presets/commonmark.js":
  /*!************************************************************!*\
    !*** ./node_modules/markdown-it/lib/presets/commonmark.js ***!
    \************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibPresetsCommonmarkJs(module, exports, __webpack_require__) {
    "use strict"; // Commonmark default options

    module.exports = {
      options: {
        html: true,
        // Enable HTML tags in source
        xhtmlOut: true,
        // Use '/' to close single tags (<br />)
        breaks: false,
        // Convert '\n' in paragraphs into <br>
        langPrefix: 'language-',
        // CSS language prefix for fenced blocks
        linkify: false,
        // autoconvert URL-like texts to links
        // Enable some language-neutral replacements + quotes beautification
        typographer: false,
        // Double + single quotes replacement pairs, when typographer enabled,
        // and smartquotes on. Could be either a String or an Array.
        //
        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
        // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
        quotes: "\u201C\u201D\u2018\u2019",

        /* “”‘’ */
        // Highlighter function. Should return escaped HTML,
        // or '' if the source string is not changed and should be escaped externaly.
        // If result starts with <pre... internal wrapper is skipped.
        //
        // function (/*str, lang*/) { return ''; }
        //
        highlight: null,
        maxNesting: 20 // Internal protection, recursion limit

      },
      components: {
        core: {
          rules: ['normalize', 'block', 'inline']
        },
        block: {
          rules: ['blockquote', 'code', 'fence', 'heading', 'hr', 'html_block', 'lheading', 'list', 'reference', 'paragraph']
        },
        inline: {
          rules: ['autolink', 'backticks', 'emphasis', 'entity', 'escape', 'html_inline', 'image', 'link', 'newline', 'text'],
          rules2: ['balance_pairs', 'emphasis', 'text_collapse']
        }
      }
    };
    /***/
  },

  /***/
  "./node_modules/markdown-it/lib/presets/default.js":
  /*!*********************************************************!*\
    !*** ./node_modules/markdown-it/lib/presets/default.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibPresetsDefaultJs(module, exports, __webpack_require__) {
    "use strict"; // markdown-it default options

    module.exports = {
      options: {
        html: false,
        // Enable HTML tags in source
        xhtmlOut: false,
        // Use '/' to close single tags (<br />)
        breaks: false,
        // Convert '\n' in paragraphs into <br>
        langPrefix: 'language-',
        // CSS language prefix for fenced blocks
        linkify: false,
        // autoconvert URL-like texts to links
        // Enable some language-neutral replacements + quotes beautification
        typographer: false,
        // Double + single quotes replacement pairs, when typographer enabled,
        // and smartquotes on. Could be either a String or an Array.
        //
        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
        // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
        quotes: "\u201C\u201D\u2018\u2019",

        /* “”‘’ */
        // Highlighter function. Should return escaped HTML,
        // or '' if the source string is not changed and should be escaped externaly.
        // If result starts with <pre... internal wrapper is skipped.
        //
        // function (/*str, lang*/) { return ''; }
        //
        highlight: null,
        maxNesting: 100 // Internal protection, recursion limit

      },
      components: {
        core: {},
        block: {},
        inline: {}
      }
    };
    /***/
  },

  /***/
  "./node_modules/markdown-it/lib/presets/zero.js":
  /*!******************************************************!*\
    !*** ./node_modules/markdown-it/lib/presets/zero.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibPresetsZeroJs(module, exports, __webpack_require__) {
    "use strict"; // "Zero" preset, with nothing enabled. Useful for manual configuring of simple
    // modes. For example, to parse bold/italic only.

    module.exports = {
      options: {
        html: false,
        // Enable HTML tags in source
        xhtmlOut: false,
        // Use '/' to close single tags (<br />)
        breaks: false,
        // Convert '\n' in paragraphs into <br>
        langPrefix: 'language-',
        // CSS language prefix for fenced blocks
        linkify: false,
        // autoconvert URL-like texts to links
        // Enable some language-neutral replacements + quotes beautification
        typographer: false,
        // Double + single quotes replacement pairs, when typographer enabled,
        // and smartquotes on. Could be either a String or an Array.
        //
        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
        // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
        quotes: "\u201C\u201D\u2018\u2019",

        /* “”‘’ */
        // Highlighter function. Should return escaped HTML,
        // or '' if the source string is not changed and should be escaped externaly.
        // If result starts with <pre... internal wrapper is skipped.
        //
        // function (/*str, lang*/) { return ''; }
        //
        highlight: null,
        maxNesting: 20 // Internal protection, recursion limit

      },
      components: {
        core: {
          rules: ['normalize', 'block', 'inline']
        },
        block: {
          rules: ['paragraph']
        },
        inline: {
          rules: ['text'],
          rules2: ['balance_pairs', 'text_collapse']
        }
      }
    };
    /***/
  },

  /***/
  "./node_modules/markdown-it/lib/renderer.js":
  /*!**************************************************!*\
    !*** ./node_modules/markdown-it/lib/renderer.js ***!
    \**************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRendererJs(module, exports, __webpack_require__) {
    "use strict";
    /**
     * class Renderer
     *
     * Generates HTML from parsed token stream. Each instance has independent
     * copy of rules. Those can be rewritten with ease. Also, you can add new
     * rules if you create plugin and adds new token types.
     **/

    var assign = __webpack_require__(
    /*! ./common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").assign;

    var unescapeAll = __webpack_require__(
    /*! ./common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").unescapeAll;

    var escapeHtml = __webpack_require__(
    /*! ./common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").escapeHtml; ////////////////////////////////////////////////////////////////////////////////


    var default_rules = {};

    default_rules.code_inline = function (tokens, idx, options, env, slf) {
      var token = tokens[idx];
      return '<code' + slf.renderAttrs(token) + '>' + escapeHtml(tokens[idx].content) + '</code>';
    };

    default_rules.code_block = function (tokens, idx, options, env, slf) {
      var token = tokens[idx];
      return '<pre' + slf.renderAttrs(token) + '><code>' + escapeHtml(tokens[idx].content) + '</code></pre>\n';
    };

    default_rules.fence = function (tokens, idx, options, env, slf) {
      var token = tokens[idx],
          info = token.info ? unescapeAll(token.info).trim() : '',
          langName = '',
          highlighted,
          i,
          tmpAttrs,
          tmpToken;

      if (info) {
        langName = info.split(/\s+/g)[0];
      }

      if (options.highlight) {
        highlighted = options.highlight(token.content, langName) || escapeHtml(token.content);
      } else {
        highlighted = escapeHtml(token.content);
      }

      if (highlighted.indexOf('<pre') === 0) {
        return highlighted + '\n';
      } // If language exists, inject class gently, without modifying original token.
      // May be, one day we will add .clone() for token and simplify this part, but
      // now we prefer to keep things local.


      if (info) {
        i = token.attrIndex('class');
        tmpAttrs = token.attrs ? token.attrs.slice() : [];

        if (i < 0) {
          tmpAttrs.push(['class', options.langPrefix + langName]);
        } else {
          tmpAttrs[i][1] += ' ' + options.langPrefix + langName;
        } // Fake token just to render attributes


        tmpToken = {
          attrs: tmpAttrs
        };
        return '<pre><code' + slf.renderAttrs(tmpToken) + '>' + highlighted + '</code></pre>\n';
      }

      return '<pre><code' + slf.renderAttrs(token) + '>' + highlighted + '</code></pre>\n';
    };

    default_rules.image = function (tokens, idx, options, env, slf) {
      var token = tokens[idx]; // "alt" attr MUST be set, even if empty. Because it's mandatory and
      // should be placed on proper position for tests.
      //
      // Replace content with actual value

      token.attrs[token.attrIndex('alt')][1] = slf.renderInlineAsText(token.children, options, env);
      return slf.renderToken(tokens, idx, options);
    };

    default_rules.hardbreak = function (tokens, idx, options
    /*, env */
    ) {
      return options.xhtmlOut ? '<br />\n' : '<br>\n';
    };

    default_rules.softbreak = function (tokens, idx, options
    /*, env */
    ) {
      return options.breaks ? options.xhtmlOut ? '<br />\n' : '<br>\n' : '\n';
    };

    default_rules.text = function (tokens, idx
    /*, options, env */
    ) {
      return escapeHtml(tokens[idx].content);
    };

    default_rules.html_block = function (tokens, idx
    /*, options, env */
    ) {
      return tokens[idx].content;
    };

    default_rules.html_inline = function (tokens, idx
    /*, options, env */
    ) {
      return tokens[idx].content;
    };
    /**
     * new Renderer()
     *
     * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.
     **/


    function Renderer() {
      /**
       * Renderer#rules -> Object
       *
       * Contains render rules for tokens. Can be updated and extended.
       *
       * ##### Example
       *
       * ```javascript
       * var md = require('markdown-it')();
       *
       * md.renderer.rules.strong_open  = function () { return '<b>'; };
       * md.renderer.rules.strong_close = function () { return '</b>'; };
       *
       * var result = md.renderInline(...);
       * ```
       *
       * Each rule is called as independent static function with fixed signature:
       *
       * ```javascript
       * function my_token_render(tokens, idx, options, env, renderer) {
       *   // ...
       *   return renderedHTML;
       * }
       * ```
       *
       * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)
       * for more details and examples.
       **/
      this.rules = assign({}, default_rules);
    }
    /**
     * Renderer.renderAttrs(token) -> String
     *
     * Render token attributes to string.
     **/


    Renderer.prototype.renderAttrs = function renderAttrs(token) {
      var i, l, result;

      if (!token.attrs) {
        return '';
      }

      result = '';

      for (i = 0, l = token.attrs.length; i < l; i++) {
        result += ' ' + escapeHtml(token.attrs[i][0]) + '="' + escapeHtml(token.attrs[i][1]) + '"';
      }

      return result;
    };
    /**
     * Renderer.renderToken(tokens, idx, options) -> String
     * - tokens (Array): list of tokens
     * - idx (Numbed): token index to render
     * - options (Object): params of parser instance
     *
     * Default token renderer. Can be overriden by custom function
     * in [[Renderer#rules]].
     **/


    Renderer.prototype.renderToken = function renderToken(tokens, idx, options) {
      var nextToken,
          result = '',
          needLf = false,
          token = tokens[idx]; // Tight list paragraphs

      if (token.hidden) {
        return '';
      } // Insert a newline between hidden paragraph and subsequent opening
      // block-level tag.
      //
      // For example, here we should insert a newline before blockquote:
      //  - a
      //    >
      //


      if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {
        result += '\n';
      } // Add token name, e.g. `<img`


      result += (token.nesting === -1 ? '</' : '<') + token.tag; // Encode attributes, e.g. `<img src="foo"`

      result += this.renderAttrs(token); // Add a slash for self-closing tags, e.g. `<img src="foo" /`

      if (token.nesting === 0 && options.xhtmlOut) {
        result += ' /';
      } // Check if we need to add a newline after this tag


      if (token.block) {
        needLf = true;

        if (token.nesting === 1) {
          if (idx + 1 < tokens.length) {
            nextToken = tokens[idx + 1];

            if (nextToken.type === 'inline' || nextToken.hidden) {
              // Block-level tag containing an inline tag.
              //
              needLf = false;
            } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {
              // Opening tag + closing tag of the same type. E.g. `<li></li>`.
              //
              needLf = false;
            }
          }
        }
      }

      result += needLf ? '>\n' : '>';
      return result;
    };
    /**
     * Renderer.renderInline(tokens, options, env) -> String
     * - tokens (Array): list on block tokens to renter
     * - options (Object): params of parser instance
     * - env (Object): additional data from parsed input (references, for example)
     *
     * The same as [[Renderer.render]], but for single token of `inline` type.
     **/


    Renderer.prototype.renderInline = function (tokens, options, env) {
      var type,
          result = '',
          rules = this.rules;

      for (var i = 0, len = tokens.length; i < len; i++) {
        type = tokens[i].type;

        if (typeof rules[type] !== 'undefined') {
          result += rules[type](tokens, i, options, env, this);
        } else {
          result += this.renderToken(tokens, i, options);
        }
      }

      return result;
    };
    /** internal
     * Renderer.renderInlineAsText(tokens, options, env) -> String
     * - tokens (Array): list on block tokens to renter
     * - options (Object): params of parser instance
     * - env (Object): additional data from parsed input (references, for example)
     *
     * Special kludge for image `alt` attributes to conform CommonMark spec.
     * Don't try to use it! Spec requires to show `alt` content with stripped markup,
     * instead of simple escaping.
     **/


    Renderer.prototype.renderInlineAsText = function (tokens, options, env) {
      var result = '';

      for (var i = 0, len = tokens.length; i < len; i++) {
        if (tokens[i].type === 'text') {
          result += tokens[i].content;
        } else if (tokens[i].type === 'image') {
          result += this.renderInlineAsText(tokens[i].children, options, env);
        }
      }

      return result;
    };
    /**
     * Renderer.render(tokens, options, env) -> String
     * - tokens (Array): list on block tokens to renter
     * - options (Object): params of parser instance
     * - env (Object): additional data from parsed input (references, for example)
     *
     * Takes token stream and generates HTML. Probably, you will never need to call
     * this method directly.
     **/


    Renderer.prototype.render = function (tokens, options, env) {
      var i,
          len,
          type,
          result = '',
          rules = this.rules;

      for (i = 0, len = tokens.length; i < len; i++) {
        type = tokens[i].type;

        if (type === 'inline') {
          result += this.renderInline(tokens[i].children, options, env);
        } else if (typeof rules[type] !== 'undefined') {
          result += rules[tokens[i].type](tokens, i, options, env, this);
        } else {
          result += this.renderToken(tokens, i, options, env);
        }
      }

      return result;
    };

    module.exports = Renderer;
    /***/
  },

  /***/
  "./node_modules/markdown-it/lib/ruler.js":
  /*!***********************************************!*\
    !*** ./node_modules/markdown-it/lib/ruler.js ***!
    \***********************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRulerJs(module, exports, __webpack_require__) {
    "use strict";
    /**
     * class Ruler
     *
     * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and
     * [[MarkdownIt#inline]] to manage sequences of functions (rules):
     *
     * - keep rules in defined order
     * - assign the name to each rule
     * - enable/disable rules
     * - add/replace rules
     * - allow assign rules to additional named chains (in the same)
     * - cacheing lists of active rules
     *
     * You will not need use this class directly until write plugins. For simple
     * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and
     * [[MarkdownIt.use]].
     **/

    /**
     * new Ruler()
     **/

    function Ruler() {
      // List of added rules. Each element is:
      //
      // {
      //   name: XXX,
      //   enabled: Boolean,
      //   fn: Function(),
      //   alt: [ name2, name3 ]
      // }
      //
      this.__rules__ = []; // Cached rule chains.
      //
      // First level - chain name, '' for default.
      // Second level - diginal anchor for fast filtering by charcodes.
      //

      this.__cache__ = null;
    } ////////////////////////////////////////////////////////////////////////////////
    // Helper methods, should not be used directly
    // Find rule index by name
    //


    Ruler.prototype.__find__ = function (name) {
      for (var i = 0; i < this.__rules__.length; i++) {
        if (this.__rules__[i].name === name) {
          return i;
        }
      }

      return -1;
    }; // Build rules lookup cache
    //


    Ruler.prototype.__compile__ = function () {
      var self = this;
      var chains = ['']; // collect unique names

      self.__rules__.forEach(function (rule) {
        if (!rule.enabled) {
          return;
        }

        rule.alt.forEach(function (altName) {
          if (chains.indexOf(altName) < 0) {
            chains.push(altName);
          }
        });
      });

      self.__cache__ = {};
      chains.forEach(function (chain) {
        self.__cache__[chain] = [];

        self.__rules__.forEach(function (rule) {
          if (!rule.enabled) {
            return;
          }

          if (chain && rule.alt.indexOf(chain) < 0) {
            return;
          }

          self.__cache__[chain].push(rule.fn);
        });
      });
    };
    /**
     * Ruler.at(name, fn [, options])
     * - name (String): rule name to replace.
     * - fn (Function): new rule function.
     * - options (Object): new rule options (not mandatory).
     *
     * Replace rule by name with new function & options. Throws error if name not
     * found.
     *
     * ##### Options:
     *
     * - __alt__ - array with names of "alternate" chains.
     *
     * ##### Example
     *
     * Replace existing typographer replacement rule with new one:
     *
     * ```javascript
     * var md = require('markdown-it')();
     *
     * md.core.ruler.at('replacements', function replace(state) {
     *   //...
     * });
     * ```
     **/


    Ruler.prototype.at = function (name, fn, options) {
      var index = this.__find__(name);

      var opt = options || {};

      if (index === -1) {
        throw new Error('Parser rule not found: ' + name);
      }

      this.__rules__[index].fn = fn;
      this.__rules__[index].alt = opt.alt || [];
      this.__cache__ = null;
    };
    /**
     * Ruler.before(beforeName, ruleName, fn [, options])
     * - beforeName (String): new rule will be added before this one.
     * - ruleName (String): name of added rule.
     * - fn (Function): rule function.
     * - options (Object): rule options (not mandatory).
     *
     * Add new rule to chain before one with given name. See also
     * [[Ruler.after]], [[Ruler.push]].
     *
     * ##### Options:
     *
     * - __alt__ - array with names of "alternate" chains.
     *
     * ##### Example
     *
     * ```javascript
     * var md = require('markdown-it')();
     *
     * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {
     *   //...
     * });
     * ```
     **/


    Ruler.prototype.before = function (beforeName, ruleName, fn, options) {
      var index = this.__find__(beforeName);

      var opt = options || {};

      if (index === -1) {
        throw new Error('Parser rule not found: ' + beforeName);
      }

      this.__rules__.splice(index, 0, {
        name: ruleName,
        enabled: true,
        fn: fn,
        alt: opt.alt || []
      });

      this.__cache__ = null;
    };
    /**
     * Ruler.after(afterName, ruleName, fn [, options])
     * - afterName (String): new rule will be added after this one.
     * - ruleName (String): name of added rule.
     * - fn (Function): rule function.
     * - options (Object): rule options (not mandatory).
     *
     * Add new rule to chain after one with given name. See also
     * [[Ruler.before]], [[Ruler.push]].
     *
     * ##### Options:
     *
     * - __alt__ - array with names of "alternate" chains.
     *
     * ##### Example
     *
     * ```javascript
     * var md = require('markdown-it')();
     *
     * md.inline.ruler.after('text', 'my_rule', function replace(state) {
     *   //...
     * });
     * ```
     **/


    Ruler.prototype.after = function (afterName, ruleName, fn, options) {
      var index = this.__find__(afterName);

      var opt = options || {};

      if (index === -1) {
        throw new Error('Parser rule not found: ' + afterName);
      }

      this.__rules__.splice(index + 1, 0, {
        name: ruleName,
        enabled: true,
        fn: fn,
        alt: opt.alt || []
      });

      this.__cache__ = null;
    };
    /**
     * Ruler.push(ruleName, fn [, options])
     * - ruleName (String): name of added rule.
     * - fn (Function): rule function.
     * - options (Object): rule options (not mandatory).
     *
     * Push new rule to the end of chain. See also
     * [[Ruler.before]], [[Ruler.after]].
     *
     * ##### Options:
     *
     * - __alt__ - array with names of "alternate" chains.
     *
     * ##### Example
     *
     * ```javascript
     * var md = require('markdown-it')();
     *
     * md.core.ruler.push('my_rule', function replace(state) {
     *   //...
     * });
     * ```
     **/


    Ruler.prototype.push = function (ruleName, fn, options) {
      var opt = options || {};

      this.__rules__.push({
        name: ruleName,
        enabled: true,
        fn: fn,
        alt: opt.alt || []
      });

      this.__cache__ = null;
    };
    /**
     * Ruler.enable(list [, ignoreInvalid]) -> Array
     * - list (String|Array): list of rule names to enable.
     * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
     *
     * Enable rules with given names. If any rule name not found - throw Error.
     * Errors can be disabled by second param.
     *
     * Returns list of found rule names (if no exception happened).
     *
     * See also [[Ruler.disable]], [[Ruler.enableOnly]].
     **/


    Ruler.prototype.enable = function (list, ignoreInvalid) {
      if (!Array.isArray(list)) {
        list = [list];
      }

      var result = []; // Search by name and enable

      list.forEach(function (name) {
        var idx = this.__find__(name);

        if (idx < 0) {
          if (ignoreInvalid) {
            return;
          }

          throw new Error('Rules manager: invalid rule name ' + name);
        }

        this.__rules__[idx].enabled = true;
        result.push(name);
      }, this);
      this.__cache__ = null;
      return result;
    };
    /**
     * Ruler.enableOnly(list [, ignoreInvalid])
     * - list (String|Array): list of rule names to enable (whitelist).
     * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
     *
     * Enable rules with given names, and disable everything else. If any rule name
     * not found - throw Error. Errors can be disabled by second param.
     *
     * See also [[Ruler.disable]], [[Ruler.enable]].
     **/


    Ruler.prototype.enableOnly = function (list, ignoreInvalid) {
      if (!Array.isArray(list)) {
        list = [list];
      }

      this.__rules__.forEach(function (rule) {
        rule.enabled = false;
      });

      this.enable(list, ignoreInvalid);
    };
    /**
     * Ruler.disable(list [, ignoreInvalid]) -> Array
     * - list (String|Array): list of rule names to disable.
     * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
     *
     * Disable rules with given names. If any rule name not found - throw Error.
     * Errors can be disabled by second param.
     *
     * Returns list of found rule names (if no exception happened).
     *
     * See also [[Ruler.enable]], [[Ruler.enableOnly]].
     **/


    Ruler.prototype.disable = function (list, ignoreInvalid) {
      if (!Array.isArray(list)) {
        list = [list];
      }

      var result = []; // Search by name and disable

      list.forEach(function (name) {
        var idx = this.__find__(name);

        if (idx < 0) {
          if (ignoreInvalid) {
            return;
          }

          throw new Error('Rules manager: invalid rule name ' + name);
        }

        this.__rules__[idx].enabled = false;
        result.push(name);
      }, this);
      this.__cache__ = null;
      return result;
    };
    /**
     * Ruler.getRules(chainName) -> Array
     *
     * Return array of active functions (rules) for given chain name. It analyzes
     * rules configuration, compiles caches if not exists and returns result.
     *
     * Default chain name is `''` (empty string). It can't be skipped. That's
     * done intentionally, to keep signature monomorphic for high speed.
     **/


    Ruler.prototype.getRules = function (chainName) {
      if (this.__cache__ === null) {
        this.__compile__();
      } // Chain can be empty, if rules disabled. But we still have to return Array.


      return this.__cache__[chainName] || [];
    };

    module.exports = Ruler;
    /***/
  },

  /***/
  "./node_modules/markdown-it/lib/rules_block/blockquote.js":
  /*!****************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_block/blockquote.js ***!
    \****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_blockBlockquoteJs(module, exports, __webpack_require__) {
    "use strict"; // Block quotes

    var isSpace = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").isSpace;

    module.exports = function blockquote(state, startLine, endLine, silent) {
      var adjustTab,
          ch,
          i,
          initial,
          l,
          lastLineEmpty,
          lines,
          nextLine,
          offset,
          oldBMarks,
          oldBSCount,
          oldIndent,
          oldParentType,
          oldSCount,
          oldTShift,
          spaceAfterMarker,
          terminate,
          terminatorRules,
          token,
          wasOutdented,
          oldLineMax = state.lineMax,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max = state.eMarks[startLine]; // if it's indented more than 3 spaces, it should be a code block

      if (state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      } // check the block quote marker


      if (state.src.charCodeAt(pos++) !== 0x3E
      /* > */
      ) {
          return false;
        } // we know that it's going to be a valid blockquote,
      // so no point trying to find the end of it in silent mode


      if (silent) {
        return true;
      } // skip spaces after ">" and re-calculate offset


      initial = offset = state.sCount[startLine] + pos - (state.bMarks[startLine] + state.tShift[startLine]); // skip one optional space after '>'

      if (state.src.charCodeAt(pos) === 0x20
      /* space */
      ) {
          // ' >   test '
          //     ^ -- position start of line here:
          pos++;
          initial++;
          offset++;
          adjustTab = false;
          spaceAfterMarker = true;
        } else if (state.src.charCodeAt(pos) === 0x09
      /* tab */
      ) {
          spaceAfterMarker = true;

          if ((state.bsCount[startLine] + offset) % 4 === 3) {
            // '  >\t  test '
            //       ^ -- position start of line here (tab has width===1)
            pos++;
            initial++;
            offset++;
            adjustTab = false;
          } else {
            // ' >\t  test '
            //    ^ -- position start of line here + shift bsCount slightly
            //         to make extra space appear
            adjustTab = true;
          }
        } else {
        spaceAfterMarker = false;
      }

      oldBMarks = [state.bMarks[startLine]];
      state.bMarks[startLine] = pos;

      while (pos < max) {
        ch = state.src.charCodeAt(pos);

        if (isSpace(ch)) {
          if (ch === 0x09) {
            offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;
          } else {
            offset++;
          }
        } else {
          break;
        }

        pos++;
      }

      oldBSCount = [state.bsCount[startLine]];
      state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);
      lastLineEmpty = pos >= max;
      oldSCount = [state.sCount[startLine]];
      state.sCount[startLine] = offset - initial;
      oldTShift = [state.tShift[startLine]];
      state.tShift[startLine] = pos - state.bMarks[startLine];
      terminatorRules = state.md.block.ruler.getRules('blockquote');
      oldParentType = state.parentType;
      state.parentType = 'blockquote';
      wasOutdented = false; // Search the end of the block
      //
      // Block ends with either:
      //  1. an empty line outside:
      //     ```
      //     > test
      //
      //     ```
      //  2. an empty line inside:
      //     ```
      //     >
      //     test
      //     ```
      //  3. another tag:
      //     ```
      //     > test
      //      - - -
      //     ```

      for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {
        // check if it's outdented, i.e. it's inside list item and indented
        // less than said list item:
        //
        // ```
        // 1. anything
        //    > current blockquote
        // 2. checking this line
        // ```
        if (state.sCount[nextLine] < state.blkIndent) wasOutdented = true;
        pos = state.bMarks[nextLine] + state.tShift[nextLine];
        max = state.eMarks[nextLine];

        if (pos >= max) {
          // Case 1: line is not inside the blockquote, and this line is empty.
          break;
        }

        if (state.src.charCodeAt(pos++) === 0x3E
        /* > */
        && !wasOutdented) {
          // This line is inside the blockquote.
          // skip spaces after ">" and re-calculate offset
          initial = offset = state.sCount[nextLine] + pos - (state.bMarks[nextLine] + state.tShift[nextLine]); // skip one optional space after '>'

          if (state.src.charCodeAt(pos) === 0x20
          /* space */
          ) {
              // ' >   test '
              //     ^ -- position start of line here:
              pos++;
              initial++;
              offset++;
              adjustTab = false;
              spaceAfterMarker = true;
            } else if (state.src.charCodeAt(pos) === 0x09
          /* tab */
          ) {
              spaceAfterMarker = true;

              if ((state.bsCount[nextLine] + offset) % 4 === 3) {
                // '  >\t  test '
                //       ^ -- position start of line here (tab has width===1)
                pos++;
                initial++;
                offset++;
                adjustTab = false;
              } else {
                // ' >\t  test '
                //    ^ -- position start of line here + shift bsCount slightly
                //         to make extra space appear
                adjustTab = true;
              }
            } else {
            spaceAfterMarker = false;
          }

          oldBMarks.push(state.bMarks[nextLine]);
          state.bMarks[nextLine] = pos;

          while (pos < max) {
            ch = state.src.charCodeAt(pos);

            if (isSpace(ch)) {
              if (ch === 0x09) {
                offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;
              } else {
                offset++;
              }
            } else {
              break;
            }

            pos++;
          }

          lastLineEmpty = pos >= max;
          oldBSCount.push(state.bsCount[nextLine]);
          state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);
          oldSCount.push(state.sCount[nextLine]);
          state.sCount[nextLine] = offset - initial;
          oldTShift.push(state.tShift[nextLine]);
          state.tShift[nextLine] = pos - state.bMarks[nextLine];
          continue;
        } // Case 2: line is not inside the blockquote, and the last line was empty.


        if (lastLineEmpty) {
          break;
        } // Case 3: another tag found.


        terminate = false;

        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }

        if (terminate) {
          // Quirk to enforce "hard termination mode" for paragraphs;
          // normally if you call `tokenize(state, startLine, nextLine)`,
          // paragraphs will look below nextLine for paragraph continuation,
          // but if blockquote is terminated by another tag, they shouldn't
          state.lineMax = nextLine;

          if (state.blkIndent !== 0) {
            // state.blkIndent was non-zero, we now set it to zero,
            // so we need to re-calculate all offsets to appear as
            // if indent wasn't changed
            oldBMarks.push(state.bMarks[nextLine]);
            oldBSCount.push(state.bsCount[nextLine]);
            oldTShift.push(state.tShift[nextLine]);
            oldSCount.push(state.sCount[nextLine]);
            state.sCount[nextLine] -= state.blkIndent;
          }

          break;
        }

        oldBMarks.push(state.bMarks[nextLine]);
        oldBSCount.push(state.bsCount[nextLine]);
        oldTShift.push(state.tShift[nextLine]);
        oldSCount.push(state.sCount[nextLine]); // A negative indentation means that this is a paragraph continuation
        //

        state.sCount[nextLine] = -1;
      }

      oldIndent = state.blkIndent;
      state.blkIndent = 0;
      token = state.push('blockquote_open', 'blockquote', 1);
      token.markup = '>';
      token.map = lines = [startLine, 0];
      state.md.block.tokenize(state, startLine, nextLine);
      token = state.push('blockquote_close', 'blockquote', -1);
      token.markup = '>';
      state.lineMax = oldLineMax;
      state.parentType = oldParentType;
      lines[1] = state.line; // Restore original tShift; this might not be necessary since the parser
      // has already been here, but just to make sure we can do that.

      for (i = 0; i < oldTShift.length; i++) {
        state.bMarks[i + startLine] = oldBMarks[i];
        state.tShift[i + startLine] = oldTShift[i];
        state.sCount[i + startLine] = oldSCount[i];
        state.bsCount[i + startLine] = oldBSCount[i];
      }

      state.blkIndent = oldIndent;
      return true;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_block/code.js":
  /*!**********************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_block/code.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_blockCodeJs(module, exports, __webpack_require__) {
    "use strict"; // Code block (4 spaces padded)

    module.exports = function code(state, startLine, endLine
    /*, silent*/
    ) {
      var nextLine, last, token;

      if (state.sCount[startLine] - state.blkIndent < 4) {
        return false;
      }

      last = nextLine = startLine + 1;

      while (nextLine < endLine) {
        if (state.isEmpty(nextLine)) {
          nextLine++;
          continue;
        }

        if (state.sCount[nextLine] - state.blkIndent >= 4) {
          nextLine++;
          last = nextLine;
          continue;
        }

        break;
      }

      state.line = last;
      token = state.push('code_block', 'code', 0);
      token.content = state.getLines(startLine, last, 4 + state.blkIndent, true);
      token.map = [startLine, state.line];
      return true;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_block/fence.js":
  /*!***********************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_block/fence.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_blockFenceJs(module, exports, __webpack_require__) {
    "use strict"; // fences (``` lang, ~~~ lang)

    module.exports = function fence(state, startLine, endLine, silent) {
      var marker,
          len,
          params,
          nextLine,
          mem,
          token,
          markup,
          haveEndMarker = false,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max = state.eMarks[startLine]; // if it's indented more than 3 spaces, it should be a code block

      if (state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }

      if (pos + 3 > max) {
        return false;
      }

      marker = state.src.charCodeAt(pos);

      if (marker !== 0x7E
      /* ~ */
      && marker !== 0x60
      /* ` */
      ) {
          return false;
        } // scan marker length


      mem = pos;
      pos = state.skipChars(pos, marker);
      len = pos - mem;

      if (len < 3) {
        return false;
      }

      markup = state.src.slice(mem, pos);
      params = state.src.slice(pos, max);

      if (marker === 0x60
      /* ` */
      ) {
          if (params.indexOf(String.fromCharCode(marker)) >= 0) {
            return false;
          }
        } // Since start is found, we can report success here in validation mode


      if (silent) {
        return true;
      } // search end of block


      nextLine = startLine;

      for (;;) {
        nextLine++;

        if (nextLine >= endLine) {
          // unclosed block should be autoclosed by end of document.
          // also block seems to be autoclosed by end of parent
          break;
        }

        pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];
        max = state.eMarks[nextLine];

        if (pos < max && state.sCount[nextLine] < state.blkIndent) {
          // non-empty line with negative indent should stop the list:
          // - ```
          //  test
          break;
        }

        if (state.src.charCodeAt(pos) !== marker) {
          continue;
        }

        if (state.sCount[nextLine] - state.blkIndent >= 4) {
          // closing fence should be indented less than 4 spaces
          continue;
        }

        pos = state.skipChars(pos, marker); // closing code fence must be at least as long as the opening one

        if (pos - mem < len) {
          continue;
        } // make sure tail has spaces only


        pos = state.skipSpaces(pos);

        if (pos < max) {
          continue;
        }

        haveEndMarker = true; // found!

        break;
      } // If a fence has heading spaces, they should be removed from its inner block


      len = state.sCount[startLine];
      state.line = nextLine + (haveEndMarker ? 1 : 0);
      token = state.push('fence', 'code', 0);
      token.info = params;
      token.content = state.getLines(startLine + 1, nextLine, len, true);
      token.markup = markup;
      token.map = [startLine, state.line];
      return true;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_block/heading.js":
  /*!*************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_block/heading.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_blockHeadingJs(module, exports, __webpack_require__) {
    "use strict"; // heading (#, ##, ...)

    var isSpace = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").isSpace;

    module.exports = function heading(state, startLine, endLine, silent) {
      var ch,
          level,
          tmp,
          token,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max = state.eMarks[startLine]; // if it's indented more than 3 spaces, it should be a code block

      if (state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }

      ch = state.src.charCodeAt(pos);

      if (ch !== 0x23
      /* # */
      || pos >= max) {
        return false;
      } // count heading level


      level = 1;
      ch = state.src.charCodeAt(++pos);

      while (ch === 0x23
      /* # */
      && pos < max && level <= 6) {
        level++;
        ch = state.src.charCodeAt(++pos);
      }

      if (level > 6 || pos < max && !isSpace(ch)) {
        return false;
      }

      if (silent) {
        return true;
      } // Let's cut tails like '    ###  ' from the end of string


      max = state.skipSpacesBack(max, pos);
      tmp = state.skipCharsBack(max, 0x23, pos); // #

      if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {
        max = tmp;
      }

      state.line = startLine + 1;
      token = state.push('heading_open', 'h' + String(level), 1);
      token.markup = '########'.slice(0, level);
      token.map = [startLine, state.line];
      token = state.push('inline', '', 0);
      token.content = state.src.slice(pos, max).trim();
      token.map = [startLine, state.line];
      token.children = [];
      token = state.push('heading_close', 'h' + String(level), -1);
      token.markup = '########'.slice(0, level);
      return true;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_block/hr.js":
  /*!********************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_block/hr.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_blockHrJs(module, exports, __webpack_require__) {
    "use strict"; // Horizontal rule

    var isSpace = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").isSpace;

    module.exports = function hr(state, startLine, endLine, silent) {
      var marker,
          cnt,
          ch,
          token,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max = state.eMarks[startLine]; // if it's indented more than 3 spaces, it should be a code block

      if (state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }

      marker = state.src.charCodeAt(pos++); // Check hr marker

      if (marker !== 0x2A
      /* * */
      && marker !== 0x2D
      /* - */
      && marker !== 0x5F
      /* _ */
      ) {
          return false;
        } // markers can be mixed with spaces, but there should be at least 3 of them


      cnt = 1;

      while (pos < max) {
        ch = state.src.charCodeAt(pos++);

        if (ch !== marker && !isSpace(ch)) {
          return false;
        }

        if (ch === marker) {
          cnt++;
        }
      }

      if (cnt < 3) {
        return false;
      }

      if (silent) {
        return true;
      }

      state.line = startLine + 1;
      token = state.push('hr', 'hr', 0);
      token.map = [startLine, state.line];
      token.markup = Array(cnt + 1).join(String.fromCharCode(marker));
      return true;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_block/html_block.js":
  /*!****************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_block/html_block.js ***!
    \****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_blockHtml_blockJs(module, exports, __webpack_require__) {
    "use strict"; // HTML block

    var block_names = __webpack_require__(
    /*! ../common/html_blocks */
    "./node_modules/markdown-it/lib/common/html_blocks.js");

    var HTML_OPEN_CLOSE_TAG_RE = __webpack_require__(
    /*! ../common/html_re */
    "./node_modules/markdown-it/lib/common/html_re.js").HTML_OPEN_CLOSE_TAG_RE; // An array of opening and corresponding closing sequences for html tags,
    // last argument defines whether it can terminate a paragraph or not
    //


    var HTML_SEQUENCES = [[/^<(script|pre|style)(?=(\s|>|$))/i, /<\/(script|pre|style)>/i, true], [/^<!--/, /-->/, true], [/^<\?/, /\?>/, true], [/^<![A-Z]/, />/, true], [/^<!\[CDATA\[/, /\]\]>/, true], [new RegExp('^</?(' + block_names.join('|') + ')(?=(\\s|/?>|$))', 'i'), /^$/, true], [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\s*$'), /^$/, false]];

    module.exports = function html_block(state, startLine, endLine, silent) {
      var i,
          nextLine,
          token,
          lineText,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max = state.eMarks[startLine]; // if it's indented more than 3 spaces, it should be a code block

      if (state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }

      if (!state.md.options.html) {
        return false;
      }

      if (state.src.charCodeAt(pos) !== 0x3C
      /* < */
      ) {
          return false;
        }

      lineText = state.src.slice(pos, max);

      for (i = 0; i < HTML_SEQUENCES.length; i++) {
        if (HTML_SEQUENCES[i][0].test(lineText)) {
          break;
        }
      }

      if (i === HTML_SEQUENCES.length) {
        return false;
      }

      if (silent) {
        // true if this sequence can be a terminator, false otherwise
        return HTML_SEQUENCES[i][2];
      }

      nextLine = startLine + 1; // If we are here - we detected HTML block.
      // Let's roll down till block end.

      if (!HTML_SEQUENCES[i][1].test(lineText)) {
        for (; nextLine < endLine; nextLine++) {
          if (state.sCount[nextLine] < state.blkIndent) {
            break;
          }

          pos = state.bMarks[nextLine] + state.tShift[nextLine];
          max = state.eMarks[nextLine];
          lineText = state.src.slice(pos, max);

          if (HTML_SEQUENCES[i][1].test(lineText)) {
            if (lineText.length !== 0) {
              nextLine++;
            }

            break;
          }
        }
      }

      state.line = nextLine;
      token = state.push('html_block', '', 0);
      token.map = [startLine, nextLine];
      token.content = state.getLines(startLine, nextLine, state.blkIndent, true);
      return true;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_block/lheading.js":
  /*!**************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_block/lheading.js ***!
    \**************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_blockLheadingJs(module, exports, __webpack_require__) {
    "use strict"; // lheading (---, ===)

    module.exports = function lheading(state, startLine, endLine
    /*, silent*/
    ) {
      var content,
          terminate,
          i,
          l,
          token,
          pos,
          max,
          level,
          marker,
          nextLine = startLine + 1,
          oldParentType,
          terminatorRules = state.md.block.ruler.getRules('paragraph'); // if it's indented more than 3 spaces, it should be a code block

      if (state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }

      oldParentType = state.parentType;
      state.parentType = 'paragraph'; // use paragraph to match terminatorRules
      // jump line-by-line until empty one or EOF

      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
        // this would be a code block normally, but after paragraph
        // it's considered a lazy continuation regardless of what's there
        if (state.sCount[nextLine] - state.blkIndent > 3) {
          continue;
        } //
        // Check for underline in setext header
        //


        if (state.sCount[nextLine] >= state.blkIndent) {
          pos = state.bMarks[nextLine] + state.tShift[nextLine];
          max = state.eMarks[nextLine];

          if (pos < max) {
            marker = state.src.charCodeAt(pos);

            if (marker === 0x2D
            /* - */
            || marker === 0x3D
            /* = */
            ) {
                pos = state.skipChars(pos, marker);
                pos = state.skipSpaces(pos);

                if (pos >= max) {
                  level = marker === 0x3D
                  /* = */
                  ? 1 : 2;
                  break;
                }
              }
          }
        } // quirk for blockquotes, this line should already be checked by that rule


        if (state.sCount[nextLine] < 0) {
          continue;
        } // Some tags can terminate paragraph without empty line.


        terminate = false;

        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }

        if (terminate) {
          break;
        }
      }

      if (!level) {
        // Didn't find valid underline
        return false;
      }

      content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
      state.line = nextLine + 1;
      token = state.push('heading_open', 'h' + String(level), 1);
      token.markup = String.fromCharCode(marker);
      token.map = [startLine, state.line];
      token = state.push('inline', '', 0);
      token.content = content;
      token.map = [startLine, state.line - 1];
      token.children = [];
      token = state.push('heading_close', 'h' + String(level), -1);
      token.markup = String.fromCharCode(marker);
      state.parentType = oldParentType;
      return true;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_block/list.js":
  /*!**********************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_block/list.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_blockListJs(module, exports, __webpack_require__) {
    "use strict"; // Lists

    var isSpace = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").isSpace; // Search `[-+*][\n ]`, returns next pos after marker on success
    // or -1 on fail.


    function skipBulletListMarker(state, startLine) {
      var marker, pos, max, ch;
      pos = state.bMarks[startLine] + state.tShift[startLine];
      max = state.eMarks[startLine];
      marker = state.src.charCodeAt(pos++); // Check bullet

      if (marker !== 0x2A
      /* * */
      && marker !== 0x2D
      /* - */
      && marker !== 0x2B
      /* + */
      ) {
          return -1;
        }

      if (pos < max) {
        ch = state.src.charCodeAt(pos);

        if (!isSpace(ch)) {
          // " -test " - is not a list item
          return -1;
        }
      }

      return pos;
    } // Search `\d+[.)][\n ]`, returns next pos after marker on success
    // or -1 on fail.


    function skipOrderedListMarker(state, startLine) {
      var ch,
          start = state.bMarks[startLine] + state.tShift[startLine],
          pos = start,
          max = state.eMarks[startLine]; // List marker should have at least 2 chars (digit + dot)

      if (pos + 1 >= max) {
        return -1;
      }

      ch = state.src.charCodeAt(pos++);

      if (ch < 0x30
      /* 0 */
      || ch > 0x39
      /* 9 */
      ) {
          return -1;
        }

      for (;;) {
        // EOL -> fail
        if (pos >= max) {
          return -1;
        }

        ch = state.src.charCodeAt(pos++);

        if (ch >= 0x30
        /* 0 */
        && ch <= 0x39
        /* 9 */
        ) {
            // List marker should have no more than 9 digits
            // (prevents integer overflow in browsers)
            if (pos - start >= 10) {
              return -1;
            }

            continue;
          } // found valid marker


        if (ch === 0x29
        /* ) */
        || ch === 0x2e
        /* . */
        ) {
            break;
          }

        return -1;
      }

      if (pos < max) {
        ch = state.src.charCodeAt(pos);

        if (!isSpace(ch)) {
          // " 1.test " - is not a list item
          return -1;
        }
      }

      return pos;
    }

    function markTightParagraphs(state, idx) {
      var i,
          l,
          level = state.level + 2;

      for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {
        if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {
          state.tokens[i + 2].hidden = true;
          state.tokens[i].hidden = true;
          i += 2;
        }
      }
    }

    module.exports = function list(state, startLine, endLine, silent) {
      var ch,
          contentStart,
          i,
          indent,
          indentAfterMarker,
          initial,
          isOrdered,
          itemLines,
          l,
          listLines,
          listTokIdx,
          markerCharCode,
          markerValue,
          max,
          nextLine,
          offset,
          oldListIndent,
          oldParentType,
          oldSCount,
          oldTShift,
          oldTight,
          pos,
          posAfterMarker,
          prevEmptyEnd,
          start,
          terminate,
          terminatorRules,
          token,
          isTerminatingParagraph = false,
          tight = true; // if it's indented more than 3 spaces, it should be a code block

      if (state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      } // Special case:
      //  - item 1
      //   - item 2
      //    - item 3
      //     - item 4
      //      - this one is a paragraph continuation


      if (state.listIndent >= 0 && state.sCount[startLine] - state.listIndent >= 4 && state.sCount[startLine] < state.blkIndent) {
        return false;
      } // limit conditions when list can interrupt
      // a paragraph (validation mode only)


      if (silent && state.parentType === 'paragraph') {
        // Next list item should still terminate previous list item;
        //
        // This code can fail if plugins use blkIndent as well as lists,
        // but I hope the spec gets fixed long before that happens.
        //
        if (state.tShift[startLine] >= state.blkIndent) {
          isTerminatingParagraph = true;
        }
      } // Detect list type and position after marker


      if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {
        isOrdered = true;
        start = state.bMarks[startLine] + state.tShift[startLine];
        markerValue = Number(state.src.substr(start, posAfterMarker - start - 1)); // If we're starting a new ordered list right after
        // a paragraph, it should start with 1.

        if (isTerminatingParagraph && markerValue !== 1) return false;
      } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {
        isOrdered = false;
      } else {
        return false;
      } // If we're starting a new unordered list right after
      // a paragraph, first line should not be empty.


      if (isTerminatingParagraph) {
        if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;
      } // We should terminate list on style change. Remember first one to compare.


      markerCharCode = state.src.charCodeAt(posAfterMarker - 1); // For validation mode we can terminate immediately

      if (silent) {
        return true;
      } // Start list


      listTokIdx = state.tokens.length;

      if (isOrdered) {
        token = state.push('ordered_list_open', 'ol', 1);

        if (markerValue !== 1) {
          token.attrs = [['start', markerValue]];
        }
      } else {
        token = state.push('bullet_list_open', 'ul', 1);
      }

      token.map = listLines = [startLine, 0];
      token.markup = String.fromCharCode(markerCharCode); //
      // Iterate list items
      //

      nextLine = startLine;
      prevEmptyEnd = false;
      terminatorRules = state.md.block.ruler.getRules('list');
      oldParentType = state.parentType;
      state.parentType = 'list';

      while (nextLine < endLine) {
        pos = posAfterMarker;
        max = state.eMarks[nextLine];
        initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);

        while (pos < max) {
          ch = state.src.charCodeAt(pos);

          if (ch === 0x09) {
            offset += 4 - (offset + state.bsCount[nextLine]) % 4;
          } else if (ch === 0x20) {
            offset++;
          } else {
            break;
          }

          pos++;
        }

        contentStart = pos;

        if (contentStart >= max) {
          // trimming space in "-    \n  3" case, indent is 1 here
          indentAfterMarker = 1;
        } else {
          indentAfterMarker = offset - initial;
        } // If we have more than 4 spaces, the indent is 1
        // (the rest is just indented code block)


        if (indentAfterMarker > 4) {
          indentAfterMarker = 1;
        } // "  -  test"
        //  ^^^^^ - calculating total length of this thing


        indent = initial + indentAfterMarker; // Run subparser & write tokens

        token = state.push('list_item_open', 'li', 1);
        token.markup = String.fromCharCode(markerCharCode);
        token.map = itemLines = [startLine, 0]; // change current state, then restore it after parser subcall

        oldTight = state.tight;
        oldTShift = state.tShift[startLine];
        oldSCount = state.sCount[startLine]; //  - example list
        // ^ listIndent position will be here
        //   ^ blkIndent position will be here
        //

        oldListIndent = state.listIndent;
        state.listIndent = state.blkIndent;
        state.blkIndent = indent;
        state.tight = true;
        state.tShift[startLine] = contentStart - state.bMarks[startLine];
        state.sCount[startLine] = offset;

        if (contentStart >= max && state.isEmpty(startLine + 1)) {
          // workaround for this case
          // (list item is empty, list terminates before "foo"):
          // ~~~~~~~~
          //   -
          //
          //     foo
          // ~~~~~~~~
          state.line = Math.min(state.line + 2, endLine);
        } else {
          state.md.block.tokenize(state, startLine, endLine, true);
        } // If any of list item is tight, mark list as tight


        if (!state.tight || prevEmptyEnd) {
          tight = false;
        } // Item become loose if finish with empty line,
        // but we should filter last element, because it means list finish


        prevEmptyEnd = state.line - startLine > 1 && state.isEmpty(state.line - 1);
        state.blkIndent = state.listIndent;
        state.listIndent = oldListIndent;
        state.tShift[startLine] = oldTShift;
        state.sCount[startLine] = oldSCount;
        state.tight = oldTight;
        token = state.push('list_item_close', 'li', -1);
        token.markup = String.fromCharCode(markerCharCode);
        nextLine = startLine = state.line;
        itemLines[1] = nextLine;
        contentStart = state.bMarks[startLine];

        if (nextLine >= endLine) {
          break;
        } //
        // Try to check if list is terminated or continued.
        //


        if (state.sCount[nextLine] < state.blkIndent) {
          break;
        } // if it's indented more than 3 spaces, it should be a code block


        if (state.sCount[startLine] - state.blkIndent >= 4) {
          break;
        } // fail if terminating block found


        terminate = false;

        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }

        if (terminate) {
          break;
        } // fail if list has another type


        if (isOrdered) {
          posAfterMarker = skipOrderedListMarker(state, nextLine);

          if (posAfterMarker < 0) {
            break;
          }
        } else {
          posAfterMarker = skipBulletListMarker(state, nextLine);

          if (posAfterMarker < 0) {
            break;
          }
        }

        if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {
          break;
        }
      } // Finalize list


      if (isOrdered) {
        token = state.push('ordered_list_close', 'ol', -1);
      } else {
        token = state.push('bullet_list_close', 'ul', -1);
      }

      token.markup = String.fromCharCode(markerCharCode);
      listLines[1] = nextLine;
      state.line = nextLine;
      state.parentType = oldParentType; // mark paragraphs tight if needed

      if (tight) {
        markTightParagraphs(state, listTokIdx);
      }

      return true;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_block/paragraph.js":
  /*!***************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_block/paragraph.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_blockParagraphJs(module, exports, __webpack_require__) {
    "use strict"; // Paragraph

    module.exports = function paragraph(state, startLine
    /*, endLine*/
    ) {
      var content,
          terminate,
          i,
          l,
          token,
          oldParentType,
          nextLine = startLine + 1,
          terminatorRules = state.md.block.ruler.getRules('paragraph'),
          endLine = state.lineMax;
      oldParentType = state.parentType;
      state.parentType = 'paragraph'; // jump line-by-line until empty one or EOF

      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
        // this would be a code block normally, but after paragraph
        // it's considered a lazy continuation regardless of what's there
        if (state.sCount[nextLine] - state.blkIndent > 3) {
          continue;
        } // quirk for blockquotes, this line should already be checked by that rule


        if (state.sCount[nextLine] < 0) {
          continue;
        } // Some tags can terminate paragraph without empty line.


        terminate = false;

        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }

        if (terminate) {
          break;
        }
      }

      content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
      state.line = nextLine;
      token = state.push('paragraph_open', 'p', 1);
      token.map = [startLine, state.line];
      token = state.push('inline', '', 0);
      token.content = content;
      token.map = [startLine, state.line];
      token.children = [];
      token = state.push('paragraph_close', 'p', -1);
      state.parentType = oldParentType;
      return true;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_block/reference.js":
  /*!***************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_block/reference.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_blockReferenceJs(module, exports, __webpack_require__) {
    "use strict";

    var normalizeReference = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").normalizeReference;

    var isSpace = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").isSpace;

    module.exports = function reference(state, startLine, _endLine, silent) {
      var ch,
          destEndPos,
          destEndLineNo,
          endLine,
          href,
          i,
          l,
          label,
          labelEnd,
          oldParentType,
          res,
          start,
          str,
          terminate,
          terminatorRules,
          title,
          lines = 0,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max = state.eMarks[startLine],
          nextLine = startLine + 1; // if it's indented more than 3 spaces, it should be a code block

      if (state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }

      if (state.src.charCodeAt(pos) !== 0x5B
      /* [ */
      ) {
          return false;
        } // Simple check to quickly interrupt scan on [link](url) at the start of line.
      // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54


      while (++pos < max) {
        if (state.src.charCodeAt(pos) === 0x5D
        /* ] */
        && state.src.charCodeAt(pos - 1) !== 0x5C
        /* \ */
        ) {
            if (pos + 1 === max) {
              return false;
            }

            if (state.src.charCodeAt(pos + 1) !== 0x3A
            /* : */
            ) {
                return false;
              }

            break;
          }
      }

      endLine = state.lineMax; // jump line-by-line until empty one or EOF

      terminatorRules = state.md.block.ruler.getRules('reference');
      oldParentType = state.parentType;
      state.parentType = 'reference';

      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
        // this would be a code block normally, but after paragraph
        // it's considered a lazy continuation regardless of what's there
        if (state.sCount[nextLine] - state.blkIndent > 3) {
          continue;
        } // quirk for blockquotes, this line should already be checked by that rule


        if (state.sCount[nextLine] < 0) {
          continue;
        } // Some tags can terminate paragraph without empty line.


        terminate = false;

        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }

        if (terminate) {
          break;
        }
      }

      str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
      max = str.length;

      for (pos = 1; pos < max; pos++) {
        ch = str.charCodeAt(pos);

        if (ch === 0x5B
        /* [ */
        ) {
            return false;
          } else if (ch === 0x5D
        /* ] */
        ) {
            labelEnd = pos;
            break;
          } else if (ch === 0x0A
        /* \n */
        ) {
            lines++;
          } else if (ch === 0x5C
        /* \ */
        ) {
            pos++;

            if (pos < max && str.charCodeAt(pos) === 0x0A) {
              lines++;
            }
          }
      }

      if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A
      /* : */
      ) {
          return false;
        } // [label]:   destination   'title'
      //         ^^^ skip optional whitespace here


      for (pos = labelEnd + 2; pos < max; pos++) {
        ch = str.charCodeAt(pos);

        if (ch === 0x0A) {
          lines++;
        } else if (isSpace(ch)) {
          /*eslint no-empty:0*/
        } else {
          break;
        }
      } // [label]:   destination   'title'
      //            ^^^^^^^^^^^ parse this


      res = state.md.helpers.parseLinkDestination(str, pos, max);

      if (!res.ok) {
        return false;
      }

      href = state.md.normalizeLink(res.str);

      if (!state.md.validateLink(href)) {
        return false;
      }

      pos = res.pos;
      lines += res.lines; // save cursor state, we could require to rollback later

      destEndPos = pos;
      destEndLineNo = lines; // [label]:   destination   'title'
      //                       ^^^ skipping those spaces

      start = pos;

      for (; pos < max; pos++) {
        ch = str.charCodeAt(pos);

        if (ch === 0x0A) {
          lines++;
        } else if (isSpace(ch)) {
          /*eslint no-empty:0*/
        } else {
          break;
        }
      } // [label]:   destination   'title'
      //                          ^^^^^^^ parse this


      res = state.md.helpers.parseLinkTitle(str, pos, max);

      if (pos < max && start !== pos && res.ok) {
        title = res.str;
        pos = res.pos;
        lines += res.lines;
      } else {
        title = '';
        pos = destEndPos;
        lines = destEndLineNo;
      } // skip trailing spaces until the rest of the line


      while (pos < max) {
        ch = str.charCodeAt(pos);

        if (!isSpace(ch)) {
          break;
        }

        pos++;
      }

      if (pos < max && str.charCodeAt(pos) !== 0x0A) {
        if (title) {
          // garbage at the end of the line after title,
          // but it could still be a valid reference if we roll back
          title = '';
          pos = destEndPos;
          lines = destEndLineNo;

          while (pos < max) {
            ch = str.charCodeAt(pos);

            if (!isSpace(ch)) {
              break;
            }

            pos++;
          }
        }
      }

      if (pos < max && str.charCodeAt(pos) !== 0x0A) {
        // garbage at the end of the line
        return false;
      }

      label = normalizeReference(str.slice(1, labelEnd));

      if (!label) {
        // CommonMark 0.20 disallows empty labels
        return false;
      } // Reference can not terminate anything. This check is for safety only.

      /*istanbul ignore if*/


      if (silent) {
        return true;
      }

      if (typeof state.env.references === 'undefined') {
        state.env.references = {};
      }

      if (typeof state.env.references[label] === 'undefined') {
        state.env.references[label] = {
          title: title,
          href: href
        };
      }

      state.parentType = oldParentType;
      state.line = startLine + lines + 1;
      return true;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_block/state_block.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_block/state_block.js ***!
    \*****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_blockState_blockJs(module, exports, __webpack_require__) {
    "use strict"; // Parser state class

    var Token = __webpack_require__(
    /*! ../token */
    "./node_modules/markdown-it/lib/token.js");

    var isSpace = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").isSpace;

    function StateBlock(src, md, env, tokens) {
      var ch, s, start, pos, len, indent, offset, indent_found;
      this.src = src; // link to parser instance

      this.md = md;
      this.env = env; //
      // Internal state vartiables
      //

      this.tokens = tokens;
      this.bMarks = []; // line begin offsets for fast jumps

      this.eMarks = []; // line end offsets for fast jumps

      this.tShift = []; // offsets of the first non-space characters (tabs not expanded)

      this.sCount = []; // indents for each line (tabs expanded)
      // An amount of virtual spaces (tabs expanded) between beginning
      // of each line (bMarks) and real beginning of that line.
      //
      // It exists only as a hack because blockquotes override bMarks
      // losing information in the process.
      //
      // It's used only when expanding tabs, you can think about it as
      // an initial tab length, e.g. bsCount=21 applied to string `\t123`
      // means first tab should be expanded to 4-21%4 === 3 spaces.
      //

      this.bsCount = []; // block parser variables

      this.blkIndent = 0; // required block content indent (for example, if we are
      // inside a list, it would be positioned after list marker)

      this.line = 0; // line index in src

      this.lineMax = 0; // lines count

      this.tight = false; // loose/tight mode for lists

      this.ddIndent = -1; // indent of the current dd block (-1 if there isn't any)

      this.listIndent = -1; // indent of the current list block (-1 if there isn't any)
      // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'
      // used in lists to determine if they interrupt a paragraph

      this.parentType = 'root';
      this.level = 0; // renderer

      this.result = ''; // Create caches
      // Generate markers.

      s = this.src;
      indent_found = false;

      for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {
        ch = s.charCodeAt(pos);

        if (!indent_found) {
          if (isSpace(ch)) {
            indent++;

            if (ch === 0x09) {
              offset += 4 - offset % 4;
            } else {
              offset++;
            }

            continue;
          } else {
            indent_found = true;
          }
        }

        if (ch === 0x0A || pos === len - 1) {
          if (ch !== 0x0A) {
            pos++;
          }

          this.bMarks.push(start);
          this.eMarks.push(pos);
          this.tShift.push(indent);
          this.sCount.push(offset);
          this.bsCount.push(0);
          indent_found = false;
          indent = 0;
          offset = 0;
          start = pos + 1;
        }
      } // Push fake entry to simplify cache bounds checks


      this.bMarks.push(s.length);
      this.eMarks.push(s.length);
      this.tShift.push(0);
      this.sCount.push(0);
      this.bsCount.push(0);
      this.lineMax = this.bMarks.length - 1; // don't count last fake line
    } // Push new token to "stream".
    //


    StateBlock.prototype.push = function (type, tag, nesting) {
      var token = new Token(type, tag, nesting);
      token.block = true;
      if (nesting < 0) this.level--; // closing tag

      token.level = this.level;
      if (nesting > 0) this.level++; // opening tag

      this.tokens.push(token);
      return token;
    };

    StateBlock.prototype.isEmpty = function isEmpty(line) {
      return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];
    };

    StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {
      for (var max = this.lineMax; from < max; from++) {
        if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {
          break;
        }
      }

      return from;
    }; // Skip spaces from given position.


    StateBlock.prototype.skipSpaces = function skipSpaces(pos) {
      var ch;

      for (var max = this.src.length; pos < max; pos++) {
        ch = this.src.charCodeAt(pos);

        if (!isSpace(ch)) {
          break;
        }
      }

      return pos;
    }; // Skip spaces from given position in reverse.


    StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {
      if (pos <= min) {
        return pos;
      }

      while (pos > min) {
        if (!isSpace(this.src.charCodeAt(--pos))) {
          return pos + 1;
        }
      }

      return pos;
    }; // Skip char codes from given position


    StateBlock.prototype.skipChars = function skipChars(pos, code) {
      for (var max = this.src.length; pos < max; pos++) {
        if (this.src.charCodeAt(pos) !== code) {
          break;
        }
      }

      return pos;
    }; // Skip char codes reverse from given position - 1


    StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {
      if (pos <= min) {
        return pos;
      }

      while (pos > min) {
        if (code !== this.src.charCodeAt(--pos)) {
          return pos + 1;
        }
      }

      return pos;
    }; // cut lines range from source.


    StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {
      var i,
          lineIndent,
          ch,
          first,
          last,
          queue,
          lineStart,
          line = begin;

      if (begin >= end) {
        return '';
      }

      queue = new Array(end - begin);

      for (i = 0; line < end; line++, i++) {
        lineIndent = 0;
        lineStart = first = this.bMarks[line];

        if (line + 1 < end || keepLastLF) {
          // No need for bounds check because we have fake entry on tail.
          last = this.eMarks[line] + 1;
        } else {
          last = this.eMarks[line];
        }

        while (first < last && lineIndent < indent) {
          ch = this.src.charCodeAt(first);

          if (isSpace(ch)) {
            if (ch === 0x09) {
              lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;
            } else {
              lineIndent++;
            }
          } else if (first - lineStart < this.tShift[line]) {
            // patched tShift masked characters to look like spaces (blockquotes, list markers)
            lineIndent++;
          } else {
            break;
          }

          first++;
        }

        if (lineIndent > indent) {
          // partially expanding tabs in code blocks, e.g '\t\tfoobar'
          // with indent=2 becomes '  \tfoobar'
          queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);
        } else {
          queue[i] = this.src.slice(first, last);
        }
      }

      return queue.join('');
    }; // re-export Token class to use in block rules


    StateBlock.prototype.Token = Token;
    module.exports = StateBlock;
    /***/
  },

  /***/
  "./node_modules/markdown-it/lib/rules_block/table.js":
  /*!***********************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_block/table.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_blockTableJs(module, exports, __webpack_require__) {
    "use strict"; // GFM table, non-standard

    var isSpace = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").isSpace;

    function getLine(state, line) {
      var pos = state.bMarks[line] + state.blkIndent,
          max = state.eMarks[line];
      return state.src.substr(pos, max - pos);
    }

    function escapedSplit(str) {
      var result = [],
          pos = 0,
          max = str.length,
          ch,
          escapes = 0,
          lastPos = 0,
          backTicked = false,
          lastBackTick = 0;
      ch = str.charCodeAt(pos);

      while (pos < max) {
        if (ch === 0x60
        /* ` */
        ) {
            if (backTicked) {
              // make \` close code sequence, but not open it;
              // the reason is: `\` is correct code block
              backTicked = false;
              lastBackTick = pos;
            } else if (escapes % 2 === 0) {
              backTicked = true;
              lastBackTick = pos;
            }
          } else if (ch === 0x7c
        /* | */
        && escapes % 2 === 0 && !backTicked) {
          result.push(str.substring(lastPos, pos));
          lastPos = pos + 1;
        }

        if (ch === 0x5c
        /* \ */
        ) {
            escapes++;
          } else {
          escapes = 0;
        }

        pos++; // If there was an un-closed backtick, go back to just after
        // the last backtick, but as if it was a normal character

        if (pos === max && backTicked) {
          backTicked = false;
          pos = lastBackTick + 1;
        }

        ch = str.charCodeAt(pos);
      }

      result.push(str.substring(lastPos));
      return result;
    }

    module.exports = function table(state, startLine, endLine, silent) {
      var ch, lineText, pos, i, nextLine, columns, columnCount, token, aligns, t, tableLines, tbodyLines; // should have at least two lines

      if (startLine + 2 > endLine) {
        return false;
      }

      nextLine = startLine + 1;

      if (state.sCount[nextLine] < state.blkIndent) {
        return false;
      } // if it's indented more than 3 spaces, it should be a code block


      if (state.sCount[nextLine] - state.blkIndent >= 4) {
        return false;
      } // first character of the second line should be '|', '-', ':',
      // and no other characters are allowed but spaces;
      // basically, this is the equivalent of /^[-:|][-:|\s]*$/ regexp


      pos = state.bMarks[nextLine] + state.tShift[nextLine];

      if (pos >= state.eMarks[nextLine]) {
        return false;
      }

      ch = state.src.charCodeAt(pos++);

      if (ch !== 0x7C
      /* | */
      && ch !== 0x2D
      /* - */
      && ch !== 0x3A
      /* : */
      ) {
          return false;
        }

      while (pos < state.eMarks[nextLine]) {
        ch = state.src.charCodeAt(pos);

        if (ch !== 0x7C
        /* | */
        && ch !== 0x2D
        /* - */
        && ch !== 0x3A
        /* : */
        && !isSpace(ch)) {
          return false;
        }

        pos++;
      }

      lineText = getLine(state, startLine + 1);
      columns = lineText.split('|');
      aligns = [];

      for (i = 0; i < columns.length; i++) {
        t = columns[i].trim();

        if (!t) {
          // allow empty columns before and after table, but not in between columns;
          // e.g. allow ` |---| `, disallow ` ---||--- `
          if (i === 0 || i === columns.length - 1) {
            continue;
          } else {
            return false;
          }
        }

        if (!/^:?-+:?$/.test(t)) {
          return false;
        }

        if (t.charCodeAt(t.length - 1) === 0x3A
        /* : */
        ) {
            aligns.push(t.charCodeAt(0) === 0x3A
            /* : */
            ? 'center' : 'right');
          } else if (t.charCodeAt(0) === 0x3A
        /* : */
        ) {
            aligns.push('left');
          } else {
          aligns.push('');
        }
      }

      lineText = getLine(state, startLine).trim();

      if (lineText.indexOf('|') === -1) {
        return false;
      }

      if (state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }

      columns = escapedSplit(lineText.replace(/^\||\|$/g, '')); // header row will define an amount of columns in the entire table,
      // and align row shouldn't be smaller than that (the rest of the rows can)

      columnCount = columns.length;

      if (columnCount > aligns.length) {
        return false;
      }

      if (silent) {
        return true;
      }

      token = state.push('table_open', 'table', 1);
      token.map = tableLines = [startLine, 0];
      token = state.push('thead_open', 'thead', 1);
      token.map = [startLine, startLine + 1];
      token = state.push('tr_open', 'tr', 1);
      token.map = [startLine, startLine + 1];

      for (i = 0; i < columns.length; i++) {
        token = state.push('th_open', 'th', 1);
        token.map = [startLine, startLine + 1];

        if (aligns[i]) {
          token.attrs = [['style', 'text-align:' + aligns[i]]];
        }

        token = state.push('inline', '', 0);
        token.content = columns[i].trim();
        token.map = [startLine, startLine + 1];
        token.children = [];
        token = state.push('th_close', 'th', -1);
      }

      token = state.push('tr_close', 'tr', -1);
      token = state.push('thead_close', 'thead', -1);
      token = state.push('tbody_open', 'tbody', 1);
      token.map = tbodyLines = [startLine + 2, 0];

      for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {
        if (state.sCount[nextLine] < state.blkIndent) {
          break;
        }

        lineText = getLine(state, nextLine).trim();

        if (lineText.indexOf('|') === -1) {
          break;
        }

        if (state.sCount[nextLine] - state.blkIndent >= 4) {
          break;
        }

        columns = escapedSplit(lineText.replace(/^\||\|$/g, ''));
        token = state.push('tr_open', 'tr', 1);

        for (i = 0; i < columnCount; i++) {
          token = state.push('td_open', 'td', 1);

          if (aligns[i]) {
            token.attrs = [['style', 'text-align:' + aligns[i]]];
          }

          token = state.push('inline', '', 0);
          token.content = columns[i] ? columns[i].trim() : '';
          token.children = [];
          token = state.push('td_close', 'td', -1);
        }

        token = state.push('tr_close', 'tr', -1);
      }

      token = state.push('tbody_close', 'tbody', -1);
      token = state.push('table_close', 'table', -1);
      tableLines[1] = tbodyLines[1] = nextLine;
      state.line = nextLine;
      return true;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_core/block.js":
  /*!**********************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_core/block.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_coreBlockJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function block(state) {
      var token;

      if (state.inlineMode) {
        token = new state.Token('inline', '', 0);
        token.content = state.src;
        token.map = [0, 1];
        token.children = [];
        state.tokens.push(token);
      } else {
        state.md.block.parse(state.src, state.md, state.env, state.tokens);
      }
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_core/inline.js":
  /*!***********************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_core/inline.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_coreInlineJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function inline(state) {
      var tokens = state.tokens,
          tok,
          i,
          l; // Parse inlines

      for (i = 0, l = tokens.length; i < l; i++) {
        tok = tokens[i];

        if (tok.type === 'inline') {
          state.md.inline.parse(tok.content, state.md, state.env, tok.children);
        }
      }
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_core/linkify.js":
  /*!************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_core/linkify.js ***!
    \************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_coreLinkifyJs(module, exports, __webpack_require__) {
    "use strict"; // Replace link-like texts with link nodes.
    //
    // Currently restricted by `md.validateLink()` to http/https/ftp
    //

    var arrayReplaceAt = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").arrayReplaceAt;

    function isLinkOpen(str) {
      return /^<a[>\s]/i.test(str);
    }

    function isLinkClose(str) {
      return /^<\/a\s*>/i.test(str);
    }

    module.exports = function linkify(state) {
      var i,
          j,
          l,
          tokens,
          token,
          currentToken,
          nodes,
          ln,
          text,
          pos,
          lastPos,
          level,
          htmlLinkLevel,
          url,
          fullUrl,
          urlText,
          blockTokens = state.tokens,
          links;

      if (!state.md.options.linkify) {
        return;
      }

      for (j = 0, l = blockTokens.length; j < l; j++) {
        if (blockTokens[j].type !== 'inline' || !state.md.linkify.pretest(blockTokens[j].content)) {
          continue;
        }

        tokens = blockTokens[j].children;
        htmlLinkLevel = 0; // We scan from the end, to keep position when new tags added.
        // Use reversed logic in links start/end match

        for (i = tokens.length - 1; i >= 0; i--) {
          currentToken = tokens[i]; // Skip content of markdown links

          if (currentToken.type === 'link_close') {
            i--;

            while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {
              i--;
            }

            continue;
          } // Skip content of html tag links


          if (currentToken.type === 'html_inline') {
            if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {
              htmlLinkLevel--;
            }

            if (isLinkClose(currentToken.content)) {
              htmlLinkLevel++;
            }
          }

          if (htmlLinkLevel > 0) {
            continue;
          }

          if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {
            text = currentToken.content;
            links = state.md.linkify.match(text); // Now split string to nodes

            nodes = [];
            level = currentToken.level;
            lastPos = 0;

            for (ln = 0; ln < links.length; ln++) {
              url = links[ln].url;
              fullUrl = state.md.normalizeLink(url);

              if (!state.md.validateLink(fullUrl)) {
                continue;
              }

              urlText = links[ln].text; // Linkifier might send raw hostnames like "example.com", where url
              // starts with domain name. So we prepend http:// in those cases,
              // and remove it afterwards.
              //

              if (!links[ln].schema) {
                urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\/\//, '');
              } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {
                urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');
              } else {
                urlText = state.md.normalizeLinkText(urlText);
              }

              pos = links[ln].index;

              if (pos > lastPos) {
                token = new state.Token('text', '', 0);
                token.content = text.slice(lastPos, pos);
                token.level = level;
                nodes.push(token);
              }

              token = new state.Token('link_open', 'a', 1);
              token.attrs = [['href', fullUrl]];
              token.level = level++;
              token.markup = 'linkify';
              token.info = 'auto';
              nodes.push(token);
              token = new state.Token('text', '', 0);
              token.content = urlText;
              token.level = level;
              nodes.push(token);
              token = new state.Token('link_close', 'a', -1);
              token.level = --level;
              token.markup = 'linkify';
              token.info = 'auto';
              nodes.push(token);
              lastPos = links[ln].lastIndex;
            }

            if (lastPos < text.length) {
              token = new state.Token('text', '', 0);
              token.content = text.slice(lastPos);
              token.level = level;
              nodes.push(token);
            } // replace current node


            blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);
          }
        }
      }
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_core/normalize.js":
  /*!**************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_core/normalize.js ***!
    \**************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_coreNormalizeJs(module, exports, __webpack_require__) {
    "use strict"; // Normalize input string
    // https://spec.commonmark.org/0.29/#line-ending

    var NEWLINES_RE = /\r\n?|\n/g;
    var NULL_RE = /\0/g;

    module.exports = function normalize(state) {
      var str; // Normalize newlines

      str = state.src.replace(NEWLINES_RE, '\n'); // Replace NULL characters

      str = str.replace(NULL_RE, "\uFFFD");
      state.src = str;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_core/replacements.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_core/replacements.js ***!
    \*****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_coreReplacementsJs(module, exports, __webpack_require__) {
    "use strict"; // Simple typographic replacements
    //
    // (c) (C) → ©
    // (tm) (TM) → ™
    // (r) (R) → ®
    // +- → ±
    // (p) (P) -> §
    // ... → … (also ?.... → ?.., !.... → !..)
    // ???????? → ???, !!!!! → !!!, `,,` → `,`
    // -- → &ndash;, --- → &mdash;
    //
    // TODO:
    // - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾
    // - miltiplication 2 x 4 -> 2 × 4

    var RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/; // Workaround for phantomjs - need regex without /g flag,
    // or root check will fail every second time

    var SCOPED_ABBR_TEST_RE = /\((c|tm|r|p)\)/i;
    var SCOPED_ABBR_RE = /\((c|tm|r|p)\)/ig;
    var SCOPED_ABBR = {
      c: '©',
      r: '®',
      p: '§',
      tm: '™'
    };

    function replaceFn(match, name) {
      return SCOPED_ABBR[name.toLowerCase()];
    }

    function replace_scoped(inlineTokens) {
      var i,
          token,
          inside_autolink = 0;

      for (i = inlineTokens.length - 1; i >= 0; i--) {
        token = inlineTokens[i];

        if (token.type === 'text' && !inside_autolink) {
          token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);
        }

        if (token.type === 'link_open' && token.info === 'auto') {
          inside_autolink--;
        }

        if (token.type === 'link_close' && token.info === 'auto') {
          inside_autolink++;
        }
      }
    }

    function replace_rare(inlineTokens) {
      var i,
          token,
          inside_autolink = 0;

      for (i = inlineTokens.length - 1; i >= 0; i--) {
        token = inlineTokens[i];

        if (token.type === 'text' && !inside_autolink) {
          if (RARE_RE.test(token.content)) {
            token.content = token.content.replace(/\+-/g, '±') // .., ..., ....... -> …
            // but ?..... & !..... -> ?.. & !..
            .replace(/\.{2,}/g, '…').replace(/([?!])…/g, '$1..').replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',') // em-dash
            .replace(/(^|[^-])---(?=[^-]|$)/mg, "$1\u2014") // en-dash
            .replace(/(^|\s)--(?=\s|$)/mg, "$1\u2013").replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, "$1\u2013");
          }
        }

        if (token.type === 'link_open' && token.info === 'auto') {
          inside_autolink--;
        }

        if (token.type === 'link_close' && token.info === 'auto') {
          inside_autolink++;
        }
      }
    }

    module.exports = function replace(state) {
      var blkIdx;

      if (!state.md.options.typographer) {
        return;
      }

      for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
        if (state.tokens[blkIdx].type !== 'inline') {
          continue;
        }

        if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {
          replace_scoped(state.tokens[blkIdx].children);
        }

        if (RARE_RE.test(state.tokens[blkIdx].content)) {
          replace_rare(state.tokens[blkIdx].children);
        }
      }
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_core/smartquotes.js":
  /*!****************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_core/smartquotes.js ***!
    \****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_coreSmartquotesJs(module, exports, __webpack_require__) {
    "use strict"; // Convert straight quotation marks to typographic ones
    //

    var isWhiteSpace = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").isWhiteSpace;

    var isPunctChar = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").isPunctChar;

    var isMdAsciiPunct = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").isMdAsciiPunct;

    var QUOTE_TEST_RE = /['"]/;
    var QUOTE_RE = /['"]/g;
    var APOSTROPHE = "\u2019";
    /* ’ */

    function replaceAt(str, index, ch) {
      return str.substr(0, index) + ch + str.substr(index + 1);
    }

    function process_inlines(tokens, state) {
      var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar, isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace, canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;
      stack = [];

      for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        thisLevel = tokens[i].level;

        for (j = stack.length - 1; j >= 0; j--) {
          if (stack[j].level <= thisLevel) {
            break;
          }
        }

        stack.length = j + 1;

        if (token.type !== 'text') {
          continue;
        }

        text = token.content;
        pos = 0;
        max = text.length;
        /*eslint no-labels:0,block-scoped-var:0*/

        OUTER: while (pos < max) {
          QUOTE_RE.lastIndex = pos;
          t = QUOTE_RE.exec(text);

          if (!t) {
            break;
          }

          canOpen = canClose = true;
          pos = t.index + 1;
          isSingle = t[0] === "'"; // Find previous character,
          // default to space if it's the beginning of the line
          //

          lastChar = 0x20;

          if (t.index - 1 >= 0) {
            lastChar = text.charCodeAt(t.index - 1);
          } else {
            for (j = i - 1; j >= 0; j--) {
              if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20

              if (tokens[j].type !== 'text') continue;
              lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);
              break;
            }
          } // Find next character,
          // default to space if it's the end of the line
          //


          nextChar = 0x20;

          if (pos < max) {
            nextChar = text.charCodeAt(pos);
          } else {
            for (j = i + 1; j < tokens.length; j++) {
              if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20

              if (tokens[j].type !== 'text') continue;
              nextChar = tokens[j].content.charCodeAt(0);
              break;
            }
          }

          isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
          isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
          isLastWhiteSpace = isWhiteSpace(lastChar);
          isNextWhiteSpace = isWhiteSpace(nextChar);

          if (isNextWhiteSpace) {
            canOpen = false;
          } else if (isNextPunctChar) {
            if (!(isLastWhiteSpace || isLastPunctChar)) {
              canOpen = false;
            }
          }

          if (isLastWhiteSpace) {
            canClose = false;
          } else if (isLastPunctChar) {
            if (!(isNextWhiteSpace || isNextPunctChar)) {
              canClose = false;
            }
          }

          if (nextChar === 0x22
          /* " */
          && t[0] === '"') {
            if (lastChar >= 0x30
            /* 0 */
            && lastChar <= 0x39
            /* 9 */
            ) {
                // special case: 1"" - count first quote as an inch
                canClose = canOpen = false;
              }
          }

          if (canOpen && canClose) {
            // Replace quotes in the middle of punctuation sequence, but not
            // in the middle of the words, i.e.:
            //
            // 1. foo " bar " baz - not replaced
            // 2. foo-"-bar-"-baz - replaced
            // 3. foo"bar"baz     - not replaced
            //
            canOpen = isLastPunctChar;
            canClose = isNextPunctChar;
          }

          if (!canOpen && !canClose) {
            // middle of word
            if (isSingle) {
              token.content = replaceAt(token.content, t.index, APOSTROPHE);
            }

            continue;
          }

          if (canClose) {
            // this could be a closing quote, rewind the stack to get a match
            for (j = stack.length - 1; j >= 0; j--) {
              item = stack[j];

              if (stack[j].level < thisLevel) {
                break;
              }

              if (item.single === isSingle && stack[j].level === thisLevel) {
                item = stack[j];

                if (isSingle) {
                  openQuote = state.md.options.quotes[2];
                  closeQuote = state.md.options.quotes[3];
                } else {
                  openQuote = state.md.options.quotes[0];
                  closeQuote = state.md.options.quotes[1];
                } // replace token.content *before* tokens[item.token].content,
                // because, if they are pointing at the same token, replaceAt
                // could mess up indices when quote length != 1


                token.content = replaceAt(token.content, t.index, closeQuote);
                tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, openQuote);
                pos += closeQuote.length - 1;

                if (item.token === i) {
                  pos += openQuote.length - 1;
                }

                text = token.content;
                max = text.length;
                stack.length = j;
                continue OUTER;
              }
            }
          }

          if (canOpen) {
            stack.push({
              token: i,
              pos: t.index,
              single: isSingle,
              level: thisLevel
            });
          } else if (canClose && isSingle) {
            token.content = replaceAt(token.content, t.index, APOSTROPHE);
          }
        }
      }
    }

    module.exports = function smartquotes(state) {
      /*eslint max-depth:0*/
      var blkIdx;

      if (!state.md.options.typographer) {
        return;
      }

      for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
        if (state.tokens[blkIdx].type !== 'inline' || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {
          continue;
        }

        process_inlines(state.tokens[blkIdx].children, state);
      }
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_core/state_core.js":
  /*!***************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_core/state_core.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_coreState_coreJs(module, exports, __webpack_require__) {
    "use strict"; // Core state object
    //

    var Token = __webpack_require__(
    /*! ../token */
    "./node_modules/markdown-it/lib/token.js");

    function StateCore(src, md, env) {
      this.src = src;
      this.env = env;
      this.tokens = [];
      this.inlineMode = false;
      this.md = md; // link to parser instance
    } // re-export Token class to use in core rules


    StateCore.prototype.Token = Token;
    module.exports = StateCore;
    /***/
  },

  /***/
  "./node_modules/markdown-it/lib/rules_inline/autolink.js":
  /*!***************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_inline/autolink.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_inlineAutolinkJs(module, exports, __webpack_require__) {
    "use strict"; // Process autolinks '<protocol:...>'

    /*eslint max-len:0*/

    var EMAIL_RE = /^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;
    var AUTOLINK_RE = /^<([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)>/;

    module.exports = function autolink(state, silent) {
      var tail,
          linkMatch,
          emailMatch,
          url,
          fullUrl,
          token,
          pos = state.pos;

      if (state.src.charCodeAt(pos) !== 0x3C
      /* < */
      ) {
          return false;
        }

      tail = state.src.slice(pos);

      if (tail.indexOf('>') < 0) {
        return false;
      }

      if (AUTOLINK_RE.test(tail)) {
        linkMatch = tail.match(AUTOLINK_RE);
        url = linkMatch[0].slice(1, -1);
        fullUrl = state.md.normalizeLink(url);

        if (!state.md.validateLink(fullUrl)) {
          return false;
        }

        if (!silent) {
          token = state.push('link_open', 'a', 1);
          token.attrs = [['href', fullUrl]];
          token.markup = 'autolink';
          token.info = 'auto';
          token = state.push('text', '', 0);
          token.content = state.md.normalizeLinkText(url);
          token = state.push('link_close', 'a', -1);
          token.markup = 'autolink';
          token.info = 'auto';
        }

        state.pos += linkMatch[0].length;
        return true;
      }

      if (EMAIL_RE.test(tail)) {
        emailMatch = tail.match(EMAIL_RE);
        url = emailMatch[0].slice(1, -1);
        fullUrl = state.md.normalizeLink('mailto:' + url);

        if (!state.md.validateLink(fullUrl)) {
          return false;
        }

        if (!silent) {
          token = state.push('link_open', 'a', 1);
          token.attrs = [['href', fullUrl]];
          token.markup = 'autolink';
          token.info = 'auto';
          token = state.push('text', '', 0);
          token.content = state.md.normalizeLinkText(url);
          token = state.push('link_close', 'a', -1);
          token.markup = 'autolink';
          token.info = 'auto';
        }

        state.pos += emailMatch[0].length;
        return true;
      }

      return false;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_inline/backticks.js":
  /*!****************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_inline/backticks.js ***!
    \****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_inlineBackticksJs(module, exports, __webpack_require__) {
    "use strict"; // Parse backticks

    module.exports = function backtick(state, silent) {
      var start,
          max,
          marker,
          matchStart,
          matchEnd,
          token,
          pos = state.pos,
          ch = state.src.charCodeAt(pos);

      if (ch !== 0x60
      /* ` */
      ) {
          return false;
        }

      start = pos;
      pos++;
      max = state.posMax;

      while (pos < max && state.src.charCodeAt(pos) === 0x60
      /* ` */
      ) {
        pos++;
      }

      marker = state.src.slice(start, pos);
      matchStart = matchEnd = pos;

      while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {
        matchEnd = matchStart + 1;

        while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60
        /* ` */
        ) {
          matchEnd++;
        }

        if (matchEnd - matchStart === marker.length) {
          if (!silent) {
            token = state.push('code_inline', 'code', 0);
            token.markup = marker;
            token.content = state.src.slice(pos, matchStart).replace(/\n/g, ' ').replace(/^ (.+) $/, '$1');
          }

          state.pos = matchEnd;
          return true;
        }
      }

      if (!silent) {
        state.pending += marker;
      }

      state.pos += marker.length;
      return true;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_inline/balance_pairs.js":
  /*!********************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_inline/balance_pairs.js ***!
    \********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_inlineBalance_pairsJs(module, exports, __webpack_require__) {
    "use strict"; // For each opening emphasis-like marker find a matching closing one
    //

    function processDelimiters(state, delimiters) {
      var closerIdx,
          openerIdx,
          closer,
          opener,
          minOpenerIdx,
          newMinOpenerIdx,
          isOddMatch,
          lastJump,
          openersBottom = {},
          max = delimiters.length;

      for (closerIdx = 0; closerIdx < max; closerIdx++) {
        closer = delimiters[closerIdx]; // Length is only used for emphasis-specific "rule of 3",
        // if it's not defined (in strikethrough or 3rd party plugins),
        // we can default it to 0 to disable those checks.
        //

        closer.length = closer.length || 0;
        if (!closer.close) continue; // Previously calculated lower bounds (previous fails)
        // for each marker and each delimiter length modulo 3.

        if (!openersBottom.hasOwnProperty(closer.marker)) {
          openersBottom[closer.marker] = [-1, -1, -1];
        }

        minOpenerIdx = openersBottom[closer.marker][closer.length % 3];
        newMinOpenerIdx = -1;
        openerIdx = closerIdx - closer.jump - 1;

        for (; openerIdx > minOpenerIdx; openerIdx -= opener.jump + 1) {
          opener = delimiters[openerIdx];
          if (opener.marker !== closer.marker) continue;
          if (newMinOpenerIdx === -1) newMinOpenerIdx = openerIdx;

          if (opener.open && opener.end < 0 && opener.level === closer.level) {
            isOddMatch = false; // from spec:
            //
            // If one of the delimiters can both open and close emphasis, then the
            // sum of the lengths of the delimiter runs containing the opening and
            // closing delimiters must not be a multiple of 3 unless both lengths
            // are multiples of 3.
            //

            if (opener.close || closer.open) {
              if ((opener.length + closer.length) % 3 === 0) {
                if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {
                  isOddMatch = true;
                }
              }
            }

            if (!isOddMatch) {
              // If previous delimiter cannot be an opener, we can safely skip
              // the entire sequence in future checks. This is required to make
              // sure algorithm has linear complexity (see *_*_*_*_*_... case).
              //
              lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? delimiters[openerIdx - 1].jump + 1 : 0;
              closer.jump = closerIdx - openerIdx + lastJump;
              closer.open = false;
              opener.end = closerIdx;
              opener.jump = lastJump;
              opener.close = false;
              newMinOpenerIdx = -1;
              break;
            }
          }
        }

        if (newMinOpenerIdx !== -1) {
          // If match for this delimiter run failed, we want to set lower bound for
          // future lookups. This is required to make sure algorithm has linear
          // complexity.
          //
          // See details here:
          // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442
          //
          openersBottom[closer.marker][(closer.length || 0) % 3] = newMinOpenerIdx;
        }
      }
    }

    module.exports = function link_pairs(state) {
      var curr,
          tokens_meta = state.tokens_meta,
          max = state.tokens_meta.length;
      processDelimiters(state, state.delimiters);

      for (curr = 0; curr < max; curr++) {
        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
          processDelimiters(state, tokens_meta[curr].delimiters);
        }
      }
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_inline/emphasis.js":
  /*!***************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_inline/emphasis.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_inlineEmphasisJs(module, exports, __webpack_require__) {
    "use strict"; // Process *this* and _that_
    //
    // Insert each marker as a separate text token, and add it to delimiter list
    //

    module.exports.tokenize = function emphasis(state, silent) {
      var i,
          scanned,
          token,
          start = state.pos,
          marker = state.src.charCodeAt(start);

      if (silent) {
        return false;
      }

      if (marker !== 0x5F
      /* _ */
      && marker !== 0x2A
      /* * */
      ) {
          return false;
        }

      scanned = state.scanDelims(state.pos, marker === 0x2A);

      for (i = 0; i < scanned.length; i++) {
        token = state.push('text', '', 0);
        token.content = String.fromCharCode(marker);
        state.delimiters.push({
          // Char code of the starting marker (number).
          //
          marker: marker,
          // Total length of these series of delimiters.
          //
          length: scanned.length,
          // An amount of characters before this one that's equivalent to
          // current one. In plain English: if this delimiter does not open
          // an emphasis, neither do previous `jump` characters.
          //
          // Used to skip sequences like "*****" in one step, for 1st asterisk
          // value will be 0, for 2nd it's 1 and so on.
          //
          jump: i,
          // A position of the token this delimiter corresponds to.
          //
          token: state.tokens.length - 1,
          // If this delimiter is matched as a valid opener, `end` will be
          // equal to its position, otherwise it's `-1`.
          //
          end: -1,
          // Boolean flags that determine if this delimiter could open or close
          // an emphasis.
          //
          open: scanned.can_open,
          close: scanned.can_close
        });
      }

      state.pos += scanned.length;
      return true;
    };

    function postProcess(state, delimiters) {
      var i,
          startDelim,
          endDelim,
          token,
          ch,
          isStrong,
          max = delimiters.length;

      for (i = max - 1; i >= 0; i--) {
        startDelim = delimiters[i];

        if (startDelim.marker !== 0x5F
        /* _ */
        && startDelim.marker !== 0x2A
        /* * */
        ) {
            continue;
          } // Process only opening markers


        if (startDelim.end === -1) {
          continue;
        }

        endDelim = delimiters[startDelim.end]; // If the previous delimiter has the same marker and is adjacent to this one,
        // merge those into one strong delimiter.
        //
        // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`
        //

        isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 && delimiters[i - 1].token === startDelim.token - 1 && delimiters[startDelim.end + 1].token === endDelim.token + 1 && delimiters[i - 1].marker === startDelim.marker;
        ch = String.fromCharCode(startDelim.marker);
        token = state.tokens[startDelim.token];
        token.type = isStrong ? 'strong_open' : 'em_open';
        token.tag = isStrong ? 'strong' : 'em';
        token.nesting = 1;
        token.markup = isStrong ? ch + ch : ch;
        token.content = '';
        token = state.tokens[endDelim.token];
        token.type = isStrong ? 'strong_close' : 'em_close';
        token.tag = isStrong ? 'strong' : 'em';
        token.nesting = -1;
        token.markup = isStrong ? ch + ch : ch;
        token.content = '';

        if (isStrong) {
          state.tokens[delimiters[i - 1].token].content = '';
          state.tokens[delimiters[startDelim.end + 1].token].content = '';
          i--;
        }
      }
    } // Walk through delimiter list and replace text tokens with tags
    //


    module.exports.postProcess = function emphasis(state) {
      var curr,
          tokens_meta = state.tokens_meta,
          max = state.tokens_meta.length;
      postProcess(state, state.delimiters);

      for (curr = 0; curr < max; curr++) {
        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
          postProcess(state, tokens_meta[curr].delimiters);
        }
      }
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_inline/entity.js":
  /*!*************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_inline/entity.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_inlineEntityJs(module, exports, __webpack_require__) {
    "use strict"; // Process html entity - &#123;, &#xAF;, &quot;, ...

    var entities = __webpack_require__(
    /*! ../common/entities */
    "./node_modules/markdown-it/lib/common/entities.js");

    var has = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").has;

    var isValidEntityCode = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").isValidEntityCode;

    var fromCodePoint = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").fromCodePoint;

    var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;
    var NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;

    module.exports = function entity(state, silent) {
      var ch,
          code,
          match,
          pos = state.pos,
          max = state.posMax;

      if (state.src.charCodeAt(pos) !== 0x26
      /* & */
      ) {
          return false;
        }

      if (pos + 1 < max) {
        ch = state.src.charCodeAt(pos + 1);

        if (ch === 0x23
        /* # */
        ) {
            match = state.src.slice(pos).match(DIGITAL_RE);

            if (match) {
              if (!silent) {
                code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);
                state.pending += isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);
              }

              state.pos += match[0].length;
              return true;
            }
          } else {
          match = state.src.slice(pos).match(NAMED_RE);

          if (match) {
            if (has(entities, match[1])) {
              if (!silent) {
                state.pending += entities[match[1]];
              }

              state.pos += match[0].length;
              return true;
            }
          }
        }
      }

      if (!silent) {
        state.pending += '&';
      }

      state.pos++;
      return true;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_inline/escape.js":
  /*!*************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_inline/escape.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_inlineEscapeJs(module, exports, __webpack_require__) {
    "use strict"; // Process escaped chars and hardbreaks

    var isSpace = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").isSpace;

    var ESCAPED = [];

    for (var i = 0; i < 256; i++) {
      ESCAPED.push(0);
    }

    '\\!"#$%&\'()*+,./:;<=>?@[]^_`{|}~-'.split('').forEach(function (ch) {
      ESCAPED[ch.charCodeAt(0)] = 1;
    });

    module.exports = function escape(state, silent) {
      var ch,
          pos = state.pos,
          max = state.posMax;

      if (state.src.charCodeAt(pos) !== 0x5C
      /* \ */
      ) {
          return false;
        }

      pos++;

      if (pos < max) {
        ch = state.src.charCodeAt(pos);

        if (ch < 256 && ESCAPED[ch] !== 0) {
          if (!silent) {
            state.pending += state.src[pos];
          }

          state.pos += 2;
          return true;
        }

        if (ch === 0x0A) {
          if (!silent) {
            state.push('hardbreak', 'br', 0);
          }

          pos++; // skip leading whitespaces from next line

          while (pos < max) {
            ch = state.src.charCodeAt(pos);

            if (!isSpace(ch)) {
              break;
            }

            pos++;
          }

          state.pos = pos;
          return true;
        }
      }

      if (!silent) {
        state.pending += '\\';
      }

      state.pos++;
      return true;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_inline/html_inline.js":
  /*!******************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_inline/html_inline.js ***!
    \******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_inlineHtml_inlineJs(module, exports, __webpack_require__) {
    "use strict"; // Process html tags

    var HTML_TAG_RE = __webpack_require__(
    /*! ../common/html_re */
    "./node_modules/markdown-it/lib/common/html_re.js").HTML_TAG_RE;

    function isLetter(ch) {
      /*eslint no-bitwise:0*/
      var lc = ch | 0x20; // to lower case

      return lc >= 0x61
      /* a */
      && lc <= 0x7a
      /* z */
      ;
    }

    module.exports = function html_inline(state, silent) {
      var ch,
          match,
          max,
          token,
          pos = state.pos;

      if (!state.md.options.html) {
        return false;
      } // Check start


      max = state.posMax;

      if (state.src.charCodeAt(pos) !== 0x3C
      /* < */
      || pos + 2 >= max) {
        return false;
      } // Quick fail on second char


      ch = state.src.charCodeAt(pos + 1);

      if (ch !== 0x21
      /* ! */
      && ch !== 0x3F
      /* ? */
      && ch !== 0x2F
      /* / */
      && !isLetter(ch)) {
        return false;
      }

      match = state.src.slice(pos).match(HTML_TAG_RE);

      if (!match) {
        return false;
      }

      if (!silent) {
        token = state.push('html_inline', '', 0);
        token.content = state.src.slice(pos, pos + match[0].length);
      }

      state.pos += match[0].length;
      return true;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_inline/image.js":
  /*!************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_inline/image.js ***!
    \************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_inlineImageJs(module, exports, __webpack_require__) {
    "use strict"; // Process ![image](<src> "title")

    var normalizeReference = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").normalizeReference;

    var isSpace = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").isSpace;

    module.exports = function image(state, silent) {
      var attrs,
          code,
          content,
          label,
          labelEnd,
          labelStart,
          pos,
          ref,
          res,
          title,
          token,
          tokens,
          start,
          href = '',
          oldPos = state.pos,
          max = state.posMax;

      if (state.src.charCodeAt(state.pos) !== 0x21
      /* ! */
      ) {
          return false;
        }

      if (state.src.charCodeAt(state.pos + 1) !== 0x5B
      /* [ */
      ) {
          return false;
        }

      labelStart = state.pos + 2;
      labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false); // parser failed to find ']', so it's not a valid link

      if (labelEnd < 0) {
        return false;
      }

      pos = labelEnd + 1;

      if (pos < max && state.src.charCodeAt(pos) === 0x28
      /* ( */
      ) {
          //
          // Inline link
          //
          // [link](  <href>  "title"  )
          //        ^^ skipping these spaces
          pos++;

          for (; pos < max; pos++) {
            code = state.src.charCodeAt(pos);

            if (!isSpace(code) && code !== 0x0A) {
              break;
            }
          }

          if (pos >= max) {
            return false;
          } // [link](  <href>  "title"  )
          //          ^^^^^^ parsing link destination


          start = pos;
          res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);

          if (res.ok) {
            href = state.md.normalizeLink(res.str);

            if (state.md.validateLink(href)) {
              pos = res.pos;
            } else {
              href = '';
            }
          } // [link](  <href>  "title"  )
          //                ^^ skipping these spaces


          start = pos;

          for (; pos < max; pos++) {
            code = state.src.charCodeAt(pos);

            if (!isSpace(code) && code !== 0x0A) {
              break;
            }
          } // [link](  <href>  "title"  )
          //                  ^^^^^^^ parsing link title


          res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);

          if (pos < max && start !== pos && res.ok) {
            title = res.str;
            pos = res.pos; // [link](  <href>  "title"  )
            //                         ^^ skipping these spaces

            for (; pos < max; pos++) {
              code = state.src.charCodeAt(pos);

              if (!isSpace(code) && code !== 0x0A) {
                break;
              }
            }
          } else {
            title = '';
          }

          if (pos >= max || state.src.charCodeAt(pos) !== 0x29
          /* ) */
          ) {
              state.pos = oldPos;
              return false;
            }

          pos++;
        } else {
        //
        // Link reference
        //
        if (typeof state.env.references === 'undefined') {
          return false;
        }

        if (pos < max && state.src.charCodeAt(pos) === 0x5B
        /* [ */
        ) {
            start = pos + 1;
            pos = state.md.helpers.parseLinkLabel(state, pos);

            if (pos >= 0) {
              label = state.src.slice(start, pos++);
            } else {
              pos = labelEnd + 1;
            }
          } else {
          pos = labelEnd + 1;
        } // covers label === '' and label === undefined
        // (collapsed reference link and shortcut reference link respectively)


        if (!label) {
          label = state.src.slice(labelStart, labelEnd);
        }

        ref = state.env.references[normalizeReference(label)];

        if (!ref) {
          state.pos = oldPos;
          return false;
        }

        href = ref.href;
        title = ref.title;
      } //
      // We found the end of the link, and know for a fact it's a valid link;
      // so all that's left to do is to call tokenizer.
      //


      if (!silent) {
        content = state.src.slice(labelStart, labelEnd);
        state.md.inline.parse(content, state.md, state.env, tokens = []);
        token = state.push('image', 'img', 0);
        token.attrs = attrs = [['src', href], ['alt', '']];
        token.children = tokens;
        token.content = content;

        if (title) {
          attrs.push(['title', title]);
        }
      }

      state.pos = pos;
      state.posMax = max;
      return true;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_inline/link.js":
  /*!***********************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_inline/link.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_inlineLinkJs(module, exports, __webpack_require__) {
    "use strict"; // Process [link](<to> "stuff")

    var normalizeReference = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").normalizeReference;

    var isSpace = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").isSpace;

    module.exports = function link(state, silent) {
      var attrs,
          code,
          label,
          labelEnd,
          labelStart,
          pos,
          res,
          ref,
          title,
          token,
          href = '',
          oldPos = state.pos,
          max = state.posMax,
          start = state.pos,
          parseReference = true;

      if (state.src.charCodeAt(state.pos) !== 0x5B
      /* [ */
      ) {
          return false;
        }

      labelStart = state.pos + 1;
      labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true); // parser failed to find ']', so it's not a valid link

      if (labelEnd < 0) {
        return false;
      }

      pos = labelEnd + 1;

      if (pos < max && state.src.charCodeAt(pos) === 0x28
      /* ( */
      ) {
          //
          // Inline link
          //
          // might have found a valid shortcut link, disable reference parsing
          parseReference = false; // [link](  <href>  "title"  )
          //        ^^ skipping these spaces

          pos++;

          for (; pos < max; pos++) {
            code = state.src.charCodeAt(pos);

            if (!isSpace(code) && code !== 0x0A) {
              break;
            }
          }

          if (pos >= max) {
            return false;
          } // [link](  <href>  "title"  )
          //          ^^^^^^ parsing link destination


          start = pos;
          res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);

          if (res.ok) {
            href = state.md.normalizeLink(res.str);

            if (state.md.validateLink(href)) {
              pos = res.pos;
            } else {
              href = '';
            }
          } // [link](  <href>  "title"  )
          //                ^^ skipping these spaces


          start = pos;

          for (; pos < max; pos++) {
            code = state.src.charCodeAt(pos);

            if (!isSpace(code) && code !== 0x0A) {
              break;
            }
          } // [link](  <href>  "title"  )
          //                  ^^^^^^^ parsing link title


          res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);

          if (pos < max && start !== pos && res.ok) {
            title = res.str;
            pos = res.pos; // [link](  <href>  "title"  )
            //                         ^^ skipping these spaces

            for (; pos < max; pos++) {
              code = state.src.charCodeAt(pos);

              if (!isSpace(code) && code !== 0x0A) {
                break;
              }
            }
          } else {
            title = '';
          }

          if (pos >= max || state.src.charCodeAt(pos) !== 0x29
          /* ) */
          ) {
              // parsing a valid shortcut link failed, fallback to reference
              parseReference = true;
            }

          pos++;
        }

      if (parseReference) {
        //
        // Link reference
        //
        if (typeof state.env.references === 'undefined') {
          return false;
        }

        if (pos < max && state.src.charCodeAt(pos) === 0x5B
        /* [ */
        ) {
            start = pos + 1;
            pos = state.md.helpers.parseLinkLabel(state, pos);

            if (pos >= 0) {
              label = state.src.slice(start, pos++);
            } else {
              pos = labelEnd + 1;
            }
          } else {
          pos = labelEnd + 1;
        } // covers label === '' and label === undefined
        // (collapsed reference link and shortcut reference link respectively)


        if (!label) {
          label = state.src.slice(labelStart, labelEnd);
        }

        ref = state.env.references[normalizeReference(label)];

        if (!ref) {
          state.pos = oldPos;
          return false;
        }

        href = ref.href;
        title = ref.title;
      } //
      // We found the end of the link, and know for a fact it's a valid link;
      // so all that's left to do is to call tokenizer.
      //


      if (!silent) {
        state.pos = labelStart;
        state.posMax = labelEnd;
        token = state.push('link_open', 'a', 1);
        token.attrs = attrs = [['href', href]];

        if (title) {
          attrs.push(['title', title]);
        }

        state.md.inline.tokenize(state);
        token = state.push('link_close', 'a', -1);
      }

      state.pos = pos;
      state.posMax = max;
      return true;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_inline/newline.js":
  /*!**************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_inline/newline.js ***!
    \**************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_inlineNewlineJs(module, exports, __webpack_require__) {
    "use strict"; // Proceess '\n'

    var isSpace = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").isSpace;

    module.exports = function newline(state, silent) {
      var pmax,
          max,
          pos = state.pos;

      if (state.src.charCodeAt(pos) !== 0x0A
      /* \n */
      ) {
          return false;
        }

      pmax = state.pending.length - 1;
      max = state.posMax; // '  \n' -> hardbreak
      // Lookup in pending chars is bad practice! Don't copy to other rules!
      // Pending string is stored in concat mode, indexed lookups will cause
      // convertion to flat mode.

      if (!silent) {
        if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {
          if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {
            state.pending = state.pending.replace(/ +$/, '');
            state.push('hardbreak', 'br', 0);
          } else {
            state.pending = state.pending.slice(0, -1);
            state.push('softbreak', 'br', 0);
          }
        } else {
          state.push('softbreak', 'br', 0);
        }
      }

      pos++; // skip heading spaces for next line

      while (pos < max && isSpace(state.src.charCodeAt(pos))) {
        pos++;
      }

      state.pos = pos;
      return true;
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_inline/state_inline.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_inline/state_inline.js ***!
    \*******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_inlineState_inlineJs(module, exports, __webpack_require__) {
    "use strict"; // Inline parser state

    var Token = __webpack_require__(
    /*! ../token */
    "./node_modules/markdown-it/lib/token.js");

    var isWhiteSpace = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").isWhiteSpace;

    var isPunctChar = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").isPunctChar;

    var isMdAsciiPunct = __webpack_require__(
    /*! ../common/utils */
    "./node_modules/markdown-it/lib/common/utils.js").isMdAsciiPunct;

    function StateInline(src, md, env, outTokens) {
      this.src = src;
      this.env = env;
      this.md = md;
      this.tokens = outTokens;
      this.tokens_meta = Array(outTokens.length);
      this.pos = 0;
      this.posMax = this.src.length;
      this.level = 0;
      this.pending = '';
      this.pendingLevel = 0; // Stores { start: end } pairs. Useful for backtrack
      // optimization of pairs parse (emphasis, strikes).

      this.cache = {}; // List of emphasis-like delimiters for current tag

      this.delimiters = []; // Stack of delimiter lists for upper level tags

      this._prev_delimiters = [];
    } // Flush pending text
    //


    StateInline.prototype.pushPending = function () {
      var token = new Token('text', '', 0);
      token.content = this.pending;
      token.level = this.pendingLevel;
      this.tokens.push(token);
      this.pending = '';
      return token;
    }; // Push new token to "stream".
    // If pending text exists - flush it as text token
    //


    StateInline.prototype.push = function (type, tag, nesting) {
      if (this.pending) {
        this.pushPending();
      }

      var token = new Token(type, tag, nesting);
      var token_meta = null;

      if (nesting < 0) {
        // closing tag
        this.level--;
        this.delimiters = this._prev_delimiters.pop();
      }

      token.level = this.level;

      if (nesting > 0) {
        // opening tag
        this.level++;

        this._prev_delimiters.push(this.delimiters);

        this.delimiters = [];
        token_meta = {
          delimiters: this.delimiters
        };
      }

      this.pendingLevel = this.level;
      this.tokens.push(token);
      this.tokens_meta.push(token_meta);
      return token;
    }; // Scan a sequence of emphasis-like markers, and determine whether
    // it can start an emphasis sequence or end an emphasis sequence.
    //
    //  - start - position to scan from (it should point at a valid marker);
    //  - canSplitWord - determine if these markers can be found inside a word
    //


    StateInline.prototype.scanDelims = function (start, canSplitWord) {
      var pos = start,
          lastChar,
          nextChar,
          count,
          can_open,
          can_close,
          isLastWhiteSpace,
          isLastPunctChar,
          isNextWhiteSpace,
          isNextPunctChar,
          left_flanking = true,
          right_flanking = true,
          max = this.posMax,
          marker = this.src.charCodeAt(start); // treat beginning of the line as a whitespace

      lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;

      while (pos < max && this.src.charCodeAt(pos) === marker) {
        pos++;
      }

      count = pos - start; // treat end of the line as a whitespace

      nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;
      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
      isLastWhiteSpace = isWhiteSpace(lastChar);
      isNextWhiteSpace = isWhiteSpace(nextChar);

      if (isNextWhiteSpace) {
        left_flanking = false;
      } else if (isNextPunctChar) {
        if (!(isLastWhiteSpace || isLastPunctChar)) {
          left_flanking = false;
        }
      }

      if (isLastWhiteSpace) {
        right_flanking = false;
      } else if (isLastPunctChar) {
        if (!(isNextWhiteSpace || isNextPunctChar)) {
          right_flanking = false;
        }
      }

      if (!canSplitWord) {
        can_open = left_flanking && (!right_flanking || isLastPunctChar);
        can_close = right_flanking && (!left_flanking || isNextPunctChar);
      } else {
        can_open = left_flanking;
        can_close = right_flanking;
      }

      return {
        can_open: can_open,
        can_close: can_close,
        length: count
      };
    }; // re-export Token class to use in block rules


    StateInline.prototype.Token = Token;
    module.exports = StateInline;
    /***/
  },

  /***/
  "./node_modules/markdown-it/lib/rules_inline/strikethrough.js":
  /*!********************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_inline/strikethrough.js ***!
    \********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_inlineStrikethroughJs(module, exports, __webpack_require__) {
    "use strict"; // ~~strike through~~
    //
    // Insert each marker as a separate text token, and add it to delimiter list
    //

    module.exports.tokenize = function strikethrough(state, silent) {
      var i,
          scanned,
          token,
          len,
          ch,
          start = state.pos,
          marker = state.src.charCodeAt(start);

      if (silent) {
        return false;
      }

      if (marker !== 0x7E
      /* ~ */
      ) {
          return false;
        }

      scanned = state.scanDelims(state.pos, true);
      len = scanned.length;
      ch = String.fromCharCode(marker);

      if (len < 2) {
        return false;
      }

      if (len % 2) {
        token = state.push('text', '', 0);
        token.content = ch;
        len--;
      }

      for (i = 0; i < len; i += 2) {
        token = state.push('text', '', 0);
        token.content = ch + ch;
        state.delimiters.push({
          marker: marker,
          length: 0,
          // disable "rule of 3" length checks meant for emphasis
          jump: i,
          token: state.tokens.length - 1,
          end: -1,
          open: scanned.can_open,
          close: scanned.can_close
        });
      }

      state.pos += scanned.length;
      return true;
    };

    function postProcess(state, delimiters) {
      var i,
          j,
          startDelim,
          endDelim,
          token,
          loneMarkers = [],
          max = delimiters.length;

      for (i = 0; i < max; i++) {
        startDelim = delimiters[i];

        if (startDelim.marker !== 0x7E
        /* ~ */
        ) {
            continue;
          }

        if (startDelim.end === -1) {
          continue;
        }

        endDelim = delimiters[startDelim.end];
        token = state.tokens[startDelim.token];
        token.type = 's_open';
        token.tag = 's';
        token.nesting = 1;
        token.markup = '~~';
        token.content = '';
        token = state.tokens[endDelim.token];
        token.type = 's_close';
        token.tag = 's';
        token.nesting = -1;
        token.markup = '~~';
        token.content = '';

        if (state.tokens[endDelim.token - 1].type === 'text' && state.tokens[endDelim.token - 1].content === '~') {
          loneMarkers.push(endDelim.token - 1);
        }
      } // If a marker sequence has an odd number of characters, it's splitted
      // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the
      // start of the sequence.
      //
      // So, we have to move all those markers after subsequent s_close tags.
      //


      while (loneMarkers.length) {
        i = loneMarkers.pop();
        j = i + 1;

        while (j < state.tokens.length && state.tokens[j].type === 's_close') {
          j++;
        }

        j--;

        if (i !== j) {
          token = state.tokens[j];
          state.tokens[j] = state.tokens[i];
          state.tokens[i] = token;
        }
      }
    } // Walk through delimiter list and replace text tokens with tags
    //


    module.exports.postProcess = function strikethrough(state) {
      var curr,
          tokens_meta = state.tokens_meta,
          max = state.tokens_meta.length;
      postProcess(state, state.delimiters);

      for (curr = 0; curr < max; curr++) {
        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
          postProcess(state, tokens_meta[curr].delimiters);
        }
      }
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_inline/text.js":
  /*!***********************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_inline/text.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_inlineTextJs(module, exports, __webpack_require__) {
    "use strict"; // Skip text characters for text token, place those to pending buffer
    // and increment current pos
    // Rule to skip pure text
    // '{}$%@~+=:' reserved for extentions
    // !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~
    // !!!! Don't confuse with "Markdown ASCII Punctuation" chars
    // http://spec.commonmark.org/0.15/#ascii-punctuation-character

    function isTerminatorChar(ch) {
      switch (ch) {
        case 0x0A
        /* \n */
        :
        case 0x21
        /* ! */
        :
        case 0x23
        /* # */
        :
        case 0x24
        /* $ */
        :
        case 0x25
        /* % */
        :
        case 0x26
        /* & */
        :
        case 0x2A
        /* * */
        :
        case 0x2B
        /* + */
        :
        case 0x2D
        /* - */
        :
        case 0x3A
        /* : */
        :
        case 0x3C
        /* < */
        :
        case 0x3D
        /* = */
        :
        case 0x3E
        /* > */
        :
        case 0x40
        /* @ */
        :
        case 0x5B
        /* [ */
        :
        case 0x5C
        /* \ */
        :
        case 0x5D
        /* ] */
        :
        case 0x5E
        /* ^ */
        :
        case 0x5F
        /* _ */
        :
        case 0x60
        /* ` */
        :
        case 0x7B
        /* { */
        :
        case 0x7D
        /* } */
        :
        case 0x7E
        /* ~ */
        :
          return true;

        default:
          return false;
      }
    }

    module.exports = function text(state, silent) {
      var pos = state.pos;

      while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {
        pos++;
      }

      if (pos === state.pos) {
        return false;
      }

      if (!silent) {
        state.pending += state.src.slice(state.pos, pos);
      }

      state.pos = pos;
      return true;
    }; // Alternative implementation, for memory.
    //
    // It costs 10% of performance, but allows extend terminators list, if place it
    // to `ParcerInline` property. Probably, will switch to it sometime, such
    // flexibility required.

    /*
    var TERMINATOR_RE = /[\n!#$%&*+\-:<=>@[\\\]^_`{}~]/;
    
    module.exports = function text(state, silent) {
      var pos = state.pos,
          idx = state.src.slice(pos).search(TERMINATOR_RE);
    
      // first char is terminator -> empty text
      if (idx === 0) { return false; }
    
      // no terminator -> text till end of string
      if (idx < 0) {
        if (!silent) { state.pending += state.src.slice(pos); }
        state.pos = state.src.length;
        return true;
      }
    
      if (!silent) { state.pending += state.src.slice(pos, pos + idx); }
    
      state.pos += idx;
    
      return true;
    };*/

    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/rules_inline/text_collapse.js":
  /*!********************************************************************!*\
    !*** ./node_modules/markdown-it/lib/rules_inline/text_collapse.js ***!
    \********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibRules_inlineText_collapseJs(module, exports, __webpack_require__) {
    "use strict"; // Clean up tokens after emphasis and strikethrough postprocessing:
    // merge adjacent text nodes into one and re-calculate all token levels
    //
    // This is necessary because initially emphasis delimiter markers (*, _, ~)
    // are treated as their own separate text tokens. Then emphasis rule either
    // leaves them as text (needed to merge with adjacent text) or turns them
    // into opening/closing tags (which messes up levels inside).
    //

    module.exports = function text_collapse(state) {
      var curr,
          last,
          level = 0,
          tokens = state.tokens,
          max = state.tokens.length;

      for (curr = last = 0; curr < max; curr++) {
        // re-calculate levels after emphasis/strikethrough turns some text nodes
        // into opening/closing tags
        if (tokens[curr].nesting < 0) level--; // closing tag

        tokens[curr].level = level;
        if (tokens[curr].nesting > 0) level++; // opening tag

        if (tokens[curr].type === 'text' && curr + 1 < max && tokens[curr + 1].type === 'text') {
          // collapse two adjacent text nodes
          tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
        } else {
          if (curr !== last) {
            tokens[last] = tokens[curr];
          }

          last++;
        }
      }

      if (curr !== last) {
        tokens.length = last;
      }
    };
    /***/

  },

  /***/
  "./node_modules/markdown-it/lib/token.js":
  /*!***********************************************!*\
    !*** ./node_modules/markdown-it/lib/token.js ***!
    \***********************************************/

  /*! no static exports found */

  /***/
  function node_modulesMarkdownItLibTokenJs(module, exports, __webpack_require__) {
    "use strict"; // Token class

    /**
     * class Token
     **/

    /**
     * new Token(type, tag, nesting)
     *
     * Create new token and fill passed properties.
     **/

    function Token(type, tag, nesting) {
      /**
       * Token#type -> String
       *
       * Type of the token (string, e.g. "paragraph_open")
       **/
      this.type = type;
      /**
       * Token#tag -> String
       *
       * html tag name, e.g. "p"
       **/

      this.tag = tag;
      /**
       * Token#attrs -> Array
       *
       * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`
       **/

      this.attrs = null;
      /**
       * Token#map -> Array
       *
       * Source map info. Format: `[ line_begin, line_end ]`
       **/

      this.map = null;
      /**
       * Token#nesting -> Number
       *
       * Level change (number in {-1, 0, 1} set), where:
       *
       * -  `1` means the tag is opening
       * -  `0` means the tag is self-closing
       * - `-1` means the tag is closing
       **/

      this.nesting = nesting;
      /**
       * Token#level -> Number
       *
       * nesting level, the same as `state.level`
       **/

      this.level = 0;
      /**
       * Token#children -> Array
       *
       * An array of child nodes (inline and img tokens)
       **/

      this.children = null;
      /**
       * Token#content -> String
       *
       * In a case of self-closing tag (code, html, fence, etc.),
       * it has contents of this tag.
       **/

      this.content = '';
      /**
       * Token#markup -> String
       *
       * '*' or '_' for emphasis, fence string for fence, etc.
       **/

      this.markup = '';
      /**
       * Token#info -> String
       *
       * fence infostring
       **/

      this.info = '';
      /**
       * Token#meta -> Object
       *
       * A place for plugins to store an arbitrary data
       **/

      this.meta = null;
      /**
       * Token#block -> Boolean
       *
       * True for block-level tokens, false for inline tokens.
       * Used in renderer to calculate line breaks
       **/

      this.block = false;
      /**
       * Token#hidden -> Boolean
       *
       * If it's true, ignore this element when rendering. Used for tight lists
       * to hide paragraphs.
       **/

      this.hidden = false;
    }
    /**
     * Token.attrIndex(name) -> Number
     *
     * Search attribute index by name.
     **/


    Token.prototype.attrIndex = function attrIndex(name) {
      var attrs, i, len;

      if (!this.attrs) {
        return -1;
      }

      attrs = this.attrs;

      for (i = 0, len = attrs.length; i < len; i++) {
        if (attrs[i][0] === name) {
          return i;
        }
      }

      return -1;
    };
    /**
     * Token.attrPush(attrData)
     *
     * Add `[ name, value ]` attribute to list. Init attrs if necessary
     **/


    Token.prototype.attrPush = function attrPush(attrData) {
      if (this.attrs) {
        this.attrs.push(attrData);
      } else {
        this.attrs = [attrData];
      }
    };
    /**
     * Token.attrSet(name, value)
     *
     * Set `name` attribute to `value`. Override old value if exists.
     **/


    Token.prototype.attrSet = function attrSet(name, value) {
      var idx = this.attrIndex(name),
          attrData = [name, value];

      if (idx < 0) {
        this.attrPush(attrData);
      } else {
        this.attrs[idx] = attrData;
      }
    };
    /**
     * Token.attrGet(name)
     *
     * Get the value of attribute `name`, or null if it does not exist.
     **/


    Token.prototype.attrGet = function attrGet(name) {
      var idx = this.attrIndex(name),
          value = null;

      if (idx >= 0) {
        value = this.attrs[idx][1];
      }

      return value;
    };
    /**
     * Token.attrJoin(name, value)
     *
     * Join value to existing attribute via space. Or create new attribute if not
     * exists. Useful to operate with token classes.
     **/


    Token.prototype.attrJoin = function attrJoin(name, value) {
      var idx = this.attrIndex(name);

      if (idx < 0) {
        this.attrPush([name, value]);
      } else {
        this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;
      }
    };

    module.exports = Token;
    /***/
  },

  /***/
  "./node_modules/markdown-it/node_modules/entities/lib/maps/entities.json":
  /*!*******************************************************************************!*\
    !*** ./node_modules/markdown-it/node_modules/entities/lib/maps/entities.json ***!
    \*******************************************************************************/

  /*! exports provided: Aacute, aacute, Abreve, abreve, ac, acd, acE, Acirc, acirc, acute, Acy, acy, AElig, aelig, af, Afr, afr, Agrave, agrave, alefsym, aleph, Alpha, alpha, Amacr, amacr, amalg, amp, AMP, andand, And, and, andd, andslope, andv, ang, ange, angle, angmsdaa, angmsdab, angmsdac, angmsdad, angmsdae, angmsdaf, angmsdag, angmsdah, angmsd, angrt, angrtvb, angrtvbd, angsph, angst, angzarr, Aogon, aogon, Aopf, aopf, apacir, ap, apE, ape, apid, apos, ApplyFunction, approx, approxeq, Aring, aring, Ascr, ascr, Assign, ast, asymp, asympeq, Atilde, atilde, Auml, auml, awconint, awint, backcong, backepsilon, backprime, backsim, backsimeq, Backslash, Barv, barvee, barwed, Barwed, barwedge, bbrk, bbrktbrk, bcong, Bcy, bcy, bdquo, becaus, because, Because, bemptyv, bepsi, bernou, Bernoullis, Beta, beta, beth, between, Bfr, bfr, bigcap, bigcirc, bigcup, bigodot, bigoplus, bigotimes, bigsqcup, bigstar, bigtriangledown, bigtriangleup, biguplus, bigvee, bigwedge, bkarow, blacklozenge, blacksquare, blacktriangle, blacktriangledown, blacktriangleleft, blacktriangleright, blank, blk12, blk14, blk34, block, bne, bnequiv, bNot, bnot, Bopf, bopf, bot, bottom, bowtie, boxbox, boxdl, boxdL, boxDl, boxDL, boxdr, boxdR, boxDr, boxDR, boxh, boxH, boxhd, boxHd, boxhD, boxHD, boxhu, boxHu, boxhU, boxHU, boxminus, boxplus, boxtimes, boxul, boxuL, boxUl, boxUL, boxur, boxuR, boxUr, boxUR, boxv, boxV, boxvh, boxvH, boxVh, boxVH, boxvl, boxvL, boxVl, boxVL, boxvr, boxvR, boxVr, boxVR, bprime, breve, Breve, brvbar, bscr, Bscr, bsemi, bsim, bsime, bsolb, bsol, bsolhsub, bull, bullet, bump, bumpE, bumpe, Bumpeq, bumpeq, Cacute, cacute, capand, capbrcup, capcap, cap, Cap, capcup, capdot, CapitalDifferentialD, caps, caret, caron, Cayleys, ccaps, Ccaron, ccaron, Ccedil, ccedil, Ccirc, ccirc, Cconint, ccups, ccupssm, Cdot, cdot, cedil, Cedilla, cemptyv, cent, centerdot, CenterDot, cfr, Cfr, CHcy, chcy, check, checkmark, Chi, chi, circ, circeq, circlearrowleft, circlearrowright, circledast, circledcirc, circleddash, CircleDot, circledR, circledS, CircleMinus, CirclePlus, CircleTimes, cir, cirE, cire, cirfnint, cirmid, cirscir, ClockwiseContourIntegral, CloseCurlyDoubleQuote, CloseCurlyQuote, clubs, clubsuit, colon, Colon, Colone, colone, coloneq, comma, commat, comp, compfn, complement, complexes, cong, congdot, Congruent, conint, Conint, ContourIntegral, copf, Copf, coprod, Coproduct, copy, COPY, copysr, CounterClockwiseContourIntegral, crarr, cross, Cross, Cscr, cscr, csub, csube, csup, csupe, ctdot, cudarrl, cudarrr, cuepr, cuesc, cularr, cularrp, cupbrcap, cupcap, CupCap, cup, Cup, cupcup, cupdot, cupor, cups, curarr, curarrm, curlyeqprec, curlyeqsucc, curlyvee, curlywedge, curren, curvearrowleft, curvearrowright, cuvee, cuwed, cwconint, cwint, cylcty, dagger, Dagger, daleth, darr, Darr, dArr, dash, Dashv, dashv, dbkarow, dblac, Dcaron, dcaron, Dcy, dcy, ddagger, ddarr, DD, dd, DDotrahd, ddotseq, deg, Del, Delta, delta, demptyv, dfisht, Dfr, dfr, dHar, dharl, dharr, DiacriticalAcute, DiacriticalDot, DiacriticalDoubleAcute, DiacriticalGrave, DiacriticalTilde, diam, diamond, Diamond, diamondsuit, diams, die, DifferentialD, digamma, disin, div, divide, divideontimes, divonx, DJcy, djcy, dlcorn, dlcrop, dollar, Dopf, dopf, Dot, dot, DotDot, doteq, doteqdot, DotEqual, dotminus, dotplus, dotsquare, doublebarwedge, DoubleContourIntegral, DoubleDot, DoubleDownArrow, DoubleLeftArrow, DoubleLeftRightArrow, DoubleLeftTee, DoubleLongLeftArrow, DoubleLongLeftRightArrow, DoubleLongRightArrow, DoubleRightArrow, DoubleRightTee, DoubleUpArrow, DoubleUpDownArrow, DoubleVerticalBar, DownArrowBar, downarrow, DownArrow, Downarrow, DownArrowUpArrow, DownBreve, downdownarrows, downharpoonleft, downharpoonright, DownLeftRightVector, DownLeftTeeVector, DownLeftVectorBar, DownLeftVector, DownRightTeeVector, DownRightVectorBar, DownRightVector, DownTeeArrow, DownTee, drbkarow, drcorn, drcrop, Dscr, dscr, DScy, dscy, dsol, Dstrok, dstrok, dtdot, dtri, dtrif, duarr, duhar, dwangle, DZcy, dzcy, dzigrarr, Eacute, eacute, easter, Ecaron, ecaron, Ecirc, ecirc, ecir, ecolon, Ecy, ecy, eDDot, Edot, edot, eDot, ee, efDot, Efr, efr, eg, Egrave, egrave, egs, egsdot, el, Element, elinters, ell, els, elsdot, Emacr, emacr, empty, emptyset, EmptySmallSquare, emptyv, EmptyVerySmallSquare, emsp13, emsp14, emsp, ENG, eng, ensp, Eogon, eogon, Eopf, eopf, epar, eparsl, eplus, epsi, Epsilon, epsilon, epsiv, eqcirc, eqcolon, eqsim, eqslantgtr, eqslantless, Equal, equals, EqualTilde, equest, Equilibrium, equiv, equivDD, eqvparsl, erarr, erDot, escr, Escr, esdot, Esim, esim, Eta, eta, ETH, eth, Euml, euml, euro, excl, exist, Exists, expectation, exponentiale, ExponentialE, fallingdotseq, Fcy, fcy, female, ffilig, fflig, ffllig, Ffr, ffr, filig, FilledSmallSquare, FilledVerySmallSquare, fjlig, flat, fllig, fltns, fnof, Fopf, fopf, forall, ForAll, fork, forkv, Fouriertrf, fpartint, frac12, frac13, frac14, frac15, frac16, frac18, frac23, frac25, frac34, frac35, frac38, frac45, frac56, frac58, frac78, frasl, frown, fscr, Fscr, gacute, Gamma, gamma, Gammad, gammad, gap, Gbreve, gbreve, Gcedil, Gcirc, gcirc, Gcy, gcy, Gdot, gdot, ge, gE, gEl, gel, geq, geqq, geqslant, gescc, ges, gesdot, gesdoto, gesdotol, gesl, gesles, Gfr, gfr, gg, Gg, ggg, gimel, GJcy, gjcy, gla, gl, glE, glj, gnap, gnapprox, gne, gnE, gneq, gneqq, gnsim, Gopf, gopf, grave, GreaterEqual, GreaterEqualLess, GreaterFullEqual, GreaterGreater, GreaterLess, GreaterSlantEqual, GreaterTilde, Gscr, gscr, gsim, gsime, gsiml, gtcc, gtcir, gt, GT, Gt, gtdot, gtlPar, gtquest, gtrapprox, gtrarr, gtrdot, gtreqless, gtreqqless, gtrless, gtrsim, gvertneqq, gvnE, Hacek, hairsp, half, hamilt, HARDcy, hardcy, harrcir, harr, hArr, harrw, Hat, hbar, Hcirc, hcirc, hearts, heartsuit, hellip, hercon, hfr, Hfr, HilbertSpace, hksearow, hkswarow, hoarr, homtht, hookleftarrow, hookrightarrow, hopf, Hopf, horbar, HorizontalLine, hscr, Hscr, hslash, Hstrok, hstrok, HumpDownHump, HumpEqual, hybull, hyphen, Iacute, iacute, ic, Icirc, icirc, Icy, icy, Idot, IEcy, iecy, iexcl, iff, ifr, Ifr, Igrave, igrave, ii, iiiint, iiint, iinfin, iiota, IJlig, ijlig, Imacr, imacr, image, ImaginaryI, imagline, imagpart, imath, Im, imof, imped, Implies, incare, in, infin, infintie, inodot, intcal, int, Int, integers, Integral, intercal, Intersection, intlarhk, intprod, InvisibleComma, InvisibleTimes, IOcy, iocy, Iogon, iogon, Iopf, iopf, Iota, iota, iprod, iquest, iscr, Iscr, isin, isindot, isinE, isins, isinsv, isinv, it, Itilde, itilde, Iukcy, iukcy, Iuml, iuml, Jcirc, jcirc, Jcy, jcy, Jfr, jfr, jmath, Jopf, jopf, Jscr, jscr, Jsercy, jsercy, Jukcy, jukcy, Kappa, kappa, kappav, Kcedil, kcedil, Kcy, kcy, Kfr, kfr, kgreen, KHcy, khcy, KJcy, kjcy, Kopf, kopf, Kscr, kscr, lAarr, Lacute, lacute, laemptyv, lagran, Lambda, lambda, lang, Lang, langd, langle, lap, Laplacetrf, laquo, larrb, larrbfs, larr, Larr, lArr, larrfs, larrhk, larrlp, larrpl, larrsim, larrtl, latail, lAtail, lat, late, lates, lbarr, lBarr, lbbrk, lbrace, lbrack, lbrke, lbrksld, lbrkslu, Lcaron, lcaron, Lcedil, lcedil, lceil, lcub, Lcy, lcy, ldca, ldquo, ldquor, ldrdhar, ldrushar, ldsh, le, lE, LeftAngleBracket, LeftArrowBar, leftarrow, LeftArrow, Leftarrow, LeftArrowRightArrow, leftarrowtail, LeftCeiling, LeftDoubleBracket, LeftDownTeeVector, LeftDownVectorBar, LeftDownVector, LeftFloor, leftharpoondown, leftharpoonup, leftleftarrows, leftrightarrow, LeftRightArrow, Leftrightarrow, leftrightarrows, leftrightharpoons, leftrightsquigarrow, LeftRightVector, LeftTeeArrow, LeftTee, LeftTeeVector, leftthreetimes, LeftTriangleBar, LeftTriangle, LeftTriangleEqual, LeftUpDownVector, LeftUpTeeVector, LeftUpVectorBar, LeftUpVector, LeftVectorBar, LeftVector, lEg, leg, leq, leqq, leqslant, lescc, les, lesdot, lesdoto, lesdotor, lesg, lesges, lessapprox, lessdot, lesseqgtr, lesseqqgtr, LessEqualGreater, LessFullEqual, LessGreater, lessgtr, LessLess, lesssim, LessSlantEqual, LessTilde, lfisht, lfloor, Lfr, lfr, lg, lgE, lHar, lhard, lharu, lharul, lhblk, LJcy, ljcy, llarr, ll, Ll, llcorner, Lleftarrow, llhard, lltri, Lmidot, lmidot, lmoustache, lmoust, lnap, lnapprox, lne, lnE, lneq, lneqq, lnsim, loang, loarr, lobrk, longleftarrow, LongLeftArrow, Longleftarrow, longleftrightarrow, LongLeftRightArrow, Longleftrightarrow, longmapsto, longrightarrow, LongRightArrow, Longrightarrow, looparrowleft, looparrowright, lopar, Lopf, lopf, loplus, lotimes, lowast, lowbar, LowerLeftArrow, LowerRightArrow, loz, lozenge, lozf, lpar, lparlt, lrarr, lrcorner, lrhar, lrhard, lrm, lrtri, lsaquo, lscr, Lscr, lsh, Lsh, lsim, lsime, lsimg, lsqb, lsquo, lsquor, Lstrok, lstrok, ltcc, ltcir, lt, LT, Lt, ltdot, lthree, ltimes, ltlarr, ltquest, ltri, ltrie, ltrif, ltrPar, lurdshar, luruhar, lvertneqq, lvnE, macr, male, malt, maltese, Map, map, mapsto, mapstodown, mapstoleft, mapstoup, marker, mcomma, Mcy, mcy, mdash, mDDot, measuredangle, MediumSpace, Mellintrf, Mfr, mfr, mho, micro, midast, midcir, mid, middot, minusb, minus, minusd, minusdu, MinusPlus, mlcp, mldr, mnplus, models, Mopf, mopf, mp, mscr, Mscr, mstpos, Mu, mu, multimap, mumap, nabla, Nacute, nacute, nang, nap, napE, napid, napos, napprox, natural, naturals, natur, nbsp, nbump, nbumpe, ncap, Ncaron, ncaron, Ncedil, ncedil, ncong, ncongdot, ncup, Ncy, ncy, ndash, nearhk, nearr, neArr, nearrow, ne, nedot, NegativeMediumSpace, NegativeThickSpace, NegativeThinSpace, NegativeVeryThinSpace, nequiv, nesear, nesim, NestedGreaterGreater, NestedLessLess, NewLine, nexist, nexists, Nfr, nfr, ngE, nge, ngeq, ngeqq, ngeqslant, nges, nGg, ngsim, nGt, ngt, ngtr, nGtv, nharr, nhArr, nhpar, ni, nis, nisd, niv, NJcy, njcy, nlarr, nlArr, nldr, nlE, nle, nleftarrow, nLeftarrow, nleftrightarrow, nLeftrightarrow, nleq, nleqq, nleqslant, nles, nless, nLl, nlsim, nLt, nlt, nltri, nltrie, nLtv, nmid, NoBreak, NonBreakingSpace, nopf, Nopf, Not, not, NotCongruent, NotCupCap, NotDoubleVerticalBar, NotElement, NotEqual, NotEqualTilde, NotExists, NotGreater, NotGreaterEqual, NotGreaterFullEqual, NotGreaterGreater, NotGreaterLess, NotGreaterSlantEqual, NotGreaterTilde, NotHumpDownHump, NotHumpEqual, notin, notindot, notinE, notinva, notinvb, notinvc, NotLeftTriangleBar, NotLeftTriangle, NotLeftTriangleEqual, NotLess, NotLessEqual, NotLessGreater, NotLessLess, NotLessSlantEqual, NotLessTilde, NotNestedGreaterGreater, NotNestedLessLess, notni, notniva, notnivb, notnivc, NotPrecedes, NotPrecedesEqual, NotPrecedesSlantEqual, NotReverseElement, NotRightTriangleBar, NotRightTriangle, NotRightTriangleEqual, NotSquareSubset, NotSquareSubsetEqual, NotSquareSuperset, NotSquareSupersetEqual, NotSubset, NotSubsetEqual, NotSucceeds, NotSucceedsEqual, NotSucceedsSlantEqual, NotSucceedsTilde, NotSuperset, NotSupersetEqual, NotTilde, NotTildeEqual, NotTildeFullEqual, NotTildeTilde, NotVerticalBar, nparallel, npar, nparsl, npart, npolint, npr, nprcue, nprec, npreceq, npre, nrarrc, nrarr, nrArr, nrarrw, nrightarrow, nRightarrow, nrtri, nrtrie, nsc, nsccue, nsce, Nscr, nscr, nshortmid, nshortparallel, nsim, nsime, nsimeq, nsmid, nspar, nsqsube, nsqsupe, nsub, nsubE, nsube, nsubset, nsubseteq, nsubseteqq, nsucc, nsucceq, nsup, nsupE, nsupe, nsupset, nsupseteq, nsupseteqq, ntgl, Ntilde, ntilde, ntlg, ntriangleleft, ntrianglelefteq, ntriangleright, ntrianglerighteq, Nu, nu, num, numero, numsp, nvap, nvdash, nvDash, nVdash, nVDash, nvge, nvgt, nvHarr, nvinfin, nvlArr, nvle, nvlt, nvltrie, nvrArr, nvrtrie, nvsim, nwarhk, nwarr, nwArr, nwarrow, nwnear, Oacute, oacute, oast, Ocirc, ocirc, ocir, Ocy, ocy, odash, Odblac, odblac, odiv, odot, odsold, OElig, oelig, ofcir, Ofr, ofr, ogon, Ograve, ograve, ogt, ohbar, ohm, oint, olarr, olcir, olcross, oline, olt, Omacr, omacr, Omega, omega, Omicron, omicron, omid, ominus, Oopf, oopf, opar, OpenCurlyDoubleQuote, OpenCurlyQuote, operp, oplus, orarr, Or, or, ord, order, orderof, ordf, ordm, origof, oror, orslope, orv, oS, Oscr, oscr, Oslash, oslash, osol, Otilde, otilde, otimesas, Otimes, otimes, Ouml, ouml, ovbar, OverBar, OverBrace, OverBracket, OverParenthesis, para, parallel, par, parsim, parsl, part, PartialD, Pcy, pcy, percnt, period, permil, perp, pertenk, Pfr, pfr, Phi, phi, phiv, phmmat, phone, Pi, pi, pitchfork, piv, planck, planckh, plankv, plusacir, plusb, pluscir, plus, plusdo, plusdu, pluse, PlusMinus, plusmn, plussim, plustwo, pm, Poincareplane, pointint, popf, Popf, pound, prap, Pr, pr, prcue, precapprox, prec, preccurlyeq, Precedes, PrecedesEqual, PrecedesSlantEqual, PrecedesTilde, preceq, precnapprox, precneqq, precnsim, pre, prE, precsim, prime, Prime, primes, prnap, prnE, prnsim, prod, Product, profalar, profline, profsurf, prop, Proportional, Proportion, propto, prsim, prurel, Pscr, pscr, Psi, psi, puncsp, Qfr, qfr, qint, qopf, Qopf, qprime, Qscr, qscr, quaternions, quatint, quest, questeq, quot, QUOT, rAarr, race, Racute, racute, radic, raemptyv, rang, Rang, rangd, range, rangle, raquo, rarrap, rarrb, rarrbfs, rarrc, rarr, Rarr, rArr, rarrfs, rarrhk, rarrlp, rarrpl, rarrsim, Rarrtl, rarrtl, rarrw, ratail, rAtail, ratio, rationals, rbarr, rBarr, RBarr, rbbrk, rbrace, rbrack, rbrke, rbrksld, rbrkslu, Rcaron, rcaron, Rcedil, rcedil, rceil, rcub, Rcy, rcy, rdca, rdldhar, rdquo, rdquor, rdsh, real, realine, realpart, reals, Re, rect, reg, REG, ReverseElement, ReverseEquilibrium, ReverseUpEquilibrium, rfisht, rfloor, rfr, Rfr, rHar, rhard, rharu, rharul, Rho, rho, rhov, RightAngleBracket, RightArrowBar, rightarrow, RightArrow, Rightarrow, RightArrowLeftArrow, rightarrowtail, RightCeiling, RightDoubleBracket, RightDownTeeVector, RightDownVectorBar, RightDownVector, RightFloor, rightharpoondown, rightharpoonup, rightleftarrows, rightleftharpoons, rightrightarrows, rightsquigarrow, RightTeeArrow, RightTee, RightTeeVector, rightthreetimes, RightTriangleBar, RightTriangle, RightTriangleEqual, RightUpDownVector, RightUpTeeVector, RightUpVectorBar, RightUpVector, RightVectorBar, RightVector, ring, risingdotseq, rlarr, rlhar, rlm, rmoustache, rmoust, rnmid, roang, roarr, robrk, ropar, ropf, Ropf, roplus, rotimes, RoundImplies, rpar, rpargt, rppolint, rrarr, Rrightarrow, rsaquo, rscr, Rscr, rsh, Rsh, rsqb, rsquo, rsquor, rthree, rtimes, rtri, rtrie, rtrif, rtriltri, RuleDelayed, ruluhar, rx, Sacute, sacute, sbquo, scap, Scaron, scaron, Sc, sc, sccue, sce, scE, Scedil, scedil, Scirc, scirc, scnap, scnE, scnsim, scpolint, scsim, Scy, scy, sdotb, sdot, sdote, searhk, searr, seArr, searrow, sect, semi, seswar, setminus, setmn, sext, Sfr, sfr, sfrown, sharp, SHCHcy, shchcy, SHcy, shcy, ShortDownArrow, ShortLeftArrow, shortmid, shortparallel, ShortRightArrow, ShortUpArrow, shy, Sigma, sigma, sigmaf, sigmav, sim, simdot, sime, simeq, simg, simgE, siml, simlE, simne, simplus, simrarr, slarr, SmallCircle, smallsetminus, smashp, smeparsl, smid, smile, smt, smte, smtes, SOFTcy, softcy, solbar, solb, sol, Sopf, sopf, spades, spadesuit, spar, sqcap, sqcaps, sqcup, sqcups, Sqrt, sqsub, sqsube, sqsubset, sqsubseteq, sqsup, sqsupe, sqsupset, sqsupseteq, square, Square, SquareIntersection, SquareSubset, SquareSubsetEqual, SquareSuperset, SquareSupersetEqual, SquareUnion, squarf, squ, squf, srarr, Sscr, sscr, ssetmn, ssmile, sstarf, Star, star, starf, straightepsilon, straightphi, strns, sub, Sub, subdot, subE, sube, subedot, submult, subnE, subne, subplus, subrarr, subset, Subset, subseteq, subseteqq, SubsetEqual, subsetneq, subsetneqq, subsim, subsub, subsup, succapprox, succ, succcurlyeq, Succeeds, SucceedsEqual, SucceedsSlantEqual, SucceedsTilde, succeq, succnapprox, succneqq, succnsim, succsim, SuchThat, sum, Sum, sung, sup1, sup2, sup3, sup, Sup, supdot, supdsub, supE, supe, supedot, Superset, SupersetEqual, suphsol, suphsub, suplarr, supmult, supnE, supne, supplus, supset, Supset, supseteq, supseteqq, supsetneq, supsetneqq, supsim, supsub, supsup, swarhk, swarr, swArr, swarrow, swnwar, szlig, Tab, target, Tau, tau, tbrk, Tcaron, tcaron, Tcedil, tcedil, Tcy, tcy, tdot, telrec, Tfr, tfr, there4, therefore, Therefore, Theta, theta, thetasym, thetav, thickapprox, thicksim, ThickSpace, ThinSpace, thinsp, thkap, thksim, THORN, thorn, tilde, Tilde, TildeEqual, TildeFullEqual, TildeTilde, timesbar, timesb, times, timesd, tint, toea, topbot, topcir, top, Topf, topf, topfork, tosa, tprime, trade, TRADE, triangle, triangledown, triangleleft, trianglelefteq, triangleq, triangleright, trianglerighteq, tridot, trie, triminus, TripleDot, triplus, trisb, tritime, trpezium, Tscr, tscr, TScy, tscy, TSHcy, tshcy, Tstrok, tstrok, twixt, twoheadleftarrow, twoheadrightarrow, Uacute, uacute, uarr, Uarr, uArr, Uarrocir, Ubrcy, ubrcy, Ubreve, ubreve, Ucirc, ucirc, Ucy, ucy, udarr, Udblac, udblac, udhar, ufisht, Ufr, ufr, Ugrave, ugrave, uHar, uharl, uharr, uhblk, ulcorn, ulcorner, ulcrop, ultri, Umacr, umacr, uml, UnderBar, UnderBrace, UnderBracket, UnderParenthesis, Union, UnionPlus, Uogon, uogon, Uopf, uopf, UpArrowBar, uparrow, UpArrow, Uparrow, UpArrowDownArrow, updownarrow, UpDownArrow, Updownarrow, UpEquilibrium, upharpoonleft, upharpoonright, uplus, UpperLeftArrow, UpperRightArrow, upsi, Upsi, upsih, Upsilon, upsilon, UpTeeArrow, UpTee, upuparrows, urcorn, urcorner, urcrop, Uring, uring, urtri, Uscr, uscr, utdot, Utilde, utilde, utri, utrif, uuarr, Uuml, uuml, uwangle, vangrt, varepsilon, varkappa, varnothing, varphi, varpi, varpropto, varr, vArr, varrho, varsigma, varsubsetneq, varsubsetneqq, varsupsetneq, varsupsetneqq, vartheta, vartriangleleft, vartriangleright, vBar, Vbar, vBarv, Vcy, vcy, vdash, vDash, Vdash, VDash, Vdashl, veebar, vee, Vee, veeeq, vellip, verbar, Verbar, vert, Vert, VerticalBar, VerticalLine, VerticalSeparator, VerticalTilde, VeryThinSpace, Vfr, vfr, vltri, vnsub, vnsup, Vopf, vopf, vprop, vrtri, Vscr, vscr, vsubnE, vsubne, vsupnE, vsupne, Vvdash, vzigzag, Wcirc, wcirc, wedbar, wedge, Wedge, wedgeq, weierp, Wfr, wfr, Wopf, wopf, wp, wr, wreath, Wscr, wscr, xcap, xcirc, xcup, xdtri, Xfr, xfr, xharr, xhArr, Xi, xi, xlarr, xlArr, xmap, xnis, xodot, Xopf, xopf, xoplus, xotime, xrarr, xrArr, Xscr, xscr, xsqcup, xuplus, xutri, xvee, xwedge, Yacute, yacute, YAcy, yacy, Ycirc, ycirc, Ycy, ycy, yen, Yfr, yfr, YIcy, yicy, Yopf, yopf, Yscr, yscr, YUcy, yucy, yuml, Yuml, Zacute, zacute, Zcaron, zcaron, Zcy, zcy, Zdot, zdot, zeetrf, ZeroWidthSpace, Zeta, zeta, zfr, Zfr, ZHcy, zhcy, zigrarr, zopf, Zopf, Zscr, zscr, zwj, zwnj, default */

  /***/
  function node_modulesMarkdownItNode_modulesEntitiesLibMapsEntitiesJson(module) {
    module.exports = JSON.parse("{\"Aacute\":\"Á\",\"aacute\":\"á\",\"Abreve\":\"Ă\",\"abreve\":\"ă\",\"ac\":\"∾\",\"acd\":\"∿\",\"acE\":\"∾̳\",\"Acirc\":\"Â\",\"acirc\":\"â\",\"acute\":\"´\",\"Acy\":\"А\",\"acy\":\"а\",\"AElig\":\"Æ\",\"aelig\":\"æ\",\"af\":\"⁡\",\"Afr\":\"𝔄\",\"afr\":\"𝔞\",\"Agrave\":\"À\",\"agrave\":\"à\",\"alefsym\":\"ℵ\",\"aleph\":\"ℵ\",\"Alpha\":\"Α\",\"alpha\":\"α\",\"Amacr\":\"Ā\",\"amacr\":\"ā\",\"amalg\":\"⨿\",\"amp\":\"&\",\"AMP\":\"&\",\"andand\":\"⩕\",\"And\":\"⩓\",\"and\":\"∧\",\"andd\":\"⩜\",\"andslope\":\"⩘\",\"andv\":\"⩚\",\"ang\":\"∠\",\"ange\":\"⦤\",\"angle\":\"∠\",\"angmsdaa\":\"⦨\",\"angmsdab\":\"⦩\",\"angmsdac\":\"⦪\",\"angmsdad\":\"⦫\",\"angmsdae\":\"⦬\",\"angmsdaf\":\"⦭\",\"angmsdag\":\"⦮\",\"angmsdah\":\"⦯\",\"angmsd\":\"∡\",\"angrt\":\"∟\",\"angrtvb\":\"⊾\",\"angrtvbd\":\"⦝\",\"angsph\":\"∢\",\"angst\":\"Å\",\"angzarr\":\"⍼\",\"Aogon\":\"Ą\",\"aogon\":\"ą\",\"Aopf\":\"𝔸\",\"aopf\":\"𝕒\",\"apacir\":\"⩯\",\"ap\":\"≈\",\"apE\":\"⩰\",\"ape\":\"≊\",\"apid\":\"≋\",\"apos\":\"'\",\"ApplyFunction\":\"⁡\",\"approx\":\"≈\",\"approxeq\":\"≊\",\"Aring\":\"Å\",\"aring\":\"å\",\"Ascr\":\"𝒜\",\"ascr\":\"𝒶\",\"Assign\":\"≔\",\"ast\":\"*\",\"asymp\":\"≈\",\"asympeq\":\"≍\",\"Atilde\":\"Ã\",\"atilde\":\"ã\",\"Auml\":\"Ä\",\"auml\":\"ä\",\"awconint\":\"∳\",\"awint\":\"⨑\",\"backcong\":\"≌\",\"backepsilon\":\"϶\",\"backprime\":\"‵\",\"backsim\":\"∽\",\"backsimeq\":\"⋍\",\"Backslash\":\"∖\",\"Barv\":\"⫧\",\"barvee\":\"⊽\",\"barwed\":\"⌅\",\"Barwed\":\"⌆\",\"barwedge\":\"⌅\",\"bbrk\":\"⎵\",\"bbrktbrk\":\"⎶\",\"bcong\":\"≌\",\"Bcy\":\"Б\",\"bcy\":\"б\",\"bdquo\":\"„\",\"becaus\":\"∵\",\"because\":\"∵\",\"Because\":\"∵\",\"bemptyv\":\"⦰\",\"bepsi\":\"϶\",\"bernou\":\"ℬ\",\"Bernoullis\":\"ℬ\",\"Beta\":\"Β\",\"beta\":\"β\",\"beth\":\"ℶ\",\"between\":\"≬\",\"Bfr\":\"𝔅\",\"bfr\":\"𝔟\",\"bigcap\":\"⋂\",\"bigcirc\":\"◯\",\"bigcup\":\"⋃\",\"bigodot\":\"⨀\",\"bigoplus\":\"⨁\",\"bigotimes\":\"⨂\",\"bigsqcup\":\"⨆\",\"bigstar\":\"★\",\"bigtriangledown\":\"▽\",\"bigtriangleup\":\"△\",\"biguplus\":\"⨄\",\"bigvee\":\"⋁\",\"bigwedge\":\"⋀\",\"bkarow\":\"⤍\",\"blacklozenge\":\"⧫\",\"blacksquare\":\"▪\",\"blacktriangle\":\"▴\",\"blacktriangledown\":\"▾\",\"blacktriangleleft\":\"◂\",\"blacktriangleright\":\"▸\",\"blank\":\"␣\",\"blk12\":\"▒\",\"blk14\":\"░\",\"blk34\":\"▓\",\"block\":\"█\",\"bne\":\"=⃥\",\"bnequiv\":\"≡⃥\",\"bNot\":\"⫭\",\"bnot\":\"⌐\",\"Bopf\":\"𝔹\",\"bopf\":\"𝕓\",\"bot\":\"⊥\",\"bottom\":\"⊥\",\"bowtie\":\"⋈\",\"boxbox\":\"⧉\",\"boxdl\":\"┐\",\"boxdL\":\"╕\",\"boxDl\":\"╖\",\"boxDL\":\"╗\",\"boxdr\":\"┌\",\"boxdR\":\"╒\",\"boxDr\":\"╓\",\"boxDR\":\"╔\",\"boxh\":\"─\",\"boxH\":\"═\",\"boxhd\":\"┬\",\"boxHd\":\"╤\",\"boxhD\":\"╥\",\"boxHD\":\"╦\",\"boxhu\":\"┴\",\"boxHu\":\"╧\",\"boxhU\":\"╨\",\"boxHU\":\"╩\",\"boxminus\":\"⊟\",\"boxplus\":\"⊞\",\"boxtimes\":\"⊠\",\"boxul\":\"┘\",\"boxuL\":\"╛\",\"boxUl\":\"╜\",\"boxUL\":\"╝\",\"boxur\":\"└\",\"boxuR\":\"╘\",\"boxUr\":\"╙\",\"boxUR\":\"╚\",\"boxv\":\"│\",\"boxV\":\"║\",\"boxvh\":\"┼\",\"boxvH\":\"╪\",\"boxVh\":\"╫\",\"boxVH\":\"╬\",\"boxvl\":\"┤\",\"boxvL\":\"╡\",\"boxVl\":\"╢\",\"boxVL\":\"╣\",\"boxvr\":\"├\",\"boxvR\":\"╞\",\"boxVr\":\"╟\",\"boxVR\":\"╠\",\"bprime\":\"‵\",\"breve\":\"˘\",\"Breve\":\"˘\",\"brvbar\":\"¦\",\"bscr\":\"𝒷\",\"Bscr\":\"ℬ\",\"bsemi\":\"⁏\",\"bsim\":\"∽\",\"bsime\":\"⋍\",\"bsolb\":\"⧅\",\"bsol\":\"\\\\\",\"bsolhsub\":\"⟈\",\"bull\":\"•\",\"bullet\":\"•\",\"bump\":\"≎\",\"bumpE\":\"⪮\",\"bumpe\":\"≏\",\"Bumpeq\":\"≎\",\"bumpeq\":\"≏\",\"Cacute\":\"Ć\",\"cacute\":\"ć\",\"capand\":\"⩄\",\"capbrcup\":\"⩉\",\"capcap\":\"⩋\",\"cap\":\"∩\",\"Cap\":\"⋒\",\"capcup\":\"⩇\",\"capdot\":\"⩀\",\"CapitalDifferentialD\":\"ⅅ\",\"caps\":\"∩︀\",\"caret\":\"⁁\",\"caron\":\"ˇ\",\"Cayleys\":\"ℭ\",\"ccaps\":\"⩍\",\"Ccaron\":\"Č\",\"ccaron\":\"č\",\"Ccedil\":\"Ç\",\"ccedil\":\"ç\",\"Ccirc\":\"Ĉ\",\"ccirc\":\"ĉ\",\"Cconint\":\"∰\",\"ccups\":\"⩌\",\"ccupssm\":\"⩐\",\"Cdot\":\"Ċ\",\"cdot\":\"ċ\",\"cedil\":\"¸\",\"Cedilla\":\"¸\",\"cemptyv\":\"⦲\",\"cent\":\"¢\",\"centerdot\":\"·\",\"CenterDot\":\"·\",\"cfr\":\"𝔠\",\"Cfr\":\"ℭ\",\"CHcy\":\"Ч\",\"chcy\":\"ч\",\"check\":\"✓\",\"checkmark\":\"✓\",\"Chi\":\"Χ\",\"chi\":\"χ\",\"circ\":\"ˆ\",\"circeq\":\"≗\",\"circlearrowleft\":\"↺\",\"circlearrowright\":\"↻\",\"circledast\":\"⊛\",\"circledcirc\":\"⊚\",\"circleddash\":\"⊝\",\"CircleDot\":\"⊙\",\"circledR\":\"®\",\"circledS\":\"Ⓢ\",\"CircleMinus\":\"⊖\",\"CirclePlus\":\"⊕\",\"CircleTimes\":\"⊗\",\"cir\":\"○\",\"cirE\":\"⧃\",\"cire\":\"≗\",\"cirfnint\":\"⨐\",\"cirmid\":\"⫯\",\"cirscir\":\"⧂\",\"ClockwiseContourIntegral\":\"∲\",\"CloseCurlyDoubleQuote\":\"”\",\"CloseCurlyQuote\":\"’\",\"clubs\":\"♣\",\"clubsuit\":\"♣\",\"colon\":\":\",\"Colon\":\"∷\",\"Colone\":\"⩴\",\"colone\":\"≔\",\"coloneq\":\"≔\",\"comma\":\",\",\"commat\":\"@\",\"comp\":\"∁\",\"compfn\":\"∘\",\"complement\":\"∁\",\"complexes\":\"ℂ\",\"cong\":\"≅\",\"congdot\":\"⩭\",\"Congruent\":\"≡\",\"conint\":\"∮\",\"Conint\":\"∯\",\"ContourIntegral\":\"∮\",\"copf\":\"𝕔\",\"Copf\":\"ℂ\",\"coprod\":\"∐\",\"Coproduct\":\"∐\",\"copy\":\"©\",\"COPY\":\"©\",\"copysr\":\"℗\",\"CounterClockwiseContourIntegral\":\"∳\",\"crarr\":\"↵\",\"cross\":\"✗\",\"Cross\":\"⨯\",\"Cscr\":\"𝒞\",\"cscr\":\"𝒸\",\"csub\":\"⫏\",\"csube\":\"⫑\",\"csup\":\"⫐\",\"csupe\":\"⫒\",\"ctdot\":\"⋯\",\"cudarrl\":\"⤸\",\"cudarrr\":\"⤵\",\"cuepr\":\"⋞\",\"cuesc\":\"⋟\",\"cularr\":\"↶\",\"cularrp\":\"⤽\",\"cupbrcap\":\"⩈\",\"cupcap\":\"⩆\",\"CupCap\":\"≍\",\"cup\":\"∪\",\"Cup\":\"⋓\",\"cupcup\":\"⩊\",\"cupdot\":\"⊍\",\"cupor\":\"⩅\",\"cups\":\"∪︀\",\"curarr\":\"↷\",\"curarrm\":\"⤼\",\"curlyeqprec\":\"⋞\",\"curlyeqsucc\":\"⋟\",\"curlyvee\":\"⋎\",\"curlywedge\":\"⋏\",\"curren\":\"¤\",\"curvearrowleft\":\"↶\",\"curvearrowright\":\"↷\",\"cuvee\":\"⋎\",\"cuwed\":\"⋏\",\"cwconint\":\"∲\",\"cwint\":\"∱\",\"cylcty\":\"⌭\",\"dagger\":\"†\",\"Dagger\":\"‡\",\"daleth\":\"ℸ\",\"darr\":\"↓\",\"Darr\":\"↡\",\"dArr\":\"⇓\",\"dash\":\"‐\",\"Dashv\":\"⫤\",\"dashv\":\"⊣\",\"dbkarow\":\"⤏\",\"dblac\":\"˝\",\"Dcaron\":\"Ď\",\"dcaron\":\"ď\",\"Dcy\":\"Д\",\"dcy\":\"д\",\"ddagger\":\"‡\",\"ddarr\":\"⇊\",\"DD\":\"ⅅ\",\"dd\":\"ⅆ\",\"DDotrahd\":\"⤑\",\"ddotseq\":\"⩷\",\"deg\":\"°\",\"Del\":\"∇\",\"Delta\":\"Δ\",\"delta\":\"δ\",\"demptyv\":\"⦱\",\"dfisht\":\"⥿\",\"Dfr\":\"𝔇\",\"dfr\":\"𝔡\",\"dHar\":\"⥥\",\"dharl\":\"⇃\",\"dharr\":\"⇂\",\"DiacriticalAcute\":\"´\",\"DiacriticalDot\":\"˙\",\"DiacriticalDoubleAcute\":\"˝\",\"DiacriticalGrave\":\"`\",\"DiacriticalTilde\":\"˜\",\"diam\":\"⋄\",\"diamond\":\"⋄\",\"Diamond\":\"⋄\",\"diamondsuit\":\"♦\",\"diams\":\"♦\",\"die\":\"¨\",\"DifferentialD\":\"ⅆ\",\"digamma\":\"ϝ\",\"disin\":\"⋲\",\"div\":\"÷\",\"divide\":\"÷\",\"divideontimes\":\"⋇\",\"divonx\":\"⋇\",\"DJcy\":\"Ђ\",\"djcy\":\"ђ\",\"dlcorn\":\"⌞\",\"dlcrop\":\"⌍\",\"dollar\":\"$\",\"Dopf\":\"𝔻\",\"dopf\":\"𝕕\",\"Dot\":\"¨\",\"dot\":\"˙\",\"DotDot\":\"⃜\",\"doteq\":\"≐\",\"doteqdot\":\"≑\",\"DotEqual\":\"≐\",\"dotminus\":\"∸\",\"dotplus\":\"∔\",\"dotsquare\":\"⊡\",\"doublebarwedge\":\"⌆\",\"DoubleContourIntegral\":\"∯\",\"DoubleDot\":\"¨\",\"DoubleDownArrow\":\"⇓\",\"DoubleLeftArrow\":\"⇐\",\"DoubleLeftRightArrow\":\"⇔\",\"DoubleLeftTee\":\"⫤\",\"DoubleLongLeftArrow\":\"⟸\",\"DoubleLongLeftRightArrow\":\"⟺\",\"DoubleLongRightArrow\":\"⟹\",\"DoubleRightArrow\":\"⇒\",\"DoubleRightTee\":\"⊨\",\"DoubleUpArrow\":\"⇑\",\"DoubleUpDownArrow\":\"⇕\",\"DoubleVerticalBar\":\"∥\",\"DownArrowBar\":\"⤓\",\"downarrow\":\"↓\",\"DownArrow\":\"↓\",\"Downarrow\":\"⇓\",\"DownArrowUpArrow\":\"⇵\",\"DownBreve\":\"̑\",\"downdownarrows\":\"⇊\",\"downharpoonleft\":\"⇃\",\"downharpoonright\":\"⇂\",\"DownLeftRightVector\":\"⥐\",\"DownLeftTeeVector\":\"⥞\",\"DownLeftVectorBar\":\"⥖\",\"DownLeftVector\":\"↽\",\"DownRightTeeVector\":\"⥟\",\"DownRightVectorBar\":\"⥗\",\"DownRightVector\":\"⇁\",\"DownTeeArrow\":\"↧\",\"DownTee\":\"⊤\",\"drbkarow\":\"⤐\",\"drcorn\":\"⌟\",\"drcrop\":\"⌌\",\"Dscr\":\"𝒟\",\"dscr\":\"𝒹\",\"DScy\":\"Ѕ\",\"dscy\":\"ѕ\",\"dsol\":\"⧶\",\"Dstrok\":\"Đ\",\"dstrok\":\"đ\",\"dtdot\":\"⋱\",\"dtri\":\"▿\",\"dtrif\":\"▾\",\"duarr\":\"⇵\",\"duhar\":\"⥯\",\"dwangle\":\"⦦\",\"DZcy\":\"Џ\",\"dzcy\":\"џ\",\"dzigrarr\":\"⟿\",\"Eacute\":\"É\",\"eacute\":\"é\",\"easter\":\"⩮\",\"Ecaron\":\"Ě\",\"ecaron\":\"ě\",\"Ecirc\":\"Ê\",\"ecirc\":\"ê\",\"ecir\":\"≖\",\"ecolon\":\"≕\",\"Ecy\":\"Э\",\"ecy\":\"э\",\"eDDot\":\"⩷\",\"Edot\":\"Ė\",\"edot\":\"ė\",\"eDot\":\"≑\",\"ee\":\"ⅇ\",\"efDot\":\"≒\",\"Efr\":\"𝔈\",\"efr\":\"𝔢\",\"eg\":\"⪚\",\"Egrave\":\"È\",\"egrave\":\"è\",\"egs\":\"⪖\",\"egsdot\":\"⪘\",\"el\":\"⪙\",\"Element\":\"∈\",\"elinters\":\"⏧\",\"ell\":\"ℓ\",\"els\":\"⪕\",\"elsdot\":\"⪗\",\"Emacr\":\"Ē\",\"emacr\":\"ē\",\"empty\":\"∅\",\"emptyset\":\"∅\",\"EmptySmallSquare\":\"◻\",\"emptyv\":\"∅\",\"EmptyVerySmallSquare\":\"▫\",\"emsp13\":\" \",\"emsp14\":\" \",\"emsp\":\" \",\"ENG\":\"Ŋ\",\"eng\":\"ŋ\",\"ensp\":\" \",\"Eogon\":\"Ę\",\"eogon\":\"ę\",\"Eopf\":\"𝔼\",\"eopf\":\"𝕖\",\"epar\":\"⋕\",\"eparsl\":\"⧣\",\"eplus\":\"⩱\",\"epsi\":\"ε\",\"Epsilon\":\"Ε\",\"epsilon\":\"ε\",\"epsiv\":\"ϵ\",\"eqcirc\":\"≖\",\"eqcolon\":\"≕\",\"eqsim\":\"≂\",\"eqslantgtr\":\"⪖\",\"eqslantless\":\"⪕\",\"Equal\":\"⩵\",\"equals\":\"=\",\"EqualTilde\":\"≂\",\"equest\":\"≟\",\"Equilibrium\":\"⇌\",\"equiv\":\"≡\",\"equivDD\":\"⩸\",\"eqvparsl\":\"⧥\",\"erarr\":\"⥱\",\"erDot\":\"≓\",\"escr\":\"ℯ\",\"Escr\":\"ℰ\",\"esdot\":\"≐\",\"Esim\":\"⩳\",\"esim\":\"≂\",\"Eta\":\"Η\",\"eta\":\"η\",\"ETH\":\"Ð\",\"eth\":\"ð\",\"Euml\":\"Ë\",\"euml\":\"ë\",\"euro\":\"€\",\"excl\":\"!\",\"exist\":\"∃\",\"Exists\":\"∃\",\"expectation\":\"ℰ\",\"exponentiale\":\"ⅇ\",\"ExponentialE\":\"ⅇ\",\"fallingdotseq\":\"≒\",\"Fcy\":\"Ф\",\"fcy\":\"ф\",\"female\":\"♀\",\"ffilig\":\"ﬃ\",\"fflig\":\"ﬀ\",\"ffllig\":\"ﬄ\",\"Ffr\":\"𝔉\",\"ffr\":\"𝔣\",\"filig\":\"ﬁ\",\"FilledSmallSquare\":\"◼\",\"FilledVerySmallSquare\":\"▪\",\"fjlig\":\"fj\",\"flat\":\"♭\",\"fllig\":\"ﬂ\",\"fltns\":\"▱\",\"fnof\":\"ƒ\",\"Fopf\":\"𝔽\",\"fopf\":\"𝕗\",\"forall\":\"∀\",\"ForAll\":\"∀\",\"fork\":\"⋔\",\"forkv\":\"⫙\",\"Fouriertrf\":\"ℱ\",\"fpartint\":\"⨍\",\"frac12\":\"½\",\"frac13\":\"⅓\",\"frac14\":\"¼\",\"frac15\":\"⅕\",\"frac16\":\"⅙\",\"frac18\":\"⅛\",\"frac23\":\"⅔\",\"frac25\":\"⅖\",\"frac34\":\"¾\",\"frac35\":\"⅗\",\"frac38\":\"⅜\",\"frac45\":\"⅘\",\"frac56\":\"⅚\",\"frac58\":\"⅝\",\"frac78\":\"⅞\",\"frasl\":\"⁄\",\"frown\":\"⌢\",\"fscr\":\"𝒻\",\"Fscr\":\"ℱ\",\"gacute\":\"ǵ\",\"Gamma\":\"Γ\",\"gamma\":\"γ\",\"Gammad\":\"Ϝ\",\"gammad\":\"ϝ\",\"gap\":\"⪆\",\"Gbreve\":\"Ğ\",\"gbreve\":\"ğ\",\"Gcedil\":\"Ģ\",\"Gcirc\":\"Ĝ\",\"gcirc\":\"ĝ\",\"Gcy\":\"Г\",\"gcy\":\"г\",\"Gdot\":\"Ġ\",\"gdot\":\"ġ\",\"ge\":\"≥\",\"gE\":\"≧\",\"gEl\":\"⪌\",\"gel\":\"⋛\",\"geq\":\"≥\",\"geqq\":\"≧\",\"geqslant\":\"⩾\",\"gescc\":\"⪩\",\"ges\":\"⩾\",\"gesdot\":\"⪀\",\"gesdoto\":\"⪂\",\"gesdotol\":\"⪄\",\"gesl\":\"⋛︀\",\"gesles\":\"⪔\",\"Gfr\":\"𝔊\",\"gfr\":\"𝔤\",\"gg\":\"≫\",\"Gg\":\"⋙\",\"ggg\":\"⋙\",\"gimel\":\"ℷ\",\"GJcy\":\"Ѓ\",\"gjcy\":\"ѓ\",\"gla\":\"⪥\",\"gl\":\"≷\",\"glE\":\"⪒\",\"glj\":\"⪤\",\"gnap\":\"⪊\",\"gnapprox\":\"⪊\",\"gne\":\"⪈\",\"gnE\":\"≩\",\"gneq\":\"⪈\",\"gneqq\":\"≩\",\"gnsim\":\"⋧\",\"Gopf\":\"𝔾\",\"gopf\":\"𝕘\",\"grave\":\"`\",\"GreaterEqual\":\"≥\",\"GreaterEqualLess\":\"⋛\",\"GreaterFullEqual\":\"≧\",\"GreaterGreater\":\"⪢\",\"GreaterLess\":\"≷\",\"GreaterSlantEqual\":\"⩾\",\"GreaterTilde\":\"≳\",\"Gscr\":\"𝒢\",\"gscr\":\"ℊ\",\"gsim\":\"≳\",\"gsime\":\"⪎\",\"gsiml\":\"⪐\",\"gtcc\":\"⪧\",\"gtcir\":\"⩺\",\"gt\":\">\",\"GT\":\">\",\"Gt\":\"≫\",\"gtdot\":\"⋗\",\"gtlPar\":\"⦕\",\"gtquest\":\"⩼\",\"gtrapprox\":\"⪆\",\"gtrarr\":\"⥸\",\"gtrdot\":\"⋗\",\"gtreqless\":\"⋛\",\"gtreqqless\":\"⪌\",\"gtrless\":\"≷\",\"gtrsim\":\"≳\",\"gvertneqq\":\"≩︀\",\"gvnE\":\"≩︀\",\"Hacek\":\"ˇ\",\"hairsp\":\" \",\"half\":\"½\",\"hamilt\":\"ℋ\",\"HARDcy\":\"Ъ\",\"hardcy\":\"ъ\",\"harrcir\":\"⥈\",\"harr\":\"↔\",\"hArr\":\"⇔\",\"harrw\":\"↭\",\"Hat\":\"^\",\"hbar\":\"ℏ\",\"Hcirc\":\"Ĥ\",\"hcirc\":\"ĥ\",\"hearts\":\"♥\",\"heartsuit\":\"♥\",\"hellip\":\"…\",\"hercon\":\"⊹\",\"hfr\":\"𝔥\",\"Hfr\":\"ℌ\",\"HilbertSpace\":\"ℋ\",\"hksearow\":\"⤥\",\"hkswarow\":\"⤦\",\"hoarr\":\"⇿\",\"homtht\":\"∻\",\"hookleftarrow\":\"↩\",\"hookrightarrow\":\"↪\",\"hopf\":\"𝕙\",\"Hopf\":\"ℍ\",\"horbar\":\"―\",\"HorizontalLine\":\"─\",\"hscr\":\"𝒽\",\"Hscr\":\"ℋ\",\"hslash\":\"ℏ\",\"Hstrok\":\"Ħ\",\"hstrok\":\"ħ\",\"HumpDownHump\":\"≎\",\"HumpEqual\":\"≏\",\"hybull\":\"⁃\",\"hyphen\":\"‐\",\"Iacute\":\"Í\",\"iacute\":\"í\",\"ic\":\"⁣\",\"Icirc\":\"Î\",\"icirc\":\"î\",\"Icy\":\"И\",\"icy\":\"и\",\"Idot\":\"İ\",\"IEcy\":\"Е\",\"iecy\":\"е\",\"iexcl\":\"¡\",\"iff\":\"⇔\",\"ifr\":\"𝔦\",\"Ifr\":\"ℑ\",\"Igrave\":\"Ì\",\"igrave\":\"ì\",\"ii\":\"ⅈ\",\"iiiint\":\"⨌\",\"iiint\":\"∭\",\"iinfin\":\"⧜\",\"iiota\":\"℩\",\"IJlig\":\"Ĳ\",\"ijlig\":\"ĳ\",\"Imacr\":\"Ī\",\"imacr\":\"ī\",\"image\":\"ℑ\",\"ImaginaryI\":\"ⅈ\",\"imagline\":\"ℐ\",\"imagpart\":\"ℑ\",\"imath\":\"ı\",\"Im\":\"ℑ\",\"imof\":\"⊷\",\"imped\":\"Ƶ\",\"Implies\":\"⇒\",\"incare\":\"℅\",\"in\":\"∈\",\"infin\":\"∞\",\"infintie\":\"⧝\",\"inodot\":\"ı\",\"intcal\":\"⊺\",\"int\":\"∫\",\"Int\":\"∬\",\"integers\":\"ℤ\",\"Integral\":\"∫\",\"intercal\":\"⊺\",\"Intersection\":\"⋂\",\"intlarhk\":\"⨗\",\"intprod\":\"⨼\",\"InvisibleComma\":\"⁣\",\"InvisibleTimes\":\"⁢\",\"IOcy\":\"Ё\",\"iocy\":\"ё\",\"Iogon\":\"Į\",\"iogon\":\"į\",\"Iopf\":\"𝕀\",\"iopf\":\"𝕚\",\"Iota\":\"Ι\",\"iota\":\"ι\",\"iprod\":\"⨼\",\"iquest\":\"¿\",\"iscr\":\"𝒾\",\"Iscr\":\"ℐ\",\"isin\":\"∈\",\"isindot\":\"⋵\",\"isinE\":\"⋹\",\"isins\":\"⋴\",\"isinsv\":\"⋳\",\"isinv\":\"∈\",\"it\":\"⁢\",\"Itilde\":\"Ĩ\",\"itilde\":\"ĩ\",\"Iukcy\":\"І\",\"iukcy\":\"і\",\"Iuml\":\"Ï\",\"iuml\":\"ï\",\"Jcirc\":\"Ĵ\",\"jcirc\":\"ĵ\",\"Jcy\":\"Й\",\"jcy\":\"й\",\"Jfr\":\"𝔍\",\"jfr\":\"𝔧\",\"jmath\":\"ȷ\",\"Jopf\":\"𝕁\",\"jopf\":\"𝕛\",\"Jscr\":\"𝒥\",\"jscr\":\"𝒿\",\"Jsercy\":\"Ј\",\"jsercy\":\"ј\",\"Jukcy\":\"Є\",\"jukcy\":\"є\",\"Kappa\":\"Κ\",\"kappa\":\"κ\",\"kappav\":\"ϰ\",\"Kcedil\":\"Ķ\",\"kcedil\":\"ķ\",\"Kcy\":\"К\",\"kcy\":\"к\",\"Kfr\":\"𝔎\",\"kfr\":\"𝔨\",\"kgreen\":\"ĸ\",\"KHcy\":\"Х\",\"khcy\":\"х\",\"KJcy\":\"Ќ\",\"kjcy\":\"ќ\",\"Kopf\":\"𝕂\",\"kopf\":\"𝕜\",\"Kscr\":\"𝒦\",\"kscr\":\"𝓀\",\"lAarr\":\"⇚\",\"Lacute\":\"Ĺ\",\"lacute\":\"ĺ\",\"laemptyv\":\"⦴\",\"lagran\":\"ℒ\",\"Lambda\":\"Λ\",\"lambda\":\"λ\",\"lang\":\"⟨\",\"Lang\":\"⟪\",\"langd\":\"⦑\",\"langle\":\"⟨\",\"lap\":\"⪅\",\"Laplacetrf\":\"ℒ\",\"laquo\":\"«\",\"larrb\":\"⇤\",\"larrbfs\":\"⤟\",\"larr\":\"←\",\"Larr\":\"↞\",\"lArr\":\"⇐\",\"larrfs\":\"⤝\",\"larrhk\":\"↩\",\"larrlp\":\"↫\",\"larrpl\":\"⤹\",\"larrsim\":\"⥳\",\"larrtl\":\"↢\",\"latail\":\"⤙\",\"lAtail\":\"⤛\",\"lat\":\"⪫\",\"late\":\"⪭\",\"lates\":\"⪭︀\",\"lbarr\":\"⤌\",\"lBarr\":\"⤎\",\"lbbrk\":\"❲\",\"lbrace\":\"{\",\"lbrack\":\"[\",\"lbrke\":\"⦋\",\"lbrksld\":\"⦏\",\"lbrkslu\":\"⦍\",\"Lcaron\":\"Ľ\",\"lcaron\":\"ľ\",\"Lcedil\":\"Ļ\",\"lcedil\":\"ļ\",\"lceil\":\"⌈\",\"lcub\":\"{\",\"Lcy\":\"Л\",\"lcy\":\"л\",\"ldca\":\"⤶\",\"ldquo\":\"“\",\"ldquor\":\"„\",\"ldrdhar\":\"⥧\",\"ldrushar\":\"⥋\",\"ldsh\":\"↲\",\"le\":\"≤\",\"lE\":\"≦\",\"LeftAngleBracket\":\"⟨\",\"LeftArrowBar\":\"⇤\",\"leftarrow\":\"←\",\"LeftArrow\":\"←\",\"Leftarrow\":\"⇐\",\"LeftArrowRightArrow\":\"⇆\",\"leftarrowtail\":\"↢\",\"LeftCeiling\":\"⌈\",\"LeftDoubleBracket\":\"⟦\",\"LeftDownTeeVector\":\"⥡\",\"LeftDownVectorBar\":\"⥙\",\"LeftDownVector\":\"⇃\",\"LeftFloor\":\"⌊\",\"leftharpoondown\":\"↽\",\"leftharpoonup\":\"↼\",\"leftleftarrows\":\"⇇\",\"leftrightarrow\":\"↔\",\"LeftRightArrow\":\"↔\",\"Leftrightarrow\":\"⇔\",\"leftrightarrows\":\"⇆\",\"leftrightharpoons\":\"⇋\",\"leftrightsquigarrow\":\"↭\",\"LeftRightVector\":\"⥎\",\"LeftTeeArrow\":\"↤\",\"LeftTee\":\"⊣\",\"LeftTeeVector\":\"⥚\",\"leftthreetimes\":\"⋋\",\"LeftTriangleBar\":\"⧏\",\"LeftTriangle\":\"⊲\",\"LeftTriangleEqual\":\"⊴\",\"LeftUpDownVector\":\"⥑\",\"LeftUpTeeVector\":\"⥠\",\"LeftUpVectorBar\":\"⥘\",\"LeftUpVector\":\"↿\",\"LeftVectorBar\":\"⥒\",\"LeftVector\":\"↼\",\"lEg\":\"⪋\",\"leg\":\"⋚\",\"leq\":\"≤\",\"leqq\":\"≦\",\"leqslant\":\"⩽\",\"lescc\":\"⪨\",\"les\":\"⩽\",\"lesdot\":\"⩿\",\"lesdoto\":\"⪁\",\"lesdotor\":\"⪃\",\"lesg\":\"⋚︀\",\"lesges\":\"⪓\",\"lessapprox\":\"⪅\",\"lessdot\":\"⋖\",\"lesseqgtr\":\"⋚\",\"lesseqqgtr\":\"⪋\",\"LessEqualGreater\":\"⋚\",\"LessFullEqual\":\"≦\",\"LessGreater\":\"≶\",\"lessgtr\":\"≶\",\"LessLess\":\"⪡\",\"lesssim\":\"≲\",\"LessSlantEqual\":\"⩽\",\"LessTilde\":\"≲\",\"lfisht\":\"⥼\",\"lfloor\":\"⌊\",\"Lfr\":\"𝔏\",\"lfr\":\"𝔩\",\"lg\":\"≶\",\"lgE\":\"⪑\",\"lHar\":\"⥢\",\"lhard\":\"↽\",\"lharu\":\"↼\",\"lharul\":\"⥪\",\"lhblk\":\"▄\",\"LJcy\":\"Љ\",\"ljcy\":\"љ\",\"llarr\":\"⇇\",\"ll\":\"≪\",\"Ll\":\"⋘\",\"llcorner\":\"⌞\",\"Lleftarrow\":\"⇚\",\"llhard\":\"⥫\",\"lltri\":\"◺\",\"Lmidot\":\"Ŀ\",\"lmidot\":\"ŀ\",\"lmoustache\":\"⎰\",\"lmoust\":\"⎰\",\"lnap\":\"⪉\",\"lnapprox\":\"⪉\",\"lne\":\"⪇\",\"lnE\":\"≨\",\"lneq\":\"⪇\",\"lneqq\":\"≨\",\"lnsim\":\"⋦\",\"loang\":\"⟬\",\"loarr\":\"⇽\",\"lobrk\":\"⟦\",\"longleftarrow\":\"⟵\",\"LongLeftArrow\":\"⟵\",\"Longleftarrow\":\"⟸\",\"longleftrightarrow\":\"⟷\",\"LongLeftRightArrow\":\"⟷\",\"Longleftrightarrow\":\"⟺\",\"longmapsto\":\"⟼\",\"longrightarrow\":\"⟶\",\"LongRightArrow\":\"⟶\",\"Longrightarrow\":\"⟹\",\"looparrowleft\":\"↫\",\"looparrowright\":\"↬\",\"lopar\":\"⦅\",\"Lopf\":\"𝕃\",\"lopf\":\"𝕝\",\"loplus\":\"⨭\",\"lotimes\":\"⨴\",\"lowast\":\"∗\",\"lowbar\":\"_\",\"LowerLeftArrow\":\"↙\",\"LowerRightArrow\":\"↘\",\"loz\":\"◊\",\"lozenge\":\"◊\",\"lozf\":\"⧫\",\"lpar\":\"(\",\"lparlt\":\"⦓\",\"lrarr\":\"⇆\",\"lrcorner\":\"⌟\",\"lrhar\":\"⇋\",\"lrhard\":\"⥭\",\"lrm\":\"‎\",\"lrtri\":\"⊿\",\"lsaquo\":\"‹\",\"lscr\":\"𝓁\",\"Lscr\":\"ℒ\",\"lsh\":\"↰\",\"Lsh\":\"↰\",\"lsim\":\"≲\",\"lsime\":\"⪍\",\"lsimg\":\"⪏\",\"lsqb\":\"[\",\"lsquo\":\"‘\",\"lsquor\":\"‚\",\"Lstrok\":\"Ł\",\"lstrok\":\"ł\",\"ltcc\":\"⪦\",\"ltcir\":\"⩹\",\"lt\":\"<\",\"LT\":\"<\",\"Lt\":\"≪\",\"ltdot\":\"⋖\",\"lthree\":\"⋋\",\"ltimes\":\"⋉\",\"ltlarr\":\"⥶\",\"ltquest\":\"⩻\",\"ltri\":\"◃\",\"ltrie\":\"⊴\",\"ltrif\":\"◂\",\"ltrPar\":\"⦖\",\"lurdshar\":\"⥊\",\"luruhar\":\"⥦\",\"lvertneqq\":\"≨︀\",\"lvnE\":\"≨︀\",\"macr\":\"¯\",\"male\":\"♂\",\"malt\":\"✠\",\"maltese\":\"✠\",\"Map\":\"⤅\",\"map\":\"↦\",\"mapsto\":\"↦\",\"mapstodown\":\"↧\",\"mapstoleft\":\"↤\",\"mapstoup\":\"↥\",\"marker\":\"▮\",\"mcomma\":\"⨩\",\"Mcy\":\"М\",\"mcy\":\"м\",\"mdash\":\"—\",\"mDDot\":\"∺\",\"measuredangle\":\"∡\",\"MediumSpace\":\" \",\"Mellintrf\":\"ℳ\",\"Mfr\":\"𝔐\",\"mfr\":\"𝔪\",\"mho\":\"℧\",\"micro\":\"µ\",\"midast\":\"*\",\"midcir\":\"⫰\",\"mid\":\"∣\",\"middot\":\"·\",\"minusb\":\"⊟\",\"minus\":\"−\",\"minusd\":\"∸\",\"minusdu\":\"⨪\",\"MinusPlus\":\"∓\",\"mlcp\":\"⫛\",\"mldr\":\"…\",\"mnplus\":\"∓\",\"models\":\"⊧\",\"Mopf\":\"𝕄\",\"mopf\":\"𝕞\",\"mp\":\"∓\",\"mscr\":\"𝓂\",\"Mscr\":\"ℳ\",\"mstpos\":\"∾\",\"Mu\":\"Μ\",\"mu\":\"μ\",\"multimap\":\"⊸\",\"mumap\":\"⊸\",\"nabla\":\"∇\",\"Nacute\":\"Ń\",\"nacute\":\"ń\",\"nang\":\"∠⃒\",\"nap\":\"≉\",\"napE\":\"⩰̸\",\"napid\":\"≋̸\",\"napos\":\"ŉ\",\"napprox\":\"≉\",\"natural\":\"♮\",\"naturals\":\"ℕ\",\"natur\":\"♮\",\"nbsp\":\" \",\"nbump\":\"≎̸\",\"nbumpe\":\"≏̸\",\"ncap\":\"⩃\",\"Ncaron\":\"Ň\",\"ncaron\":\"ň\",\"Ncedil\":\"Ņ\",\"ncedil\":\"ņ\",\"ncong\":\"≇\",\"ncongdot\":\"⩭̸\",\"ncup\":\"⩂\",\"Ncy\":\"Н\",\"ncy\":\"н\",\"ndash\":\"–\",\"nearhk\":\"⤤\",\"nearr\":\"↗\",\"neArr\":\"⇗\",\"nearrow\":\"↗\",\"ne\":\"≠\",\"nedot\":\"≐̸\",\"NegativeMediumSpace\":\"​\",\"NegativeThickSpace\":\"​\",\"NegativeThinSpace\":\"​\",\"NegativeVeryThinSpace\":\"​\",\"nequiv\":\"≢\",\"nesear\":\"⤨\",\"nesim\":\"≂̸\",\"NestedGreaterGreater\":\"≫\",\"NestedLessLess\":\"≪\",\"NewLine\":\"\\n\",\"nexist\":\"∄\",\"nexists\":\"∄\",\"Nfr\":\"𝔑\",\"nfr\":\"𝔫\",\"ngE\":\"≧̸\",\"nge\":\"≱\",\"ngeq\":\"≱\",\"ngeqq\":\"≧̸\",\"ngeqslant\":\"⩾̸\",\"nges\":\"⩾̸\",\"nGg\":\"⋙̸\",\"ngsim\":\"≵\",\"nGt\":\"≫⃒\",\"ngt\":\"≯\",\"ngtr\":\"≯\",\"nGtv\":\"≫̸\",\"nharr\":\"↮\",\"nhArr\":\"⇎\",\"nhpar\":\"⫲\",\"ni\":\"∋\",\"nis\":\"⋼\",\"nisd\":\"⋺\",\"niv\":\"∋\",\"NJcy\":\"Њ\",\"njcy\":\"њ\",\"nlarr\":\"↚\",\"nlArr\":\"⇍\",\"nldr\":\"‥\",\"nlE\":\"≦̸\",\"nle\":\"≰\",\"nleftarrow\":\"↚\",\"nLeftarrow\":\"⇍\",\"nleftrightarrow\":\"↮\",\"nLeftrightarrow\":\"⇎\",\"nleq\":\"≰\",\"nleqq\":\"≦̸\",\"nleqslant\":\"⩽̸\",\"nles\":\"⩽̸\",\"nless\":\"≮\",\"nLl\":\"⋘̸\",\"nlsim\":\"≴\",\"nLt\":\"≪⃒\",\"nlt\":\"≮\",\"nltri\":\"⋪\",\"nltrie\":\"⋬\",\"nLtv\":\"≪̸\",\"nmid\":\"∤\",\"NoBreak\":\"⁠\",\"NonBreakingSpace\":\" \",\"nopf\":\"𝕟\",\"Nopf\":\"ℕ\",\"Not\":\"⫬\",\"not\":\"¬\",\"NotCongruent\":\"≢\",\"NotCupCap\":\"≭\",\"NotDoubleVerticalBar\":\"∦\",\"NotElement\":\"∉\",\"NotEqual\":\"≠\",\"NotEqualTilde\":\"≂̸\",\"NotExists\":\"∄\",\"NotGreater\":\"≯\",\"NotGreaterEqual\":\"≱\",\"NotGreaterFullEqual\":\"≧̸\",\"NotGreaterGreater\":\"≫̸\",\"NotGreaterLess\":\"≹\",\"NotGreaterSlantEqual\":\"⩾̸\",\"NotGreaterTilde\":\"≵\",\"NotHumpDownHump\":\"≎̸\",\"NotHumpEqual\":\"≏̸\",\"notin\":\"∉\",\"notindot\":\"⋵̸\",\"notinE\":\"⋹̸\",\"notinva\":\"∉\",\"notinvb\":\"⋷\",\"notinvc\":\"⋶\",\"NotLeftTriangleBar\":\"⧏̸\",\"NotLeftTriangle\":\"⋪\",\"NotLeftTriangleEqual\":\"⋬\",\"NotLess\":\"≮\",\"NotLessEqual\":\"≰\",\"NotLessGreater\":\"≸\",\"NotLessLess\":\"≪̸\",\"NotLessSlantEqual\":\"⩽̸\",\"NotLessTilde\":\"≴\",\"NotNestedGreaterGreater\":\"⪢̸\",\"NotNestedLessLess\":\"⪡̸\",\"notni\":\"∌\",\"notniva\":\"∌\",\"notnivb\":\"⋾\",\"notnivc\":\"⋽\",\"NotPrecedes\":\"⊀\",\"NotPrecedesEqual\":\"⪯̸\",\"NotPrecedesSlantEqual\":\"⋠\",\"NotReverseElement\":\"∌\",\"NotRightTriangleBar\":\"⧐̸\",\"NotRightTriangle\":\"⋫\",\"NotRightTriangleEqual\":\"⋭\",\"NotSquareSubset\":\"⊏̸\",\"NotSquareSubsetEqual\":\"⋢\",\"NotSquareSuperset\":\"⊐̸\",\"NotSquareSupersetEqual\":\"⋣\",\"NotSubset\":\"⊂⃒\",\"NotSubsetEqual\":\"⊈\",\"NotSucceeds\":\"⊁\",\"NotSucceedsEqual\":\"⪰̸\",\"NotSucceedsSlantEqual\":\"⋡\",\"NotSucceedsTilde\":\"≿̸\",\"NotSuperset\":\"⊃⃒\",\"NotSupersetEqual\":\"⊉\",\"NotTilde\":\"≁\",\"NotTildeEqual\":\"≄\",\"NotTildeFullEqual\":\"≇\",\"NotTildeTilde\":\"≉\",\"NotVerticalBar\":\"∤\",\"nparallel\":\"∦\",\"npar\":\"∦\",\"nparsl\":\"⫽⃥\",\"npart\":\"∂̸\",\"npolint\":\"⨔\",\"npr\":\"⊀\",\"nprcue\":\"⋠\",\"nprec\":\"⊀\",\"npreceq\":\"⪯̸\",\"npre\":\"⪯̸\",\"nrarrc\":\"⤳̸\",\"nrarr\":\"↛\",\"nrArr\":\"⇏\",\"nrarrw\":\"↝̸\",\"nrightarrow\":\"↛\",\"nRightarrow\":\"⇏\",\"nrtri\":\"⋫\",\"nrtrie\":\"⋭\",\"nsc\":\"⊁\",\"nsccue\":\"⋡\",\"nsce\":\"⪰̸\",\"Nscr\":\"𝒩\",\"nscr\":\"𝓃\",\"nshortmid\":\"∤\",\"nshortparallel\":\"∦\",\"nsim\":\"≁\",\"nsime\":\"≄\",\"nsimeq\":\"≄\",\"nsmid\":\"∤\",\"nspar\":\"∦\",\"nsqsube\":\"⋢\",\"nsqsupe\":\"⋣\",\"nsub\":\"⊄\",\"nsubE\":\"⫅̸\",\"nsube\":\"⊈\",\"nsubset\":\"⊂⃒\",\"nsubseteq\":\"⊈\",\"nsubseteqq\":\"⫅̸\",\"nsucc\":\"⊁\",\"nsucceq\":\"⪰̸\",\"nsup\":\"⊅\",\"nsupE\":\"⫆̸\",\"nsupe\":\"⊉\",\"nsupset\":\"⊃⃒\",\"nsupseteq\":\"⊉\",\"nsupseteqq\":\"⫆̸\",\"ntgl\":\"≹\",\"Ntilde\":\"Ñ\",\"ntilde\":\"ñ\",\"ntlg\":\"≸\",\"ntriangleleft\":\"⋪\",\"ntrianglelefteq\":\"⋬\",\"ntriangleright\":\"⋫\",\"ntrianglerighteq\":\"⋭\",\"Nu\":\"Ν\",\"nu\":\"ν\",\"num\":\"#\",\"numero\":\"№\",\"numsp\":\" \",\"nvap\":\"≍⃒\",\"nvdash\":\"⊬\",\"nvDash\":\"⊭\",\"nVdash\":\"⊮\",\"nVDash\":\"⊯\",\"nvge\":\"≥⃒\",\"nvgt\":\">⃒\",\"nvHarr\":\"⤄\",\"nvinfin\":\"⧞\",\"nvlArr\":\"⤂\",\"nvle\":\"≤⃒\",\"nvlt\":\"<⃒\",\"nvltrie\":\"⊴⃒\",\"nvrArr\":\"⤃\",\"nvrtrie\":\"⊵⃒\",\"nvsim\":\"∼⃒\",\"nwarhk\":\"⤣\",\"nwarr\":\"↖\",\"nwArr\":\"⇖\",\"nwarrow\":\"↖\",\"nwnear\":\"⤧\",\"Oacute\":\"Ó\",\"oacute\":\"ó\",\"oast\":\"⊛\",\"Ocirc\":\"Ô\",\"ocirc\":\"ô\",\"ocir\":\"⊚\",\"Ocy\":\"О\",\"ocy\":\"о\",\"odash\":\"⊝\",\"Odblac\":\"Ő\",\"odblac\":\"ő\",\"odiv\":\"⨸\",\"odot\":\"⊙\",\"odsold\":\"⦼\",\"OElig\":\"Œ\",\"oelig\":\"œ\",\"ofcir\":\"⦿\",\"Ofr\":\"𝔒\",\"ofr\":\"𝔬\",\"ogon\":\"˛\",\"Ograve\":\"Ò\",\"ograve\":\"ò\",\"ogt\":\"⧁\",\"ohbar\":\"⦵\",\"ohm\":\"Ω\",\"oint\":\"∮\",\"olarr\":\"↺\",\"olcir\":\"⦾\",\"olcross\":\"⦻\",\"oline\":\"‾\",\"olt\":\"⧀\",\"Omacr\":\"Ō\",\"omacr\":\"ō\",\"Omega\":\"Ω\",\"omega\":\"ω\",\"Omicron\":\"Ο\",\"omicron\":\"ο\",\"omid\":\"⦶\",\"ominus\":\"⊖\",\"Oopf\":\"𝕆\",\"oopf\":\"𝕠\",\"opar\":\"⦷\",\"OpenCurlyDoubleQuote\":\"“\",\"OpenCurlyQuote\":\"‘\",\"operp\":\"⦹\",\"oplus\":\"⊕\",\"orarr\":\"↻\",\"Or\":\"⩔\",\"or\":\"∨\",\"ord\":\"⩝\",\"order\":\"ℴ\",\"orderof\":\"ℴ\",\"ordf\":\"ª\",\"ordm\":\"º\",\"origof\":\"⊶\",\"oror\":\"⩖\",\"orslope\":\"⩗\",\"orv\":\"⩛\",\"oS\":\"Ⓢ\",\"Oscr\":\"𝒪\",\"oscr\":\"ℴ\",\"Oslash\":\"Ø\",\"oslash\":\"ø\",\"osol\":\"⊘\",\"Otilde\":\"Õ\",\"otilde\":\"õ\",\"otimesas\":\"⨶\",\"Otimes\":\"⨷\",\"otimes\":\"⊗\",\"Ouml\":\"Ö\",\"ouml\":\"ö\",\"ovbar\":\"⌽\",\"OverBar\":\"‾\",\"OverBrace\":\"⏞\",\"OverBracket\":\"⎴\",\"OverParenthesis\":\"⏜\",\"para\":\"¶\",\"parallel\":\"∥\",\"par\":\"∥\",\"parsim\":\"⫳\",\"parsl\":\"⫽\",\"part\":\"∂\",\"PartialD\":\"∂\",\"Pcy\":\"П\",\"pcy\":\"п\",\"percnt\":\"%\",\"period\":\".\",\"permil\":\"‰\",\"perp\":\"⊥\",\"pertenk\":\"‱\",\"Pfr\":\"𝔓\",\"pfr\":\"𝔭\",\"Phi\":\"Φ\",\"phi\":\"φ\",\"phiv\":\"ϕ\",\"phmmat\":\"ℳ\",\"phone\":\"☎\",\"Pi\":\"Π\",\"pi\":\"π\",\"pitchfork\":\"⋔\",\"piv\":\"ϖ\",\"planck\":\"ℏ\",\"planckh\":\"ℎ\",\"plankv\":\"ℏ\",\"plusacir\":\"⨣\",\"plusb\":\"⊞\",\"pluscir\":\"⨢\",\"plus\":\"+\",\"plusdo\":\"∔\",\"plusdu\":\"⨥\",\"pluse\":\"⩲\",\"PlusMinus\":\"±\",\"plusmn\":\"±\",\"plussim\":\"⨦\",\"plustwo\":\"⨧\",\"pm\":\"±\",\"Poincareplane\":\"ℌ\",\"pointint\":\"⨕\",\"popf\":\"𝕡\",\"Popf\":\"ℙ\",\"pound\":\"£\",\"prap\":\"⪷\",\"Pr\":\"⪻\",\"pr\":\"≺\",\"prcue\":\"≼\",\"precapprox\":\"⪷\",\"prec\":\"≺\",\"preccurlyeq\":\"≼\",\"Precedes\":\"≺\",\"PrecedesEqual\":\"⪯\",\"PrecedesSlantEqual\":\"≼\",\"PrecedesTilde\":\"≾\",\"preceq\":\"⪯\",\"precnapprox\":\"⪹\",\"precneqq\":\"⪵\",\"precnsim\":\"⋨\",\"pre\":\"⪯\",\"prE\":\"⪳\",\"precsim\":\"≾\",\"prime\":\"′\",\"Prime\":\"″\",\"primes\":\"ℙ\",\"prnap\":\"⪹\",\"prnE\":\"⪵\",\"prnsim\":\"⋨\",\"prod\":\"∏\",\"Product\":\"∏\",\"profalar\":\"⌮\",\"profline\":\"⌒\",\"profsurf\":\"⌓\",\"prop\":\"∝\",\"Proportional\":\"∝\",\"Proportion\":\"∷\",\"propto\":\"∝\",\"prsim\":\"≾\",\"prurel\":\"⊰\",\"Pscr\":\"𝒫\",\"pscr\":\"𝓅\",\"Psi\":\"Ψ\",\"psi\":\"ψ\",\"puncsp\":\" \",\"Qfr\":\"𝔔\",\"qfr\":\"𝔮\",\"qint\":\"⨌\",\"qopf\":\"𝕢\",\"Qopf\":\"ℚ\",\"qprime\":\"⁗\",\"Qscr\":\"𝒬\",\"qscr\":\"𝓆\",\"quaternions\":\"ℍ\",\"quatint\":\"⨖\",\"quest\":\"?\",\"questeq\":\"≟\",\"quot\":\"\\\"\",\"QUOT\":\"\\\"\",\"rAarr\":\"⇛\",\"race\":\"∽̱\",\"Racute\":\"Ŕ\",\"racute\":\"ŕ\",\"radic\":\"√\",\"raemptyv\":\"⦳\",\"rang\":\"⟩\",\"Rang\":\"⟫\",\"rangd\":\"⦒\",\"range\":\"⦥\",\"rangle\":\"⟩\",\"raquo\":\"»\",\"rarrap\":\"⥵\",\"rarrb\":\"⇥\",\"rarrbfs\":\"⤠\",\"rarrc\":\"⤳\",\"rarr\":\"→\",\"Rarr\":\"↠\",\"rArr\":\"⇒\",\"rarrfs\":\"⤞\",\"rarrhk\":\"↪\",\"rarrlp\":\"↬\",\"rarrpl\":\"⥅\",\"rarrsim\":\"⥴\",\"Rarrtl\":\"⤖\",\"rarrtl\":\"↣\",\"rarrw\":\"↝\",\"ratail\":\"⤚\",\"rAtail\":\"⤜\",\"ratio\":\"∶\",\"rationals\":\"ℚ\",\"rbarr\":\"⤍\",\"rBarr\":\"⤏\",\"RBarr\":\"⤐\",\"rbbrk\":\"❳\",\"rbrace\":\"}\",\"rbrack\":\"]\",\"rbrke\":\"⦌\",\"rbrksld\":\"⦎\",\"rbrkslu\":\"⦐\",\"Rcaron\":\"Ř\",\"rcaron\":\"ř\",\"Rcedil\":\"Ŗ\",\"rcedil\":\"ŗ\",\"rceil\":\"⌉\",\"rcub\":\"}\",\"Rcy\":\"Р\",\"rcy\":\"р\",\"rdca\":\"⤷\",\"rdldhar\":\"⥩\",\"rdquo\":\"”\",\"rdquor\":\"”\",\"rdsh\":\"↳\",\"real\":\"ℜ\",\"realine\":\"ℛ\",\"realpart\":\"ℜ\",\"reals\":\"ℝ\",\"Re\":\"ℜ\",\"rect\":\"▭\",\"reg\":\"®\",\"REG\":\"®\",\"ReverseElement\":\"∋\",\"ReverseEquilibrium\":\"⇋\",\"ReverseUpEquilibrium\":\"⥯\",\"rfisht\":\"⥽\",\"rfloor\":\"⌋\",\"rfr\":\"𝔯\",\"Rfr\":\"ℜ\",\"rHar\":\"⥤\",\"rhard\":\"⇁\",\"rharu\":\"⇀\",\"rharul\":\"⥬\",\"Rho\":\"Ρ\",\"rho\":\"ρ\",\"rhov\":\"ϱ\",\"RightAngleBracket\":\"⟩\",\"RightArrowBar\":\"⇥\",\"rightarrow\":\"→\",\"RightArrow\":\"→\",\"Rightarrow\":\"⇒\",\"RightArrowLeftArrow\":\"⇄\",\"rightarrowtail\":\"↣\",\"RightCeiling\":\"⌉\",\"RightDoubleBracket\":\"⟧\",\"RightDownTeeVector\":\"⥝\",\"RightDownVectorBar\":\"⥕\",\"RightDownVector\":\"⇂\",\"RightFloor\":\"⌋\",\"rightharpoondown\":\"⇁\",\"rightharpoonup\":\"⇀\",\"rightleftarrows\":\"⇄\",\"rightleftharpoons\":\"⇌\",\"rightrightarrows\":\"⇉\",\"rightsquigarrow\":\"↝\",\"RightTeeArrow\":\"↦\",\"RightTee\":\"⊢\",\"RightTeeVector\":\"⥛\",\"rightthreetimes\":\"⋌\",\"RightTriangleBar\":\"⧐\",\"RightTriangle\":\"⊳\",\"RightTriangleEqual\":\"⊵\",\"RightUpDownVector\":\"⥏\",\"RightUpTeeVector\":\"⥜\",\"RightUpVectorBar\":\"⥔\",\"RightUpVector\":\"↾\",\"RightVectorBar\":\"⥓\",\"RightVector\":\"⇀\",\"ring\":\"˚\",\"risingdotseq\":\"≓\",\"rlarr\":\"⇄\",\"rlhar\":\"⇌\",\"rlm\":\"‏\",\"rmoustache\":\"⎱\",\"rmoust\":\"⎱\",\"rnmid\":\"⫮\",\"roang\":\"⟭\",\"roarr\":\"⇾\",\"robrk\":\"⟧\",\"ropar\":\"⦆\",\"ropf\":\"𝕣\",\"Ropf\":\"ℝ\",\"roplus\":\"⨮\",\"rotimes\":\"⨵\",\"RoundImplies\":\"⥰\",\"rpar\":\")\",\"rpargt\":\"⦔\",\"rppolint\":\"⨒\",\"rrarr\":\"⇉\",\"Rrightarrow\":\"⇛\",\"rsaquo\":\"›\",\"rscr\":\"𝓇\",\"Rscr\":\"ℛ\",\"rsh\":\"↱\",\"Rsh\":\"↱\",\"rsqb\":\"]\",\"rsquo\":\"’\",\"rsquor\":\"’\",\"rthree\":\"⋌\",\"rtimes\":\"⋊\",\"rtri\":\"▹\",\"rtrie\":\"⊵\",\"rtrif\":\"▸\",\"rtriltri\":\"⧎\",\"RuleDelayed\":\"⧴\",\"ruluhar\":\"⥨\",\"rx\":\"℞\",\"Sacute\":\"Ś\",\"sacute\":\"ś\",\"sbquo\":\"‚\",\"scap\":\"⪸\",\"Scaron\":\"Š\",\"scaron\":\"š\",\"Sc\":\"⪼\",\"sc\":\"≻\",\"sccue\":\"≽\",\"sce\":\"⪰\",\"scE\":\"⪴\",\"Scedil\":\"Ş\",\"scedil\":\"ş\",\"Scirc\":\"Ŝ\",\"scirc\":\"ŝ\",\"scnap\":\"⪺\",\"scnE\":\"⪶\",\"scnsim\":\"⋩\",\"scpolint\":\"⨓\",\"scsim\":\"≿\",\"Scy\":\"С\",\"scy\":\"с\",\"sdotb\":\"⊡\",\"sdot\":\"⋅\",\"sdote\":\"⩦\",\"searhk\":\"⤥\",\"searr\":\"↘\",\"seArr\":\"⇘\",\"searrow\":\"↘\",\"sect\":\"§\",\"semi\":\";\",\"seswar\":\"⤩\",\"setminus\":\"∖\",\"setmn\":\"∖\",\"sext\":\"✶\",\"Sfr\":\"𝔖\",\"sfr\":\"𝔰\",\"sfrown\":\"⌢\",\"sharp\":\"♯\",\"SHCHcy\":\"Щ\",\"shchcy\":\"щ\",\"SHcy\":\"Ш\",\"shcy\":\"ш\",\"ShortDownArrow\":\"↓\",\"ShortLeftArrow\":\"←\",\"shortmid\":\"∣\",\"shortparallel\":\"∥\",\"ShortRightArrow\":\"→\",\"ShortUpArrow\":\"↑\",\"shy\":\"­\",\"Sigma\":\"Σ\",\"sigma\":\"σ\",\"sigmaf\":\"ς\",\"sigmav\":\"ς\",\"sim\":\"∼\",\"simdot\":\"⩪\",\"sime\":\"≃\",\"simeq\":\"≃\",\"simg\":\"⪞\",\"simgE\":\"⪠\",\"siml\":\"⪝\",\"simlE\":\"⪟\",\"simne\":\"≆\",\"simplus\":\"⨤\",\"simrarr\":\"⥲\",\"slarr\":\"←\",\"SmallCircle\":\"∘\",\"smallsetminus\":\"∖\",\"smashp\":\"⨳\",\"smeparsl\":\"⧤\",\"smid\":\"∣\",\"smile\":\"⌣\",\"smt\":\"⪪\",\"smte\":\"⪬\",\"smtes\":\"⪬︀\",\"SOFTcy\":\"Ь\",\"softcy\":\"ь\",\"solbar\":\"⌿\",\"solb\":\"⧄\",\"sol\":\"/\",\"Sopf\":\"𝕊\",\"sopf\":\"𝕤\",\"spades\":\"♠\",\"spadesuit\":\"♠\",\"spar\":\"∥\",\"sqcap\":\"⊓\",\"sqcaps\":\"⊓︀\",\"sqcup\":\"⊔\",\"sqcups\":\"⊔︀\",\"Sqrt\":\"√\",\"sqsub\":\"⊏\",\"sqsube\":\"⊑\",\"sqsubset\":\"⊏\",\"sqsubseteq\":\"⊑\",\"sqsup\":\"⊐\",\"sqsupe\":\"⊒\",\"sqsupset\":\"⊐\",\"sqsupseteq\":\"⊒\",\"square\":\"□\",\"Square\":\"□\",\"SquareIntersection\":\"⊓\",\"SquareSubset\":\"⊏\",\"SquareSubsetEqual\":\"⊑\",\"SquareSuperset\":\"⊐\",\"SquareSupersetEqual\":\"⊒\",\"SquareUnion\":\"⊔\",\"squarf\":\"▪\",\"squ\":\"□\",\"squf\":\"▪\",\"srarr\":\"→\",\"Sscr\":\"𝒮\",\"sscr\":\"𝓈\",\"ssetmn\":\"∖\",\"ssmile\":\"⌣\",\"sstarf\":\"⋆\",\"Star\":\"⋆\",\"star\":\"☆\",\"starf\":\"★\",\"straightepsilon\":\"ϵ\",\"straightphi\":\"ϕ\",\"strns\":\"¯\",\"sub\":\"⊂\",\"Sub\":\"⋐\",\"subdot\":\"⪽\",\"subE\":\"⫅\",\"sube\":\"⊆\",\"subedot\":\"⫃\",\"submult\":\"⫁\",\"subnE\":\"⫋\",\"subne\":\"⊊\",\"subplus\":\"⪿\",\"subrarr\":\"⥹\",\"subset\":\"⊂\",\"Subset\":\"⋐\",\"subseteq\":\"⊆\",\"subseteqq\":\"⫅\",\"SubsetEqual\":\"⊆\",\"subsetneq\":\"⊊\",\"subsetneqq\":\"⫋\",\"subsim\":\"⫇\",\"subsub\":\"⫕\",\"subsup\":\"⫓\",\"succapprox\":\"⪸\",\"succ\":\"≻\",\"succcurlyeq\":\"≽\",\"Succeeds\":\"≻\",\"SucceedsEqual\":\"⪰\",\"SucceedsSlantEqual\":\"≽\",\"SucceedsTilde\":\"≿\",\"succeq\":\"⪰\",\"succnapprox\":\"⪺\",\"succneqq\":\"⪶\",\"succnsim\":\"⋩\",\"succsim\":\"≿\",\"SuchThat\":\"∋\",\"sum\":\"∑\",\"Sum\":\"∑\",\"sung\":\"♪\",\"sup1\":\"¹\",\"sup2\":\"²\",\"sup3\":\"³\",\"sup\":\"⊃\",\"Sup\":\"⋑\",\"supdot\":\"⪾\",\"supdsub\":\"⫘\",\"supE\":\"⫆\",\"supe\":\"⊇\",\"supedot\":\"⫄\",\"Superset\":\"⊃\",\"SupersetEqual\":\"⊇\",\"suphsol\":\"⟉\",\"suphsub\":\"⫗\",\"suplarr\":\"⥻\",\"supmult\":\"⫂\",\"supnE\":\"⫌\",\"supne\":\"⊋\",\"supplus\":\"⫀\",\"supset\":\"⊃\",\"Supset\":\"⋑\",\"supseteq\":\"⊇\",\"supseteqq\":\"⫆\",\"supsetneq\":\"⊋\",\"supsetneqq\":\"⫌\",\"supsim\":\"⫈\",\"supsub\":\"⫔\",\"supsup\":\"⫖\",\"swarhk\":\"⤦\",\"swarr\":\"↙\",\"swArr\":\"⇙\",\"swarrow\":\"↙\",\"swnwar\":\"⤪\",\"szlig\":\"ß\",\"Tab\":\"\\t\",\"target\":\"⌖\",\"Tau\":\"Τ\",\"tau\":\"τ\",\"tbrk\":\"⎴\",\"Tcaron\":\"Ť\",\"tcaron\":\"ť\",\"Tcedil\":\"Ţ\",\"tcedil\":\"ţ\",\"Tcy\":\"Т\",\"tcy\":\"т\",\"tdot\":\"⃛\",\"telrec\":\"⌕\",\"Tfr\":\"𝔗\",\"tfr\":\"𝔱\",\"there4\":\"∴\",\"therefore\":\"∴\",\"Therefore\":\"∴\",\"Theta\":\"Θ\",\"theta\":\"θ\",\"thetasym\":\"ϑ\",\"thetav\":\"ϑ\",\"thickapprox\":\"≈\",\"thicksim\":\"∼\",\"ThickSpace\":\"  \",\"ThinSpace\":\" \",\"thinsp\":\" \",\"thkap\":\"≈\",\"thksim\":\"∼\",\"THORN\":\"Þ\",\"thorn\":\"þ\",\"tilde\":\"˜\",\"Tilde\":\"∼\",\"TildeEqual\":\"≃\",\"TildeFullEqual\":\"≅\",\"TildeTilde\":\"≈\",\"timesbar\":\"⨱\",\"timesb\":\"⊠\",\"times\":\"×\",\"timesd\":\"⨰\",\"tint\":\"∭\",\"toea\":\"⤨\",\"topbot\":\"⌶\",\"topcir\":\"⫱\",\"top\":\"⊤\",\"Topf\":\"𝕋\",\"topf\":\"𝕥\",\"topfork\":\"⫚\",\"tosa\":\"⤩\",\"tprime\":\"‴\",\"trade\":\"™\",\"TRADE\":\"™\",\"triangle\":\"▵\",\"triangledown\":\"▿\",\"triangleleft\":\"◃\",\"trianglelefteq\":\"⊴\",\"triangleq\":\"≜\",\"triangleright\":\"▹\",\"trianglerighteq\":\"⊵\",\"tridot\":\"◬\",\"trie\":\"≜\",\"triminus\":\"⨺\",\"TripleDot\":\"⃛\",\"triplus\":\"⨹\",\"trisb\":\"⧍\",\"tritime\":\"⨻\",\"trpezium\":\"⏢\",\"Tscr\":\"𝒯\",\"tscr\":\"𝓉\",\"TScy\":\"Ц\",\"tscy\":\"ц\",\"TSHcy\":\"Ћ\",\"tshcy\":\"ћ\",\"Tstrok\":\"Ŧ\",\"tstrok\":\"ŧ\",\"twixt\":\"≬\",\"twoheadleftarrow\":\"↞\",\"twoheadrightarrow\":\"↠\",\"Uacute\":\"Ú\",\"uacute\":\"ú\",\"uarr\":\"↑\",\"Uarr\":\"↟\",\"uArr\":\"⇑\",\"Uarrocir\":\"⥉\",\"Ubrcy\":\"Ў\",\"ubrcy\":\"ў\",\"Ubreve\":\"Ŭ\",\"ubreve\":\"ŭ\",\"Ucirc\":\"Û\",\"ucirc\":\"û\",\"Ucy\":\"У\",\"ucy\":\"у\",\"udarr\":\"⇅\",\"Udblac\":\"Ű\",\"udblac\":\"ű\",\"udhar\":\"⥮\",\"ufisht\":\"⥾\",\"Ufr\":\"𝔘\",\"ufr\":\"𝔲\",\"Ugrave\":\"Ù\",\"ugrave\":\"ù\",\"uHar\":\"⥣\",\"uharl\":\"↿\",\"uharr\":\"↾\",\"uhblk\":\"▀\",\"ulcorn\":\"⌜\",\"ulcorner\":\"⌜\",\"ulcrop\":\"⌏\",\"ultri\":\"◸\",\"Umacr\":\"Ū\",\"umacr\":\"ū\",\"uml\":\"¨\",\"UnderBar\":\"_\",\"UnderBrace\":\"⏟\",\"UnderBracket\":\"⎵\",\"UnderParenthesis\":\"⏝\",\"Union\":\"⋃\",\"UnionPlus\":\"⊎\",\"Uogon\":\"Ų\",\"uogon\":\"ų\",\"Uopf\":\"𝕌\",\"uopf\":\"𝕦\",\"UpArrowBar\":\"⤒\",\"uparrow\":\"↑\",\"UpArrow\":\"↑\",\"Uparrow\":\"⇑\",\"UpArrowDownArrow\":\"⇅\",\"updownarrow\":\"↕\",\"UpDownArrow\":\"↕\",\"Updownarrow\":\"⇕\",\"UpEquilibrium\":\"⥮\",\"upharpoonleft\":\"↿\",\"upharpoonright\":\"↾\",\"uplus\":\"⊎\",\"UpperLeftArrow\":\"↖\",\"UpperRightArrow\":\"↗\",\"upsi\":\"υ\",\"Upsi\":\"ϒ\",\"upsih\":\"ϒ\",\"Upsilon\":\"Υ\",\"upsilon\":\"υ\",\"UpTeeArrow\":\"↥\",\"UpTee\":\"⊥\",\"upuparrows\":\"⇈\",\"urcorn\":\"⌝\",\"urcorner\":\"⌝\",\"urcrop\":\"⌎\",\"Uring\":\"Ů\",\"uring\":\"ů\",\"urtri\":\"◹\",\"Uscr\":\"𝒰\",\"uscr\":\"𝓊\",\"utdot\":\"⋰\",\"Utilde\":\"Ũ\",\"utilde\":\"ũ\",\"utri\":\"▵\",\"utrif\":\"▴\",\"uuarr\":\"⇈\",\"Uuml\":\"Ü\",\"uuml\":\"ü\",\"uwangle\":\"⦧\",\"vangrt\":\"⦜\",\"varepsilon\":\"ϵ\",\"varkappa\":\"ϰ\",\"varnothing\":\"∅\",\"varphi\":\"ϕ\",\"varpi\":\"ϖ\",\"varpropto\":\"∝\",\"varr\":\"↕\",\"vArr\":\"⇕\",\"varrho\":\"ϱ\",\"varsigma\":\"ς\",\"varsubsetneq\":\"⊊︀\",\"varsubsetneqq\":\"⫋︀\",\"varsupsetneq\":\"⊋︀\",\"varsupsetneqq\":\"⫌︀\",\"vartheta\":\"ϑ\",\"vartriangleleft\":\"⊲\",\"vartriangleright\":\"⊳\",\"vBar\":\"⫨\",\"Vbar\":\"⫫\",\"vBarv\":\"⫩\",\"Vcy\":\"В\",\"vcy\":\"в\",\"vdash\":\"⊢\",\"vDash\":\"⊨\",\"Vdash\":\"⊩\",\"VDash\":\"⊫\",\"Vdashl\":\"⫦\",\"veebar\":\"⊻\",\"vee\":\"∨\",\"Vee\":\"⋁\",\"veeeq\":\"≚\",\"vellip\":\"⋮\",\"verbar\":\"|\",\"Verbar\":\"‖\",\"vert\":\"|\",\"Vert\":\"‖\",\"VerticalBar\":\"∣\",\"VerticalLine\":\"|\",\"VerticalSeparator\":\"❘\",\"VerticalTilde\":\"≀\",\"VeryThinSpace\":\" \",\"Vfr\":\"𝔙\",\"vfr\":\"𝔳\",\"vltri\":\"⊲\",\"vnsub\":\"⊂⃒\",\"vnsup\":\"⊃⃒\",\"Vopf\":\"𝕍\",\"vopf\":\"𝕧\",\"vprop\":\"∝\",\"vrtri\":\"⊳\",\"Vscr\":\"𝒱\",\"vscr\":\"𝓋\",\"vsubnE\":\"⫋︀\",\"vsubne\":\"⊊︀\",\"vsupnE\":\"⫌︀\",\"vsupne\":\"⊋︀\",\"Vvdash\":\"⊪\",\"vzigzag\":\"⦚\",\"Wcirc\":\"Ŵ\",\"wcirc\":\"ŵ\",\"wedbar\":\"⩟\",\"wedge\":\"∧\",\"Wedge\":\"⋀\",\"wedgeq\":\"≙\",\"weierp\":\"℘\",\"Wfr\":\"𝔚\",\"wfr\":\"𝔴\",\"Wopf\":\"𝕎\",\"wopf\":\"𝕨\",\"wp\":\"℘\",\"wr\":\"≀\",\"wreath\":\"≀\",\"Wscr\":\"𝒲\",\"wscr\":\"𝓌\",\"xcap\":\"⋂\",\"xcirc\":\"◯\",\"xcup\":\"⋃\",\"xdtri\":\"▽\",\"Xfr\":\"𝔛\",\"xfr\":\"𝔵\",\"xharr\":\"⟷\",\"xhArr\":\"⟺\",\"Xi\":\"Ξ\",\"xi\":\"ξ\",\"xlarr\":\"⟵\",\"xlArr\":\"⟸\",\"xmap\":\"⟼\",\"xnis\":\"⋻\",\"xodot\":\"⨀\",\"Xopf\":\"𝕏\",\"xopf\":\"𝕩\",\"xoplus\":\"⨁\",\"xotime\":\"⨂\",\"xrarr\":\"⟶\",\"xrArr\":\"⟹\",\"Xscr\":\"𝒳\",\"xscr\":\"𝓍\",\"xsqcup\":\"⨆\",\"xuplus\":\"⨄\",\"xutri\":\"△\",\"xvee\":\"⋁\",\"xwedge\":\"⋀\",\"Yacute\":\"Ý\",\"yacute\":\"ý\",\"YAcy\":\"Я\",\"yacy\":\"я\",\"Ycirc\":\"Ŷ\",\"ycirc\":\"ŷ\",\"Ycy\":\"Ы\",\"ycy\":\"ы\",\"yen\":\"¥\",\"Yfr\":\"𝔜\",\"yfr\":\"𝔶\",\"YIcy\":\"Ї\",\"yicy\":\"ї\",\"Yopf\":\"𝕐\",\"yopf\":\"𝕪\",\"Yscr\":\"𝒴\",\"yscr\":\"𝓎\",\"YUcy\":\"Ю\",\"yucy\":\"ю\",\"yuml\":\"ÿ\",\"Yuml\":\"Ÿ\",\"Zacute\":\"Ź\",\"zacute\":\"ź\",\"Zcaron\":\"Ž\",\"zcaron\":\"ž\",\"Zcy\":\"З\",\"zcy\":\"з\",\"Zdot\":\"Ż\",\"zdot\":\"ż\",\"zeetrf\":\"ℨ\",\"ZeroWidthSpace\":\"​\",\"Zeta\":\"Ζ\",\"zeta\":\"ζ\",\"zfr\":\"𝔷\",\"Zfr\":\"ℨ\",\"ZHcy\":\"Ж\",\"zhcy\":\"ж\",\"zigrarr\":\"⇝\",\"zopf\":\"𝕫\",\"Zopf\":\"ℤ\",\"Zscr\":\"𝒵\",\"zscr\":\"𝓏\",\"zwj\":\"‍\",\"zwnj\":\"‌\"}");
    /***/
  },

  /***/
  "./node_modules/mdurl/decode.js":
  /*!**************************************!*\
    !*** ./node_modules/mdurl/decode.js ***!
    \**************************************/

  /*! no static exports found */

  /***/
  function node_modulesMdurlDecodeJs(module, exports, __webpack_require__) {
    "use strict";
    /* eslint-disable no-bitwise */

    var decodeCache = {};

    function getDecodeCache(exclude) {
      var i,
          ch,
          cache = decodeCache[exclude];

      if (cache) {
        return cache;
      }

      cache = decodeCache[exclude] = [];

      for (i = 0; i < 128; i++) {
        ch = String.fromCharCode(i);
        cache.push(ch);
      }

      for (i = 0; i < exclude.length; i++) {
        ch = exclude.charCodeAt(i);
        cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);
      }

      return cache;
    } // Decode percent-encoded string.
    //


    function decode(string, exclude) {
      var cache;

      if (typeof exclude !== 'string') {
        exclude = decode.defaultChars;
      }

      cache = getDecodeCache(exclude);
      return string.replace(/(%[a-f0-9]{2})+/gi, function (seq) {
        var i,
            l,
            b1,
            b2,
            b3,
            b4,
            chr,
            result = '';

        for (i = 0, l = seq.length; i < l; i += 3) {
          b1 = parseInt(seq.slice(i + 1, i + 3), 16);

          if (b1 < 0x80) {
            result += cache[b1];
            continue;
          }

          if ((b1 & 0xE0) === 0xC0 && i + 3 < l) {
            // 110xxxxx 10xxxxxx
            b2 = parseInt(seq.slice(i + 4, i + 6), 16);

            if ((b2 & 0xC0) === 0x80) {
              chr = b1 << 6 & 0x7C0 | b2 & 0x3F;

              if (chr < 0x80) {
                result += "\uFFFD\uFFFD";
              } else {
                result += String.fromCharCode(chr);
              }

              i += 3;
              continue;
            }
          }

          if ((b1 & 0xF0) === 0xE0 && i + 6 < l) {
            // 1110xxxx 10xxxxxx 10xxxxxx
            b2 = parseInt(seq.slice(i + 4, i + 6), 16);
            b3 = parseInt(seq.slice(i + 7, i + 9), 16);

            if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
              chr = b1 << 12 & 0xF000 | b2 << 6 & 0xFC0 | b3 & 0x3F;

              if (chr < 0x800 || chr >= 0xD800 && chr <= 0xDFFF) {
                result += "\uFFFD\uFFFD\uFFFD";
              } else {
                result += String.fromCharCode(chr);
              }

              i += 6;
              continue;
            }
          }

          if ((b1 & 0xF8) === 0xF0 && i + 9 < l) {
            // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx
            b2 = parseInt(seq.slice(i + 4, i + 6), 16);
            b3 = parseInt(seq.slice(i + 7, i + 9), 16);
            b4 = parseInt(seq.slice(i + 10, i + 12), 16);

            if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {
              chr = b1 << 18 & 0x1C0000 | b2 << 12 & 0x3F000 | b3 << 6 & 0xFC0 | b4 & 0x3F;

              if (chr < 0x10000 || chr > 0x10FFFF) {
                result += "\uFFFD\uFFFD\uFFFD\uFFFD";
              } else {
                chr -= 0x10000;
                result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));
              }

              i += 9;
              continue;
            }
          }

          result += "\uFFFD";
        }

        return result;
      });
    }

    decode.defaultChars = ';/?:@&=+$,#';
    decode.componentChars = '';
    module.exports = decode;
    /***/
  },

  /***/
  "./node_modules/mdurl/encode.js":
  /*!**************************************!*\
    !*** ./node_modules/mdurl/encode.js ***!
    \**************************************/

  /*! no static exports found */

  /***/
  function node_modulesMdurlEncodeJs(module, exports, __webpack_require__) {
    "use strict";

    var encodeCache = {}; // Create a lookup array where anything but characters in `chars` string
    // and alphanumeric chars is percent-encoded.
    //

    function getEncodeCache(exclude) {
      var i,
          ch,
          cache = encodeCache[exclude];

      if (cache) {
        return cache;
      }

      cache = encodeCache[exclude] = [];

      for (i = 0; i < 128; i++) {
        ch = String.fromCharCode(i);

        if (/^[0-9a-z]$/i.test(ch)) {
          // always allow unencoded alphanumeric characters
          cache.push(ch);
        } else {
          cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));
        }
      }

      for (i = 0; i < exclude.length; i++) {
        cache[exclude.charCodeAt(i)] = exclude[i];
      }

      return cache;
    } // Encode unsafe characters with percent-encoding, skipping already
    // encoded sequences.
    //
    //  - string       - string to encode
    //  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)
    //  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)
    //


    function encode(string, exclude, keepEscaped) {
      var i,
          l,
          code,
          nextCode,
          cache,
          result = '';

      if (typeof exclude !== 'string') {
        // encode(string, keepEscaped)
        keepEscaped = exclude;
        exclude = encode.defaultChars;
      }

      if (typeof keepEscaped === 'undefined') {
        keepEscaped = true;
      }

      cache = getEncodeCache(exclude);

      for (i = 0, l = string.length; i < l; i++) {
        code = string.charCodeAt(i);

        if (keepEscaped && code === 0x25
        /* % */
        && i + 2 < l) {
          if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
            result += string.slice(i, i + 3);
            i += 2;
            continue;
          }
        }

        if (code < 128) {
          result += cache[code];
          continue;
        }

        if (code >= 0xD800 && code <= 0xDFFF) {
          if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {
            nextCode = string.charCodeAt(i + 1);

            if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {
              result += encodeURIComponent(string[i] + string[i + 1]);
              i++;
              continue;
            }
          }

          result += '%EF%BF%BD';
          continue;
        }

        result += encodeURIComponent(string[i]);
      }

      return result;
    }

    encode.defaultChars = ";/?:@&=+$,-_.!~*'()#";
    encode.componentChars = "-_.!~*'()";
    module.exports = encode;
    /***/
  },

  /***/
  "./node_modules/mdurl/format.js":
  /*!**************************************!*\
    !*** ./node_modules/mdurl/format.js ***!
    \**************************************/

  /*! no static exports found */

  /***/
  function node_modulesMdurlFormatJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function format(url) {
      var result = '';
      result += url.protocol || '';
      result += url.slashes ? '//' : '';
      result += url.auth ? url.auth + '@' : '';

      if (url.hostname && url.hostname.indexOf(':') !== -1) {
        // ipv6 address
        result += '[' + url.hostname + ']';
      } else {
        result += url.hostname || '';
      }

      result += url.port ? ':' + url.port : '';
      result += url.pathname || '';
      result += url.search || '';
      result += url.hash || '';
      return result;
    };
    /***/

  },

  /***/
  "./node_modules/mdurl/index.js":
  /*!*************************************!*\
    !*** ./node_modules/mdurl/index.js ***!
    \*************************************/

  /*! no static exports found */

  /***/
  function node_modulesMdurlIndexJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports.encode = __webpack_require__(
    /*! ./encode */
    "./node_modules/mdurl/encode.js");
    module.exports.decode = __webpack_require__(
    /*! ./decode */
    "./node_modules/mdurl/decode.js");
    module.exports.format = __webpack_require__(
    /*! ./format */
    "./node_modules/mdurl/format.js");
    module.exports.parse = __webpack_require__(
    /*! ./parse */
    "./node_modules/mdurl/parse.js");
    /***/
  },

  /***/
  "./node_modules/mdurl/parse.js":
  /*!*************************************!*\
    !*** ./node_modules/mdurl/parse.js ***!
    \*************************************/

  /*! no static exports found */

  /***/
  function node_modulesMdurlParseJs(module, exports, __webpack_require__) {
    "use strict"; // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    // Changes from joyent/node:
    //
    // 1. No leading slash in paths,
    //    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`
    //
    // 2. Backslashes are not replaced with slashes,
    //    so `http:\\example.org\` is treated like a relative path
    //
    // 3. Trailing colon is treated like a part of the path,
    //    i.e. in `http://example.org:foo` pathname is `:foo`
    //
    // 4. Nothing is URL-encoded in the resulting object,
    //    (in joyent/node some chars in auth and paths are encoded)
    //
    // 5. `url.parse()` does not have `parseQueryString` argument
    //
    // 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,
    //    which can be constructed using other parts of the url.
    //

    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.pathname = null;
    } // Reference: RFC 3986, RFC 1808, RFC 2396
    // define these here so at least they only have to be
    // compiled once on the first module load.


    var protocolPattern = /^([a-z0-9.+-]+:)/i,
        portPattern = /:[0-9]*$/,
        // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
        // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
        // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
        // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
        // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
        hostEndingChars = ['/', '?', '#'],
        hostnameMaxLen = 255,
        hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
        hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
        // protocols that can allow "unsafe" and "unwise" chars.

    /* eslint-disable no-script-url */
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
        // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    };
    /* eslint-enable no-script-url */

    function urlParse(url, slashesDenoteHost) {
      if (url && url instanceof Url) {
        return url;
      }

      var u = new Url();
      u.parse(url, slashesDenoteHost);
      return u;
    }

    Url.prototype.parse = function (url, slashesDenoteHost) {
      var i,
          l,
          lowerProto,
          hec,
          slashes,
          rest = url; // trim before proceeding.
      // This is to support parse stuff like "  http://foo.com  \n"

      rest = rest.trim();

      if (!slashesDenoteHost && url.split('#').length === 1) {
        // Try fast path regexp
        var simplePath = simplePathPattern.exec(rest);

        if (simplePath) {
          this.pathname = simplePath[1];

          if (simplePath[2]) {
            this.search = simplePath[2];
          }

          return this;
        }
      }

      var proto = protocolPattern.exec(rest);

      if (proto) {
        proto = proto[0];
        lowerProto = proto.toLowerCase();
        this.protocol = proto;
        rest = rest.substr(proto.length);
      } // figure out if it's got a host
      // user@server is *always* interpreted as a hostname, and url
      // resolution will treat //foo/bar as host=foo,path=bar because that's
      // how the browser resolves relative URLs.


      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        slashes = rest.substr(0, 2) === '//';

        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          this.slashes = true;
        }
      }

      if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        // there's a hostname.
        // the first instance of /, ?, ;, or # ends the host.
        //
        // If there is an @ in the hostname, then non-host chars *are* allowed
        // to the left of the last @ sign, unless some host-ending character
        // comes *before* the @-sign.
        // URLs are obnoxious.
        //
        // ex:
        // http://a@b@c/ => user:a@b host:c
        // http://a@b?@c => user:a host:c path:/?@c
        // v0.12 TODO(isaacs): This is not quite how Chrome does things.
        // Review our test case against browsers more comprehensively.
        // find the first instance of any hostEndingChars
        var hostEnd = -1;

        for (i = 0; i < hostEndingChars.length; i++) {
          hec = rest.indexOf(hostEndingChars[i]);

          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        } // at this point, either we have an explicit point where the
        // auth portion cannot go past, or the last @ char is the decider.


        var auth, atSign;

        if (hostEnd === -1) {
          // atSign can be anywhere.
          atSign = rest.lastIndexOf('@');
        } else {
          // atSign must be in auth portion.
          // http://a@b/c@d => host:b auth:a path:/c@d
          atSign = rest.lastIndexOf('@', hostEnd);
        } // Now we have a portion which is definitely the auth.
        // Pull that off.


        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          this.auth = auth;
        } // the host is the remaining to the left of the first non-host char


        hostEnd = -1;

        for (i = 0; i < nonHostChars.length; i++) {
          hec = rest.indexOf(nonHostChars[i]);

          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        } // if we still have not hit it, then the entire thing is a host.


        if (hostEnd === -1) {
          hostEnd = rest.length;
        }

        if (rest[hostEnd - 1] === ':') {
          hostEnd--;
        }

        var host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd); // pull out port.

        this.parseHost(host); // we've indicated that there is a hostname,
        // so even if it's empty, it has to be present.

        this.hostname = this.hostname || ''; // if hostname begins with [ and ends with ]
        // assume that it's an IPv6 address.

        var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']'; // validate a little.

        if (!ipv6Hostname) {
          var hostparts = this.hostname.split(/\./);

          for (i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];

            if (!part) {
              continue;
            }

            if (!part.match(hostnamePartPattern)) {
              var newpart = '';

              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  // we replace non-ASCII char with a temporary placeholder
                  // we need this to make sure size of hostname is not
                  // broken by replacing non-ASCII by nothing
                  newpart += 'x';
                } else {
                  newpart += part[j];
                }
              } // we test again with ASCII char only


              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);

                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }

                if (notHost.length) {
                  rest = notHost.join('.') + rest;
                }

                this.hostname = validParts.join('.');
                break;
              }
            }
          }
        }

        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = '';
        } // strip [ and ] from the hostname
        // the host field still retains them, though


        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);
        }
      } // chop off from the tail first.


      var hash = rest.indexOf('#');

      if (hash !== -1) {
        // got a fragment string.
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
      }

      var qm = rest.indexOf('?');

      if (qm !== -1) {
        this.search = rest.substr(qm);
        rest = rest.slice(0, qm);
      }

      if (rest) {
        this.pathname = rest;
      }

      if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
        this.pathname = '';
      }

      return this;
    };

    Url.prototype.parseHost = function (host) {
      var port = portPattern.exec(host);

      if (port) {
        port = port[0];

        if (port !== ':') {
          this.port = port.substr(1);
        }

        host = host.substr(0, host.length - port.length);
      }

      if (host) {
        this.hostname = host;
      }
    };

    module.exports = urlParse;
    /***/
  },

  /***/
  "./node_modules/prismjs/components/prism-bash.js":
  /*!*******************************************************!*\
    !*** ./node_modules/prismjs/components/prism-bash.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismBashJs(module, exports) {
    (function (Prism) {
      // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\n' '|'
      // + LC_ALL, RANDOM, REPLY, SECONDS.
      // + make sure PS1..4 are here as they are not always set,
      // - some useless things.
      var envVars = '\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b';
      var insideString = {
        'environment': {
          pattern: RegExp("\\$" + envVars),
          alias: 'constant'
        },
        'variable': [// [0]: Arithmetic Environment
        {
          pattern: /\$?\(\([\s\S]+?\)\)/,
          greedy: true,
          inside: {
            // If there is a $ sign at the beginning highlight $(( and )) as variable
            'variable': [{
              pattern: /(^\$\(\([\s\S]+)\)\)/,
              lookbehind: true
            }, /^\$\(\(/],
            'number': /\b0x[\dA-Fa-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee]-?\d+)?/,
            // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic
            'operator': /--?|-=|\+\+?|\+=|!=?|~|\*\*?|\*=|\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\^=?|\|\|?|\|=|\?|:/,
            // If there is no $ sign at the beginning highlight (( and )) as punctuation
            'punctuation': /\(\(?|\)\)?|,|;/
          }
        }, // [1]: Command Substitution
        {
          pattern: /\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,
          greedy: true,
          inside: {
            'variable': /^\$\(|^`|\)$|`$/
          }
        }, // [2]: Brace expansion
        {
          pattern: /\$\{[^}]+\}/,
          greedy: true,
          inside: {
            'operator': /:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,
            'punctuation': /[\[\]]/,
            'environment': {
              pattern: RegExp("(\\{)" + envVars),
              lookbehind: true,
              alias: 'constant'
            }
          }
        }, /\$(?:\w+|[#?*!@$])/],
        // Escape sequences from echo and printf's manuals, and escaped quotes.
        'entity': /\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/
      };
      Prism.languages.bash = {
        'shebang': {
          pattern: /^#!\s*\/.*/,
          alias: 'important'
        },
        'comment': {
          pattern: /(^|[^"{\\$])#.*/,
          lookbehind: true
        },
        'function-name': [// a) function foo {
        // b) foo() {
        // c) function foo() {
        // but not “foo {”
        {
          // a) and c)
          pattern: /(\bfunction\s+)\w+(?=(?:\s*\(?:\s*\))?\s*\{)/,
          lookbehind: true,
          alias: 'function'
        }, {
          // b)
          pattern: /\b\w+(?=\s*\(\s*\)\s*\{)/,
          alias: 'function'
        }],
        // Highlight variable names as variables in for and select beginnings.
        'for-or-select': {
          pattern: /(\b(?:for|select)\s+)\w+(?=\s+in\s)/,
          alias: 'variable',
          lookbehind: true
        },
        // Highlight variable names as variables in the left-hand part
        // of assignments (“=” and “+=”).
        'assign-left': {
          pattern: /(^|[\s;|&]|[<>]\()\w+(?=\+?=)/,
          inside: {
            'environment': {
              pattern: RegExp("(^|[\\s;|&]|[<>]\\()" + envVars),
              lookbehind: true,
              alias: 'constant'
            }
          },
          alias: 'variable',
          lookbehind: true
        },
        'string': [// Support for Here-documents https://en.wikipedia.org/wiki/Here_document
        {
          pattern: /((?:^|[^<])<<-?\s*)(\w+?)\s*(?:\r?\n|\r)[\s\S]*?(?:\r?\n|\r)\2/,
          lookbehind: true,
          greedy: true,
          inside: insideString
        }, // Here-document with quotes around the tag
        // → No expansion (so no “inside”).
        {
          pattern: /((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s*(?:\r?\n|\r)[\s\S]*?(?:\r?\n|\r)\3/,
          lookbehind: true,
          greedy: true
        }, // “Normal” string
        {
          pattern: /(^|[^\\](?:\\\\)*)(["'])(?:\\[\s\S]|\$\([^)]+\)|`[^`]+`|(?!\2)[^\\])*\2/,
          lookbehind: true,
          greedy: true,
          inside: insideString
        }],
        'environment': {
          pattern: RegExp("\\$?" + envVars),
          alias: 'constant'
        },
        'variable': insideString.variable,
        'function': {
          pattern: /(^|[\s;|&]|[<>]\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,
          lookbehind: true
        },
        'keyword': {
          pattern: /(^|[\s;|&]|[<>]\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\s;|&])/,
          lookbehind: true
        },
        // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
        'builtin': {
          pattern: /(^|[\s;|&]|[<>]\()(?:\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\s;|&])/,
          lookbehind: true,
          // Alias added to make those easier to distinguish from strings.
          alias: 'class-name'
        },
        'boolean': {
          pattern: /(^|[\s;|&]|[<>]\()(?:true|false)(?=$|[)\s;|&])/,
          lookbehind: true
        },
        'file-descriptor': {
          pattern: /\B&\d\b/,
          alias: 'important'
        },
        'operator': {
          // Lots of redirections here, but not just that.
          pattern: /\d?<>|>\||\+=|==?|!=?|=~|<<[<-]?|[&\d]?>>|\d?[<>]&?|&[>&]?|\|[&|]?|<=?|>=?/,
          inside: {
            'file-descriptor': {
              pattern: /^\d/,
              alias: 'important'
            }
          }
        },
        'punctuation': /\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,
        'number': {
          pattern: /(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,
          lookbehind: true
        }
      };
      /* Patterns in command substitution. */

      var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];
      var inside = insideString.variable[1].inside;

      for (var i = 0; i < toBeCopied.length; i++) {
        inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];
      }

      Prism.languages.shell = Prism.languages.bash;
    })(Prism);
    /***/

  },

  /***/
  "./node_modules/prismjs/components/prism-c.js":
  /*!****************************************************!*\
    !*** ./node_modules/prismjs/components/prism-c.js ***!
    \****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismCJs(module, exports) {
    Prism.languages.c = Prism.languages.extend('clike', {
      'comment': {
        pattern: /\/\/(?:[^\r\n\\]|\\(?:\r\n?|\n|(?![\r\n])))*|\/\*[\s\S]*?(?:\*\/|$)/,
        greedy: true
      },
      'class-name': {
        pattern: /(\b(?:enum|struct)\s+(?:__attribute__\s*\(\([\s\S]*?\)\)\s*)?)\w+/,
        lookbehind: true
      },
      'keyword': /\b(?:__attribute__|_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\b/,
      'function': /[a-z_]\w*(?=\s*\()/i,
      'operator': />>=?|<<=?|->|([-+&|:])\1|[?:~]|[-+*/%&|^!=<>]=?/,
      'number': /(?:\b0x(?:[\da-f]+\.?[\da-f]*|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?)[ful]*/i
    });
    Prism.languages.insertBefore('c', 'string', {
      'macro': {
        // allow for multiline macro definitions
        // spaces after the # character compile fine with gcc
        pattern: /(^\s*)#\s*[a-z]+(?:[^\r\n\\]|\\(?:\r\n|[\s\S]))*/im,
        lookbehind: true,
        alias: 'property',
        inside: {
          // highlight the path of the include statement as a string
          'string': {
            pattern: /(#\s*include\s*)(?:<.+?>|("|')(?:\\?.)+?\2)/,
            lookbehind: true
          },
          // highlight macro directives as keywords
          'directive': {
            pattern: /(#\s*)\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\b/,
            lookbehind: true,
            alias: 'keyword'
          }
        }
      },
      // highlight predefined macros as constants
      'constant': /\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\b/
    });
    delete Prism.languages.c['boolean'];
    /***/
  },

  /***/
  "./node_modules/prismjs/components/prism-clike.js":
  /*!********************************************************!*\
    !*** ./node_modules/prismjs/components/prism-clike.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismClikeJs(module, exports) {
    Prism.languages.clike = {
      'comment': [{
        pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
        lookbehind: true
      }, {
        pattern: /(^|[^\\:])\/\/.*/,
        lookbehind: true,
        greedy: true
      }],
      'string': {
        pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
        greedy: true
      },
      'class-name': {
        pattern: /(\b(?:class|interface|extends|implements|trait|instanceof|new)\s+|\bcatch\s+\()[\w.\\]+/i,
        lookbehind: true,
        inside: {
          'punctuation': /[.\\]/
        }
      },
      'keyword': /\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,
      'boolean': /\b(?:true|false)\b/,
      'function': /\w+(?=\()/,
      'number': /\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,
      'operator': /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
      'punctuation': /[{}[\];(),.:]/
    };
    /***/
  },

  /***/
  "./node_modules/prismjs/components/prism-cpp.js":
  /*!******************************************************!*\
    !*** ./node_modules/prismjs/components/prism-cpp.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismCppJs(module, exports) {
    Prism.languages.cpp = Prism.languages.extend('c', {
      'class-name': {
        pattern: /(\b(?:class|enum|struct)\s+)\w+/,
        lookbehind: true
      },
      'keyword': /\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/,
      'number': {
        pattern: /(?:\b0b[01']+|\b0x(?:[\da-f']+\.?[\da-f']*|\.[\da-f']+)(?:p[+-]?[\d']+)?|(?:\b[\d']+\.?[\d']*|\B\.[\d']+)(?:e[+-]?[\d']+)?)[ful]*/i,
        greedy: true
      },
      'operator': />>=?|<<=?|->|([-+&|:])\1|[?:~]|[-+*/%&|^!=<>]=?|\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/,
      'boolean': /\b(?:true|false)\b/
    });
    Prism.languages.insertBefore('cpp', 'string', {
      'raw-string': {
        pattern: /R"([^()\\ ]{0,16})\([\s\S]*?\)\1"/,
        alias: 'string',
        greedy: true
      }
    });
    /***/
  },

  /***/
  "./node_modules/prismjs/components/prism-csharp.js":
  /*!*********************************************************!*\
    !*** ./node_modules/prismjs/components/prism-csharp.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismCsharpJs(module, exports) {
    (function (Prism) {
      /**
       * Replaces all placeholders "<<n>>" of given pattern with the n-th replacement (zero based).
       *
       * Note: This is a simple text based replacement. Be careful when using backreferences!
       *
       * @param {string} pattern the given pattern.
       * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.
       * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.
       * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source
       */
      function replace(pattern, replacements) {
        return pattern.replace(/<<(\d+)>>/g, function (m, index) {
          return '(?:' + replacements[+index] + ')';
        });
      }
      /**
       * @param {string} pattern
       * @param {string[]} replacements
       * @param {string} [flags]
       * @returns {RegExp}
       */


      function re(pattern, replacements, flags) {
        return RegExp(replace(pattern, replacements), flags || '');
      }
      /**
       * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.
       *
       * @param {string} pattern
       * @param {number} depthLog2
       * @returns {string}
       */


      function nested(pattern, depthLog2) {
        for (var i = 0; i < depthLog2; i++) {
          pattern = pattern.replace(/<<self>>/g, function () {
            return '(?:' + pattern + ')';
          });
        }

        return pattern.replace(/<<self>>/g, '[^\\s\\S]');
      } // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/


      var keywordKinds = {
        // keywords which represent a return or variable type
        type: 'bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void',
        // keywords which are used to declare a type
        typeDeclaration: 'class enum interface struct',
        // contextual keywords
        // ("var" and "dynamic" are missing because they are used like types)
        contextual: 'add alias ascending async await by descending from get global group into join let nameof notnull on orderby partial remove select set unmanaged value when where where',
        // all other keywords
        other: 'abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield'
      }; // keywords

      function keywordsToPattern(words) {
        return '\\b(?:' + words.trim().replace(/ /g, '|') + ')\\b';
      }

      var typeDeclarationKeywords = keywordsToPattern(keywordKinds.typeDeclaration);
      var keywords = RegExp(keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.typeDeclaration + ' ' + keywordKinds.contextual + ' ' + keywordKinds.other));
      var nonTypeKeywords = keywordsToPattern(keywordKinds.typeDeclaration + ' ' + keywordKinds.contextual + ' ' + keywordKinds.other);
      var nonContextualKeywords = keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.typeDeclaration + ' ' + keywordKinds.other); // types

      var generic = nested(/<(?:[^<>;=+\-*/%&|^]|<<self>>)*>/.source, 2); // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.

      var nestedRound = nested(/\((?:[^()]|<<self>>)*\)/.source, 2);
      var name = /@?\b[A-Za-z_]\w*\b/.source;
      var genericName = replace(/<<0>>(?:\s*<<1>>)?/.source, [name, generic]);
      var identifier = replace(/(?!<<0>>)<<1>>(?:\s*\.\s*<<1>>)*/.source, [nonTypeKeywords, genericName]);
      var array = /\[\s*(?:,\s*)*\]/.source;
      var tupleElement = replace(/[^,()<>[\];=+\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source, [generic, nestedRound, array]);
      var tuple = replace(/\(<<0>>+(?:,<<0>>+)+\)/.source, [tupleElement]);
      var typeExpression = replace(/(?:<<0>>|<<1>>)(?:\s*(?:\?\s*)?<<2>>)*(?:\s*\?)?/.source, [tuple, identifier, array]);
      var typeInside = {
        'keyword': keywords,
        'punctuation': /[<>()?,.:[\]]/
      }; // strings & characters
      // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals
      // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals

      var character = /'(?:[^\r\n'\\]|\\.|\\[Uux][\da-fA-F]{1,8})'/.source; // simplified pattern

      var regularString = /"(?:\\.|[^\\"\r\n])*"/.source;
      var verbatimString = /@"(?:""|\\[\s\S]|[^\\"])*"(?!")/.source;
      Prism.languages.csharp = Prism.languages.extend('clike', {
        'string': [{
          pattern: re(/(^|[^$\\])<<0>>/.source, [verbatimString]),
          lookbehind: true,
          greedy: true
        }, {
          pattern: re(/(^|[^@$\\])<<0>>/.source, [regularString]),
          lookbehind: true,
          greedy: true
        }, {
          pattern: RegExp(character),
          greedy: true,
          alias: 'character'
        }],
        'class-name': [{
          // Using static
          // using static System.Math;
          pattern: re(/(\busing\s+static\s+)<<0>>(?=\s*;)/.source, [identifier]),
          lookbehind: true,
          inside: typeInside
        }, {
          // Using alias (type)
          // using Project = PC.MyCompany.Project;
          pattern: re(/(\busing\s+<<0>>\s*=\s*)<<1>>(?=\s*;)/.source, [name, typeExpression]),
          lookbehind: true,
          inside: typeInside
        }, {
          // Using alias (alias)
          // using Project = PC.MyCompany.Project;
          pattern: re(/(\busing\s+)<<0>>(?=\s*=)/.source, [name]),
          lookbehind: true
        }, {
          // Type declarations
          // class Foo<A, B>
          // interface Foo<out A, B>
          pattern: re(/(\b<<0>>\s+)<<1>>/.source, [typeDeclarationKeywords, genericName]),
          lookbehind: true,
          inside: typeInside
        }, {
          // Single catch exception declaration
          // catch(Foo)
          // (things like catch(Foo e) is covered by variable declaration)
          pattern: re(/(\bcatch\s*\(\s*)<<0>>/.source, [identifier]),
          lookbehind: true,
          inside: typeInside
        }, {
          // Name of the type parameter of generic constraints
          // where Foo : class
          pattern: re(/(\bwhere\s+)<<0>>/.source, [name]),
          lookbehind: true
        }, {
          // Casts and checks via as and is.
          // as Foo<A>, is Bar<B>
          // (things like if(a is Foo b) is covered by variable declaration)
          pattern: re(/(\b(?:is|as)\s+)<<0>>/.source, [typeExpression]),
          lookbehind: true,
          inside: typeInside
        }, {
          // Variable, field and parameter declaration
          // (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)
          pattern: re(/\b<<0>>(?=\s+(?!<<1>>)<<2>>(?:\s*[=,;:{)\]]|\s+in))/.source, [typeExpression, nonContextualKeywords, name]),
          inside: typeInside
        }],
        'keyword': keywords,
        // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals
        'number': /(?:\b0(?:x[\da-f_]*[\da-f]|b[01_]*[01])|(?:\B\.\d+(?:_+\d+)*|\b\d+(?:_+\d+)*(?:\.\d+(?:_+\d+)*)?)(?:e[-+]?\d+(?:_+\d+)*)?)(?:ul|lu|[dflmu])?\b/i,
        'operator': />>=?|<<=?|[-=]>|([-+&|])\1|~|\?\?=?|[-+*/%&|^!=<>]=?/,
        'punctuation': /\?\.?|::|[{}[\];(),.:]/
      });
      Prism.languages.insertBefore('csharp', 'number', {
        'range': {
          pattern: /\.\./,
          alias: 'operator'
        }
      });
      Prism.languages.insertBefore('csharp', 'punctuation', {
        'named-parameter': {
          pattern: re(/([(,]\s*)<<0>>(?=\s*:)/.source, [name]),
          lookbehind: true,
          alias: 'punctuation'
        }
      });
      Prism.languages.insertBefore('csharp', 'class-name', {
        'namespace': {
          // namespace Foo.Bar {}
          // using Foo.Bar;
          pattern: re(/(\b(?:namespace|using)\s+)<<0>>(?:\s*\.\s*<<0>>)*(?=\s*[;{])/.source, [name]),
          lookbehind: true,
          inside: {
            'punctuation': /\./
          }
        },
        'type-expression': {
          // default(Foo), typeof(Foo<Bar>), sizeof(int)
          pattern: re(/(\b(?:default|typeof|sizeof)\s*\(\s*)(?:[^()\s]|\s(?!\s*\))|<<0>>)*(?=\s*\))/.source, [nestedRound]),
          lookbehind: true,
          alias: 'class-name',
          inside: typeInside
        },
        'return-type': {
          // Foo<Bar> ForBar(); Foo IFoo.Bar() => 0
          // int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];
          // int Foo => 0; int Foo { get; set } = 0;
          pattern: re(/<<0>>(?=\s+(?:<<1>>\s*(?:=>|[({]|\.\s*this\s*\[)|this\s*\[))/.source, [typeExpression, identifier]),
          inside: typeInside,
          alias: 'class-name'
        },
        'constructor-invocation': {
          // new List<Foo<Bar[]>> { }
          pattern: re(/(\bnew\s+)<<0>>(?=\s*[[({])/.source, [typeExpression]),
          lookbehind: true,
          inside: typeInside,
          alias: 'class-name'
        },

        /*'explicit-implementation': {
        	// int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();
        	pattern: replace(/\b<<0>>(?=\.<<1>>)/, className, methodOrPropertyDeclaration),
        	inside: classNameInside,
        	alias: 'class-name'
        },*/
        'generic-method': {
          // foo<Bar>()
          pattern: re(/<<0>>\s*<<1>>(?=\s*\()/.source, [name, generic]),
          inside: {
            'function': re(/^<<0>>/.source, [name]),
            'generic': {
              pattern: RegExp(generic),
              alias: 'class-name',
              inside: typeInside
            }
          }
        },
        'type-list': {
          // The list of types inherited or of generic constraints
          // class Foo<F> : Bar, IList<FooBar>
          // where F : Bar, IList<int>
          pattern: re(/\b((?:<<0>>\s+<<1>>|where\s+<<2>>)\s*:\s*)(?:<<3>>|<<4>>)(?:\s*,\s*(?:<<3>>|<<4>>))*(?=\s*(?:where|[{;]|=>|$))/.source, [typeDeclarationKeywords, genericName, name, typeExpression, keywords.source]),
          lookbehind: true,
          inside: {
            'keyword': keywords,
            'class-name': {
              pattern: RegExp(typeExpression),
              greedy: true,
              inside: typeInside
            },
            'punctuation': /,/
          }
        },
        'preprocessor': {
          pattern: /(^\s*)#.*/m,
          lookbehind: true,
          alias: 'property',
          inside: {
            // highlight preprocessor directives as keywords
            'directive': {
              pattern: /(\s*#)\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\b/,
              lookbehind: true,
              alias: 'keyword'
            }
          }
        }
      }); // attributes

      var regularStringOrCharacter = regularString + '|' + character;
      var regularStringCharacterOrComment = replace(/\/(?![*/])|\/\/[^\r\n]*[\r\n]|\/\*[\s\S]*?\*\/|<<0>>/.source, [regularStringOrCharacter]);
      var roundExpression = nested(replace(/[^"'/()]|<<0>>|\(<<self>>*\)/.source, [regularStringCharacterOrComment]), 2); // https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets

      var attrTarget = /\b(?:assembly|event|field|method|module|param|property|return|type)\b/.source;
      var attr = replace(/<<0>>(?:\s*\(<<1>>*\))?/.source, [identifier, roundExpression]);
      Prism.languages.insertBefore('csharp', 'class-name', {
        'attribute': {
          // Attributes
          // [Foo], [Foo(1), Bar(2, Prop = "foo")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]
          pattern: re(/((?:^|[^\s\w>)?])\s*\[\s*)(?:<<0>>\s*:\s*)?<<1>>(?:\s*,\s*<<1>>)*(?=\s*\])/.source, [attrTarget, attr]),
          lookbehind: true,
          greedy: true,
          inside: {
            'target': {
              pattern: re(/^<<0>>(?=\s*:)/.source, [attrTarget]),
              alias: 'keyword'
            },
            'attribute-arguments': {
              pattern: re(/\(<<0>>*\)/.source, [roundExpression]),
              inside: Prism.languages.csharp
            },
            'class-name': {
              pattern: RegExp(identifier),
              inside: {
                'punctuation': /\./
              }
            },
            'punctuation': /[:,]/
          }
        }
      }); // string interpolation

      var formatString = /:[^}\r\n]+/.source; // multi line

      var mInterpolationRound = nested(replace(/[^"'/()]|<<0>>|\(<<self>>*\)/.source, [regularStringCharacterOrComment]), 2);
      var mInterpolation = replace(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source, [mInterpolationRound, formatString]); // single line

      var sInterpolationRound = nested(replace(/[^"'/()]|\/(?!\*)|\/\*.*?\*\/|<<0>>|\(<<self>>*\)/.source, [regularStringOrCharacter]), 2);
      var sInterpolation = replace(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source, [sInterpolationRound, formatString]);

      function createInterpolationInside(interpolation, interpolationRound) {
        return {
          'interpolation': {
            pattern: re(/([^{](?:\{\{)*)<<0>>/.source, [interpolation]),
            lookbehind: true,
            inside: {
              'format-string': {
                pattern: re(/(^\{(?:(?![}:])<<0>>)*)<<1>>(?=\}$)/.source, [interpolationRound, formatString]),
                lookbehind: true,
                inside: {
                  'punctuation': /^:/
                }
              },
              'punctuation': /^\{|\}$/,
              'expression': {
                pattern: /[\s\S]+/,
                alias: 'language-csharp',
                inside: Prism.languages.csharp
              }
            }
          },
          'string': /[\s\S]+/
        };
      }

      Prism.languages.insertBefore('csharp', 'string', {
        'interpolation-string': [{
          pattern: re(/(^|[^\\])(?:\$@|@\$)"(?:""|\\[\s\S]|\{\{|<<0>>|[^\\{"])*"/.source, [mInterpolation]),
          lookbehind: true,
          greedy: true,
          inside: createInterpolationInside(mInterpolation, mInterpolationRound)
        }, {
          pattern: re(/(^|[^@\\])\$"(?:\\.|\{\{|<<0>>|[^\\"{])*"/.source, [sInterpolation]),
          lookbehind: true,
          greedy: true,
          inside: createInterpolationInside(sInterpolation, sInterpolationRound)
        }]
      });
    })(Prism);

    Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp;
    /***/
  },

  /***/
  "./node_modules/prismjs/components/prism-css.js":
  /*!******************************************************!*\
    !*** ./node_modules/prismjs/components/prism-css.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismCssJs(module, exports) {
    (function (Prism) {
      var string = /("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;
      Prism.languages.css = {
        'comment': /\/\*[\s\S]*?\*\//,
        'atrule': {
          pattern: /@[\w-]+[\s\S]*?(?:;|(?=\s*\{))/,
          inside: {
            'rule': /^@[\w-]+/,
            'selector-function-argument': {
              pattern: /(\bselector\s*\((?!\s*\))\s*)(?:[^()]|\((?:[^()]|\([^()]*\))*\))+?(?=\s*\))/,
              lookbehind: true,
              alias: 'selector'
            } // See rest below

          }
        },
        'url': {
          pattern: RegExp('url\\((?:' + string.source + '|[^\n\r()]*)\\)', 'i'),
          greedy: true,
          inside: {
            'function': /^url/i,
            'punctuation': /^\(|\)$/
          }
        },
        'selector': RegExp('[^{}\\s](?:[^{};"\']|' + string.source + ')*?(?=\\s*\\{)'),
        'string': {
          pattern: string,
          greedy: true
        },
        'property': /[-_a-z\xA0-\uFFFF][-\w\xA0-\uFFFF]*(?=\s*:)/i,
        'important': /!important\b/i,
        'function': /[-a-z0-9]+(?=\()/i,
        'punctuation': /[(){};:,]/
      };
      Prism.languages.css['atrule'].inside.rest = Prism.languages.css;
      var markup = Prism.languages.markup;

      if (markup) {
        markup.tag.addInlined('style', 'css');
        Prism.languages.insertBefore('inside', 'attr-value', {
          'style-attr': {
            pattern: /\s*style=("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/i,
            inside: {
              'attr-name': {
                pattern: /^\s*style/i,
                inside: markup.tag.inside
              },
              'punctuation': /^\s*=\s*['"]|['"]\s*$/,
              'attr-value': {
                pattern: /.+/i,
                inside: Prism.languages.css
              }
            },
            alias: 'language-css'
          }
        }, markup.tag);
      }
    })(Prism);
    /***/

  },

  /***/
  "./node_modules/prismjs/components/prism-docker.js":
  /*!*********************************************************!*\
    !*** ./node_modules/prismjs/components/prism-docker.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismDockerJs(module, exports) {
    Prism.languages.docker = {
      'keyword': {
        pattern: /(^\s*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\s)/mi,
        lookbehind: true
      },
      'string': /("|')(?:(?!\1)[^\\\r\n]|\\(?:\r\n|[\s\S]))*\1/,
      'comment': /#.*/,
      'punctuation': /---|\.\.\.|[:[\]{}\-,|>?]/
    };
    Prism.languages.dockerfile = Prism.languages.docker;
    /***/
  },

  /***/
  "./node_modules/prismjs/components/prism-git.js":
  /*!******************************************************!*\
    !*** ./node_modules/prismjs/components/prism-git.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismGitJs(module, exports) {
    Prism.languages.git = {
      /*
       * A simple one line comment like in a git status command
       * For instance:
       * $ git status
       * # On branch infinite-scroll
       * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,
       * # and have 1 and 2 different commits each, respectively.
       * nothing to commit (working directory clean)
       */
      'comment': /^#.*/m,

      /*
       * Regexp to match the changed lines in a git diff output. Check the example below.
       */
      'deleted': /^[-–].*/m,
      'inserted': /^\+.*/m,

      /*
       * a string (double and simple quote)
       */
      'string': /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/m,

      /*
       * a git command. It starts with a random prompt finishing by a $, then "git" then some other parameters
       * For instance:
       * $ git add file.txt
       */
      'command': {
        pattern: /^.*\$ git .*$/m,
        inside: {
          /*
           * A git command can contain a parameter starting by a single or a double dash followed by a string
           * For instance:
           * $ git diff --cached
           * $ git log -p
           */
          'parameter': /\s--?\w+/m
        }
      },

      /*
       * Coordinates displayed in a git diff command
       * For instance:
       * $ git diff
       * diff --git file.txt file.txt
       * index 6214953..1d54a52 100644
       * --- file.txt
       * +++ file.txt
       * @@ -1 +1,2 @@
       * -Here's my tetx file
       * +Here's my text file
       * +And this is the second line
       */
      'coord': /^@@.*@@$/m,

      /*
       * Match a "commit [SHA1]" line in a git log output.
       * For instance:
       * $ git log
       * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09
       * Author: lgiraudel
       * Date:   Mon Feb 17 11:18:34 2014 +0100
       *
       *     Add of a new line
       */
      'commit_sha1': /^commit \w{40}$/m
    };
    /***/
  },

  /***/
  "./node_modules/prismjs/components/prism-graphql.js":
  /*!**********************************************************!*\
    !*** ./node_modules/prismjs/components/prism-graphql.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismGraphqlJs(module, exports) {
    Prism.languages.graphql = {
      'comment': /#.*/,
      'string': {
        pattern: /"(?:\\.|[^\\"\r\n])*"/,
        greedy: true
      },
      'number': /(?:\B-|\b)\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
      'boolean': /\b(?:true|false)\b/,
      'variable': /\$[a-z_]\w*/i,
      'directive': {
        pattern: /@[a-z_]\w*/i,
        alias: 'function'
      },
      'attr-name': {
        pattern: /[a-z_]\w*(?=\s*(?:\((?:[^()"]|"(?:\\.|[^\\"\r\n])*")*\))?:)/i,
        greedy: true
      },
      'class-name': {
        pattern: /(\b(?:enum|implements|interface|on|scalar|type|union)\s+)[a-zA-Z_]\w*/,
        lookbehind: true
      },
      'fragment': {
        pattern: /(\bfragment\s+|\.{3}\s*(?!on\b))[a-zA-Z_]\w*/,
        lookbehind: true,
        alias: 'function'
      },
      'keyword': /\b(?:enum|fragment|implements|input|interface|mutation|on|query|scalar|schema|type|union)\b/,
      'operator': /[!=|]|\.{3}/,
      'punctuation': /[!(){}\[\]:=,]/,
      'constant': /\b(?!ID\b)[A-Z][A-Z_\d]*\b/
    };
    /***/
  },

  /***/
  "./node_modules/prismjs/components/prism-java.js":
  /*!*******************************************************!*\
    !*** ./node_modules/prismjs/components/prism-java.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismJavaJs(module, exports) {
    (function (Prism) {
      var keywords = /\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|null|open|opens|package|private|protected|provides|public|record|requires|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\b/; // based on the java naming conventions

      var className = /\b[A-Z](?:\w*[a-z]\w*)?\b/;
      Prism.languages.java = Prism.languages.extend('clike', {
        'class-name': [className, // variables and parameters
        // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)
        /\b[A-Z]\w*(?=\s+\w+\s*[;,=())])/],
        'keyword': keywords,
        'function': [Prism.languages.clike["function"], {
          pattern: /(\:\:)[a-z_]\w*/,
          lookbehind: true
        }],
        'number': /\b0b[01][01_]*L?\b|\b0x[\da-f_]*\.?[\da-f_p+-]+\b|(?:\b\d[\d_]*\.?[\d_]*|\B\.\d[\d_]*)(?:e[+-]?\d[\d_]*)?[dfl]?/i,
        'operator': {
          pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\+\+|&&|\|\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,
          lookbehind: true
        }
      });
      Prism.languages.insertBefore('java', 'string', {
        'triple-quoted-string': {
          // http://openjdk.java.net/jeps/355#Description
          pattern: /"""[ \t]*[\r\n](?:(?:"|"")?(?:\\.|[^"\\]))*"""/,
          greedy: true,
          alias: 'string'
        }
      });
      Prism.languages.insertBefore('java', 'class-name', {
        'annotation': {
          alias: 'punctuation',
          pattern: /(^|[^.])@\w+/,
          lookbehind: true
        },
        'namespace': {
          pattern: /(\b(?:exports|import(?:\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\s+)[a-z]\w*(?:\.[a-z]\w*)+/,
          lookbehind: true,
          inside: {
            'punctuation': /\./
          }
        },
        'generics': {
          pattern: /<(?:[\w\s,.&?]|<(?:[\w\s,.&?]|<(?:[\w\s,.&?]|<[\w\s,.&?]*>)*>)*>)*>/,
          inside: {
            'class-name': className,
            'keyword': keywords,
            'punctuation': /[<>(),.:]/,
            'operator': /[?&|]/
          }
        }
      });
    })(Prism);
    /***/

  },

  /***/
  "./node_modules/prismjs/components/prism-json.js":
  /*!*******************************************************!*\
    !*** ./node_modules/prismjs/components/prism-json.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismJsonJs(module, exports) {
    Prism.languages.json = {
      'property': {
        pattern: /"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,
        greedy: true
      },
      'string': {
        pattern: /"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,
        greedy: true
      },
      'comment': /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
      'number': /-?\d+\.?\d*(?:e[+-]?\d+)?/i,
      'punctuation': /[{}[\],]/,
      'operator': /:/,
      'boolean': /\b(?:true|false)\b/,
      'null': {
        pattern: /\bnull\b/,
        alias: 'keyword'
      }
    };
    /***/
  },

  /***/
  "./node_modules/prismjs/components/prism-lisp.js":
  /*!*******************************************************!*\
    !*** ./node_modules/prismjs/components/prism-lisp.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismLispJs(module, exports) {
    (function (Prism) {
      // Functions to construct regular expressions
      // simple form
      // e.g. (interactive ... or (interactive)
      function simple_form(name) {
        return RegExp('(\\()' + name + '(?=[\\s\\)])');
      } // booleans and numbers


      function primitive(pattern) {
        return RegExp('([\\s([])' + pattern + '(?=[\\s)])');
      } // Patterns in regular expressions
      // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html
      // & and : are excluded as they are usually used for special purposes


      var symbol = '[-+*/_~!@$%^=<>{}\\w]+'; // symbol starting with & used in function arguments

      var marker = '&' + symbol; // Open parenthesis for look-behind

      var par = '(\\()';
      var endpar = '(?=\\))'; // End the pattern with look-ahead space

      var space = '(?=\\s)';
      var language = {
        // Three or four semicolons are considered a heading.
        // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html
        heading: {
          pattern: /;;;.*/,
          alias: ['comment', 'title']
        },
        comment: /;.*/,
        string: {
          pattern: /"(?:[^"\\]|\\.)*"/,
          greedy: true,
          inside: {
            argument: /[-A-Z]+(?=[.,\s])/,
            symbol: RegExp('`' + symbol + "'")
          }
        },
        'quoted-symbol': {
          pattern: RegExp("#?'" + symbol),
          alias: ['variable', 'symbol']
        },
        'lisp-property': {
          pattern: RegExp(':' + symbol),
          alias: 'property'
        },
        splice: {
          pattern: RegExp(',@?' + symbol),
          alias: ['symbol', 'variable']
        },
        keyword: [{
          pattern: RegExp(par + '(?:(?:lexical-)?let\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)' + space),
          lookbehind: true
        }, {
          pattern: RegExp(par + '(?:for|do|collect|return|finally|append|concat|in|by)' + space),
          lookbehind: true
        }],
        declare: {
          pattern: simple_form('declare'),
          lookbehind: true,
          alias: 'keyword'
        },
        interactive: {
          pattern: simple_form('interactive'),
          lookbehind: true,
          alias: 'keyword'
        },
        "boolean": {
          pattern: primitive('(?:t|nil)'),
          lookbehind: true
        },
        number: {
          pattern: primitive('[-+]?\\d+(?:\\.\\d*)?'),
          lookbehind: true
        },
        defvar: {
          pattern: RegExp(par + 'def(?:var|const|custom|group)\\s+' + symbol),
          lookbehind: true,
          inside: {
            keyword: /^def[a-z]+/,
            variable: RegExp(symbol)
          }
        },
        defun: {
          pattern: RegExp(par + '(?:cl-)?(?:defun\\*?|defmacro)\\s+' + symbol + '\\s+\\([\\s\\S]*?\\)'),
          lookbehind: true,
          inside: {
            keyword: /^(?:cl-)?def\S+/,
            // See below, this property needs to be defined later so that it can
            // reference the language object.
            arguments: null,
            "function": {
              pattern: RegExp('(^\\s)' + symbol),
              lookbehind: true
            },
            punctuation: /[()]/
          }
        },
        lambda: {
          pattern: RegExp(par + 'lambda\\s+\\((?:&?' + symbol + '\\s*)*\\)'),
          lookbehind: true,
          inside: {
            keyword: /^lambda/,
            // See below, this property needs to be defined later so that it can
            // reference the language object.
            arguments: null,
            punctuation: /[()]/
          }
        },
        car: {
          pattern: RegExp(par + symbol),
          lookbehind: true
        },
        punctuation: [// open paren, brackets, and close paren
        /(?:['`,]?\(|[)\[\]])/, // cons
        {
          pattern: /(\s)\.(?=\s)/,
          lookbehind: true
        }]
      };
      var arg = {
        'lisp-marker': RegExp(marker),
        rest: {
          argument: {
            pattern: RegExp(symbol),
            alias: 'variable'
          },
          varform: {
            pattern: RegExp(par + symbol + '\\s+\\S[\\s\\S]*' + endpar),
            lookbehind: true,
            inside: {
              string: language.string,
              "boolean": language["boolean"],
              number: language.number,
              symbol: language.symbol,
              punctuation: /[()]/
            }
          }
        }
      };
      var forms = '\\S+(?:\\s+\\S+)*';
      var arglist = {
        pattern: RegExp(par + '[\\s\\S]*' + endpar),
        lookbehind: true,
        inside: {
          'rest-vars': {
            pattern: RegExp('&(?:rest|body)\\s+' + forms),
            inside: arg
          },
          'other-marker-vars': {
            pattern: RegExp('&(?:optional|aux)\\s+' + forms),
            inside: arg
          },
          keys: {
            pattern: RegExp('&key\\s+' + forms + '(?:\\s+&allow-other-keys)?'),
            inside: arg
          },
          argument: {
            pattern: RegExp(symbol),
            alias: 'variable'
          },
          punctuation: /[()]/
        }
      };
      language['lambda'].inside.arguments = arglist;
      language['defun'].inside.arguments = Prism.util.clone(arglist);
      language['defun'].inside.arguments.inside.sublist = arglist;
      Prism.languages.lisp = language;
      Prism.languages.elisp = language;
      Prism.languages.emacs = language;
      Prism.languages['emacs-lisp'] = language;
    })(Prism);
    /***/

  },

  /***/
  "./node_modules/prismjs/components/prism-makefile.js":
  /*!***********************************************************!*\
    !*** ./node_modules/prismjs/components/prism-makefile.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismMakefileJs(module, exports) {
    Prism.languages.makefile = {
      'comment': {
        pattern: /(^|[^\\])#(?:\\(?:\r\n|[\s\S])|[^\\\r\n])*/,
        lookbehind: true
      },
      'string': {
        pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
        greedy: true
      },
      // Built-in target names
      'builtin': /\.[A-Z][^:#=\s]+(?=\s*:(?!=))/,
      // Targets
      'symbol': {
        pattern: /^[^:=\r\n]+(?=\s*:(?!=))/m,
        inside: {
          'variable': /\$+(?:[^(){}:#=\s]+|(?=[({]))/
        }
      },
      'variable': /\$+(?:[^(){}:#=\s]+|\([@*%<^+?][DF]\)|(?=[({]))/,
      'keyword': [// Directives
      /-include\b|\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\b/, // Functions
      {
        pattern: /(\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \t])/,
        lookbehind: true
      }],
      'operator': /(?:::|[?:+!])?=|[|@]/,
      'punctuation': /[:;(){}]/
    };
    /***/
  },

  /***/
  "./node_modules/prismjs/components/prism-markdown.js":
  /*!***********************************************************!*\
    !*** ./node_modules/prismjs/components/prism-markdown.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismMarkdownJs(module, exports) {
    (function (Prism) {
      // Allow only one line break
      var inner = /(?:\\.|[^\\\n\r]|(?:\n|\r\n?)(?!\n|\r\n?))/.source;
      /**
       * This function is intended for the creation of the bold or italic pattern.
       *
       * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.
       *
       * _Note:_ Keep in mind that this adds a capturing group.
       *
       * @param {string} pattern
       * @param {boolean} starAlternative Whether to also add an alternative where all `_`s are replaced with `*`s.
       * @returns {RegExp}
       */

      function createInline(pattern, starAlternative) {
        pattern = pattern.replace(/<inner>/g, function () {
          return inner;
        });

        if (starAlternative) {
          pattern = pattern + '|' + pattern.replace(/_/g, '\\*');
        }

        return RegExp(/((?:^|[^\\])(?:\\{2})*)/.source + '(?:' + pattern + ')');
      }

      var tableCell = /(?:\\.|``.+?``|`[^`\r\n]+`|[^\\|\r\n`])+/.source;
      var tableRow = /\|?__(?:\|__)+\|?(?:(?:\n|\r\n?)|$)/.source.replace(/__/g, function () {
        return tableCell;
      });
      var tableLine = /\|?[ \t]*:?-{3,}:?[ \t]*(?:\|[ \t]*:?-{3,}:?[ \t]*)+\|?(?:\n|\r\n?)/.source;
      Prism.languages.markdown = Prism.languages.extend('markup', {});
      Prism.languages.insertBefore('markdown', 'prolog', {
        'blockquote': {
          // > ...
          pattern: /^>(?:[\t ]*>)*/m,
          alias: 'punctuation'
        },
        'table': {
          pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),
          inside: {
            'table-data-rows': {
              pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),
              lookbehind: true,
              inside: {
                'table-data': {
                  pattern: RegExp(tableCell),
                  inside: Prism.languages.markdown
                },
                'punctuation': /\|/
              }
            },
            'table-line': {
              pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),
              lookbehind: true,
              inside: {
                'punctuation': /\||:?-{3,}:?/
              }
            },
            'table-header-row': {
              pattern: RegExp('^' + tableRow + '$'),
              inside: {
                'table-header': {
                  pattern: RegExp(tableCell),
                  alias: 'important',
                  inside: Prism.languages.markdown
                },
                'punctuation': /\|/
              }
            }
          }
        },
        'code': [{
          // Prefixed by 4 spaces or 1 tab and preceded by an empty line
          pattern: /((?:^|\n)[ \t]*\n|(?:^|\r\n?)[ \t]*\r\n?)(?: {4}|\t).+(?:(?:\n|\r\n?)(?: {4}|\t).+)*/,
          lookbehind: true,
          alias: 'keyword'
        }, {
          // `code`
          // ``code``
          pattern: /``.+?``|`[^`\r\n]+`/,
          alias: 'keyword'
        }, {
          // ```optional language
          // code block
          // ```
          pattern: /^```[\s\S]*?^```$/m,
          greedy: true,
          inside: {
            'code-block': {
              pattern: /^(```.*(?:\n|\r\n?))[\s\S]+?(?=(?:\n|\r\n?)^```$)/m,
              lookbehind: true
            },
            'code-language': {
              pattern: /^(```).+/,
              lookbehind: true
            },
            'punctuation': /```/
          }
        }],
        'title': [{
          // title 1
          // =======
          // title 2
          // -------
          pattern: /\S.*(?:\n|\r\n?)(?:==+|--+)(?=[ \t]*$)/m,
          alias: 'important',
          inside: {
            punctuation: /==+$|--+$/
          }
        }, {
          // # title 1
          // ###### title 6
          pattern: /(^\s*)#+.+/m,
          lookbehind: true,
          alias: 'important',
          inside: {
            punctuation: /^#+|#+$/
          }
        }],
        'hr': {
          // ***
          // ---
          // * * *
          // -----------
          pattern: /(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,
          lookbehind: true,
          alias: 'punctuation'
        },
        'list': {
          // * item
          // + item
          // - item
          // 1. item
          pattern: /(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,
          lookbehind: true,
          alias: 'punctuation'
        },
        'url-reference': {
          // [id]: http://example.com "Optional title"
          // [id]: http://example.com 'Optional title'
          // [id]: http://example.com (Optional title)
          // [id]: <http://example.com> "Optional title"
          pattern: /!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,
          inside: {
            'variable': {
              pattern: /^(!?\[)[^\]]+/,
              lookbehind: true
            },
            'string': /(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,
            'punctuation': /^[\[\]!:]|[<>]/
          },
          alias: 'url'
        },
        'bold': {
          // **strong**
          // __strong__
          // allow one nested instance of italic text using the same delimiter
          pattern: createInline(/__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__/.source, true),
          lookbehind: true,
          greedy: true,
          inside: {
            'content': {
              pattern: /(^..)[\s\S]+(?=..$)/,
              lookbehind: true,
              inside: {} // see below

            },
            'punctuation': /\*\*|__/
          }
        },
        'italic': {
          // *em*
          // _em_
          // allow one nested instance of bold text using the same delimiter
          pattern: createInline(/_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_/.source, true),
          lookbehind: true,
          greedy: true,
          inside: {
            'content': {
              pattern: /(^.)[\s\S]+(?=.$)/,
              lookbehind: true,
              inside: {} // see below

            },
            'punctuation': /[*_]/
          }
        },
        'strike': {
          // ~~strike through~~
          // ~strike~
          pattern: createInline(/(~~?)(?:(?!~)<inner>)+?\2/.source, false),
          lookbehind: true,
          greedy: true,
          inside: {
            'content': {
              pattern: /(^~~?)[\s\S]+(?=\1$)/,
              lookbehind: true,
              inside: {} // see below

            },
            'punctuation': /~~?/
          }
        },
        'url': {
          // [example](http://example.com "Optional title")
          // [example][id]
          // [example] [id]
          pattern: createInline(/!?\[(?:(?!\])<inner>)+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)| ?\[(?:(?!\])<inner>)+\])/.source, false),
          lookbehind: true,
          greedy: true,
          inside: {
            'variable': {
              pattern: /(\[)[^\]]+(?=\]$)/,
              lookbehind: true
            },
            'content': {
              pattern: /(^!?\[)[^\]]+(?=\])/,
              lookbehind: true,
              inside: {} // see below

            },
            'string': {
              pattern: /"(?:\\.|[^"\\])*"(?=\)$)/
            }
          }
        }
      });
      ['url', 'bold', 'italic', 'strike'].forEach(function (token) {
        ['url', 'bold', 'italic', 'strike'].forEach(function (inside) {
          if (token !== inside) {
            Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];
          }
        });
      });
      Prism.hooks.add('after-tokenize', function (env) {
        if (env.language !== 'markdown' && env.language !== 'md') {
          return;
        }

        function walkTokens(tokens) {
          if (!tokens || typeof tokens === 'string') {
            return;
          }

          for (var i = 0, l = tokens.length; i < l; i++) {
            var token = tokens[i];

            if (token.type !== 'code') {
              walkTokens(token.content);
              continue;
            }
            /*
             * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token
             * is optional. But the grammar is defined so that there is only one case we have to handle:
             *
             * token.content = [
             *     <span class="punctuation">```</span>,
             *     <span class="code-language">xxxx</span>,
             *     '\n', // exactly one new lines (\r or \n or \r\n)
             *     <span class="code-block">...</span>,
             *     '\n', // exactly one new lines again
             *     <span class="punctuation">```</span>
             * ];
             */


            var codeLang = token.content[1];
            var codeBlock = token.content[3];

            if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {
              // this might be a language that Prism does not support
              // do some replacements to support C++, C#, and F#
              var lang = codeLang.content.replace(/\b#/g, 'sharp').replace(/\b\+\+/g, 'pp'); // only use the first word

              lang = (/[a-z][\w-]*/i.exec(lang) || [''])[0].toLowerCase();
              var alias = 'language-' + lang; // add alias

              if (!codeBlock.alias) {
                codeBlock.alias = [alias];
              } else if (typeof codeBlock.alias === 'string') {
                codeBlock.alias = [codeBlock.alias, alias];
              } else {
                codeBlock.alias.push(alias);
              }
            }
          }
        }

        walkTokens(env.tokens);
      });
      Prism.hooks.add('wrap', function (env) {
        if (env.type !== 'code-block') {
          return;
        }

        var codeLang = '';

        for (var i = 0, l = env.classes.length; i < l; i++) {
          var cls = env.classes[i];
          var match = /language-(.+)/.exec(cls);

          if (match) {
            codeLang = match[1];
            break;
          }
        }

        var grammar = Prism.languages[codeLang];

        if (!grammar) {
          if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {
            var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);
            env.attributes['id'] = id;
            Prism.plugins.autoloader.loadLanguages(codeLang, function () {
              var ele = document.getElementById(id);

              if (ele) {
                ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);
              }
            });
          }
        } else {
          // reverse Prism.util.encode
          var code = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');
          env.content = Prism.highlight(code, grammar, codeLang);
        }
      });
      Prism.languages.md = Prism.languages.markdown;
    })(Prism);
    /***/

  },

  /***/
  "./node_modules/prismjs/components/prism-powershell.js":
  /*!*************************************************************!*\
    !*** ./node_modules/prismjs/components/prism-powershell.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismPowershellJs(module, exports) {
    (function (Prism) {
      var powershell = Prism.languages.powershell = {
        'comment': [{
          pattern: /(^|[^`])<#[\s\S]*?#>/,
          lookbehind: true
        }, {
          pattern: /(^|[^`])#.*/,
          lookbehind: true
        }],
        'string': [{
          pattern: /"(?:`[\s\S]|[^`"])*"/,
          greedy: true,
          inside: {
            'function': {
              // Allow for one level of nesting
              pattern: /(^|[^`])\$\((?:\$\(.*?\)|(?!\$\()[^\r\n)])*\)/,
              lookbehind: true,
              // Populated at end of file
              inside: {}
            }
          }
        }, {
          pattern: /'(?:[^']|'')*'/,
          greedy: true
        }],
        // Matches name spaces as well as casts, attribute decorators. Force starting with letter to avoid matching array indices
        // Supports two levels of nested brackets (e.g. `[OutputType([System.Collections.Generic.List[int]])]`)
        'namespace': /\[[a-z](?:\[(?:\[[^\]]*]|[^\[\]])*]|[^\[\]])*]/i,
        'boolean': /\$(?:true|false)\b/i,
        'variable': /\$\w+\b/i,
        // Cmdlets and aliases. Aliases should come last, otherwise "write" gets preferred over "write-host" for example
        // Get-Command | ?{ $_.ModuleName -match "Microsoft.PowerShell.(Util|Core|Management)" }
        // Get-Alias | ?{ $_.ReferencedCommand.Module.Name -match "Microsoft.PowerShell.(Util|Core|Management)" }
        'function': [/\b(?:Add-(?:Computer|Content|History|Member|PSSnapin|Type)|Checkpoint-Computer|Clear-(?:Content|EventLog|History|Item|ItemProperty|Variable)|Compare-Object|Complete-Transaction|Connect-PSSession|ConvertFrom-(?:Csv|Json|StringData)|Convert-Path|ConvertTo-(?:Csv|Html|Json|Xml)|Copy-(?:Item|ItemProperty)|Debug-Process|Disable-(?:ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)|Disconnect-PSSession|Enable-(?:ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)|Enter-PSSession|Exit-PSSession|Export-(?:Alias|Clixml|Console|Csv|FormatData|ModuleMember|PSSession)|ForEach-Object|Format-(?:Custom|List|Table|Wide)|Get-(?:Alias|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Culture|Date|Event|EventLog|EventSubscriber|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job|Location|Member|Module|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|WmiObject)|Group-Object|Import-(?:Alias|Clixml|Csv|LocalizedData|Module|PSSession)|Invoke-(?:Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)|Join-Path|Limit-EventLog|Measure-(?:Command|Object)|Move-(?:Item|ItemProperty)|New-(?:Alias|Event|EventLog|Item|ItemProperty|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy)|Out-(?:Default|File|GridView|Host|Null|Printer|String)|Pop-Location|Push-Location|Read-Host|Receive-(?:Job|PSSession)|Register-(?:EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)|Remove-(?:Computer|Event|EventLog|Item|ItemProperty|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)|Rename-(?:Computer|Item|ItemProperty)|Reset-ComputerMachinePassword|Resolve-Path|Restart-(?:Computer|Service)|Restore-Computer|Resume-(?:Job|Service)|Save-Help|Select-(?:Object|String|Xml)|Send-MailMessage|Set-(?:Alias|Content|Date|Item|ItemProperty|Location|PSBreakpoint|PSDebug|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)|Show-(?:Command|ControlPanelItem|EventLog)|Sort-Object|Split-Path|Start-(?:Job|Process|Service|Sleep|Transaction)|Stop-(?:Computer|Job|Process|Service)|Suspend-(?:Job|Service)|Tee-Object|Test-(?:ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)|Trace-Command|Unblock-File|Undo-Transaction|Unregister-(?:Event|PSSessionConfiguration)|Update-(?:FormatData|Help|List|TypeData)|Use-Transaction|Wait-(?:Event|Job|Process)|Where-Object|Write-(?:Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning))\b/i, /\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\b/i],
        // per http://technet.microsoft.com/en-us/library/hh847744.aspx
        'keyword': /\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\b/i,
        'operator': {
          pattern: /(\W?)(?:!|-(?:eq|ne|gt|ge|lt|le|sh[lr]|not|b?(?:and|x?or)|(?:Not)?(?:Like|Match|Contains|In)|Replace|Join|is(?:Not)?|as)\b|-[-=]?|\+[+=]?|[*\/%]=?)/i,
          lookbehind: true
        },
        'punctuation': /[|{}[\];(),.]/
      }; // Variable interpolation inside strings, and nested expressions

      var stringInside = powershell.string[0].inside;
      stringInside["boolean"] = powershell["boolean"];
      stringInside.variable = powershell.variable;
      stringInside["function"].inside = powershell;
    })(Prism);
    /***/

  },

  /***/
  "./node_modules/prismjs/components/prism-python.js":
  /*!*********************************************************!*\
    !*** ./node_modules/prismjs/components/prism-python.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismPythonJs(module, exports) {
    Prism.languages.python = {
      'comment': {
        pattern: /(^|[^\\])#.*/,
        lookbehind: true
      },
      'string-interpolation': {
        pattern: /(?:f|rf|fr)(?:("""|''')[\s\S]+?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,
        greedy: true,
        inside: {
          'interpolation': {
            // "{" <expression> <optional "!s", "!r", or "!a"> <optional ":" format specifier> "}"
            pattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,
            lookbehind: true,
            inside: {
              'format-spec': {
                pattern: /(:)[^:(){}]+(?=}$)/,
                lookbehind: true
              },
              'conversion-option': {
                pattern: /![sra](?=[:}]$)/,
                alias: 'punctuation'
              },
              rest: null
            }
          },
          'string': /[\s\S]+/
        }
      },
      'triple-quoted-string': {
        pattern: /(?:[rub]|rb|br)?("""|''')[\s\S]+?\1/i,
        greedy: true,
        alias: 'string'
      },
      'string': {
        pattern: /(?:[rub]|rb|br)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,
        greedy: true
      },
      'function': {
        pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,
        lookbehind: true
      },
      'class-name': {
        pattern: /(\bclass\s+)\w+/i,
        lookbehind: true
      },
      'decorator': {
        pattern: /(^\s*)@\w+(?:\.\w+)*/im,
        lookbehind: true,
        alias: ['annotation', 'punctuation'],
        inside: {
          'punctuation': /\./
        }
      },
      'keyword': /\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,
      'builtin': /\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,
      'boolean': /\b(?:True|False|None)\b/,
      'number': /(?:\b(?=\d)|\B(?=\.))(?:0[bo])?(?:(?:\d|0x[\da-f])[\da-f]*\.?\d*|\.\d+)(?:e[+-]?\d+)?j?\b/i,
      'operator': /[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
      'punctuation': /[{}[\];(),.:]/
    };
    Prism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;
    Prism.languages.py = Prism.languages.python;
    /***/
  },

  /***/
  "./node_modules/prismjs/components/prism-sass.js":
  /*!*******************************************************!*\
    !*** ./node_modules/prismjs/components/prism-sass.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismSassJs(module, exports) {
    (function (Prism) {
      Prism.languages.sass = Prism.languages.extend('css', {
        // Sass comments don't need to be closed, only indented
        'comment': {
          pattern: /^([ \t]*)\/[\/*].*(?:(?:\r?\n|\r)\1[ \t]+.+)*/m,
          lookbehind: true
        }
      });
      Prism.languages.insertBefore('sass', 'atrule', {
        // We want to consume the whole line
        'atrule-line': {
          // Includes support for = and + shortcuts
          pattern: /^(?:[ \t]*)[@+=].+/m,
          inside: {
            'atrule': /(?:@[\w-]+|[+=])/m
          }
        }
      });
      delete Prism.languages.sass.atrule;
      var variable = /\$[-\w]+|#\{\$[-\w]+\}/;
      var operator = [/[+*\/%]|[=!]=|<=?|>=?|\b(?:and|or|not)\b/, {
        pattern: /(\s+)-(?=\s)/,
        lookbehind: true
      }];
      Prism.languages.insertBefore('sass', 'property', {
        // We want to consume the whole line
        'variable-line': {
          pattern: /^[ \t]*\$.+/m,
          inside: {
            'punctuation': /:/,
            'variable': variable,
            'operator': operator
          }
        },
        // We want to consume the whole line
        'property-line': {
          pattern: /^[ \t]*(?:[^:\s]+ *:.*|:[^:\s]+.*)/m,
          inside: {
            'property': [/[^:\s]+(?=\s*:)/, {
              pattern: /(:)[^:\s]+/,
              lookbehind: true
            }],
            'punctuation': /:/,
            'variable': variable,
            'operator': operator,
            'important': Prism.languages.sass.important
          }
        }
      });
      delete Prism.languages.sass.property;
      delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,
      // what's left should be selectors

      Prism.languages.insertBefore('sass', 'punctuation', {
        'selector': {
          pattern: /([ \t]*)\S(?:,?[^,\r\n]+)*(?:,(?:\r?\n|\r)\1[ \t]+\S(?:,?[^,\r\n]+)*)*/,
          lookbehind: true
        }
      });
    })(Prism);
    /***/

  },

  /***/
  "./node_modules/prismjs/components/prism-sql.js":
  /*!******************************************************!*\
    !*** ./node_modules/prismjs/components/prism-sql.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismSqlJs(module, exports) {
    Prism.languages.sql = {
      'comment': {
        pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,
        lookbehind: true
      },
      'variable': [{
        pattern: /@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,
        greedy: true
      }, /@[\w.$]+/],
      'string': {
        pattern: /(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,
        greedy: true,
        lookbehind: true
      },
      'function': /\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i,
      // Should we highlight user defined functions too?
      'keyword': /\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,
      'boolean': /\b(?:TRUE|FALSE|NULL)\b/i,
      'number': /\b0x[\da-f]+\b|\b\d+\.?\d*|\B\.\d+\b/i,
      'operator': /[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,
      'punctuation': /[;[\]()`,.]/
    };
    /***/
  },

  /***/
  "./node_modules/prismjs/components/prism-typescript.js":
  /*!*************************************************************!*\
    !*** ./node_modules/prismjs/components/prism-typescript.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismTypescriptJs(module, exports) {
    Prism.languages.typescript = Prism.languages.extend('javascript', {
      // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words
      'keyword': /\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|undefined|var|void|while|with|yield)\b/,
      'builtin': /\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\b/
    });
    Prism.languages.ts = Prism.languages.typescript;
    /***/
  },

  /***/
  "./node_modules/prismjs/components/prism-vim.js":
  /*!******************************************************!*\
    !*** ./node_modules/prismjs/components/prism-vim.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismVimJs(module, exports) {
    Prism.languages.vim = {
      'string': /"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\r\n]|'')*'/,
      'comment': /".*/,
      'function': /\w+(?=\()/,
      'keyword': /\b(?:ab|abbreviate|abc|abclear|abo|aboveleft|al|all|arga|argadd|argd|argdelete|argdo|arge|argedit|argg|argglobal|argl|arglocal|ar|args|argu|argument|as|ascii|bad|badd|ba|ball|bd|bdelete|be|bel|belowright|bf|bfirst|bl|blast|bm|bmodified|bn|bnext|bN|bNext|bo|botright|bp|bprevious|brea|break|breaka|breakadd|breakd|breakdel|breakl|breaklist|br|brewind|bro|browse|bufdo|b|buffer|buffers|bun|bunload|bw|bwipeout|ca|cabbrev|cabc|cabclear|caddb|caddbuffer|cad|caddexpr|caddf|caddfile|cal|call|cat|catch|cb|cbuffer|cc|ccl|cclose|cd|ce|center|cex|cexpr|cf|cfile|cfir|cfirst|cgetb|cgetbuffer|cgete|cgetexpr|cg|cgetfile|c|change|changes|chd|chdir|che|checkpath|checkt|checktime|cla|clast|cl|clist|clo|close|cmapc|cmapclear|cnew|cnewer|cn|cnext|cN|cNext|cnf|cnfile|cNfcNfile|cnorea|cnoreabbrev|col|colder|colo|colorscheme|comc|comclear|comp|compiler|conf|confirm|con|continue|cope|copen|co|copy|cpf|cpfile|cp|cprevious|cq|cquit|cr|crewind|cuna|cunabbrev|cu|cunmap|cw|cwindow|debugg|debuggreedy|delc|delcommand|d|delete|delf|delfunction|delm|delmarks|diffg|diffget|diffoff|diffpatch|diffpu|diffput|diffsplit|diffthis|diffu|diffupdate|dig|digraphs|di|display|dj|djump|dl|dlist|dr|drop|ds|dsearch|dsp|dsplit|earlier|echoe|echoerr|echom|echomsg|echon|e|edit|el|else|elsei|elseif|em|emenu|endfo|endfor|endf|endfunction|endfun|en|endif|endt|endtry|endw|endwhile|ene|enew|ex|exi|exit|exu|exusage|f|file|files|filetype|fina|finally|fin|find|fini|finish|fir|first|fix|fixdel|fo|fold|foldc|foldclose|folddoc|folddoclosed|foldd|folddoopen|foldo|foldopen|for|fu|fun|function|go|goto|gr|grep|grepa|grepadd|ha|hardcopy|h|help|helpf|helpfind|helpg|helpgrep|helpt|helptags|hid|hide|his|history|ia|iabbrev|iabc|iabclear|if|ij|ijump|il|ilist|imapc|imapclear|in|inorea|inoreabbrev|isearch|isp|isplit|iuna|iunabbrev|iu|iunmap|j|join|ju|jumps|k|keepalt|keepj|keepjumps|kee|keepmarks|laddb|laddbuffer|lad|laddexpr|laddf|laddfile|lan|language|la|last|later|lb|lbuffer|lc|lcd|lch|lchdir|lcl|lclose|let|left|lefta|leftabove|lex|lexpr|lf|lfile|lfir|lfirst|lgetb|lgetbuffer|lgete|lgetexpr|lg|lgetfile|lgr|lgrep|lgrepa|lgrepadd|lh|lhelpgrep|l|list|ll|lla|llast|lli|llist|lmak|lmake|lm|lmap|lmapc|lmapclear|lnew|lnewer|lne|lnext|lN|lNext|lnf|lnfile|lNf|lNfile|ln|lnoremap|lo|loadview|loc|lockmarks|lockv|lockvar|lol|lolder|lop|lopen|lpf|lpfile|lp|lprevious|lr|lrewind|ls|lt|ltag|lu|lunmap|lv|lvimgrep|lvimgrepa|lvimgrepadd|lw|lwindow|mak|make|ma|mark|marks|mat|match|menut|menutranslate|mk|mkexrc|mks|mksession|mksp|mkspell|mkvie|mkview|mkv|mkvimrc|mod|mode|m|move|mzf|mzfile|mz|mzscheme|nbkey|new|n|next|N|Next|nmapc|nmapclear|noh|nohlsearch|norea|noreabbrev|nu|number|nun|nunmap|omapc|omapclear|on|only|o|open|opt|options|ou|ounmap|pc|pclose|ped|pedit|pe|perl|perld|perldo|po|pop|popu|popup|pp|ppop|pre|preserve|prev|previous|p|print|P|Print|profd|profdel|prof|profile|promptf|promptfind|promptr|promptrepl|ps|psearch|pta|ptag|ptf|ptfirst|ptj|ptjump|ptl|ptlast|ptn|ptnext|ptN|ptNext|ptp|ptprevious|ptr|ptrewind|pts|ptselect|pu|put|pw|pwd|pyf|pyfile|py|python|qa|qall|q|quit|quita|quitall|r|read|rec|recover|redi|redir|red|redo|redr|redraw|redraws|redrawstatus|reg|registers|res|resize|ret|retab|retu|return|rew|rewind|ri|right|rightb|rightbelow|rub|ruby|rubyd|rubydo|rubyf|rubyfile|ru|runtime|rv|rviminfo|sal|sall|san|sandbox|sa|sargument|sav|saveas|sba|sball|sbf|sbfirst|sbl|sblast|sbm|sbmodified|sbn|sbnext|sbN|sbNext|sbp|sbprevious|sbr|sbrewind|sb|sbuffer|scripte|scriptencoding|scrip|scriptnames|se|set|setf|setfiletype|setg|setglobal|setl|setlocal|sf|sfind|sfir|sfirst|sh|shell|sign|sil|silent|sim|simalt|sla|slast|sl|sleep|sm|smagic|sm|smap|smapc|smapclear|sme|smenu|sn|snext|sN|sNext|sni|sniff|sno|snomagic|snor|snoremap|snoreme|snoremenu|sor|sort|so|source|spelld|spelldump|spe|spellgood|spelli|spellinfo|spellr|spellrepall|spellu|spellundo|spellw|spellwrong|sp|split|spr|sprevious|sre|srewind|sta|stag|startg|startgreplace|star|startinsert|startr|startreplace|stj|stjump|st|stop|stopi|stopinsert|sts|stselect|sun|sunhide|sunm|sunmap|sus|suspend|sv|sview|syncbind|t|tab|tabc|tabclose|tabd|tabdo|tabe|tabedit|tabf|tabfind|tabfir|tabfirst|tabl|tablast|tabm|tabmove|tabnew|tabn|tabnext|tabN|tabNext|tabo|tabonly|tabp|tabprevious|tabr|tabrewind|tabs|ta|tag|tags|tc|tcl|tcld|tcldo|tclf|tclfile|te|tearoff|tf|tfirst|th|throw|tj|tjump|tl|tlast|tm|tm|tmenu|tn|tnext|tN|tNext|to|topleft|tp|tprevious|tr|trewind|try|ts|tselect|tu|tu|tunmenu|una|unabbreviate|u|undo|undoj|undojoin|undol|undolist|unh|unhide|unlet|unlo|unlockvar|unm|unmap|up|update|verb|verbose|ve|version|vert|vertical|vie|view|vim|vimgrep|vimgrepa|vimgrepadd|vi|visual|viu|viusage|vmapc|vmapclear|vne|vnew|vs|vsplit|vu|vunmap|wa|wall|wh|while|winc|wincmd|windo|winp|winpos|win|winsize|wn|wnext|wN|wNext|wp|wprevious|wq|wqa|wqall|w|write|ws|wsverb|wv|wviminfo|X|xa|xall|x|xit|xm|xmap|xmapc|xmapclear|xme|xmenu|XMLent|XMLns|xn|xnoremap|xnoreme|xnoremenu|xu|xunmap|y|yank)\b/,
      'builtin': /\b(?:autocmd|acd|ai|akm|aleph|allowrevins|altkeymap|ambiwidth|ambw|anti|antialias|arab|arabic|arabicshape|ari|arshape|autochdir|autoindent|autoread|autowrite|autowriteall|aw|awa|background|backspace|backup|backupcopy|backupdir|backupext|backupskip|balloondelay|ballooneval|balloonexpr|bdir|bdlay|beval|bex|bexpr|bg|bh|bin|binary|biosk|bioskey|bk|bkc|bomb|breakat|brk|browsedir|bs|bsdir|bsk|bt|bufhidden|buflisted|buftype|casemap|ccv|cdpath|cedit|cfu|ch|charconvert|ci|cin|cindent|cink|cinkeys|cino|cinoptions|cinw|cinwords|clipboard|cmdheight|cmdwinheight|cmp|cms|columns|com|comments|commentstring|compatible|complete|completefunc|completeopt|consk|conskey|copyindent|cot|cpo|cpoptions|cpt|cscopepathcomp|cscopeprg|cscopequickfix|cscopetag|cscopetagorder|cscopeverbose|cspc|csprg|csqf|cst|csto|csverb|cuc|cul|cursorcolumn|cursorline|cwh|debug|deco|def|define|delcombine|dex|dg|dict|dictionary|diff|diffexpr|diffopt|digraph|dip|dir|directory|dy|ea|ead|eadirection|eb|ed|edcompatible|ef|efm|ei|ek|enc|encoding|endofline|eol|ep|equalalways|equalprg|errorbells|errorfile|errorformat|esckeys|et|eventignore|expandtab|exrc|fcl|fcs|fdc|fde|fdi|fdl|fdls|fdm|fdn|fdo|fdt|fen|fenc|fencs|fex|ff|ffs|fileencoding|fileencodings|fileformat|fileformats|fillchars|fk|fkmap|flp|fml|fmr|foldcolumn|foldenable|foldexpr|foldignore|foldlevel|foldlevelstart|foldmarker|foldmethod|foldminlines|foldnestmax|foldtext|formatexpr|formatlistpat|formatoptions|formatprg|fp|fs|fsync|ft|gcr|gd|gdefault|gfm|gfn|gfs|gfw|ghr|gp|grepformat|grepprg|gtl|gtt|guicursor|guifont|guifontset|guifontwide|guiheadroom|guioptions|guipty|guitablabel|guitabtooltip|helpfile|helpheight|helplang|hf|hh|hi|hidden|highlight|hk|hkmap|hkmapp|hkp|hl|hlg|hls|hlsearch|ic|icon|iconstring|ignorecase|im|imactivatekey|imak|imc|imcmdline|imd|imdisable|imi|iminsert|ims|imsearch|inc|include|includeexpr|incsearch|inde|indentexpr|indentkeys|indk|inex|inf|infercase|insertmode|isf|isfname|isi|isident|isk|iskeyword|isprint|joinspaces|js|key|keymap|keymodel|keywordprg|km|kmp|kp|langmap|langmenu|laststatus|lazyredraw|lbr|lcs|linebreak|lines|linespace|lisp|lispwords|listchars|loadplugins|lpl|lsp|lz|macatsui|magic|makeef|makeprg|matchpairs|matchtime|maxcombine|maxfuncdepth|maxmapdepth|maxmem|maxmempattern|maxmemtot|mco|mef|menuitems|mfd|mh|mis|mkspellmem|ml|mls|mm|mmd|mmp|mmt|modeline|modelines|modifiable|modified|more|mouse|mousef|mousefocus|mousehide|mousem|mousemodel|mouses|mouseshape|mouset|mousetime|mp|mps|msm|mzq|mzquantum|nf|nrformats|numberwidth|nuw|odev|oft|ofu|omnifunc|opendevice|operatorfunc|opfunc|osfiletype|pa|para|paragraphs|paste|pastetoggle|patchexpr|patchmode|path|pdev|penc|pex|pexpr|pfn|ph|pheader|pi|pm|pmbcs|pmbfn|popt|preserveindent|previewheight|previewwindow|printdevice|printencoding|printexpr|printfont|printheader|printmbcharset|printmbfont|printoptions|prompt|pt|pumheight|pvh|pvw|qe|quoteescape|readonly|remap|report|restorescreen|revins|rightleft|rightleftcmd|rl|rlc|ro|rs|rtp|ruf|ruler|rulerformat|runtimepath|sbo|sc|scb|scr|scroll|scrollbind|scrolljump|scrolloff|scrollopt|scs|sect|sections|secure|sel|selection|selectmode|sessionoptions|sft|shcf|shellcmdflag|shellpipe|shellquote|shellredir|shellslash|shelltemp|shelltype|shellxquote|shiftround|shiftwidth|shm|shortmess|shortname|showbreak|showcmd|showfulltag|showmatch|showmode|showtabline|shq|si|sidescroll|sidescrolloff|siso|sj|slm|smartcase|smartindent|smarttab|smc|smd|softtabstop|sol|spc|spell|spellcapcheck|spellfile|spelllang|spellsuggest|spf|spl|splitbelow|splitright|sps|sr|srr|ss|ssl|ssop|stal|startofline|statusline|stl|stmp|su|sua|suffixes|suffixesadd|sw|swapfile|swapsync|swb|swf|switchbuf|sws|sxq|syn|synmaxcol|syntax|tabline|tabpagemax|tabstop|tagbsearch|taglength|tagrelative|tagstack|tal|tb|tbi|tbidi|tbis|tbs|tenc|term|termbidi|termencoding|terse|textauto|textmode|textwidth|tgst|thesaurus|tildeop|timeout|timeoutlen|title|titlelen|titleold|titlestring|toolbar|toolbariconsize|top|tpm|tsl|tsr|ttimeout|ttimeoutlen|ttm|tty|ttybuiltin|ttyfast|ttym|ttymouse|ttyscroll|ttytype|tw|tx|uc|ul|undolevels|updatecount|updatetime|ut|vb|vbs|vdir|verbosefile|vfile|viewdir|viewoptions|viminfo|virtualedit|visualbell|vop|wak|warn|wb|wc|wcm|wd|weirdinvert|wfh|wfw|whichwrap|wi|wig|wildchar|wildcharm|wildignore|wildmenu|wildmode|wildoptions|wim|winaltkeys|window|winfixheight|winfixwidth|winheight|winminheight|winminwidth|winwidth|wiv|wiw|wm|wmh|wmnu|wmw|wop|wrap|wrapmargin|wrapscan|writeany|writebackup|writedelay|ww|noacd|noai|noakm|noallowrevins|noaltkeymap|noanti|noantialias|noar|noarab|noarabic|noarabicshape|noari|noarshape|noautochdir|noautoindent|noautoread|noautowrite|noautowriteall|noaw|noawa|nobackup|noballooneval|nobeval|nobin|nobinary|nobiosk|nobioskey|nobk|nobl|nobomb|nobuflisted|nocf|noci|nocin|nocindent|nocompatible|noconfirm|noconsk|noconskey|nocopyindent|nocp|nocscopetag|nocscopeverbose|nocst|nocsverb|nocuc|nocul|nocursorcolumn|nocursorline|nodeco|nodelcombine|nodg|nodiff|nodigraph|nodisable|noea|noeb|noed|noedcompatible|noek|noendofline|noeol|noequalalways|noerrorbells|noesckeys|noet|noex|noexpandtab|noexrc|nofen|nofk|nofkmap|nofoldenable|nogd|nogdefault|noguipty|nohid|nohidden|nohk|nohkmap|nohkmapp|nohkp|nohls|noic|noicon|noignorecase|noim|noimc|noimcmdline|noimd|noincsearch|noinf|noinfercase|noinsertmode|nois|nojoinspaces|nojs|nolazyredraw|nolbr|nolinebreak|nolisp|nolist|noloadplugins|nolpl|nolz|noma|nomacatsui|nomagic|nomh|noml|nomod|nomodeline|nomodifiable|nomodified|nomore|nomousef|nomousefocus|nomousehide|nonu|nonumber|noodev|noopendevice|nopaste|nopi|nopreserveindent|nopreviewwindow|noprompt|nopvw|noreadonly|noremap|norestorescreen|norevins|nori|norightleft|norightleftcmd|norl|norlc|noro|nors|noru|noruler|nosb|nosc|noscb|noscrollbind|noscs|nosecure|nosft|noshellslash|noshelltemp|noshiftround|noshortname|noshowcmd|noshowfulltag|noshowmatch|noshowmode|nosi|nosm|nosmartcase|nosmartindent|nosmarttab|nosmd|nosn|nosol|nospell|nosplitbelow|nosplitright|nospr|nosr|nossl|nosta|nostartofline|nostmp|noswapfile|noswf|nota|notagbsearch|notagrelative|notagstack|notbi|notbidi|notbs|notermbidi|noterse|notextauto|notextmode|notf|notgst|notildeop|notimeout|notitle|noto|notop|notr|nottimeout|nottybuiltin|nottyfast|notx|novb|novisualbell|nowa|nowarn|nowb|noweirdinvert|nowfh|nowfw|nowildmenu|nowinfixheight|nowinfixwidth|nowiv|nowmnu|nowrap|nowrapscan|nowrite|nowriteany|nowritebackup|nows|invacd|invai|invakm|invallowrevins|invaltkeymap|invanti|invantialias|invar|invarab|invarabic|invarabicshape|invari|invarshape|invautochdir|invautoindent|invautoread|invautowrite|invautowriteall|invaw|invawa|invbackup|invballooneval|invbeval|invbin|invbinary|invbiosk|invbioskey|invbk|invbl|invbomb|invbuflisted|invcf|invci|invcin|invcindent|invcompatible|invconfirm|invconsk|invconskey|invcopyindent|invcp|invcscopetag|invcscopeverbose|invcst|invcsverb|invcuc|invcul|invcursorcolumn|invcursorline|invdeco|invdelcombine|invdg|invdiff|invdigraph|invdisable|invea|inveb|inved|invedcompatible|invek|invendofline|inveol|invequalalways|inverrorbells|invesckeys|invet|invex|invexpandtab|invexrc|invfen|invfk|invfkmap|invfoldenable|invgd|invgdefault|invguipty|invhid|invhidden|invhk|invhkmap|invhkmapp|invhkp|invhls|invhlsearch|invic|invicon|invignorecase|invim|invimc|invimcmdline|invimd|invincsearch|invinf|invinfercase|invinsertmode|invis|invjoinspaces|invjs|invlazyredraw|invlbr|invlinebreak|invlisp|invlist|invloadplugins|invlpl|invlz|invma|invmacatsui|invmagic|invmh|invml|invmod|invmodeline|invmodifiable|invmodified|invmore|invmousef|invmousefocus|invmousehide|invnu|invnumber|invodev|invopendevice|invpaste|invpi|invpreserveindent|invpreviewwindow|invprompt|invpvw|invreadonly|invremap|invrestorescreen|invrevins|invri|invrightleft|invrightleftcmd|invrl|invrlc|invro|invrs|invru|invruler|invsb|invsc|invscb|invscrollbind|invscs|invsecure|invsft|invshellslash|invshelltemp|invshiftround|invshortname|invshowcmd|invshowfulltag|invshowmatch|invshowmode|invsi|invsm|invsmartcase|invsmartindent|invsmarttab|invsmd|invsn|invsol|invspell|invsplitbelow|invsplitright|invspr|invsr|invssl|invsta|invstartofline|invstmp|invswapfile|invswf|invta|invtagbsearch|invtagrelative|invtagstack|invtbi|invtbidi|invtbs|invtermbidi|invterse|invtextauto|invtextmode|invtf|invtgst|invtildeop|invtimeout|invtitle|invto|invtop|invtr|invttimeout|invttybuiltin|invttyfast|invtx|invvb|invvisualbell|invwa|invwarn|invwb|invweirdinvert|invwfh|invwfw|invwildmenu|invwinfixheight|invwinfixwidth|invwiv|invwmnu|invwrap|invwrapscan|invwrite|invwriteany|invwritebackup|invws|t_AB|t_AF|t_al|t_AL|t_bc|t_cd|t_ce|t_Ce|t_cl|t_cm|t_Co|t_cs|t_Cs|t_CS|t_CV|t_da|t_db|t_dl|t_DL|t_EI|t_F1|t_F2|t_F3|t_F4|t_F5|t_F6|t_F7|t_F8|t_F9|t_fs|t_IE|t_IS|t_k1|t_K1|t_k2|t_k3|t_K3|t_k4|t_K4|t_k5|t_K5|t_k6|t_K6|t_k7|t_K7|t_k8|t_K8|t_k9|t_K9|t_KA|t_kb|t_kB|t_KB|t_KC|t_kd|t_kD|t_KD|t_ke|t_KE|t_KF|t_KG|t_kh|t_KH|t_kI|t_KI|t_KJ|t_KK|t_kl|t_KL|t_kN|t_kP|t_kr|t_ks|t_ku|t_le|t_mb|t_md|t_me|t_mr|t_ms|t_nd|t_op|t_RI|t_RV|t_Sb|t_se|t_Sf|t_SI|t_so|t_sr|t_te|t_ti|t_ts|t_ue|t_us|t_ut|t_vb|t_ve|t_vi|t_vs|t_WP|t_WS|t_xs|t_ZH|t_ZR)\b/,
      'number': /\b(?:0x[\da-f]+|\d+(?:\.\d+)?)\b/i,
      'operator': /\|\||&&|[-+.]=?|[=!](?:[=~][#?]?)?|[<>]=?[#?]?|[*\/%?]|\b(?:is(?:not)?)\b/,
      'punctuation': /[{}[\](),;:]/
    };
    /***/
  },

  /***/
  "./node_modules/prismjs/components/prism-yaml.js":
  /*!*******************************************************!*\
    !*** ./node_modules/prismjs/components/prism-yaml.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsComponentsPrismYamlJs(module, exports) {
    (function (Prism) {
      // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property
      // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node
      var anchorOrAlias = /[*&][^\s[\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property

      var tag = /!(?:<[\w\-%#;/?:@&=+$,.!~*'()[\]]+>|(?:[a-zA-Z\d-]*!)?[\w\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)

      var properties = '(?:' + tag.source + '(?:[ \t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \t]+' + tag.source + ')?)';
      /**
       *
       * @param {string} value
       * @param {string} [flags]
       * @returns {RegExp}
       */

      function createValuePattern(value, flags) {
        flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag

        var pattern = /([:\-,[{]\s*(?:\s<<prop>>[ \t]+)?)(?:<<value>>)(?=[ \t]*(?:$|,|]|}|\s*#))/.source.replace(/<<prop>>/g, function () {
          return properties;
        }).replace(/<<value>>/g, function () {
          return value;
        });
        return RegExp(pattern, flags);
      }

      Prism.languages.yaml = {
        'scalar': {
          pattern: RegExp(/([\-:]\s*(?:\s<<prop>>[ \t]+)?[|>])[ \t]*(?:((?:\r?\n|\r)[ \t]+)[^\r\n]+(?:\2[^\r\n]+)*)/.source.replace(/<<prop>>/g, function () {
            return properties;
          })),
          lookbehind: true,
          alias: 'string'
        },
        'comment': /#.*/,
        'key': {
          pattern: RegExp(/((?:^|[:\-,[{\r\n?])[ \t]*(?:<<prop>>[ \t]+)?)[^\r\n{[\]},#\s]+?(?=\s*:\s)/.source.replace(/<<prop>>/g, function () {
            return properties;
          })),
          lookbehind: true,
          alias: 'atrule'
        },
        'directive': {
          pattern: /(^[ \t]*)%.+/m,
          lookbehind: true,
          alias: 'important'
        },
        'datetime': {
          pattern: createValuePattern(/\d{4}-\d\d?-\d\d?(?:[tT]|[ \t]+)\d\d?:\d{2}:\d{2}(?:\.\d*)?[ \t]*(?:Z|[-+]\d\d?(?::\d{2})?)?|\d{4}-\d{2}-\d{2}|\d\d?:\d{2}(?::\d{2}(?:\.\d*)?)?/.source),
          lookbehind: true,
          alias: 'number'
        },
        'boolean': {
          pattern: createValuePattern(/true|false/.source, 'i'),
          lookbehind: true,
          alias: 'important'
        },
        'null': {
          pattern: createValuePattern(/null|~/.source, 'i'),
          lookbehind: true,
          alias: 'important'
        },
        'string': {
          // \2 because of the lookbehind group
          pattern: createValuePattern(/("|')(?:(?!\2)[^\\\r\n]|\\.)*\2/.source),
          lookbehind: true,
          greedy: true
        },
        'number': {
          pattern: createValuePattern(/[+-]?(?:0x[\da-f]+|0o[0-7]+|(?:\d+\.?\d*|\.?\d+)(?:e[+-]?\d+)?|\.inf|\.nan)/.source, 'i'),
          lookbehind: true
        },
        'tag': tag,
        'important': anchorOrAlias,
        'punctuation': /---|[:[\]{}\-,|>?]|\.\.\./
      };
      Prism.languages.yml = Prism.languages.yaml;
    })(Prism);
    /***/

  },

  /***/
  "./node_modules/prismjs/plugins/line-highlight/prism-line-highlight.js":
  /*!*****************************************************************************!*\
    !*** ./node_modules/prismjs/plugins/line-highlight/prism-line-highlight.js ***!
    \*****************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsPluginsLineHighlightPrismLineHighlightJs(module, exports) {
    (function () {
      if (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {
        return;
      }

      function $$(expr, con) {
        return Array.prototype.slice.call((con || document).querySelectorAll(expr));
      }

      function hasClass(element, className) {
        className = " " + className + " ";
        return (" " + element.className + " ").replace(/[\n\t]/g, " ").indexOf(className) > -1;
      }

      function callFunction(func) {
        func();
      } // Some browsers round the line-height, others don't.
      // We need to test for it to position the elements properly.


      var isLineHeightRounded = function () {
        var res;
        return function () {
          if (typeof res === 'undefined') {
            var d = document.createElement('div');
            d.style.fontSize = '13px';
            d.style.lineHeight = '1.5';
            d.style.padding = 0;
            d.style.border = 0;
            d.innerHTML = '&nbsp;<br />&nbsp;';
            document.body.appendChild(d); // Browsers that round the line-height should have offsetHeight === 38
            // The others should have 39.

            res = d.offsetHeight === 38;
            document.body.removeChild(d);
          }

          return res;
        };
      }();
      /**
       * Highlights the lines of the given pre.
       *
       * This function is split into a DOM measuring and mutate phase to improve performance.
       * The returned function mutates the DOM when called.
       *
       * @param {HTMLElement} pre
       * @param {string} [lines]
       * @param {string} [classes='']
       * @returns {() => void}
       */


      function highlightLines(pre, lines, classes) {
        lines = typeof lines === 'string' ? lines : pre.getAttribute('data-line');
        var ranges = lines.replace(/\s+/g, '').split(',');
        var offset = +pre.getAttribute('data-line-offset') || 0;
        var parseMethod = isLineHeightRounded() ? parseInt : parseFloat;
        var lineHeight = parseMethod(getComputedStyle(pre).lineHeight);
        var hasLineNumbers = hasClass(pre, 'line-numbers');
        var parentElement = hasLineNumbers ? pre : pre.querySelector('code') || pre;
        var mutateActions =
        /** @type {(() => void)[]} */
        [];
        ranges.forEach(function (currentRange) {
          var range = currentRange.split('-');
          var start = +range[0];
          var end = +range[1] || start;
          var line = pre.querySelector('.line-highlight[data-range="' + currentRange + '"]') || document.createElement('div');
          mutateActions.push(function () {
            line.setAttribute('aria-hidden', 'true');
            line.setAttribute('data-range', currentRange);
            line.className = (classes || '') + ' line-highlight';
          }); // if the line-numbers plugin is enabled, then there is no reason for this plugin to display the line numbers

          if (hasLineNumbers && Prism.plugins.lineNumbers) {
            var startNode = Prism.plugins.lineNumbers.getLine(pre, start);
            var endNode = Prism.plugins.lineNumbers.getLine(pre, end);

            if (startNode) {
              var top = startNode.offsetTop + 'px';
              mutateActions.push(function () {
                line.style.top = top;
              });
            }

            if (endNode) {
              var height = endNode.offsetTop - startNode.offsetTop + endNode.offsetHeight + 'px';
              mutateActions.push(function () {
                line.style.height = height;
              });
            }
          } else {
            mutateActions.push(function () {
              line.setAttribute('data-start', start);

              if (end > start) {
                line.setAttribute('data-end', end);
              }

              line.style.top = (start - offset - 1) * lineHeight + 'px';
              line.textContent = new Array(end - start + 2).join(' \n');
            });
          }

          mutateActions.push(function () {
            // allow this to play nicely with the line-numbers plugin
            // need to attack to pre as when line-numbers is enabled, the code tag is relatively which screws up the positioning
            parentElement.appendChild(line);
          });
        });
        return function () {
          mutateActions.forEach(callFunction);
        };
      }

      function applyHash() {
        var hash = location.hash.slice(1); // Remove pre-existing temporary lines

        $$('.temporary.line-highlight').forEach(function (line) {
          line.parentNode.removeChild(line);
        });
        var range = (hash.match(/\.([\d,-]+)$/) || [, ''])[1];

        if (!range || document.getElementById(hash)) {
          return;
        }

        var id = hash.slice(0, hash.lastIndexOf('.')),
            pre = document.getElementById(id);

        if (!pre) {
          return;
        }

        if (!pre.hasAttribute('data-line')) {
          pre.setAttribute('data-line', '');
        }

        var mutateDom = highlightLines(pre, range, 'temporary ');
        mutateDom();
        document.querySelector('.temporary.line-highlight').scrollIntoView();
      }

      var fakeTimer = 0; // Hack to limit the number of times applyHash() runs

      Prism.hooks.add('before-sanity-check', function (env) {
        var pre = env.element.parentNode;
        var lines = pre && pre.getAttribute('data-line');

        if (!pre || !lines || !/pre/i.test(pre.nodeName)) {
          return;
        }
        /*
         * Cleanup for other plugins (e.g. autoloader).
         *
         * Sometimes <code> blocks are highlighted multiple times. It is necessary
         * to cleanup any left-over tags, because the whitespace inside of the <div>
         * tags change the content of the <code> tag.
         */


        var num = 0;
        $$('.line-highlight', pre).forEach(function (line) {
          num += line.textContent.length;
          line.parentNode.removeChild(line);
        }); // Remove extra whitespace

        if (num && /^( \n)+$/.test(env.code.slice(-num))) {
          env.code = env.code.slice(0, -num);
        }
      });
      Prism.hooks.add('complete', function completeHook(env) {
        var pre = env.element.parentNode;
        var lines = pre && pre.getAttribute('data-line');

        if (!pre || !lines || !/pre/i.test(pre.nodeName)) {
          return;
        }

        clearTimeout(fakeTimer);
        var hasLineNumbers = Prism.plugins.lineNumbers;
        var isLineNumbersLoaded = env.plugins && env.plugins.lineNumbers;

        if (hasClass(pre, 'line-numbers') && hasLineNumbers && !isLineNumbersLoaded) {
          Prism.hooks.add('line-numbers', completeHook);
        } else {
          var mutateDom = highlightLines(pre, lines);
          mutateDom();
          fakeTimer = setTimeout(applyHash, 1);
        }
      });
      window.addEventListener('hashchange', applyHash);
      window.addEventListener('resize', function () {
        var actions = [];
        $$('pre[data-line]').forEach(function (pre) {
          actions.push(highlightLines(pre));
        });
        actions.forEach(callFunction);
      });
    })();
    /***/

  },

  /***/
  "./node_modules/prismjs/plugins/line-numbers/prism-line-numbers.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/prismjs/plugins/line-numbers/prism-line-numbers.js ***!
    \*************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsPluginsLineNumbersPrismLineNumbersJs(module, exports) {
    (function () {
      if (typeof self === 'undefined' || !self.Prism || !self.document) {
        return;
      }
      /**
       * Plugin name which is used as a class name for <pre> which is activating the plugin
       * @type {String}
       */


      var PLUGIN_NAME = 'line-numbers';
      /**
       * Regular expression used for determining line breaks
       * @type {RegExp}
       */

      var NEW_LINE_EXP = /\n(?!$)/g;
      /**
       * Resizes line numbers spans according to height of line of code
       * @param {Element} element <pre> element
       */

      var _resizeElement = function _resizeElement(element) {
        var codeStyles = getStyles(element);
        var whiteSpace = codeStyles['white-space'];

        if (whiteSpace === 'pre-wrap' || whiteSpace === 'pre-line') {
          var codeElement = element.querySelector('code');
          var lineNumbersWrapper = element.querySelector('.line-numbers-rows');
          var lineNumberSizer = element.querySelector('.line-numbers-sizer');
          var codeLines = codeElement.textContent.split(NEW_LINE_EXP);

          if (!lineNumberSizer) {
            lineNumberSizer = document.createElement('span');
            lineNumberSizer.className = 'line-numbers-sizer';
            codeElement.appendChild(lineNumberSizer);
          }

          lineNumberSizer.style.display = 'block';
          codeLines.forEach(function (line, lineNumber) {
            lineNumberSizer.textContent = line || '\n';
            var lineSize = lineNumberSizer.getBoundingClientRect().height;
            lineNumbersWrapper.children[lineNumber].style.height = lineSize + 'px';
          });
          lineNumberSizer.textContent = '';
          lineNumberSizer.style.display = 'none';
        }
      };
      /**
       * Returns style declarations for the element
       * @param {Element} element
       */


      var getStyles = function getStyles(element) {
        if (!element) {
          return null;
        }

        return window.getComputedStyle ? getComputedStyle(element) : element.currentStyle || null;
      };

      window.addEventListener('resize', function () {
        Array.prototype.forEach.call(document.querySelectorAll('pre.' + PLUGIN_NAME), _resizeElement);
      });
      Prism.hooks.add('complete', function (env) {
        if (!env.code) {
          return;
        }

        var code = env.element;
        var pre = code.parentNode; // works only for <code> wrapped inside <pre> (not inline)

        if (!pre || !/pre/i.test(pre.nodeName)) {
          return;
        } // Abort if line numbers already exists


        if (code.querySelector('.line-numbers-rows')) {
          return;
        }

        var addLineNumbers = false;
        var lineNumbersRegex = /(?:^|\s)line-numbers(?:\s|$)/;

        for (var element = code; element; element = element.parentNode) {
          if (lineNumbersRegex.test(element.className)) {
            addLineNumbers = true;
            break;
          }
        } // only add line numbers if <code> or one of its ancestors has the `line-numbers` class


        if (!addLineNumbers) {
          return;
        } // Remove the class 'line-numbers' from the <code>


        code.className = code.className.replace(lineNumbersRegex, ' '); // Add the class 'line-numbers' to the <pre>

        if (!lineNumbersRegex.test(pre.className)) {
          pre.className += ' line-numbers';
        }

        var match = env.code.match(NEW_LINE_EXP);
        var linesNum = match ? match.length + 1 : 1;
        var lineNumbersWrapper;
        var lines = new Array(linesNum + 1).join('<span></span>');
        lineNumbersWrapper = document.createElement('span');
        lineNumbersWrapper.setAttribute('aria-hidden', 'true');
        lineNumbersWrapper.className = 'line-numbers-rows';
        lineNumbersWrapper.innerHTML = lines;

        if (pre.hasAttribute('data-start')) {
          pre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);
        }

        env.element.appendChild(lineNumbersWrapper);

        _resizeElement(pre);

        Prism.hooks.run('line-numbers', env);
      });
      Prism.hooks.add('line-numbers', function (env) {
        env.plugins = env.plugins || {};
        env.plugins.lineNumbers = true;
      });
      /**
       * Global exports
       */

      Prism.plugins.lineNumbers = {
        /**
         * Get node for provided line number
         * @param {Element} element pre element
         * @param {Number} number line number
         * @return {Element|undefined}
         */
        getLine: function getLine(element, number) {
          if (element.tagName !== 'PRE' || !element.classList.contains(PLUGIN_NAME)) {
            return;
          }

          var lineNumberRows = element.querySelector('.line-numbers-rows');
          var lineNumberStart = parseInt(element.getAttribute('data-start'), 10) || 1;
          var lineNumberEnd = lineNumberStart + (lineNumberRows.children.length - 1);

          if (number < lineNumberStart) {
            number = lineNumberStart;
          }

          if (number > lineNumberEnd) {
            number = lineNumberEnd;
          }

          var lineIndex = number - lineNumberStart;
          return lineNumberRows.children[lineIndex];
        }
      };
    })();
    /***/

  },

  /***/
  "./node_modules/prismjs/prism.js":
  /*!***************************************!*\
    !*** ./node_modules/prismjs/prism.js ***!
    \***************************************/

  /*! no static exports found */

  /***/
  function node_modulesPrismjsPrismJs(module, exports, __webpack_require__) {
    /* **********************************************
         Begin prism-core.js
    ********************************************** */
    var _self = typeof window !== 'undefined' ? window // if in browser
    : typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope ? self // if in worker
    : {} // if in node js
    ;
    /**
     * Prism: Lightweight, robust, elegant syntax highlighting
     * MIT license http://www.opensource.org/licenses/mit-license.php/
     * @author Lea Verou http://lea.verou.me
     */


    var Prism = function (_self) {
      // Private helper vars
      var lang = /\blang(?:uage)?-([\w-]+)\b/i;
      var uniqueId = 0;
      var _ = {
        manual: _self.Prism && _self.Prism.manual,
        disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,
        util: {
          encode: function encode(tokens) {
            if (tokens instanceof Token) {
              return new Token(tokens.type, encode(tokens.content), tokens.alias);
            } else if (Array.isArray(tokens)) {
              return tokens.map(encode);
            } else {
              return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\u00a0/g, ' ');
            }
          },
          type: function type(o) {
            return Object.prototype.toString.call(o).slice(8, -1);
          },
          objId: function objId(obj) {
            if (!obj['__id']) {
              Object.defineProperty(obj, '__id', {
                value: ++uniqueId
              });
            }

            return obj['__id'];
          },
          // Deep clone a language definition (e.g. to extend it)
          clone: function deepClone(o, visited) {
            var clone,
                id,
                type = _.util.type(o);

            visited = visited || {};

            switch (type) {
              case 'Object':
                id = _.util.objId(o);

                if (visited[id]) {
                  return visited[id];
                }

                clone = {};
                visited[id] = clone;

                for (var key in o) {
                  if (o.hasOwnProperty(key)) {
                    clone[key] = deepClone(o[key], visited);
                  }
                }

                return clone;

              case 'Array':
                id = _.util.objId(o);

                if (visited[id]) {
                  return visited[id];
                }

                clone = [];
                visited[id] = clone;
                o.forEach(function (v, i) {
                  clone[i] = deepClone(v, visited);
                });
                return clone;

              default:
                return o;
            }
          },

          /**
           * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.
           *
           * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.
           *
           * @param {Element} element
           * @returns {string}
           */
          getLanguage: function getLanguage(element) {
            while (element && !lang.test(element.className)) {
              element = element.parentElement;
            }

            if (element) {
              return (element.className.match(lang) || [, 'none'])[1].toLowerCase();
            }

            return 'none';
          },

          /**
           * Returns the script element that is currently executing.
           *
           * This does __not__ work for line script element.
           *
           * @returns {HTMLScriptElement | null}
           */
          currentScript: function currentScript() {
            if (typeof document === 'undefined') {
              return null;
            }

            if ('currentScript' in document) {
              return document.currentScript;
            } // IE11 workaround
            // we'll get the src of the current script by parsing IE11's error stack trace
            // this will not work for inline scripts


            try {
              throw new Error();
            } catch (err) {
              // Get file src url from stack. Specifically works with the format of stack traces in IE.
              // A stack will look like this:
              //
              // Error
              //    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)
              //    at Global code (http://localhost/components/prism-core.js:606:1)
              var src = (/at [^(\r\n]*\((.*):.+:.+\)$/i.exec(err.stack) || [])[1];

              if (src) {
                var scripts = document.getElementsByTagName('script');

                for (var i in scripts) {
                  if (scripts[i].src == src) {
                    return scripts[i];
                  }
                }
              }

              return null;
            }
          }
        },
        languages: {
          extend: function extend(id, redef) {
            var lang = _.util.clone(_.languages[id]);

            for (var key in redef) {
              lang[key] = redef[key];
            }

            return lang;
          },

          /**
           * Insert a token before another token in a language literal
           * As this needs to recreate the object (we cannot actually insert before keys in object literals),
           * we cannot just provide an object, we need an object and a key.
           * @param inside The key (or language id) of the parent
           * @param before The key to insert before.
           * @param insert Object with the key/value pairs to insert
           * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.
           */
          insertBefore: function insertBefore(inside, before, insert, root) {
            root = root || _.languages;
            var grammar = root[inside];
            var ret = {};

            for (var token in grammar) {
              if (grammar.hasOwnProperty(token)) {
                if (token == before) {
                  for (var newToken in insert) {
                    if (insert.hasOwnProperty(newToken)) {
                      ret[newToken] = insert[newToken];
                    }
                  }
                } // Do not insert token which also occur in insert. See #1525


                if (!insert.hasOwnProperty(token)) {
                  ret[token] = grammar[token];
                }
              }
            }

            var old = root[inside];
            root[inside] = ret; // Update references in other language definitions

            _.languages.DFS(_.languages, function (key, value) {
              if (value === old && key != inside) {
                this[key] = ret;
              }
            });

            return ret;
          },
          // Traverse a language definition with Depth First Search
          DFS: function DFS(o, callback, type, visited) {
            visited = visited || {};
            var objId = _.util.objId;

            for (var i in o) {
              if (o.hasOwnProperty(i)) {
                callback.call(o, i, o[i], type || i);

                var property = o[i],
                    propertyType = _.util.type(property);

                if (propertyType === 'Object' && !visited[objId(property)]) {
                  visited[objId(property)] = true;
                  DFS(property, callback, null, visited);
                } else if (propertyType === 'Array' && !visited[objId(property)]) {
                  visited[objId(property)] = true;
                  DFS(property, callback, i, visited);
                }
              }
            }
          }
        },
        plugins: {},
        highlightAll: function highlightAll(async, callback) {
          _.highlightAllUnder(document, async, callback);
        },
        highlightAllUnder: function highlightAllUnder(container, async, callback) {
          var env = {
            callback: callback,
            container: container,
            selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
          };

          _.hooks.run('before-highlightall', env);

          env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));

          _.hooks.run('before-all-elements-highlight', env);

          for (var i = 0, element; element = env.elements[i++];) {
            _.highlightElement(element, async === true, env.callback);
          }
        },
        highlightElement: function highlightElement(element, async, callback) {
          // Find language
          var language = _.util.getLanguage(element);

          var grammar = _.languages[language]; // Set language on the element, if not present

          element.className = element.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language; // Set language on the parent, for styling

          var parent = element.parentNode;

          if (parent && parent.nodeName.toLowerCase() === 'pre') {
            parent.className = parent.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language;
          }

          var code = element.textContent;
          var env = {
            element: element,
            language: language,
            grammar: grammar,
            code: code
          };

          function insertHighlightedCode(highlightedCode) {
            env.highlightedCode = highlightedCode;

            _.hooks.run('before-insert', env);

            env.element.innerHTML = env.highlightedCode;

            _.hooks.run('after-highlight', env);

            _.hooks.run('complete', env);

            callback && callback.call(env.element);
          }

          _.hooks.run('before-sanity-check', env);

          if (!env.code) {
            _.hooks.run('complete', env);

            callback && callback.call(env.element);
            return;
          }

          _.hooks.run('before-highlight', env);

          if (!env.grammar) {
            insertHighlightedCode(_.util.encode(env.code));
            return;
          }

          if (async && _self.Worker) {
            var worker = new Worker(_.filename);

            worker.onmessage = function (evt) {
              insertHighlightedCode(evt.data);
            };

            worker.postMessage(JSON.stringify({
              language: env.language,
              code: env.code,
              immediateClose: true
            }));
          } else {
            insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));
          }
        },
        highlight: function highlight(text, grammar, language) {
          var env = {
            code: text,
            grammar: grammar,
            language: language
          };

          _.hooks.run('before-tokenize', env);

          env.tokens = _.tokenize(env.code, env.grammar);

          _.hooks.run('after-tokenize', env);

          return Token.stringify(_.util.encode(env.tokens), env.language);
        },
        tokenize: function tokenize(text, grammar) {
          var rest = grammar.rest;

          if (rest) {
            for (var token in rest) {
              grammar[token] = rest[token];
            }

            delete grammar.rest;
          }

          var tokenList = new LinkedList();
          addAfter(tokenList, tokenList.head, text);
          matchGrammar(text, tokenList, grammar, tokenList.head, 0);
          return toArray(tokenList);
        },
        hooks: {
          all: {},
          add: function add(name, callback) {
            var hooks = _.hooks.all;
            hooks[name] = hooks[name] || [];
            hooks[name].push(callback);
          },
          run: function run(name, env) {
            var callbacks = _.hooks.all[name];

            if (!callbacks || !callbacks.length) {
              return;
            }

            for (var i = 0, callback; callback = callbacks[i++];) {
              callback(env);
            }
          }
        },
        Token: Token
      };
      _self.Prism = _;

      function Token(type, content, alias, matchedStr, greedy) {
        this.type = type;
        this.content = content;
        this.alias = alias; // Copy of the full string this token was created from

        this.length = (matchedStr || '').length | 0;
        this.greedy = !!greedy;
      }

      Token.stringify = function stringify(o, language) {
        if (typeof o == 'string') {
          return o;
        }

        if (Array.isArray(o)) {
          var s = '';
          o.forEach(function (e) {
            s += stringify(e, language);
          });
          return s;
        }

        var env = {
          type: o.type,
          content: stringify(o.content, language),
          tag: 'span',
          classes: ['token', o.type],
          attributes: {},
          language: language
        };
        var aliases = o.alias;

        if (aliases) {
          if (Array.isArray(aliases)) {
            Array.prototype.push.apply(env.classes, aliases);
          } else {
            env.classes.push(aliases);
          }
        }

        _.hooks.run('wrap', env);

        var attributes = '';

        for (var name in env.attributes) {
          attributes += ' ' + name + '="' + (env.attributes[name] || '').replace(/"/g, '&quot;') + '"';
        }

        return '<' + env.tag + ' class="' + env.classes.join(' ') + '"' + attributes + '>' + env.content + '</' + env.tag + '>';
      };
      /**
       * @param {string} text
       * @param {LinkedList<string | Token>} tokenList
       * @param {any} grammar
       * @param {LinkedListNode<string | Token>} startNode
       * @param {number} startPos
       * @param {boolean} [oneshot=false]
       * @param {string} [target]
       */


      function matchGrammar(text, tokenList, grammar, startNode, startPos, oneshot, target) {
        for (var token in grammar) {
          if (!grammar.hasOwnProperty(token) || !grammar[token]) {
            continue;
          }

          var patterns = grammar[token];
          patterns = Array.isArray(patterns) ? patterns : [patterns];

          for (var j = 0; j < patterns.length; ++j) {
            if (target && target == token + ',' + j) {
              return;
            }

            var pattern = patterns[j],
                inside = pattern.inside,
                lookbehind = !!pattern.lookbehind,
                greedy = !!pattern.greedy,
                lookbehindLength = 0,
                alias = pattern.alias;

            if (greedy && !pattern.pattern.global) {
              // Without the global flag, lastIndex won't work
              var flags = pattern.pattern.toString().match(/[imsuy]*$/)[0];
              pattern.pattern = RegExp(pattern.pattern.source, flags + 'g');
            }

            pattern = pattern.pattern || pattern;

            for ( // iterate the token list and keep track of the current token/string position
            var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {
              var str = currentNode.value;

              if (tokenList.length > text.length) {
                // Something went terribly wrong, ABORT, ABORT!
                return;
              }

              if (str instanceof Token) {
                continue;
              }

              var removeCount = 1; // this is the to parameter of removeBetween

              if (greedy && currentNode != tokenList.tail.prev) {
                pattern.lastIndex = pos;
                var match = pattern.exec(text);

                if (!match) {
                  break;
                }

                var from = match.index + (lookbehind && match[1] ? match[1].length : 0);
                var to = match.index + match[0].length;
                var p = pos; // find the node that contains the match

                p += currentNode.value.length;

                while (from >= p) {
                  currentNode = currentNode.next;
                  p += currentNode.value.length;
                } // adjust pos (and p)


                p -= currentNode.value.length;
                pos = p; // the current node is a Token, then the match starts inside another Token, which is invalid

                if (currentNode.value instanceof Token) {
                  continue;
                } // find the last node which is affected by this match


                for (var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === 'string' && !k.prev.value.greedy); k = k.next) {
                  removeCount++;
                  p += k.value.length;
                }

                removeCount--; // replace with the new match

                str = text.slice(pos, p);
                match.index -= pos;
              } else {
                pattern.lastIndex = 0;
                var match = pattern.exec(str);
              }

              if (!match) {
                if (oneshot) {
                  break;
                }

                continue;
              }

              if (lookbehind) {
                lookbehindLength = match[1] ? match[1].length : 0;
              }

              var from = match.index + lookbehindLength,
                  match = match[0].slice(lookbehindLength),
                  to = from + match.length,
                  before = str.slice(0, from),
                  after = str.slice(to);
              var removeFrom = currentNode.prev;

              if (before) {
                removeFrom = addAfter(tokenList, removeFrom, before);
                pos += before.length;
              }

              removeRange(tokenList, removeFrom, removeCount);
              var wrapped = new Token(token, inside ? _.tokenize(match, inside) : match, alias, match, greedy);
              currentNode = addAfter(tokenList, removeFrom, wrapped);

              if (after) {
                addAfter(tokenList, currentNode, after);
              }

              if (removeCount > 1) matchGrammar(text, tokenList, grammar, currentNode.prev, pos, true, token + ',' + j);
              if (oneshot) break;
            }
          }
        }
      }
      /**
       * @typedef LinkedListNode
       * @property {T} value
       * @property {LinkedListNode<T> | null} prev The previous node.
       * @property {LinkedListNode<T> | null} next The next node.
       * @template T
       */

      /**
       * @template T
       */


      function LinkedList() {
        /** @type {LinkedListNode<T>} */
        var head = {
          value: null,
          prev: null,
          next: null
        };
        /** @type {LinkedListNode<T>} */

        var tail = {
          value: null,
          prev: head,
          next: null
        };
        head.next = tail;
        /** @type {LinkedListNode<T>} */

        this.head = head;
        /** @type {LinkedListNode<T>} */

        this.tail = tail;
        this.length = 0;
      }
      /**
       * Adds a new node with the given value to the list.
       * @param {LinkedList<T>} list
       * @param {LinkedListNode<T>} node
       * @param {T} value
       * @returns {LinkedListNode<T>} The added node.
       * @template T
       */


      function addAfter(list, node, value) {
        // assumes that node != list.tail && values.length >= 0
        var next = node.next;
        var newNode = {
          value: value,
          prev: node,
          next: next
        };
        node.next = newNode;
        next.prev = newNode;
        list.length++;
        return newNode;
      }
      /**
       * Removes `count` nodes after the given node. The given node will not be removed.
       * @param {LinkedList<T>} list
       * @param {LinkedListNode<T>} node
       * @param {number} count
       * @template T
       */


      function removeRange(list, node, count) {
        var next = node.next;

        for (var i = 0; i < count && next !== list.tail; i++) {
          next = next.next;
        }

        node.next = next;
        next.prev = node;
        list.length -= i;
      }
      /**
       * @param {LinkedList<T>} list
       * @returns {T[]}
       * @template T
       */


      function toArray(list) {
        var array = [];
        var node = list.head.next;

        while (node !== list.tail) {
          array.push(node.value);
          node = node.next;
        }

        return array;
      }

      if (!_self.document) {
        if (!_self.addEventListener) {
          // in Node.js
          return _;
        }

        if (!_.disableWorkerMessageHandler) {
          // In worker
          _self.addEventListener('message', function (evt) {
            var message = JSON.parse(evt.data),
                lang = message.language,
                code = message.code,
                immediateClose = message.immediateClose;

            _self.postMessage(_.highlight(code, _.languages[lang], lang));

            if (immediateClose) {
              _self.close();
            }
          }, false);
        }

        return _;
      } //Get current script and highlight


      var script = _.util.currentScript();

      if (script) {
        _.filename = script.src;

        if (script.hasAttribute('data-manual')) {
          _.manual = true;
        }
      }

      function highlightAutomaticallyCallback() {
        if (!_.manual) {
          _.highlightAll();
        }
      }

      if (!_.manual) {
        // If the document state is "loading", then we'll use DOMContentLoaded.
        // If the document state is "interactive" and the prism.js script is deferred, then we'll also use the
        // DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they
        // might take longer one animation frame to execute which can create a race condition where only some plugins have
        // been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.
        // See https://github.com/PrismJS/prism/issues/2102
        var readyState = document.readyState;

        if (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {
          document.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);
        } else {
          if (window.requestAnimationFrame) {
            window.requestAnimationFrame(highlightAutomaticallyCallback);
          } else {
            window.setTimeout(highlightAutomaticallyCallback, 16);
          }
        }
      }

      return _;
    }(_self);

    if (true && module.exports) {
      module.exports = Prism;
    } // hack for components to work correctly in node.js


    if (typeof global !== 'undefined') {
      global.Prism = Prism;
    }
    /* **********************************************
         Begin prism-markup.js
    ********************************************** */


    Prism.languages.markup = {
      'comment': /<!--[\s\S]*?-->/,
      'prolog': /<\?[\s\S]+?\?>/,
      'doctype': {
        pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:(?!<!--)[^"'\]]|"[^"]*"|'[^']*'|<!--[\s\S]*?-->)*\]\s*)?>/i,
        greedy: true
      },
      'cdata': /<!\[CDATA\[[\s\S]*?]]>/i,
      'tag': {
        pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/i,
        greedy: true,
        inside: {
          'tag': {
            pattern: /^<\/?[^\s>\/]+/i,
            inside: {
              'punctuation': /^<\/?/,
              'namespace': /^[^\s>\/:]+:/
            }
          },
          'attr-value': {
            pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/i,
            inside: {
              'punctuation': [/^=/, {
                pattern: /^(\s*)["']|["']$/,
                lookbehind: true
              }]
            }
          },
          'punctuation': /\/?>/,
          'attr-name': {
            pattern: /[^\s>\/]+/,
            inside: {
              'namespace': /^[^\s>\/:]+:/
            }
          }
        }
      },
      'entity': /&#?[\da-z]{1,8};/i
    };
    Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity']; // Plugin to make entity title show the real entity, idea by Roman Komarov

    Prism.hooks.add('wrap', function (env) {
      if (env.type === 'entity') {
        env.attributes['title'] = env.content.replace(/&amp;/, '&');
      }
    });
    Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {
      /**
       * Adds an inlined language to markup.
       *
       * An example of an inlined language is CSS with `<style>` tags.
       *
       * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
       * case insensitive.
       * @param {string} lang The language key.
       * @example
       * addInlined('style', 'css');
       */
      value: function addInlined(tagName, lang) {
        var includedCdataInside = {};
        includedCdataInside['language-' + lang] = {
          pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
          lookbehind: true,
          inside: Prism.languages[lang]
        };
        includedCdataInside['cdata'] = /^<!\[CDATA\[|\]\]>$/i;
        var inside = {
          'included-cdata': {
            pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
            inside: includedCdataInside
          }
        };
        inside['language-' + lang] = {
          pattern: /[\s\S]+/,
          inside: Prism.languages[lang]
        };
        var def = {};
        def[tagName] = {
          pattern: RegExp(/(<__[\s\S]*?>)(?:<!\[CDATA\[[\s\S]*?\]\]>\s*|[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function () {
            return tagName;
          }), 'i'),
          lookbehind: true,
          greedy: true,
          inside: inside
        };
        Prism.languages.insertBefore('markup', 'cdata', def);
      }
    });
    Prism.languages.xml = Prism.languages.extend('markup', {});
    Prism.languages.html = Prism.languages.markup;
    Prism.languages.mathml = Prism.languages.markup;
    Prism.languages.svg = Prism.languages.markup;
    /* **********************************************
         Begin prism-css.js
    ********************************************** */

    (function (Prism) {
      var string = /("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;
      Prism.languages.css = {
        'comment': /\/\*[\s\S]*?\*\//,
        'atrule': {
          pattern: /@[\w-]+[\s\S]*?(?:;|(?=\s*\{))/,
          inside: {
            'rule': /^@[\w-]+/,
            'selector-function-argument': {
              pattern: /(\bselector\s*\((?!\s*\))\s*)(?:[^()]|\((?:[^()]|\([^()]*\))*\))+?(?=\s*\))/,
              lookbehind: true,
              alias: 'selector'
            } // See rest below

          }
        },
        'url': {
          pattern: RegExp('url\\((?:' + string.source + '|[^\n\r()]*)\\)', 'i'),
          greedy: true,
          inside: {
            'function': /^url/i,
            'punctuation': /^\(|\)$/
          }
        },
        'selector': RegExp('[^{}\\s](?:[^{};"\']|' + string.source + ')*?(?=\\s*\\{)'),
        'string': {
          pattern: string,
          greedy: true
        },
        'property': /[-_a-z\xA0-\uFFFF][-\w\xA0-\uFFFF]*(?=\s*:)/i,
        'important': /!important\b/i,
        'function': /[-a-z0-9]+(?=\()/i,
        'punctuation': /[(){};:,]/
      };
      Prism.languages.css['atrule'].inside.rest = Prism.languages.css;
      var markup = Prism.languages.markup;

      if (markup) {
        markup.tag.addInlined('style', 'css');
        Prism.languages.insertBefore('inside', 'attr-value', {
          'style-attr': {
            pattern: /\s*style=("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/i,
            inside: {
              'attr-name': {
                pattern: /^\s*style/i,
                inside: markup.tag.inside
              },
              'punctuation': /^\s*=\s*['"]|['"]\s*$/,
              'attr-value': {
                pattern: /.+/i,
                inside: Prism.languages.css
              }
            },
            alias: 'language-css'
          }
        }, markup.tag);
      }
    })(Prism);
    /* **********************************************
         Begin prism-clike.js
    ********************************************** */


    Prism.languages.clike = {
      'comment': [{
        pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
        lookbehind: true
      }, {
        pattern: /(^|[^\\:])\/\/.*/,
        lookbehind: true,
        greedy: true
      }],
      'string': {
        pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
        greedy: true
      },
      'class-name': {
        pattern: /(\b(?:class|interface|extends|implements|trait|instanceof|new)\s+|\bcatch\s+\()[\w.\\]+/i,
        lookbehind: true,
        inside: {
          'punctuation': /[.\\]/
        }
      },
      'keyword': /\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,
      'boolean': /\b(?:true|false)\b/,
      'function': /\w+(?=\()/,
      'number': /\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,
      'operator': /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
      'punctuation': /[{}[\];(),.:]/
    };
    /* **********************************************
         Begin prism-javascript.js
    ********************************************** */

    Prism.languages.javascript = Prism.languages.extend('clike', {
      'class-name': [Prism.languages.clike['class-name'], {
        pattern: /(^|[^$\w\xA0-\uFFFF])[_$A-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\.(?:prototype|constructor))/,
        lookbehind: true
      }],
      'keyword': [{
        pattern: /((?:^|})\s*)(?:catch|finally)\b/,
        lookbehind: true
      }, {
        pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
        lookbehind: true
      }],
      'number': /\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/,
      // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
      'function': /#?[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
      'operator': /--|\+\+|\*\*=?|=>|&&|\|\||[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?[.?]?|[~:]/
    });
    Prism.languages.javascript['class-name'][0].pattern = /(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/;
    Prism.languages.insertBefore('javascript', 'keyword', {
      'regex': {
        pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyus]{0,6}(?=(?:\s|\/\*[\s\S]*?\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,
        lookbehind: true,
        greedy: true
      },
      // This must be declared before keyword because we use "function" inside the look-forward
      'function-variable': {
        pattern: /#?[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/,
        alias: 'function'
      },
      'parameter': [{
        pattern: /(function(?:\s+[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)?\s*\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\))/,
        lookbehind: true,
        inside: Prism.languages.javascript
      }, {
        pattern: /[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=>)/i,
        inside: Prism.languages.javascript
      }, {
        pattern: /(\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*=>)/,
        lookbehind: true,
        inside: Prism.languages.javascript
      }, {
        pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\s*)\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*\{)/,
        lookbehind: true,
        inside: Prism.languages.javascript
      }],
      'constant': /\b[A-Z](?:[A-Z_]|\dx?)*\b/
    });
    Prism.languages.insertBefore('javascript', 'string', {
      'template-string': {
        pattern: /`(?:\\[\s\S]|\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\${)[^\\`])*`/,
        greedy: true,
        inside: {
          'template-punctuation': {
            pattern: /^`|`$/,
            alias: 'string'
          },
          'interpolation': {
            pattern: /((?:^|[^\\])(?:\\{2})*)\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,
            lookbehind: true,
            inside: {
              'interpolation-punctuation': {
                pattern: /^\${|}$/,
                alias: 'punctuation'
              },
              rest: Prism.languages.javascript
            }
          },
          'string': /[\s\S]+/
        }
      }
    });

    if (Prism.languages.markup) {
      Prism.languages.markup.tag.addInlined('script', 'javascript');
    }

    Prism.languages.js = Prism.languages.javascript;
    /* **********************************************
         Begin prism-file-highlight.js
    ********************************************** */

    (function () {
      if (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {
        return;
      }
      /**
       * @param {Element} [container=document]
       */


      self.Prism.fileHighlight = function (container) {
        container = container || document;
        var Extensions = {
          'js': 'javascript',
          'py': 'python',
          'rb': 'ruby',
          'ps1': 'powershell',
          'psm1': 'powershell',
          'sh': 'bash',
          'bat': 'batch',
          'h': 'c',
          'tex': 'latex'
        };
        Array.prototype.slice.call(container.querySelectorAll('pre[data-src]')).forEach(function (pre) {
          // ignore if already loaded
          if (pre.hasAttribute('data-src-loaded')) {
            return;
          } // load current


          var src = pre.getAttribute('data-src');
          var language,
              parent = pre;
          var lang = /\blang(?:uage)?-([\w-]+)\b/i;

          while (parent && !lang.test(parent.className)) {
            parent = parent.parentNode;
          }

          if (parent) {
            language = (pre.className.match(lang) || [, ''])[1];
          }

          if (!language) {
            var extension = (src.match(/\.(\w+)$/) || [, ''])[1];
            language = Extensions[extension] || extension;
          }

          var code = document.createElement('code');
          code.className = 'language-' + language;
          pre.textContent = '';
          code.textContent = 'Loading…';
          pre.appendChild(code);
          var xhr = new XMLHttpRequest();
          xhr.open('GET', src, true);

          xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
              if (xhr.status < 400 && xhr.responseText) {
                code.textContent = xhr.responseText;
                Prism.highlightElement(code); // mark as loaded

                pre.setAttribute('data-src-loaded', '');
              } else if (xhr.status >= 400) {
                code.textContent = '✖ Error ' + xhr.status + ' while fetching file: ' + xhr.statusText;
              } else {
                code.textContent = '✖ Error: File does not exist or is empty';
              }
            }
          };

          xhr.send(null);
        });
      };

      document.addEventListener('DOMContentLoaded', function () {
        // execute inside handler, for dropping Event as argument
        self.Prism.fileHighlight();
      });
    })();
    /***/

  },

  /***/
  "./node_modules/punycode/punycode.es6.js":
  /*!***********************************************!*\
    !*** ./node_modules/punycode/punycode.es6.js ***!
    \***********************************************/

  /*! exports provided: ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode, default */

  /***/
  function node_modulesPunycodePunycodeEs6Js(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ucs2decode", function () {
      return ucs2decode;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ucs2encode", function () {
      return ucs2encode;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "decode", function () {
      return decode;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "encode", function () {
      return encode;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "toASCII", function () {
      return toASCII;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "toUnicode", function () {
      return toUnicode;
    });
    /** Highest positive signed 32-bit float value */


    var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

    /** Bootstring parameters */

    var base = 36;
    var tMin = 1;
    var tMax = 26;
    var skew = 38;
    var damp = 700;
    var initialBias = 72;
    var initialN = 128; // 0x80

    var delimiter = '-'; // '\x2D'

    /** Regular expressions */

    var regexPunycode = /^xn--/;
    var regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars

    var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

    /** Error messages */

    var errors = {
      'overflow': 'Overflow: input needs wider integers to process',
      'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
      'invalid-input': 'Invalid input'
    };
    /** Convenience shortcuts */

    var baseMinusTMin = base - tMin;
    var floor = Math.floor;
    var stringFromCharCode = String.fromCharCode;
    /*--------------------------------------------------------------------------*/

    /**
     * A generic error utility function.
     * @private
     * @param {String} type The error type.
     * @returns {Error} Throws a `RangeError` with the applicable error message.
     */

    function error(type) {
      throw new RangeError(errors[type]);
    }
    /**
     * A generic `Array#map` utility function.
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} callback The function that gets called for every array
     * item.
     * @returns {Array} A new array of values returned by the callback function.
     */


    function map(array, fn) {
      var result = [];
      var length = array.length;

      while (length--) {
        result[length] = fn(array[length]);
      }

      return result;
    }
    /**
     * A simple `Array#map`-like wrapper to work with domain name strings or email
     * addresses.
     * @private
     * @param {String} domain The domain name or email address.
     * @param {Function} callback The function that gets called for every
     * character.
     * @returns {Array} A new string of characters returned by the callback
     * function.
     */


    function mapDomain(string, fn) {
      var parts = string.split('@');
      var result = '';

      if (parts.length > 1) {
        // In email addresses, only the domain name should be punycoded. Leave
        // the local part (i.e. everything up to `@`) intact.
        result = parts[0] + '@';
        string = parts[1];
      } // Avoid `split(regex)` for IE8 compatibility. See #17.


      string = string.replace(regexSeparators, '\x2E');
      var labels = string.split('.');
      var encoded = map(labels, fn).join('.');
      return result + encoded;
    }
    /**
     * Creates an array containing the numeric code points of each Unicode
     * character in the string. While JavaScript uses UCS-2 internally,
     * this function will convert a pair of surrogate halves (each of which
     * UCS-2 exposes as separate characters) into a single code point,
     * matching UTF-16.
     * @see `punycode.ucs2.encode`
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode.ucs2
     * @name decode
     * @param {String} string The Unicode input string (UCS-2).
     * @returns {Array} The new array of code points.
     */


    function ucs2decode(string) {
      var output = [];
      var counter = 0;
      var length = string.length;

      while (counter < length) {
        var value = string.charCodeAt(counter++);

        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
          // It's a high surrogate, and there is a next character.
          var extra = string.charCodeAt(counter++);

          if ((extra & 0xFC00) == 0xDC00) {
            // Low surrogate.
            output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
          } else {
            // It's an unmatched surrogate; only append this code unit, in case the
            // next code unit is the high surrogate of a surrogate pair.
            output.push(value);
            counter--;
          }
        } else {
          output.push(value);
        }
      }

      return output;
    }
    /**
     * Creates a string based on an array of numeric code points.
     * @see `punycode.ucs2.decode`
     * @memberOf punycode.ucs2
     * @name encode
     * @param {Array} codePoints The array of numeric code points.
     * @returns {String} The new Unicode string (UCS-2).
     */


    var ucs2encode = function ucs2encode(array) {
      return String.fromCodePoint.apply(String, _toConsumableArray(array));
    };
    /**
     * Converts a basic code point into a digit/integer.
     * @see `digitToBasic()`
     * @private
     * @param {Number} codePoint The basic numeric code point value.
     * @returns {Number} The numeric value of a basic code point (for use in
     * representing integers) in the range `0` to `base - 1`, or `base` if
     * the code point does not represent a value.
     */


    var basicToDigit = function basicToDigit(codePoint) {
      if (codePoint - 0x30 < 0x0A) {
        return codePoint - 0x16;
      }

      if (codePoint - 0x41 < 0x1A) {
        return codePoint - 0x41;
      }

      if (codePoint - 0x61 < 0x1A) {
        return codePoint - 0x61;
      }

      return base;
    };
    /**
     * Converts a digit/integer into a basic code point.
     * @see `basicToDigit()`
     * @private
     * @param {Number} digit The numeric value of a basic code point.
     * @returns {Number} The basic code point whose value (when used for
     * representing integers) is `digit`, which needs to be in the range
     * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
     * used; else, the lowercase form is used. The behavior is undefined
     * if `flag` is non-zero and `digit` has no uppercase form.
     */


    var digitToBasic = function digitToBasic(digit, flag) {
      //  0..25 map to ASCII a..z or A..Z
      // 26..35 map to ASCII 0..9
      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    };
    /**
     * Bias adaptation function as per section 3.4 of RFC 3492.
     * https://tools.ietf.org/html/rfc3492#section-3.4
     * @private
     */


    var adapt = function adapt(delta, numPoints, firstTime) {
      var k = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);

      for (;
      /* no initialization */
      delta > baseMinusTMin * tMax >> 1; k += base) {
        delta = floor(delta / baseMinusTMin);
      }

      return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    };
    /**
     * Converts a Punycode string of ASCII-only symbols to a string of Unicode
     * symbols.
     * @memberOf punycode
     * @param {String} input The Punycode string of ASCII-only symbols.
     * @returns {String} The resulting string of Unicode symbols.
     */


    var decode = function decode(input) {
      // Don't use UCS-2.
      var output = [];
      var inputLength = input.length;
      var i = 0;
      var n = initialN;
      var bias = initialBias; // Handle the basic code points: let `basic` be the number of input code
      // points before the last delimiter, or `0` if there is none, then copy
      // the first basic code points to the output.

      var basic = input.lastIndexOf(delimiter);

      if (basic < 0) {
        basic = 0;
      }

      for (var j = 0; j < basic; ++j) {
        // if it's not a basic code point
        if (input.charCodeAt(j) >= 0x80) {
          error('not-basic');
        }

        output.push(input.charCodeAt(j));
      } // Main decoding loop: start just after the last delimiter if any basic code
      // points were copied; start at the beginning otherwise.


      for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;)
      /* no final expression */
      {
        // `index` is the index of the next character to be consumed.
        // Decode a generalized variable-length integer into `delta`,
        // which gets added to `i`. The overflow checking is easier
        // if we increase `i` as we go, then subtract off its starting
        // value at the end to obtain `delta`.
        var oldi = i;

        for (var w = 1, k = base;;
        /* no condition */
        k += base) {
          if (index >= inputLength) {
            error('invalid-input');
          }

          var digit = basicToDigit(input.charCodeAt(index++));

          if (digit >= base || digit > floor((maxInt - i) / w)) {
            error('overflow');
          }

          i += digit * w;
          var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

          if (digit < t) {
            break;
          }

          var baseMinusT = base - t;

          if (w > floor(maxInt / baseMinusT)) {
            error('overflow');
          }

          w *= baseMinusT;
        }

        var out = output.length + 1;
        bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,
        // incrementing `n` each time, so we'll fix that now:

        if (floor(i / out) > maxInt - n) {
          error('overflow');
        }

        n += floor(i / out);
        i %= out; // Insert `n` at position `i` of the output.

        output.splice(i++, 0, n);
      }

      return String.fromCodePoint.apply(String, output);
    };
    /**
     * Converts a string of Unicode symbols (e.g. a domain name label) to a
     * Punycode string of ASCII-only symbols.
     * @memberOf punycode
     * @param {String} input The string of Unicode symbols.
     * @returns {String} The resulting Punycode string of ASCII-only symbols.
     */


    var encode = function encode(input) {
      var output = []; // Convert the input in UCS-2 to an array of Unicode code points.

      input = ucs2decode(input); // Cache the length.

      var inputLength = input.length; // Initialize the state.

      var n = initialN;
      var delta = 0;
      var bias = initialBias; // Handle the basic code points.

      var _iterator5 = _createForOfIteratorHelper(input),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _currentValue2 = _step5.value;

          if (_currentValue2 < 0x80) {
            output.push(stringFromCharCode(_currentValue2));
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      var basicLength = output.length;
      var handledCPCount = basicLength; // `handledCPCount` is the number of code points that have been handled;
      // `basicLength` is the number of basic code points.
      // Finish the basic string with a delimiter unless it's empty.

      if (basicLength) {
        output.push(delimiter);
      } // Main encoding loop:


      while (handledCPCount < inputLength) {
        // All non-basic code points < n have been handled already. Find the next
        // larger one:
        var m = maxInt;

        var _iterator6 = _createForOfIteratorHelper(input),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var currentValue = _step6.value;

            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
          // but guard against overflow.

        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }

        var handledCPCountPlusOne = handledCPCount + 1;

        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
          error('overflow');
        }

        delta += (m - n) * handledCPCountPlusOne;
        n = m;

        var _iterator7 = _createForOfIteratorHelper(input),
            _step7;

        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var _currentValue = _step7.value;

            if (_currentValue < n && ++delta > maxInt) {
              error('overflow');
            }

            if (_currentValue == n) {
              // Represent delta as a generalized variable-length integer.
              var q = delta;

              for (var k = base;;
              /* no condition */
              k += base) {
                var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

                if (q < t) {
                  break;
                }

                var qMinusT = q - t;
                var baseMinusT = base - t;
                output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                q = floor(qMinusT / baseMinusT);
              }

              output.push(stringFromCharCode(digitToBasic(q, 0)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }

        ++delta;
        ++n;
      }

      return output.join('');
    };
    /**
     * Converts a Punycode string representing a domain name or an email address
     * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
     * it doesn't matter if you call it on a string that has already been
     * converted to Unicode.
     * @memberOf punycode
     * @param {String} input The Punycoded domain name or email address to
     * convert to Unicode.
     * @returns {String} The Unicode representation of the given Punycode
     * string.
     */


    var toUnicode = function toUnicode(input) {
      return mapDomain(input, function (string) {
        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
      });
    };
    /**
     * Converts a Unicode string representing a domain name or an email address to
     * Punycode. Only the non-ASCII parts of the domain name will be converted,
     * i.e. it doesn't matter if you call it with a domain that's already in
     * ASCII.
     * @memberOf punycode
     * @param {String} input The domain name or email address to convert, as a
     * Unicode string.
     * @returns {String} The Punycode representation of the given domain name or
     * email address.
     */


    var toASCII = function toASCII(input) {
      return mapDomain(input, function (string) {
        return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
      });
    };
    /*--------------------------------------------------------------------------*/

    /** Define the public API */


    var punycode = {
      /**
       * A string representing the current Punycode.js version number.
       * @memberOf punycode
       * @type String
       */
      'version': '2.1.0',

      /**
       * An object of methods to convert from JavaScript's internal character
       * representation (UCS-2) to Unicode code points, and back.
       * @see <https://mathiasbynens.be/notes/javascript-encoding>
       * @memberOf punycode
       * @type Object
       */
      'ucs2': {
        'decode': ucs2decode,
        'encode': ucs2encode
      },
      'decode': decode,
      'encode': encode,
      'toASCII': toASCII,
      'toUnicode': toUnicode
    };
    /* harmony default export */

    __webpack_exports__["default"] = punycode;
    /***/
  },

  /***/
  "./node_modules/uc.micro/categories/Cc/regex.js":
  /*!******************************************************!*\
    !*** ./node_modules/uc.micro/categories/Cc/regex.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesUcMicroCategoriesCcRegexJs(module, exports) {
    module.exports = /[\0-\x1F\x7F-\x9F]/;
    /***/
  },

  /***/
  "./node_modules/uc.micro/categories/Cf/regex.js":
  /*!******************************************************!*\
    !*** ./node_modules/uc.micro/categories/Cf/regex.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesUcMicroCategoriesCfRegexJs(module, exports) {
    module.exports = /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/;
    /***/
  },

  /***/
  "./node_modules/uc.micro/categories/P/regex.js":
  /*!*****************************************************!*\
    !*** ./node_modules/uc.micro/categories/P/regex.js ***!
    \*****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesUcMicroCategoriesPRegexJs(module, exports) {
    module.exports = /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/;
    /***/
  },

  /***/
  "./node_modules/uc.micro/categories/Z/regex.js":
  /*!*****************************************************!*\
    !*** ./node_modules/uc.micro/categories/Z/regex.js ***!
    \*****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesUcMicroCategoriesZRegexJs(module, exports) {
    module.exports = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;
    /***/
  },

  /***/
  "./node_modules/uc.micro/index.js":
  /*!****************************************!*\
    !*** ./node_modules/uc.micro/index.js ***!
    \****************************************/

  /*! no static exports found */

  /***/
  function node_modulesUcMicroIndexJs(module, exports, __webpack_require__) {
    "use strict";

    exports.Any = __webpack_require__(
    /*! ./properties/Any/regex */
    "./node_modules/uc.micro/properties/Any/regex.js");
    exports.Cc = __webpack_require__(
    /*! ./categories/Cc/regex */
    "./node_modules/uc.micro/categories/Cc/regex.js");
    exports.Cf = __webpack_require__(
    /*! ./categories/Cf/regex */
    "./node_modules/uc.micro/categories/Cf/regex.js");
    exports.P = __webpack_require__(
    /*! ./categories/P/regex */
    "./node_modules/uc.micro/categories/P/regex.js");
    exports.Z = __webpack_require__(
    /*! ./categories/Z/regex */
    "./node_modules/uc.micro/categories/Z/regex.js");
    /***/
  },

  /***/
  "./node_modules/uc.micro/properties/Any/regex.js":
  /*!*******************************************************!*\
    !*** ./node_modules/uc.micro/properties/Any/regex.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesUcMicroPropertiesAnyRegexJs(module, exports) {
    module.exports = /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    /***/
  },

  /***/
  "./packages/lazy-load.js":
  /*!*******************************!*\
    !*** ./packages/lazy-load.js ***!
    \*******************************/

  /*! exports provided: default */

  /***/
  function packagesLazyLoadJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__); // https://github.com/ApoorvSaxena/lozad.js

    /**
     * Detect IE browser
     * @const {boolean}
     * @private
     */


    var isIE = document.documentMode;
    var defaultConfig = {
      rootMargin: "0px",
      threshold: 0,
      load: function load(element) {
        if (element.nodeName.toLowerCase() === "picture") {
          var img = document.createElement("img");

          if (isIE && element.getAttribute("data-iesrc")) {
            img.src = element.getAttribute("data-iesrc");
          }

          element.appendChild(img);
        }

        if (element.getAttribute("data-src")) {
          element.src = element.getAttribute("data-src");
        }

        if (element.getAttribute("data-srcset")) {
          element.srcset = element.getAttribute("data-srcset");
        }

        if (element.getAttribute("data-background-image")) {
          element.style.backgroundImage = "url(".concat(element.getAttribute("data-background-image"), ")");
        }
      },
      loaded: function loaded() {},
      container: document
    };

    function markAsLoaded(element) {
      element.setAttribute("data-loaded", true);
    }

    var isLoaded = function isLoaded(element) {
      return element.getAttribute("data-loaded") === "true";
    };

    var onIntersection = function onIntersection(load, loaded) {
      return function (entries, observer) {
        entries.forEach(function (entry) {
          if (entry.intersectionRatio > 0) {
            observer.unobserve(entry.target);

            if (!isLoaded(entry.target)) {
              load(entry.target);
              markAsLoaded(entry.target);
              loaded(entry.target);
            }
          }
        });
      };
    };

    var getElements = function getElements(selector, container) {
      if (selector instanceof Element) {
        return [selector];
      }

      if (selector instanceof NodeList) {
        return selector;
      }

      return container.querySelectorAll(selector);
    };
    /* harmony default export */


    __webpack_exports__["default"] = function () {
      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ".lozad";
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var _Object$assign = Object.assign({}, defaultConfig, options),
          rootMargin = _Object$assign.rootMargin,
          threshold = _Object$assign.threshold,
          load = _Object$assign.load,
          loaded = _Object$assign.loaded,
          container = _Object$assign.container;

      var observer;

      if (window.IntersectionObserver) {
        observer = new IntersectionObserver(onIntersection(load, loaded), {
          rootMargin: rootMargin,
          threshold: threshold
        });
      }

      return {
        observe: function observe() {
          var elements = getElements(selector, container);

          for (var i = 0; i < elements.length; i++) {
            if (isLoaded(elements[i])) {
              continue;
            }

            if (observer) {
              observer.observe(elements[i]);
              continue;
            }

            load(elements[i]);
            markAsLoaded(elements[i]);
            loaded(elements[i]);
          }
        },
        triggerLoad: function triggerLoad(element) {
          if (isLoaded(element)) {
            return;
          }

          load(element);
          markAsLoaded(element);
          loaded(element);
        }
      };
    };
    /***/

  },

  /***/
  "./packages/lisp.js/littlelisp.js":
  /*!****************************************!*\
    !*** ./packages/lisp.js/littlelisp.js ***!
    \****************************************/

  /*! no static exports found */

  /***/
  function packagesLispJsLittlelispJs(module, exports, __webpack_require__) {
    (function (exports) {
      var _library, _special;

      var library = (_library = {}, _defineProperty3(_library, '+', function _() {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }

        return args.reduce(function (acc, v) {
          return acc + v;
        }, 0);
      }), _defineProperty3(_library, '<', function _(a, b) {
        return a < b;
      }), _defineProperty3(_library, "first", function first(x) {
        return x[0];
      }), _defineProperty3(_library, "rest", function rest(x) {
        return x.slice(1);
      }), _defineProperty3(_library, "print", function print(x) {
        console.log(x);
        return x;
      }), _defineProperty3(_library, "printArgs", function printArgs() {
        console.log(JSON.stringify(arguments));
      }), _defineProperty3(_library, "toHtml", function toHtml(tag, attributes) {
        var attr = '';
        var content = '';

        if (attributes) {
          content = attributes['.'] || attributes.content;
          delete attributes.content;
          delete attributes['.'];

          if (Array.isArray(content)) {
            var c = '';
            content.forEach(function (v) {
              return c += v;
            });
            content = c;
          }

          Object.keys(attributes).forEach(function (key) {
            var value = attributes[key];
            if (key === ',') key = 'style';
            attr += ' ' + key + '="' + value + '"';
            return attr;
          });
        }

        var html = "<".concat(tag).concat(attr, ">").concat(content || '', "</").concat(tag, ">");
        return html;
      }), _defineProperty3(_library, "A", function A(attributes) {
        return library.toHtml('A', attributes);
      }), _library);

      var Context = function Context(scope, parent) {
        this.scope = scope;
        this.parent = parent;

        this.get = function (identifier) {
          var id = identifier.split('.');

          if (id[0] in this.scope) {
            var _scope = this.scope;
            id.forEach(function (v) {
              _scope = _scope[v];
            });
            return _scope;
          } else if (this.parent !== undefined) {
            return this.parent.get(identifier);
          }
        };

        this.set = function (identifier, v) {
          var id = identifier.split('.');

          if (id[0] in this.scope) {
            var _scope2 = this.scope;

            for (var i = 0; i < id.length - 1; i++) {
              _scope2 = _scope2[id[i]];
            }

            _scope2[id[id.length - 1]] = v;
          } else if (this.parent !== undefined) {
            return this.parent.set(identifier, v);
          }
        };
      };

      var special = (_special = {
        "let": function _let(input, context) {
          var letContext = input[1].reduce(function (acc, x) {
            acc.scope[x[0].value] = interpret(x[1], context);
            return acc;
          }, new Context({}, context));
          return interpret(input[2], letContext);
        }
      }, _defineProperty3(_special, '=', function _(input, context) {
        var v = interpret(input[2], context);
        return context.set(input[1].value, v);
      }), _defineProperty3(_special, "lambda", function lambda(input, context) {
        return function () {
          var lambdaArguments = arguments;
          var lambdaScope = input[1].reduce(function (acc, x, i) {
            acc[x.value] = lambdaArguments[i];
            return acc;
          }, {});
          return interpret(input[2], new Context(lambdaScope, context));
        };
      }), _defineProperty3(_special, "if", function _if(input, context) {
        return interpret(input[1], context) ? interpret(input[2], context) : interpret(input[3], context);
      }), _defineProperty3(_special, "loop", function loop(input, context) {
        while (interpret(input[1], context)) {
          interpret(input[2], context);
        }
      }), _special);

      var interpretValue = function interpretValue(inputItem, context) {
        if (inputItem.type === 'identifier') {
          return context.get(inputItem.value);
        } else if (inputItem.type === 'number' || inputItem.type === 'string') {
          return inputItem.value;
        }
      };

      var interpretInput = function interpretInput(input, context) {
        var namedParams = {};
        var list = [];
        input.forEach(function (x) {
          var v = interpret(x, context);

          if (v && v.isNamedParam) {
            namedParams = _objectSpread2(_objectSpread2({}, namedParams), _defineProperty3({}, v.name, v.value));
          } else {
            list.push(v);
          }
        });
        if (Object.keys(namedParams).length) list.push(namedParams);
        return list;
      };

      var interpretList = function interpretList(input, context) {
        if (!input.length) return input;
        var list = input;

        if (list[0].value in special) {
          return special[list[0].value](list, context);
        } else {
          list = interpretInput(input, context);

          if (list[0] instanceof Function) {
            return list[0].apply(undefined, list.slice(1));
          } else {
            return list;
          }
        }
      };

      var interpret = function interpret(input, context) {
        if (context === undefined) {
          context = new Context(library, new Context(special, new Context(typeof window !== 'undefined' ? window : global)));
          return interpret(input, context);
        } else if (input instanceof Array) {
          return interpretList(input, context);
        } else if (input && input.type === 'namedParam') {
          var v = input.param.value;
          return {
            isNamedParam: true,
            name: input.name,
            value: interpret(input.param)
          };
        } else {
          return interpretValue(input, context);
        }
      };

      var parseValue = function parseValue(input) {
        if (!isNaN(parseFloat(input))) {
          return {
            type: 'number',
            value: parseFloat(input)
          };
        } else if (input[0] === "'" && input.slice(-1) === "'") {
          return {
            type: 'string',
            value: input.slice(1, -1)
          };
        } else {
          return {
            type: 'identifier',
            value: input
          };
        }
      };

      var categorize = function categorize(input) {
        function findFirstColon(str) {
          var quoteSingle;

          for (var _i6 = 0; _i6 < str.length; _i6++) {
            if (str[_i6] === ':') {
              if (quoteSingle === undefined) {
                return _i6;
              }
            } else if (str[_i6] === "'") {
              if (quoteSingle === undefined) {
                quoteSingle = _i6;
              } else {
                quoteSingle = undefined;
              }
            }
          }

          return undefined;
        }

        var i = findFirstColon(input);

        if (i) {
          var key = input.slice(0, i);
          var value = input.slice(i + 1);
          var p = value === '' ? undefined : parseValue(value);
          return {
            type: 'namedParam',
            name: key,
            param: p
          };
        } else {
          return parseValue(input);
        }
      };

      var parenthesize = function parenthesize(input, list) {
        if (list === undefined) {
          return parenthesize(input, []);
        } else {
          var token = input.shift();

          if (token === undefined) {
            return list.pop();
          } else if (token === '(') {
            var last = list[list.length - 1];
            var array = parenthesize(input, []);

            if (last && last.type === 'namedParam' && last.param === undefined) {
              last.param = array;
            } else {
              list.push(array);
            }

            return parenthesize(input, list);
          } else if (token === ')') {
            return list;
          } else {
            var ct = categorize(token); // function name

            if (!list.length && ct.type === 'identifier') {
              if (ct.value[0] === '.') {
                list.push({
                  type: 'identifier',
                  value: 'toHtml'
                });
                list.push({
                  type: 'string',
                  value: 'i-' + ct.value.substr(1)
                });
                return parenthesize(input, list);
              } else if (ct.value[0] === ',') {
                list.push({
                  type: 'identifier',
                  value: 'toHtml'
                });
                list.push({
                  type: 'string',
                  value: ct.value.substr(1)
                });
                return parenthesize(input, list);
              }
            }

            return parenthesize(input, list.concat(ct));
          }
        }
      };

      var tokenize = function tokenize(input) {
        return input.replace(/\s*:\s*/g, ':') // remove spaces around :
        .split("'").map(function (x, i) {
          if (i % 2 === 0) {
            // not in string
            return x.replace(/\(/g, ' ( ').replace(/\)/g, ' ) ');
          } else {
            // in string
            return x.replace(/ /g, '!whitespace!');
          }
        }).join("'").trim().split(/\s+/).map(function (x) {
          return x.replace(/!whitespace!/g, ' ');
        });
      };

      var parse = function parse(input) {
        var tokens = tokenize(input);
        var a = parenthesize(tokens);
        return a;
      };

      var execute = function execute(input) {
        return interpret(parse(input));
      };

      exports.littleLisp = {
        tokenize: tokenize,
        parse: parse,
        interpret: interpret,
        execute: execute
      };
    })(false ? undefined : exports);
    /***/

  },

  /***/
  "./src/app/modules/markdown/markdown-routing.module.ts":
  /*!*************************************************************!*\
    !*** ./src/app/modules/markdown/markdown-routing.module.ts ***!
    \*************************************************************/

  /*! exports provided: MarkdownRoutingModule */

  /***/
  function srcAppModulesMarkdownMarkdownRoutingModuleTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MarkdownRoutingModule", function () {
      return MarkdownRoutingModule;
    });
    /* harmony import */


    var _angular_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/router */
    "./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js");
    /* harmony import */


    var _markdown_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./markdown.component */
    "./src/app/modules/markdown/markdown.component.ts");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");

    var documentRoutes = [{
      path: '',
      component: _markdown_component__WEBPACK_IMPORTED_MODULE_1__["MarkdownComponent"],
      children: [{
        path: '',
        loadChildren: 'app/modules/markdown/editor/markdown-editor.module#MarkdownEditorModule'
      }]
    }, {
      path: 'new',
      component: _markdown_component__WEBPACK_IMPORTED_MODULE_1__["MarkdownComponent"],
      children: [{
        path: '',
        loadChildren: 'app/modules/markdown/editor/markdown-editor.module#MarkdownEditorModule'
      }]
    }];

    var MarkdownRoutingModule = /*@__PURE__*/function () {
      var MarkdownRoutingModule = function MarkdownRoutingModule() {
        _classCallCheck(this, MarkdownRoutingModule);
      };

      MarkdownRoutingModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineNgModule"]({
        type: MarkdownRoutingModule
      });
      MarkdownRoutingModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjector"]({
        factory: function MarkdownRoutingModule_Factory(t) {
          return new (t || MarkdownRoutingModule)();
        },
        imports: [[_angular_router__WEBPACK_IMPORTED_MODULE_0__["RouterModule"].forChild(documentRoutes)], _angular_router__WEBPACK_IMPORTED_MODULE_0__["RouterModule"]]
      });
      return MarkdownRoutingModule;
    }();

    (function () {
      (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵsetNgModuleScope"](MarkdownRoutingModule, {
        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_0__["RouterModule"]],
        exports: [_angular_router__WEBPACK_IMPORTED_MODULE_0__["RouterModule"]]
      });
    })();
    /***/

  },

  /***/
  "./src/app/modules/markdown/markdown.effects.ts":
  /*!******************************************************!*\
    !*** ./src/app/modules/markdown/markdown.effects.ts ***!
    \******************************************************/

  /*! exports provided: MarkdownEffects */

  /***/
  function srcAppModulesMarkdownMarkdownEffectsTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MarkdownEffects", function () {
      return MarkdownEffects;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var _ngrx_effects__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! @ngrx/effects */
    "./node_modules/@ngrx/effects/__ivy_ngcc__/fesm2015/effects.js");
    /* harmony import */


    var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! rxjs/operators */
    "./node_modules/rxjs/_esm2015/operators/index.js");
    /* harmony import */


    var _state_actions_document__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./state/actions/document */
    "./src/app/modules/markdown/state/actions/document.ts");
    /* harmony import */


    var shared__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! shared */
    "./src/app/modules/shared/index.ts");
    /* harmony import */


    var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! @angular/router */
    "./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js");

    var MarkdownEffects = /*@__PURE__*/function () {
      var MarkdownEffects = /*#__PURE__*/function () {
        function MarkdownEffects(actions$, router) {
          var _this13 = this;

          _classCallCheck(this, MarkdownEffects);

          this.actions$ = actions$;
          this.router = router;
          this.Refresh = this.actions$.pipe(Object(_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__["ofType"])(_state_actions_document__WEBPACK_IMPORTED_MODULE_4__["DocumentActionTypes"].Refresh), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (_) {
            return _this13.onRefresh();
          }));
        }

        _createClass(MarkdownEffects, [{
          key: "onRefresh",
          value: function onRefresh() {
            if (this.router.url.startsWith('/doc/new')) return;
            var params = this.router.parseUrl(this.router.url).queryParams;
            var title = params['title'];
            var num = +params['id'];
            var format = params['f'];
            return new shared__WEBPACK_IMPORTED_MODULE_5__["DocumentEffectsRead"]({
              id: num,
              title: title,
              format: format
            });
          }
        }]);

        return MarkdownEffects;
      }();

      MarkdownEffects.ɵfac = function MarkdownEffects_Factory(t) {
        return new (t || MarkdownEffects)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__["Actions"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"]));
      };

      MarkdownEffects.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: MarkdownEffects,
        factory: MarkdownEffects.ɵfac
      });
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__["Effect"])()], MarkdownEffects.prototype, "Refresh", void 0);
      return MarkdownEffects;
    }();
    /***/

  },

  /***/
  "./src/app/modules/markdown/markdown.module.ts":
  /*!*****************************************************!*\
    !*** ./src/app/modules/markdown/markdown.module.ts ***!
    \*****************************************************/

  /*! exports provided: MarkdownModule */

  /***/
  function srcAppModulesMarkdownMarkdownModuleTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MarkdownModule", function () {
      return MarkdownModule;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/forms */
    "./node_modules/@angular/forms/__ivy_ngcc__/fesm2015/forms.js");
    /* harmony import */


    var _markdown_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./markdown.component */
    "./src/app/modules/markdown/markdown.component.ts");
    /* harmony import */


    var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! @angular/common */
    "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");
    /* harmony import */


    var _material_material_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../material/material.module */
    "./src/app/modules/material/material.module.ts");
    /* harmony import */


    var _viewer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./viewer */
    "./src/app/modules/markdown/viewer/index.ts");
    /* harmony import */


    var _markdown_routing_module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ./markdown-routing.module */
    "./src/app/modules/markdown/markdown-routing.module.ts");
    /* harmony import */


    var _metaseed_spinner__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! @metaseed/spinner */
    "./projects/spinner/src/public_api.ts");
    /* harmony import */


    var _ngrx_store__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! @ngrx/store */
    "./node_modules/@ngrx/store/__ivy_ngcc__/fesm2015/store.js");
    /* harmony import */


    var _state__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ./state */
    "./src/app/modules/markdown/state/index.ts");
    /* harmony import */


    var shared__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! shared */
    "./src/app/modules/shared/index.ts");
    /* harmony import */


    var _ngrx_effects__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! @ngrx/effects */
    "./node_modules/@ngrx/effects/__ivy_ngcc__/fesm2015/effects.js");
    /* harmony import */


    var _markdown_effects__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
    /*! ./markdown.effects */
    "./src/app/modules/markdown/markdown.effects.ts");
    /* harmony import */


    var _markdown_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
    /*! ./markdown.service */
    "./src/app/modules/markdown/markdown.service.ts");
    /* harmony import */


    var _model_markdown_model__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
    /*! ./model/markdown.model */
    "./src/app/modules/markdown/model/markdown.model.ts");
    /* harmony import */


    var _viewer_markdown_viewer_module__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
    /*! ./viewer/markdown-viewer.module */
    "./src/app/modules/markdown/viewer/markdown-viewer.module.ts");

    var MarkdownModule = /*@__PURE__*/function () {
      var MarkdownModule = /*#__PURE__*/function () {
        function MarkdownModule() {
          _classCallCheck(this, MarkdownModule);
        }

        _createClass(MarkdownModule, null, [{
          key: "forChild",
          value: function forChild(config) {
            return {
              ngModule: MarkdownModule,
              providers: _viewer__WEBPACK_IMPORTED_MODULE_5__["MarkdownViewerModule"].forChild(config).providers
            };
          }
        }]);

        return MarkdownModule;
      }();

      MarkdownModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: MarkdownModule
      });
      MarkdownModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function MarkdownModule_Factory(t) {
          return new (t || MarkdownModule)();
        },
        providers: [_markdown_service__WEBPACK_IMPORTED_MODULE_13__["MarkdownService"], {
          provide: _model_markdown_model__WEBPACK_IMPORTED_MODULE_14__["MARKDOWN_SERVICE_TOKEN"],
          useExisting: _markdown_service__WEBPACK_IMPORTED_MODULE_13__["MarkdownService"]
        }],
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_3__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"], _material_material_module__WEBPACK_IMPORTED_MODULE_4__["MaterialModule"], _metaseed_spinner__WEBPACK_IMPORTED_MODULE_7__["SpinnerModule"], _markdown_routing_module__WEBPACK_IMPORTED_MODULE_6__["MarkdownRoutingModule"], _ngrx_store__WEBPACK_IMPORTED_MODULE_8__["StoreModule"].forFeature(_state__WEBPACK_IMPORTED_MODULE_9__["moduleStateName"], _state__WEBPACK_IMPORTED_MODULE_9__["markdownReducers"]), shared__WEBPACK_IMPORTED_MODULE_10__["SharedModule"], _viewer__WEBPACK_IMPORTED_MODULE_5__["MarkdownViewerModule"].forChild(), _ngrx_effects__WEBPACK_IMPORTED_MODULE_11__["EffectsModule"].forFeature([_markdown_effects__WEBPACK_IMPORTED_MODULE_12__["MarkdownEffects"]])], _viewer__WEBPACK_IMPORTED_MODULE_5__["MarkdownViewerModule"]]
      });
      return MarkdownModule;
    }();

    (function () {
      (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](MarkdownModule, {
        declarations: [_markdown_component__WEBPACK_IMPORTED_MODULE_2__["MarkdownComponent"]],
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"], _material_material_module__WEBPACK_IMPORTED_MODULE_4__["MaterialModule"], _metaseed_spinner__WEBPACK_IMPORTED_MODULE_7__["SpinnerModule"], _markdown_routing_module__WEBPACK_IMPORTED_MODULE_6__["MarkdownRoutingModule"], _ngrx_store__WEBPACK_IMPORTED_MODULE_8__["StoreFeatureModule"], shared__WEBPACK_IMPORTED_MODULE_10__["SharedModule"], _viewer_markdown_viewer_module__WEBPACK_IMPORTED_MODULE_15__["MarkdownViewerModule"], _ngrx_effects__WEBPACK_IMPORTED_MODULE_11__["EffectsFeatureModule"]],
        exports: [_viewer__WEBPACK_IMPORTED_MODULE_5__["MarkdownViewerModule"], _markdown_component__WEBPACK_IMPORTED_MODULE_2__["MarkdownComponent"]]
      });
    })();
    /***/

  },

  /***/
  "./src/app/modules/markdown/markdown.service.ts":
  /*!******************************************************!*\
    !*** ./src/app/modules/markdown/markdown.service.ts ***!
    \******************************************************/

  /*! exports provided: MarkdownService */

  /***/
  function srcAppModulesMarkdownMarkdownServiceTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MarkdownService", function () {
      return MarkdownService;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var _ngrx_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! @ngrx/store */
    "./node_modules/@ngrx/store/__ivy_ngcc__/fesm2015/store.js");

    var MarkdownService = /*@__PURE__*/function () {
      var MarkdownService = function MarkdownService(store) {
        _classCallCheck(this, MarkdownService);

        this.store = store;
        this.viewer$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__["ReplaySubject"](1);
        this.editor$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__["ReplaySubject"](1);
        this.editorContentChanged$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
      };

      MarkdownService.ɵfac = function MarkdownService_Factory(t) {
        return new (t || MarkdownService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_ngrx_store__WEBPACK_IMPORTED_MODULE_2__["Store"]));
      };

      MarkdownService.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: MarkdownService,
        factory: MarkdownService.ɵfac,
        providedIn: 'root'
      });
      return MarkdownService;
    }();
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/elements/element-registry.ts":
  /*!**********************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/elements/element-registry.ts ***!
    \**********************************************************************/

  /*! exports provided: ELEMENT_MODULE_PATHS_AS_ROUTES, ELEMENT_MODULE_PATHS_TOKEN, ELEMENT_MODULE_PATHS */

  /***/
  function srcAppModulesMarkdownViewerElementsElementRegistryTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ELEMENT_MODULE_PATHS_AS_ROUTES", function () {
      return ELEMENT_MODULE_PATHS_AS_ROUTES;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ELEMENT_MODULE_PATHS_TOKEN", function () {
      return ELEMENT_MODULE_PATHS_TOKEN;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ELEMENT_MODULE_PATHS", function () {
      return ELEMENT_MODULE_PATHS;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js"); // Modules containing custom elements must be set up as lazy-loaded routes (loadChildren)
    // TODO(andrewjs): This is a hack, Angular should have first-class support for preparing a module
    // that contains custom elements.


    var ELEMENT_MODULE_PATHS_AS_ROUTES = [{
      selector: 'i-toc',
      path: '',
      loadChildren: './toc/toc.module#TocModule'
    }, {
      selector: 'i-code',
      path: '',
      loadChildren: './code/code-example.module#CodeExampleModule'
    }];
    var ELEMENT_MODULE_PATHS_TOKEN = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('iam/elements-map');
    var ELEMENT_MODULE_PATHS = new Map();
    ELEMENT_MODULE_PATHS_AS_ROUTES.forEach(function (route) {
      ELEMENT_MODULE_PATHS.set(route.selector, route.loadChildren);
    });
    /***/
  },

  /***/
  "./src/app/modules/markdown/viewer/elements/elements-loader.ts":
  /*!*********************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/elements/elements-loader.ts ***!
    \*********************************************************************/

  /*! exports provided: ElementsLoader */

  /***/
  function srcAppModulesMarkdownViewerElementsElementsLoaderTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ElementsLoader", function () {
      return ElementsLoader;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var _element_registry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./element-registry */
    "./src/app/modules/markdown/viewer/elements/element-registry.ts");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var _angular_elements__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! @angular/elements */
    "./node_modules/@angular/elements/__ivy_ngcc__/fesm2015/elements.js");

    var ElementsLoader = /*@__PURE__*/function () {
      var ElementsLoader = /*#__PURE__*/function () {
        function ElementsLoader(moduleFactoryLoader, moduleRef, elementModulePaths) {
          _classCallCheck(this, ElementsLoader);

          this.moduleFactoryLoader = moduleFactoryLoader;
          this.moduleRef = moduleRef;
          /** Map of custom elements that are in the process of being loaded and registered. */

          this.elementsLoading = new Map();
          this.elementsToLoad = new Map(elementModulePaths);
        }
        /**
         * Queries the provided element for any custom elements that have not yet been registered with
         * the browser. Custom elements that are registered will be removed from the list of unregistered
         * elements so that they will not be queried in subsequent calls.
         */


        _createClass(ElementsLoader, [{
          key: "loadContainedCustomElements",
          value: function loadContainedCustomElements(element) {
            var _this14 = this;

            var unregisteredSelectors = Array.from(this.elementsToLoad.keys()).filter(function (s) {
              return element.querySelector(s);
            });

            if (!unregisteredSelectors.length) {
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(undefined);
            } // Returns observable that completes when all discovered elements have been registered.


            var allRegistered = Promise.all(unregisteredSelectors.map(function (s) {
              return _this14.loadCustomElement(s);
            }));
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["from"])(allRegistered.then(function () {
              return undefined;
            }));
          }
          /** Loads and registers the custom element defined on the `WithCustomElement` module factory. */

        }, {
          key: "loadCustomElement",
          value: function loadCustomElement(selector) {
            var _this15 = this;

            if (this.elementsLoading.has(selector)) {
              // The custom element is in the process of being loaded and registered.
              return this.elementsLoading.get(selector);
            }

            if (this.elementsToLoad.has(selector)) {
              // Load and register the custom element (for the first time).
              var modulePath = this.elementsToLoad.get(selector);
              var loadedAndRegistered = this.moduleFactoryLoader.load(modulePath).then(function (elementModuleFactory) {
                var elementModuleRef = elementModuleFactory.create(_this15.moduleRef.injector);
                var injector = elementModuleRef.injector;
                var CustomElementComponent = elementModuleRef.instance.customElementComponent;
                var CustomElement = Object(_angular_elements__WEBPACK_IMPORTED_MODULE_3__["createCustomElement"])(CustomElementComponent, {
                  injector: injector
                });
                customElements.define(selector, CustomElement);
                return customElements.whenDefined(selector);
              }).then(function () {
                // The custom element has been successfully loaded and registered.
                // Remove from `elementsLoading` and `elementsToLoad`.
                _this15.elementsLoading["delete"](selector);

                _this15.elementsToLoad["delete"](selector);
              })["catch"](function (err) {
                // The custom element has failed to load and register.
                // Remove from `elementsLoading`.
                // (Do not remove from `elementsToLoad` in case it was a temporary error.)
                _this15.elementsLoading["delete"](selector);

                return Promise.reject(err);
              });
              this.elementsLoading.set(selector, loadedAndRegistered);
              return loadedAndRegistered;
            } // The custom element has already been loaded and registered.


            return Promise.resolve();
          }
        }]);

        return ElementsLoader;
      }();

      ElementsLoader.ɵfac = function ElementsLoader_Factory(t) {
        return new (t || ElementsLoader)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModuleFactoryLoader"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModuleRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_element_registry__WEBPACK_IMPORTED_MODULE_1__["ELEMENT_MODULE_PATHS_TOKEN"]));
      };

      ElementsLoader.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: ElementsLoader,
        factory: ElementsLoader.ɵfac
      });
      return ElementsLoader;
    }();
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/elements/elements.module.ts":
  /*!*********************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/elements/elements.module.ts ***!
    \*********************************************************************/

  /*! exports provided: ElementsModule */

  /***/
  function srcAppModulesMarkdownViewerElementsElementsModuleTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ElementsModule", function () {
      return ElementsModule;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/router */
    "./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js");
    /* harmony import */


    var _elements_loader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./elements-loader */
    "./src/app/modules/markdown/viewer/elements/elements-loader.ts");
    /* harmony import */


    var _element_registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./element-registry */
    "./src/app/modules/markdown/viewer/elements/element-registry.ts");
    /* harmony import */


    var _lazy_custom_element_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./lazy-custom-element.component */
    "./src/app/modules/markdown/viewer/elements/lazy-custom-element.component.ts");

    var ElementsModule = /*@__PURE__*/function () {
      var ElementsModule = function ElementsModule() {
        _classCallCheck(this, ElementsModule);
      };

      ElementsModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: ElementsModule
      });
      ElementsModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function ElementsModule_Factory(t) {
          return new (t || ElementsModule)();
        },
        providers: [_elements_loader__WEBPACK_IMPORTED_MODULE_2__["ElementsLoader"], {
          provide: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModuleFactoryLoader"],
          useClass: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SystemJsNgModuleLoader"]
        }, {
          provide: _element_registry__WEBPACK_IMPORTED_MODULE_3__["ELEMENT_MODULE_PATHS_TOKEN"],
          useValue: _element_registry__WEBPACK_IMPORTED_MODULE_3__["ELEMENT_MODULE_PATHS"]
        }, // Providing these routes as a signal to the build system that these modules should be
        // registered as lazy-loadable.
        // TODO(andrewjs): Provide first-class support for providing this.
        {
          provide: _angular_router__WEBPACK_IMPORTED_MODULE_1__["ROUTES"],
          useValue: _element_registry__WEBPACK_IMPORTED_MODULE_3__["ELEMENT_MODULE_PATHS_AS_ROUTES"],
          multi: true
        }]
      });
      return ElementsModule;
    }();

    (function () {
      (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](ElementsModule, {
        declarations: [_lazy_custom_element_component__WEBPACK_IMPORTED_MODULE_4__["LazyCustomElementComponent"]],
        exports: [_lazy_custom_element_component__WEBPACK_IMPORTED_MODULE_4__["LazyCustomElementComponent"]]
      });
    })();
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/elements/lazy-custom-element.component.ts":
  /*!***********************************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/elements/lazy-custom-element.component.ts ***!
    \***********************************************************************************/

  /*! exports provided: LazyCustomElementComponent */

  /***/
  function srcAppModulesMarkdownViewerElementsLazyCustomElementComponentTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LazyCustomElementComponent", function () {
      return LazyCustomElementComponent;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var _elements_loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./elements-loader */
    "./src/app/modules/markdown/viewer/elements/elements-loader.ts");
    /* harmony import */


    var core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! core */
    "./src/app/modules/core/index.ts");

    var LazyCustomElementComponent = /*@__PURE__*/function () {
      var LazyCustomElementComponent = /*#__PURE__*/function () {
        function LazyCustomElementComponent(elementRef, elementsLoader, logger) {
          _classCallCheck(this, LazyCustomElementComponent);

          this.elementRef = elementRef;
          this.elementsLoader = elementsLoader;
          this.logger = logger;
          this.selector = '';
        }

        _createClass(LazyCustomElementComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            if (!this.selector || /[^\w-]/.test(this.selector)) {
              this.logger.error(new Error("Invalid selector for 'i-lazy-ce': ".concat(this.selector)));
              return;
            }

            this.elementRef.nativeElement.innerHTML = "<".concat(this.selector, "></").concat(this.selector, ">");
            this.elementsLoader.loadCustomElement(this.selector);
          }
        }]);

        return LazyCustomElementComponent;
      }();

      LazyCustomElementComponent.ɵfac = function LazyCustomElementComponent_Factory(t) {
        return new (t || LazyCustomElementComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_elements_loader__WEBPACK_IMPORTED_MODULE_1__["ElementsLoader"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](core__WEBPACK_IMPORTED_MODULE_2__["Logger"]));
      };

      LazyCustomElementComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: LazyCustomElementComponent,
        selectors: [["i-l"]],
        inputs: {
          selector: "selector"
        },
        decls: 0,
        vars: 0,
        template: function LazyCustomElementComponent_Template(rf, ctx) {},
        encapsulation: 2
      });
      return LazyCustomElementComponent;
    }();
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/index.ts":
  /*!**************************************************!*\
    !*** ./src/app/modules/markdown/viewer/index.ts ***!
    \**************************************************/

  /*! exports provided: MarkdownViewerModule, configureMarkdownService */

  /***/
  function srcAppModulesMarkdownViewerIndexTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony import */


    var _markdown_viewer_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./markdown-viewer.module */
    "./src/app/modules/markdown/viewer/markdown-viewer.module.ts");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "MarkdownViewerModule", function () {
      return _markdown_viewer_module__WEBPACK_IMPORTED_MODULE_0__["MarkdownViewerModule"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "configureMarkdownService", function () {
      return _markdown_viewer_module__WEBPACK_IMPORTED_MODULE_0__["configureMarkdownService"];
    });
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/markdown-viewer.component.ts":
  /*!**********************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/markdown-viewer.component.ts ***!
    \**********************************************************************/

  /*! exports provided: NO_ANIMATIONS, MarkdownViewerComponent */

  /***/
  function srcAppModulesMarkdownViewerMarkdownViewerComponentTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NO_ANIMATIONS", function () {
      return NO_ANIMATIONS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MarkdownViewerComponent", function () {
      return MarkdownViewerComponent;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var packages_lazy_load__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! packages/lazy-load */
    "./packages/lazy-load.js");
    /* harmony import */


    var _elements_toc_toc_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./elements/toc/toc.component */
    "./src/app/modules/markdown/viewer/elements/toc/toc.component.ts");
    /* harmony import */


    var _utils_getUri__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./utils/getUri */
    "./src/app/modules/markdown/viewer/utils/getUri.ts");
    /* harmony import */


    var _markdown_viewer_container_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./markdown-viewer-container.component */
    "./src/app/modules/markdown/viewer/markdown-viewer-container.component.ts");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! rxjs/operators */
    "./node_modules/rxjs/_esm2015/operators/index.js");
    /* harmony import */


    var core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! core */
    "./src/app/modules/core/index.ts");
    /* harmony import */


    var _services_markdown_viewer_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ./services/markdown.viewer.service */
    "./src/app/modules/markdown/viewer/services/markdown.viewer.service.ts");
    /* harmony import */


    var _services_toc_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ./services/toc.service */
    "./src/app/modules/markdown/viewer/services/toc.service.ts");
    /* harmony import */


    var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! @angular/platform-browser */
    "./node_modules/@angular/platform-browser/__ivy_ngcc__/fesm2015/platform-browser.js");
    /* harmony import */


    var _elements_elements_loader__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! ./elements/elements-loader */
    "./src/app/modules/markdown/viewer/elements/elements-loader.ts");

    var NO_ANIMATIONS = 'no-animations';

    var MarkdownViewerComponent = /*@__PURE__*/function () {
      var MarkdownViewerComponent = /*#__PURE__*/function () {
        function MarkdownViewerComponent(parent, documentRef, elementRef, service, tocService, titleService, elementsLoader) {
          var _this16 = this;

          _classCallCheck(this, MarkdownViewerComponent);

          this.parent = parent;
          this.documentRef = documentRef;
          this.service = service;
          this.tocService = tocService;
          this.titleService = titleService;
          this.elementsLoader = elementsLoader;
          this.updateToc = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          this.updateContent = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          this.destroy$ = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          document.iamMarkdownIsPureViewMode = true;
          this.hostElement = elementRef.nativeElement;
          var container = this.hostElement;
          this.lozad = Object(packages_lazy_load__WEBPACK_IMPORTED_MODULE_1__["default"])('img[data-src]', {
            container: container
          });
          this.updateContent.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["debounceTime"])(500, rxjs__WEBPACK_IMPORTED_MODULE_5__["asyncScheduler"])).subscribe(function (value) {
            _this16.service.render(_this16.hostElement, value);

            _this16.lozad.observe();

            var targetElement = _this16.parent.viewerContainerDiv.nativeElement;

            _this16.elementsLoader.loadContainedCustomElements(targetElement).subscribe();
          });
          this.updateToc.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["debounceTime"])(3000, rxjs__WEBPACK_IMPORTED_MODULE_5__["asyncScheduler"])).subscribe(function (_) {
            var docId = Object(_utils_getUri__WEBPACK_IMPORTED_MODULE_3__["getAddr"])(_this16.documentRef.document.location.href);
            var targetElement = _this16.parent.viewerContainerDiv.nativeElement;

            var addTitleAndToc = function addTitleAndToc() {
              _this16.tocService.genToc(targetElement, docId);
            };

            if (MarkdownViewerComponent.config_addTocByDefault) {
              addTitleAndToc = _elements_toc_toc_component__WEBPACK_IMPORTED_MODULE_2__["TocComponent"].prepareTitleAndToc(_this16.hostElement, docId, _this16.tocService, _this16.titleService);
            }

            addTitleAndToc();
          });
        }

        _createClass(MarkdownViewerComponent, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.destroy$.emit();
          }
        }, {
          key: "model",
          set: function set(value) {
            this.updateContent.next(value);
            this.updateToc.next(value);
          }
        }]);

        return MarkdownViewerComponent;
      }();

      MarkdownViewerComponent.animationsEnabled = false;
      MarkdownViewerComponent.config_addTocByDefault = false;

      MarkdownViewerComponent.ɵfac = function MarkdownViewerComponent_Factory(t) {
        return new (t || MarkdownViewerComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_markdown_viewer_container_component__WEBPACK_IMPORTED_MODULE_4__["MarkdownViewerContainerComponent"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](core__WEBPACK_IMPORTED_MODULE_7__["DocumentRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_services_markdown_viewer_service__WEBPACK_IMPORTED_MODULE_8__["MarkdownViewerService"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_services_toc_service__WEBPACK_IMPORTED_MODULE_9__["TocService"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_platform_browser__WEBPACK_IMPORTED_MODULE_10__["Title"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_elements_elements_loader__WEBPACK_IMPORTED_MODULE_11__["ElementsLoader"]));
      };

      MarkdownViewerComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: MarkdownViewerComponent,
        selectors: [["markdown-viewer"]],
        inputs: {
          model: "model"
        },
        decls: 0,
        vars: 0,
        template: function MarkdownViewerComponent_Template(rf, ctx) {},
        styles: ["[_nghost-%COMP%] {\n  display: block;\n}"]
      });
      return MarkdownViewerComponent;
    }();
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/markdown-viewer.module.ts":
  /*!*******************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/markdown-viewer.module.ts ***!
    \*******************************************************************/

  /*! exports provided: MarkdownViewerModule, configureMarkdownService */

  /***/
  function srcAppModulesMarkdownViewerMarkdownViewerModuleTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MarkdownViewerModule", function () {
      return MarkdownViewerModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "configureMarkdownService", function () {
      return configureMarkdownService;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/common */
    "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");
    /* harmony import */


    var _markdown_viewer_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./markdown-viewer.component */
    "./src/app/modules/markdown/viewer/markdown-viewer.component.ts");
    /* harmony import */


    var _services_markdown_viewer_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./services/markdown.viewer.service */
    "./src/app/modules/markdown/viewer/services/markdown.viewer.service.ts");
    /* harmony import */


    var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! @angular/router */
    "./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js");
    /* harmony import */


    var shared__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! shared */
    "./src/app/modules/shared/index.ts");
    /* harmony import */


    var _viewer_toolbar_viewer_toolbar_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ./viewer-toolbar/viewer-toolbar.component */
    "./src/app/modules/markdown/viewer/viewer-toolbar/viewer-toolbar.component.ts");
    /* harmony import */


    var material__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! material */
    "./src/app/modules/material/index.ts");
    /* harmony import */


    var _markdown_viewer_container_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ./markdown-viewer-container.component */
    "./src/app/modules/markdown/viewer/markdown-viewer-container.component.ts");
    /* harmony import */


    var _metaseed_spinner__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! @metaseed/spinner */
    "./projects/spinner/src/public_api.ts");
    /* harmony import */


    var core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! core */
    "./src/app/modules/core/index.ts");
    /* harmony import */


    var _elements_elements_module__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! ./elements/elements.module */
    "./src/app/modules/markdown/viewer/elements/elements.module.ts");
    /* harmony import */


    var _services_toc_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
    /*! ./services/toc.service */
    "./src/app/modules/markdown/viewer/services/toc.service.ts");
    /* harmony import */


    var _core_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
    /*! ../../core/utils */
    "./src/app/modules/core/utils/index.ts");
    /* harmony import */


    var _services_active_element_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
    /*! ./services/active-element.service */
    "./src/app/modules/markdown/viewer/services/active-element.service.ts");
    /* harmony import */


    var _ngrx_store__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
    /*! @ngrx/store */
    "./node_modules/@ngrx/store/__ivy_ngcc__/fesm2015/store.js");
    /* harmony import */


    var _projects_spinner_src_lib_spinner_spinner_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
    /*! ../../../../../projects/spinner/src/lib/spinner/spinner.component */
    "./projects/spinner/src/lib/spinner/spinner.component.ts");
    /* harmony import */


    var _projects_spinner_src_lib_spinner_rotating_plane_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
    /*! ../../../../../projects/spinner/src/lib/spinner/rotating-plane.component */
    "./projects/spinner/src/lib/spinner/rotating-plane.component.ts");
    /* harmony import */


    var _projects_spinner_src_lib_spinner_double_bounce_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
    /*! ../../../../../projects/spinner/src/lib/spinner/double-bounce.component */
    "./projects/spinner/src/lib/spinner/double-bounce.component.ts");
    /* harmony import */


    var _projects_spinner_src_lib_spinner_wave_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(
    /*! ../../../../../projects/spinner/src/lib/spinner/wave.component */
    "./projects/spinner/src/lib/spinner/wave.component.ts");
    /* harmony import */


    var _projects_spinner_src_lib_spinner_wandering_cubes_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(
    /*! ../../../../../projects/spinner/src/lib/spinner/wandering-cubes.component */
    "./projects/spinner/src/lib/spinner/wandering-cubes.component.ts");
    /* harmony import */


    var _projects_spinner_src_lib_spinner_pulse_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(
    /*! ../../../../../projects/spinner/src/lib/spinner/pulse.component */
    "./projects/spinner/src/lib/spinner/pulse.component.ts");
    /* harmony import */


    var _projects_spinner_src_lib_spinner_chasing_dots_component__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(
    /*! ../../../../../projects/spinner/src/lib/spinner/chasing-dots.component */
    "./projects/spinner/src/lib/spinner/chasing-dots.component.ts");
    /* harmony import */


    var _projects_spinner_src_lib_spinner_circle_component__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(
    /*! ../../../../../projects/spinner/src/lib/spinner/circle.component */
    "./projects/spinner/src/lib/spinner/circle.component.ts");
    /* harmony import */


    var _projects_spinner_src_lib_spinner_three_bounce_component__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(
    /*! ../../../../../projects/spinner/src/lib/spinner/three-bounce.component */
    "./projects/spinner/src/lib/spinner/three-bounce.component.ts");
    /* harmony import */


    var _projects_spinner_src_lib_spinner_cube_grid_component__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(
    /*! ../../../../../projects/spinner/src/lib/spinner/cube-grid.component */
    "./projects/spinner/src/lib/spinner/cube-grid.component.ts");
    /* harmony import */


    var _projects_spinner_src_lib_spinner_word_press_component__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(
    /*! ../../../../../projects/spinner/src/lib/spinner/word-press.component */
    "./projects/spinner/src/lib/spinner/word-press.component.ts");
    /* harmony import */


    var _projects_spinner_src_lib_spinner_fading_circle_component__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(
    /*! ../../../../../projects/spinner/src/lib/spinner/fading-circle.component */
    "./projects/spinner/src/lib/spinner/fading-circle.component.ts");
    /* harmony import */


    var _projects_spinner_src_lib_spinner_folding_cube_component__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(
    /*! ../../../../../projects/spinner/src/lib/spinner/folding-cube.component */
    "./projects/spinner/src/lib/spinner/folding-cube.component.ts");
    /* harmony import */


    var _shared_scroll_hide_scroll_hide_directive__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(
    /*! ../../shared/scroll-hide/scroll-hide.directive */
    "./src/app/modules/shared/scroll-hide/scroll-hide.directive.ts");
    /* harmony import */


    var _shared_reading_position_indicator_reading_position_indicator_component__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(
    /*! ../../shared/reading-position-indicator/reading-position-indicator.component */
    "./src/app/modules/shared/reading-position-indicator/reading-position-indicator.component.ts");
    /* harmony import */


    var _shared_bottom_navigation_bottom_navigation_component__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(
    /*! ../../shared/bottom-navigation/bottom-navigation.component */
    "./src/app/modules/shared/bottom-navigation/bottom-navigation.component.ts");
    /* harmony import */


    var _shared_split_pane_horizontal_split_pane_component__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(
    /*! ../../shared/split-pane/horizontal-split-pane.component */
    "./src/app/modules/shared/split-pane/horizontal-split-pane.component.ts");
    /* harmony import */


    var _shared_split_pane_vertical_split_pane_component__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(
    /*! ../../shared/split-pane/vertical-split-pane.component */
    "./src/app/modules/shared/split-pane/vertical-split-pane.component.ts");
    /* harmony import */


    var _angular_forms__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(
    /*! @angular/forms */
    "./node_modules/@angular/forms/__ivy_ngcc__/fesm2015/forms.js");
    /* harmony import */


    var _angular_material_icon__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(
    /*! @angular/material/icon */
    "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/icon.js");
    /* harmony import */


    var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(
    /*! @angular/cdk/bidi */
    "./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/bidi.js");
    /* harmony import */


    var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(
    /*! @angular/cdk/scrolling */
    "./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/scrolling.js");
    /* harmony import */


    var _angular_material_menu__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(
    /*! @angular/material/menu */
    "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/menu.js");
    /* harmony import */


    var _angular_material_tabs__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(
    /*! @angular/material/tabs */
    "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/tabs.js");
    /* harmony import */


    var _angular_material_button__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(
    /*! @angular/material/button */
    "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/button.js");
    /* harmony import */


    var _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(
    /*! @angular/material/checkbox */
    "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/checkbox.js");
    /* harmony import */


    var _angular_material_card__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(
    /*! @angular/material/card */
    "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/card.js");
    /* harmony import */


    var _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(
    /*! @angular/material/snack-bar */
    "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/snack-bar.js");
    /* harmony import */


    var _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(
    /*! @angular/material/progress-bar */
    "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/progress-bar.js");
    /* harmony import */


    var _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(
    /*! @angular/material/toolbar */
    "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/toolbar.js");
    /* harmony import */


    var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(
    /*! @angular/material/dialog */
    "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/dialog.js");
    /* harmony import */


    var _elements_lazy_custom_element_component__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(
    /*! ./elements/lazy-custom-element.component */
    "./src/app/modules/markdown/viewer/elements/lazy-custom-element.component.ts");

    var MarkdownViewerModule = /*@__PURE__*/function () {
      var MarkdownViewerModule = /*#__PURE__*/function () {
        function MarkdownViewerModule() {
          _classCallCheck(this, MarkdownViewerModule);
        }

        _createClass(MarkdownViewerModule, null, [{
          key: "forChild",
          value: function forChild(config) {
            return {
              ngModule: MarkdownViewerModule,
              providers: [{
                provide: 'MarkdownConfig',
                useValue: config
              }, {
                provide: _services_markdown_viewer_service__WEBPACK_IMPORTED_MODULE_3__["MarkdownViewerService"],
                useFactory: configureMarkdownService,
                deps: [_angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"], core__WEBPACK_IMPORTED_MODULE_10__["DocumentRef"], _core_utils__WEBPACK_IMPORTED_MODULE_13__["Utilities"], _ngrx_store__WEBPACK_IMPORTED_MODULE_15__["State"], _ngrx_store__WEBPACK_IMPORTED_MODULE_15__["Store"], 'MarkdownConfig']
              }]
            };
          }
        }]);

        return MarkdownViewerModule;
      }();

      MarkdownViewerModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: MarkdownViewerModule
      });
      MarkdownViewerModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function MarkdownViewerModule_Factory(t) {
          return new (t || MarkdownViewerModule)();
        },
        providers: [_services_toc_service__WEBPACK_IMPORTED_MODULE_12__["TocService"], _services_active_element_service__WEBPACK_IMPORTED_MODULE_14__["ActiveElementService"]],
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _metaseed_spinner__WEBPACK_IMPORTED_MODULE_9__["SpinnerModule"], shared__WEBPACK_IMPORTED_MODULE_5__["SharedModule"], material__WEBPACK_IMPORTED_MODULE_7__["MaterialModule"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["RouterModule"], _elements_elements_module__WEBPACK_IMPORTED_MODULE_11__["ElementsModule"]]]
      });
      return MarkdownViewerModule;
    }();

    (function () {
      (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](MarkdownViewerModule, {
        declarations: [_markdown_viewer_component__WEBPACK_IMPORTED_MODULE_2__["MarkdownViewerComponent"], _viewer_toolbar_viewer_toolbar_component__WEBPACK_IMPORTED_MODULE_6__["ViewerToolbarComponent"], _markdown_viewer_container_component__WEBPACK_IMPORTED_MODULE_8__["MarkdownViewerContainerComponent"]],
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _metaseed_spinner__WEBPACK_IMPORTED_MODULE_9__["SpinnerModule"], shared__WEBPACK_IMPORTED_MODULE_5__["SharedModule"], material__WEBPACK_IMPORTED_MODULE_7__["MaterialModule"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["RouterModule"], _elements_elements_module__WEBPACK_IMPORTED_MODULE_11__["ElementsModule"]],
        exports: [_markdown_viewer_component__WEBPACK_IMPORTED_MODULE_2__["MarkdownViewerComponent"], _viewer_toolbar_viewer_toolbar_component__WEBPACK_IMPORTED_MODULE_6__["ViewerToolbarComponent"], _markdown_viewer_container_component__WEBPACK_IMPORTED_MODULE_8__["MarkdownViewerContainerComponent"]]
      });
    })();

    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetComponentScope"](_markdown_viewer_container_component__WEBPACK_IMPORTED_MODULE_8__["MarkdownViewerContainerComponent"], [_angular_common__WEBPACK_IMPORTED_MODULE_1__["NgClass"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgComponentOutlet"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgForOf"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgIf"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgTemplateOutlet"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgStyle"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgSwitch"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgSwitchCase"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgSwitchDefault"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgPlural"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgPluralCase"], _projects_spinner_src_lib_spinner_spinner_component__WEBPACK_IMPORTED_MODULE_16__["SpinnerComponent"], _projects_spinner_src_lib_spinner_rotating_plane_component__WEBPACK_IMPORTED_MODULE_17__["RotatingPlaneComponent"], _projects_spinner_src_lib_spinner_double_bounce_component__WEBPACK_IMPORTED_MODULE_18__["DoubleBounceComponent"], _projects_spinner_src_lib_spinner_wave_component__WEBPACK_IMPORTED_MODULE_19__["WaveComponent"], _projects_spinner_src_lib_spinner_wandering_cubes_component__WEBPACK_IMPORTED_MODULE_20__["WanderingCubesComponent"], _projects_spinner_src_lib_spinner_pulse_component__WEBPACK_IMPORTED_MODULE_21__["PulseComponent"], _projects_spinner_src_lib_spinner_chasing_dots_component__WEBPACK_IMPORTED_MODULE_22__["ChasingDotsComponent"], _projects_spinner_src_lib_spinner_circle_component__WEBPACK_IMPORTED_MODULE_23__["CircleComponent"], _projects_spinner_src_lib_spinner_three_bounce_component__WEBPACK_IMPORTED_MODULE_24__["ThreeBounceComponent"], _projects_spinner_src_lib_spinner_cube_grid_component__WEBPACK_IMPORTED_MODULE_25__["CubeGridComponent"], _projects_spinner_src_lib_spinner_word_press_component__WEBPACK_IMPORTED_MODULE_26__["WordPressComponent"], _projects_spinner_src_lib_spinner_fading_circle_component__WEBPACK_IMPORTED_MODULE_27__["FadingCircleComponent"], _projects_spinner_src_lib_spinner_folding_cube_component__WEBPACK_IMPORTED_MODULE_28__["FoldingCubeComponent"], _shared_scroll_hide_scroll_hide_directive__WEBPACK_IMPORTED_MODULE_29__["ScrollHideDirective"], _shared_reading_position_indicator_reading_position_indicator_component__WEBPACK_IMPORTED_MODULE_30__["ReadingPositionIndicatorComponent"], _shared_bottom_navigation_bottom_navigation_component__WEBPACK_IMPORTED_MODULE_31__["BottomNavigationComponent"], _shared_split_pane_horizontal_split_pane_component__WEBPACK_IMPORTED_MODULE_32__["HorizontalSplitPaneComponent"], _shared_split_pane_vertical_split_pane_component__WEBPACK_IMPORTED_MODULE_33__["VerticalSplitPaneComponent"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["ɵangular_packages_forms_forms_y"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["NgSelectOption"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["ɵangular_packages_forms_forms_x"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["DefaultValueAccessor"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["NumberValueAccessor"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["RangeValueAccessor"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["CheckboxControlValueAccessor"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["SelectControlValueAccessor"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["SelectMultipleControlValueAccessor"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["RadioControlValueAccessor"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["NgControlStatus"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["NgControlStatusGroup"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["RequiredValidator"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["MinLengthValidator"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["MaxLengthValidator"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["PatternValidator"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["CheckboxRequiredValidator"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["EmailValidator"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["NgModel"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["NgModelGroup"], _angular_forms__WEBPACK_IMPORTED_MODULE_34__["NgForm"], _angular_material_icon__WEBPACK_IMPORTED_MODULE_35__["MatIcon"], _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_36__["Dir"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_37__["CdkScrollable"], _angular_material_menu__WEBPACK_IMPORTED_MODULE_38__["_MatMenu"], _angular_material_menu__WEBPACK_IMPORTED_MODULE_38__["MatMenuItem"], _angular_material_menu__WEBPACK_IMPORTED_MODULE_38__["MatMenuTrigger"], _angular_material_menu__WEBPACK_IMPORTED_MODULE_38__["MatMenuContent"], _angular_material_tabs__WEBPACK_IMPORTED_MODULE_39__["MatTabGroup"], _angular_material_tabs__WEBPACK_IMPORTED_MODULE_39__["MatTabLabel"], _angular_material_tabs__WEBPACK_IMPORTED_MODULE_39__["MatTab"], _angular_material_tabs__WEBPACK_IMPORTED_MODULE_39__["MatTabNav"], _angular_material_tabs__WEBPACK_IMPORTED_MODULE_39__["MatTabLink"], _angular_material_tabs__WEBPACK_IMPORTED_MODULE_39__["MatTabContent"], _angular_material_button__WEBPACK_IMPORTED_MODULE_40__["MatButton"], _angular_material_button__WEBPACK_IMPORTED_MODULE_40__["MatAnchor"], _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_41__["MatCheckbox"], _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_41__["MatCheckboxRequiredValidator"], _angular_material_card__WEBPACK_IMPORTED_MODULE_42__["MatCard"], _angular_material_card__WEBPACK_IMPORTED_MODULE_42__["MatCardHeader"], _angular_material_card__WEBPACK_IMPORTED_MODULE_42__["MatCardTitleGroup"], _angular_material_card__WEBPACK_IMPORTED_MODULE_42__["MatCardContent"], _angular_material_card__WEBPACK_IMPORTED_MODULE_42__["MatCardTitle"], _angular_material_card__WEBPACK_IMPORTED_MODULE_42__["MatCardSubtitle"], _angular_material_card__WEBPACK_IMPORTED_MODULE_42__["MatCardActions"], _angular_material_card__WEBPACK_IMPORTED_MODULE_42__["MatCardFooter"], _angular_material_card__WEBPACK_IMPORTED_MODULE_42__["MatCardSmImage"], _angular_material_card__WEBPACK_IMPORTED_MODULE_42__["MatCardMdImage"], _angular_material_card__WEBPACK_IMPORTED_MODULE_42__["MatCardLgImage"], _angular_material_card__WEBPACK_IMPORTED_MODULE_42__["MatCardImage"], _angular_material_card__WEBPACK_IMPORTED_MODULE_42__["MatCardXlImage"], _angular_material_card__WEBPACK_IMPORTED_MODULE_42__["MatCardAvatar"], _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_43__["MatSnackBarContainer"], _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_44__["MatProgressBar"], _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_45__["MatToolbar"], _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_45__["MatToolbarRow"], _angular_material_dialog__WEBPACK_IMPORTED_MODULE_46__["MatDialogContainer"], _angular_material_dialog__WEBPACK_IMPORTED_MODULE_46__["MatDialogClose"], _angular_material_dialog__WEBPACK_IMPORTED_MODULE_46__["MatDialogTitle"], _angular_material_dialog__WEBPACK_IMPORTED_MODULE_46__["MatDialogContent"], _angular_material_dialog__WEBPACK_IMPORTED_MODULE_46__["MatDialogActions"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["RouterOutlet"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["RouterLink"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["RouterLinkWithHref"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["RouterLinkActive"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["ɵangular_packages_router_router_l"], _elements_lazy_custom_element_component__WEBPACK_IMPORTED_MODULE_47__["LazyCustomElementComponent"], _markdown_viewer_component__WEBPACK_IMPORTED_MODULE_2__["MarkdownViewerComponent"], _viewer_toolbar_viewer_toolbar_component__WEBPACK_IMPORTED_MODULE_6__["ViewerToolbarComponent"], _markdown_viewer_container_component__WEBPACK_IMPORTED_MODULE_8__["MarkdownViewerContainerComponent"]], [_angular_common__WEBPACK_IMPORTED_MODULE_1__["AsyncPipe"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["UpperCasePipe"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["LowerCasePipe"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["JsonPipe"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["SlicePipe"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["DecimalPipe"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["PercentPipe"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["TitleCasePipe"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["CurrencyPipe"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["DatePipe"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["I18nPluralPipe"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["I18nSelectPipe"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["KeyValuePipe"]]);

    function configureMarkdownService(router, document, utils, state, store, config) {
      return new _services_markdown_viewer_service__WEBPACK_IMPORTED_MODULE_3__["MarkdownViewerService"](router, document, utils, state, store, config);
    }
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/services/active-element.service.ts":
  /*!****************************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/services/active-element.service.ts ***!
    \****************************************************************************/

  /*! exports provided: ActiveElementService */

  /***/
  function srcAppModulesMarkdownViewerServicesActiveElementServiceTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ActiveElementService", function () {
      return ActiveElementService;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var _model_markdown_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../../model/markdown.model */
    "./src/app/modules/markdown/model/markdown.model.ts");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! rxjs/operators */
    "./node_modules/rxjs/_esm2015/operators/index.js");
    /* harmony import */


    var _toc_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./toc.service */
    "./src/app/modules/markdown/viewer/services/toc.service.ts");

    var ActiveElementService = /*@__PURE__*/function () {
      var ActiveElementService = function ActiveElementService(markdownService, tocService) {
        _classCallCheck(this, ActiveElementService);

        this.markdownService = markdownService;
        this.tocService = tocService;
        Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["combineLatest"])(markdownService.viewer$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (v) {
          return v.activeElement$;
        })), tocService.activeElement$).subscribe(function (_ref12) {
          var _ref13 = _slicedToArray(_ref12, 2),
              activeElement$ = _ref13[0],
              activeItem = _ref13[1];

          activeElement$.next(activeItem);
        });
      };

      ActiveElementService.ɵfac = function ActiveElementService_Factory(t) {
        return new (t || ActiveElementService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_model_markdown_model__WEBPACK_IMPORTED_MODULE_1__["MARKDOWN_SERVICE_TOKEN"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_toc_service__WEBPACK_IMPORTED_MODULE_4__["TocService"]));
      };

      ActiveElementService.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: ActiveElementService,
        factory: ActiveElementService.ɵfac
      });
      return ActiveElementService;
    }();
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/services/markdown-it-plugins/anchor.js":
  /*!********************************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/services/markdown-it-plugins/anchor.js ***!
    \********************************************************************************/

  /*! no static exports found */

  /***/
  function srcAppModulesMarkdownViewerServicesMarkdownItPluginsAnchorJs(module, exports) {
    // const string = require("string");
    // const slugify = s =>
    //   string(s)
    //     .slugify()
    //     .toString();
    var slugify = function slugify(s) {
      return s;
    };

    var position = {
      "false": 'push',
      "true": 'unshift'
    };
    var hasProp = {}.hasOwnProperty;

    var permalinkHref = function permalinkHref(slug) {
      return "#".concat(slug);
    };

    var renderPermalink = function renderPermalink(slug, opts, state, idx) {
      var _state$tokens$childre;

      var space = function space() {
        return Object.assign(new state.Token('text', '', 0), {
          content: ' '
        });
      };

      var linkTokens = [Object.assign(new state.Token('link_open', 'a', 1), {
        attrs: [['class', opts.permalinkClass], ['href', opts.permalinkHref(slug, state)], ['aria-hidden', 'true']]
      }), Object.assign(new state.Token('html_block', '', 0), {
        content: opts.permalinkSymbol
      }), new state.Token('link_close', 'a', -1)]; // `push` or `unshift` according to position option.
      // Space is at the opposite side.

      linkTokens[position[!opts.permalinkBefore]](space());

      (_state$tokens$childre = state.tokens[idx + 1].children)[position[opts.permalinkBefore]].apply(_state$tokens$childre, linkTokens);
    };

    var uniqueSlug = function uniqueSlug(slug, slugs) {
      // Mark this slug as used in the environment.
      slugs[slug] = (hasProp.call(slugs, slug) ? slugs[slug] : 0) + 1; // First slug, return as is.

      if (slugs[slug] === 1) {
        return slug;
      } // Duplicate slug, add a `-2`, `-3`, etc. to keep ID unique.


      return slug + '-' + slugs[slug];
    };

    var isLevelSelectedNumber = function isLevelSelectedNumber(selection) {
      return function (level) {
        return level >= selection;
      };
    };

    var isLevelSelectedArray = function isLevelSelectedArray(selection) {
      return function (level) {
        return selection.includes(level);
      };
    };

    var anchor = function anchor(md, opts) {
      opts = Object.assign({}, anchor.defaults, opts);
      md.core.ruler.push('anchor', function (state) {
        var slugs = {};
        var tokens = state.tokens;
        var isLevelSelected = Array.isArray(opts.level) ? isLevelSelectedArray(opts.level) : isLevelSelectedNumber(opts.level);
        tokens.filter(function (token) {
          return token.type === 'heading_open';
        }).filter(function (token) {
          return isLevelSelected(Number(token.tag.substr(1)));
        }).forEach(function (token) {
          // Aggregate the next token children text.
          var title = tokens[tokens.indexOf(token) + 1].children.filter(function (token) {
            return token.type === 'text' || token.type === 'code_inline';
          }).reduce(function (acc, t) {
            return acc + t.content;
          }, '');
          var slug = token.attrGet('id');

          if (slug == null) {
            slug = uniqueSlug(opts.slugify(title), slugs);
            token.attrPush(['id', slug]);
          }

          if (opts.permalink) {
            opts.renderPermalink(slug, opts, state, tokens.indexOf(token));
          }

          if (opts.callback) {
            opts.callback(token, {
              slug: slug,
              title: title
            });
          }
        });
      });
    };

    anchor.defaults = {
      level: 1,
      slugify: slugify,
      permalink: false,
      renderPermalink: renderPermalink,
      permalinkClass: 'header-anchor',
      permalinkSymbol: '¶',
      permalinkBefore: false,
      permalinkHref: permalinkHref
    };
    module.exports = anchor;
    /***/
  },

  /***/
  "./src/app/modules/markdown/viewer/services/markdown-it-plugins/common-container/index.js":
  /*!************************************************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/services/markdown-it-plugins/common-container/index.js ***!
    \************************************************************************************************/

  /*! exports provided: container_plugin */

  /***/
  function srcAppModulesMarkdownViewerServicesMarkdownItPluginsCommonContainerIndexJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "container_plugin", function () {
      return container_plugin;
    }); // https://github.com/markdown-it/markdown-it-container


    function container_plugin(md, name, options) {
      function validateDefault(params) {
        return params.trim().split(' ', 2)[0] === name;
      }

      function renderDefault(tokens, idx, _options, env, slf) {
        // add a class to the opening tag
        if (tokens[idx].nesting === 1) {
          tokens[idx].attrJoin('class', name);
        }

        return slf.renderToken(tokens, idx, _options, env, slf);
      }

      options = options || {};
      var min_markers = 3,
          marker_str = options.marker || ':',
          marker_char = marker_str.charCodeAt(0),
          marker_len = marker_str.length,
          validate = options.validate || validateDefault,
          render = options.render || renderDefault;

      function containerParser(state, startLine, endLine, silent) {
        var pos,
            nextLine,
            marker_count,
            markup,
            params,
            token,
            old_parent,
            old_line_max,
            auto_closed = false,
            start = state.bMarks[startLine] + state.tShift[startLine],
            max = state.eMarks[startLine]; // Check out the first character quickly,
        // this should filter out most of non-containers
        //

        if (marker_char !== state.src.charCodeAt(start)) {
          return false;
        } // Check out the rest of the marker string
        //


        for (pos = start + 1; pos <= max; pos++) {
          if (marker_str[(pos - start) % marker_len] !== state.src[pos]) {
            break;
          }
        }

        marker_count = Math.floor((pos - start) / marker_len);

        if (marker_count < min_markers) {
          return false;
        }

        pos -= (pos - start) % marker_len;
        markup = state.src.slice(start, pos);
        params = state.src.slice(pos, max);

        if (!validate(params)) {
          return false;
        } // Since start is found, we can report success here in validation mode
        //


        if (silent) {
          return true;
        } // Search for the end of the block
        //


        nextLine = startLine;

        for (;;) {
          nextLine++;

          if (nextLine >= endLine) {
            // unclosed block should be autoclosed by end of document.
            // also block seems to be autoclosed by end of parent
            break;
          }

          start = state.bMarks[nextLine] + state.tShift[nextLine];
          max = state.eMarks[nextLine];

          if (start < max && state.sCount[nextLine] < state.blkIndent) {
            // non-empty line with negative indent should stop the list:
            // - ```
            //  test
            break;
          }

          if (marker_char !== state.src.charCodeAt(start)) {
            continue;
          }

          if (state.sCount[nextLine] - state.blkIndent >= 4) {
            // closing fence should be indented less than 4 spaces
            continue;
          }

          for (pos = start + 1; pos <= max; pos++) {
            if (marker_str[(pos - start) % marker_len] !== state.src[pos]) {
              break;
            }
          } // closing code fence must be at least as long as the opening one


          if (Math.floor((pos - start) / marker_len) < marker_count) {
            continue;
          } // make sure tail has spaces only


          pos -= (pos - start) % marker_len;
          pos = state.skipSpaces(pos);

          if (pos < max) {
            continue;
          } // found!


          auto_closed = true;
          break;
        }

        old_parent = state.parentType;
        old_line_max = state.lineMax;
        state.parentType = 'container'; // this will prevent lazy continuations from ever going past our end marker

        state.lineMax = nextLine;
        token = state.push('container_' + name + '_open', 'div', 1);
        token.markup = markup;
        token.block = true;
        token.info = params;
        token.map = [startLine, nextLine];
        state.md.block.tokenize(state, startLine + 1, nextLine);
        token = state.push('container_' + name + '_close', 'div', -1);
        token.markup = state.src.slice(start, pos);
        token.block = true;
        state.parentType = old_parent;
        state.lineMax = old_line_max;
        state.line = nextLine + (auto_closed ? 1 : 0);
        return true;
      }

      md.block.ruler.before('fence', 'container_' + name, containerParser, {
        alt: ['paragraph', 'reference', 'blockquote', 'list']
      });
      md.renderer.rules['container_' + name + '_open'] = render;
      md.renderer.rules['container_' + name + '_close'] = render;
    }
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/services/markdown-it-plugins/container.ts":
  /*!***********************************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/services/markdown-it-plugins/container.ts ***!
    \***********************************************************************************/

  /*! exports provided: ContainerPlugin */

  /***/
  function srcAppModulesMarkdownViewerServicesMarkdownItPluginsContainerTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ContainerPlugin", function () {
      return ContainerPlugin;
    });
    /* harmony import */


    var _common_container__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./common-container */
    "./src/app/modules/markdown/viewer/services/markdown-it-plugins/common-container/index.js");

    var ContainerPlugin = function ContainerPlugin(markdown, name, option) {
      var _this17 = this;

      _classCallCheck(this, ContainerPlugin);

      this.markdown = markdown;
      this.option = option;

      this.DEFAULT_CONTAINER_FUNCTION = function (name, cssClass) {
        var showHeading = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var regex = new RegExp("^".concat(name, "\\s*(.*)$"));
        var me = _this17;
        return {
          validate: function validate(params) {
            return params.trim().match(regex);
          },
          render: function render(tokens, idx) {
            var m = tokens[idx].info.trim().match(regex);

            if (tokens[idx].nesting === 1) {
              return "<div class=\"".concat(cssClass ? cssClass : name, "\">\n                    ").concat(showHeading ? '<b>' + me.markdown.utils.escapeHtml(m[1]) + '</b>' : '', "\n");
            } else {
              return '</div>';
            }
          }
        };
      };

      this.option = this.option || this.DEFAULT_CONTAINER_FUNCTION(name);
      this.markdown.use(_common_container__WEBPACK_IMPORTED_MODULE_0__["container_plugin"], name, this.option);
    };
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/services/markdown-it-plugins/fence.js":
  /*!*******************************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/services/markdown-it-plugins/fence.js ***!
    \*******************************************************************************/

  /*! exports provided: fence */

  /***/
  function srcAppModulesMarkdownViewerServicesMarkdownItPluginsFenceJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "fence", function () {
      return fence;
    });

    var regex = /{([ ,\d-]+)}/;

    var fence = function fence(md) {
      var originalRule = md.renderer.rules.fence;

      md.renderer.rules.fence = function () {
        for (var _len6 = arguments.length, a = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          a[_key6] = arguments[_key6];
        }

        var tokens = a[0],
            idx = a[1],
            options = a[2],
            env = a[3],
            self = a[4];
        var token = tokens[idx];

        if (!token.info || !regex.test(token.info)) {
          return originalRule.apply(void 0, a);
        }

        env.highlightLineNumbers = regex.exec(token.info)[1];
        var r = originalRule.apply(void 0, a);
        env.highlightLineNumbers = undefined;
        return r;
      };
    };
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/services/markdown-it-plugins/footnote.js":
  /*!**********************************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/services/markdown-it-plugins/footnote.js ***!
    \**********************************************************************************/

  /*! no static exports found */

  /***/
  function srcAppModulesMarkdownViewerServicesMarkdownItPluginsFootnoteJs(module, exports, __webpack_require__) {
    "use strict";

    function render_footnote_anchor_name(tokens, idx, options, env
    /*, slf*/
    ) {
      var n = Number(tokens[idx].meta.id + 1).toString();
      var prefix = '';

      if (typeof env.docId === 'string') {
        prefix = '-' + env.docId + '-';
      }

      return prefix + n;
    }

    function render_footnote_caption(tokens, idx
    /*, options, env, slf*/
    ) {
      var n = Number(tokens[idx].meta.id + 1).toString();

      if (tokens[idx].meta.subId > 0) {
        n += ':' + tokens[idx].meta.subId;
      }

      return '[' + n + ']';
    }

    function render_footnote_block_open(tokens, idx, options) {
      return (options.xhtmlOut ? '<hr class="footnotes-sep" />\n' : '<hr class="footnotes-sep">\n') + '<section class="footnotes">\n' + '<ol class="footnotes-list">\n';
    }

    function render_footnote_block_close(tokens, idx, options, env, slf) {
      env.footnotes = null; // redo from start next time.

      return '</ol>\n</section>\n';
    }

    function render_footnote_open(tokens, idx, options, env, slf) {
      var id = slf.rules.footnote_anchor_name(tokens, idx, options, env, slf);

      if (tokens[idx].meta.subId > 0) {
        id += ':' + tokens[idx].meta.subId;
      }

      return '<li id="fn' + id + '" class="footnote-item">';
    }

    function render_footnote_close() {
      return '</li>\n';
    }

    module.exports = function footnote_plugin(md, conf) {
      var config = conf;
      var parseLinkLabel = md.helpers.parseLinkLabel,
          isSpace = md.utils.isSpace;

      md.renderer.rules.footnote_ref = function render_footnote_ref(tokens, idx, options, env, slf) {
        var id = slf.rules.footnote_anchor_name(tokens, idx, options, env, slf);
        var caption = slf.rules.footnote_caption(tokens, idx, options, env, slf);
        var refid = id;

        if (tokens[idx].meta.subId > 0) {
          refid += ':' + tokens[idx].meta.subId;
        }

        return '<sup class="footnote-ref has-tooltip" data-id="fn' + id + '" onmouseenter=md_footnote_tooltip()><a href="' + config.getUrl() + '#fn' + id + '" id="fnref' + refid + '">' + caption + '</a></sup>';
      };

      md.renderer.rules.footnote_block_open = render_footnote_block_open;
      md.renderer.rules.footnote_block_close = render_footnote_block_close;
      md.renderer.rules.footnote_open = render_footnote_open;
      md.renderer.rules.footnote_close = render_footnote_close;

      md.renderer.rules.footnote_anchor = function render_footnote_anchor(tokens, idx, options, env, slf) {
        var id = slf.rules.footnote_anchor_name(tokens, idx, options, env, slf);

        if (tokens[idx].meta.subId > 0) {
          id += ':' + tokens[idx].meta.subId;
        }
        /* ↩ with escape code to prevent display as Apple Emoji on iOS */


        return ' <a href="' + config.getUrl() + '#fnref' + id + "\" class=\"footnote-backref\">\u21A9\uFE0E</a>";
      }; // helpers (only used in other rules, no tokens are attached to those)


      md.renderer.rules.footnote_caption = render_footnote_caption;
      md.renderer.rules.footnote_anchor_name = render_footnote_anchor_name; // Process footnote block definition

      function footnote_def(state, startLine, endLine, silent) {
        var oldBMark,
            oldTShift,
            oldSCount,
            oldParentType,
            pos,
            label,
            token,
            initial,
            offset,
            ch,
            posAfterColon,
            start = state.bMarks[startLine] + state.tShift[startLine],
            max = state.eMarks[startLine]; // line should be at least 5 chars - "[^x]:"

        if (start + 4 > max) {
          return false;
        }

        if (state.src.charCodeAt(start) !== 0x5b
        /* [ */
        ) {
            return false;
          }

        if (state.src.charCodeAt(start + 1) !== 0x5e
        /* ^ */
        ) {
            return false;
          }

        for (pos = start + 2; pos < max; pos++) {
          if (state.src.charCodeAt(pos) === 0x20) {
            return false;
          }

          if (state.src.charCodeAt(pos) === 0x5d
          /* ] */
          ) {
              break;
            }
        }

        if (pos === start + 2) {
          return false;
        } // no empty footnote labels


        if (pos + 1 >= max || state.src.charCodeAt(++pos) !== 0x3a
        /* : */
        ) {
            return false;
          }

        if (silent) {
          return true;
        }

        pos++;

        if (!state.env.footnotes) {
          state.env.footnotes = {};
        }

        if (!state.env.footnotes.refs) {
          state.env.footnotes.refs = {};
        }

        label = state.src.slice(start + 2, pos - 2);
        state.env.footnotes.refs[':' + label] = -1;
        token = new state.Token('footnote_reference_open', '', 1);
        token.meta = {
          label: label
        };
        token.level = state.level++;
        state.tokens.push(token);
        oldBMark = state.bMarks[startLine];
        oldTShift = state.tShift[startLine];
        oldSCount = state.sCount[startLine];
        oldParentType = state.parentType;
        posAfterColon = pos;
        initial = offset = state.sCount[startLine] + pos - (state.bMarks[startLine] + state.tShift[startLine]);

        while (pos < max) {
          ch = state.src.charCodeAt(pos);

          if (isSpace(ch)) {
            if (ch === 0x09) {
              offset += 4 - offset % 4;
            } else {
              offset++;
            }
          } else {
            break;
          }

          pos++;
        }

        state.tShift[startLine] = pos - posAfterColon;
        state.sCount[startLine] = offset - initial;
        state.bMarks[startLine] = posAfterColon;
        state.blkIndent += 4;
        state.parentType = 'footnote';

        if (state.sCount[startLine] < state.blkIndent) {
          state.sCount[startLine] += state.blkIndent;
        }

        state.md.block.tokenize(state, startLine, endLine, true);
        state.parentType = oldParentType;
        state.blkIndent -= 4;
        state.tShift[startLine] = oldTShift;
        state.sCount[startLine] = oldSCount;
        state.bMarks[startLine] = oldBMark;
        token = new state.Token('footnote_reference_close', '', -1);
        token.level = --state.level;
        state.tokens.push(token);
        return true;
      } // Process inline footnotes (^[...])


      function footnote_inline(state, silent) {
        var labelStart,
            labelEnd,
            footnoteId,
            token,
            tokens,
            max = state.posMax,
            start = state.pos;

        if (start + 2 >= max) {
          return false;
        }

        if (state.src.charCodeAt(start) !== 0x5e
        /* ^ */
        ) {
            return false;
          }

        if (state.src.charCodeAt(start + 1) !== 0x5b
        /* [ */
        ) {
            return false;
          }

        labelStart = start + 2;
        labelEnd = parseLinkLabel(state, start + 1); // parser failed to find ']', so it's not a valid note

        if (labelEnd < 0) {
          return false;
        } // We found the end of the link, and know for a fact it's a valid link;
        // so all that's left to do is to call tokenizer.
        //


        if (!silent) {
          if (!state.env.footnotes) {
            state.env.footnotes = {};
          }

          if (!state.env.footnotes.list) {
            state.env.footnotes.list = [];
          }

          footnoteId = state.env.footnotes.list.length;
          state.md.inline.parse(state.src.slice(labelStart, labelEnd), state.md, state.env, tokens = []);
          token = state.push('footnote_ref', '', 0);
          token.meta = {
            id: footnoteId
          };
          state.env.footnotes.list[footnoteId] = {
            tokens: tokens
          };
        }

        state.pos = labelEnd + 1;
        state.posMax = max;
        return true;
      } // Process footnote references ([^...])


      function footnote_ref(state, silent) {
        var label,
            pos,
            footnoteId,
            footnoteSubId,
            token,
            max = state.posMax,
            start = state.pos; // should be at least 4 chars - "[^x]"

        if (start + 3 > max) {
          return false;
        }

        if (!state.env.footnotes || !state.env.footnotes.refs) {
          return false;
        }

        if (state.src.charCodeAt(start) !== 0x5b
        /* [ */
        ) {
            return false;
          }

        if (state.src.charCodeAt(start + 1) !== 0x5e
        /* ^ */
        ) {
            return false;
          }

        for (pos = start + 2; pos < max; pos++) {
          if (state.src.charCodeAt(pos) === 0x20) {
            return false;
          }

          if (state.src.charCodeAt(pos) === 0x0a) {
            return false;
          }

          if (state.src.charCodeAt(pos) === 0x5d
          /* ] */
          ) {
              break;
            }
        }

        if (pos === start + 2) {
          return false;
        } // no empty footnote labels


        if (pos >= max) {
          return false;
        }

        pos++;
        label = state.src.slice(start + 2, pos - 1);

        if (typeof state.env.footnotes.refs[':' + label] === 'undefined') {
          return false;
        }

        if (!silent) {
          if (!state.env.footnotes.list) {
            state.env.footnotes.list = [];
          }

          if (state.env.footnotes.refs[':' + label] < 0) {
            footnoteId = state.env.footnotes.list.length;
            state.env.footnotes.list[footnoteId] = {
              label: label,
              count: 0
            };
            state.env.footnotes.refs[':' + label] = footnoteId;
          } else {
            footnoteId = state.env.footnotes.refs[':' + label];
          }

          footnoteSubId = state.env.footnotes.list[footnoteId].count;
          state.env.footnotes.list[footnoteId].count++;
          token = state.push('footnote_ref', '', 0);
          token.meta = {
            id: footnoteId,
            subId: footnoteSubId,
            label: label
          };
        }

        state.pos = pos;
        state.posMax = max;
        return true;
      } // Glue footnote tokens to end of token stream


      function footnote_tail(state) {
        var i,
            l,
            j,
            t,
            lastParagraph,
            list,
            token,
            tokens,
            current,
            currentLabel,
            insideRef = false,
            refTokens = {};

        if (!state.env.footnotes) {
          return;
        }

        state.tokens = state.tokens.filter(function (tok) {
          if (tok.type === 'footnote_reference_open') {
            insideRef = true;
            current = [];
            currentLabel = tok.meta.label;
            return false;
          }

          if (tok.type === 'footnote_reference_close') {
            insideRef = false; // prepend ':' to avoid conflict with Object.prototype members

            refTokens[':' + currentLabel] = current;
            return false;
          }

          if (insideRef) {
            current.push(tok);
          }

          return !insideRef;
        });

        if (!state.env.footnotes.list) {
          return;
        }

        list = state.env.footnotes.list;
        token = new state.Token('footnote_block_open', '', 1);
        state.tokens.push(token);

        for (i = 0, l = list.length; i < l; i++) {
          token = new state.Token('footnote_open', '', 1);
          token.meta = {
            id: i,
            label: list[i].label
          };
          state.tokens.push(token);

          if (list[i].tokens) {
            tokens = [];
            token = new state.Token('paragraph_open', 'p', 1);
            token.block = true;
            tokens.push(token);
            token = new state.Token('inline', '', 0);
            token.children = list[i].tokens;
            token.content = '';
            tokens.push(token);
            token = new state.Token('paragraph_close', 'p', -1);
            token.block = true;
            tokens.push(token);
          } else if (list[i].label) {
            tokens = refTokens[':' + list[i].label];
          }

          state.tokens = state.tokens.concat(tokens);

          if (state.tokens[state.tokens.length - 1].type === 'paragraph_close') {
            lastParagraph = state.tokens.pop();
          } else {
            lastParagraph = null;
          }

          t = list[i].count > 0 ? list[i].count : 1;

          for (j = 0; j < t; j++) {
            token = new state.Token('footnote_anchor', '', 0);
            token.meta = {
              id: i,
              subId: j,
              label: list[i].label
            };
            state.tokens.push(token);
          }

          if (lastParagraph) {
            state.tokens.push(lastParagraph);
          }

          token = new state.Token('footnote_close', '', -1);
          state.tokens.push(token);
        }

        token = new state.Token('footnote_block_close', '', -1);
        state.tokens.push(token);
      }

      md.block.ruler.before('reference', 'footnote_def', footnote_def, {
        alt: ['paragraph', 'reference']
      });
      md.inline.ruler.after('image', 'footnote_inline', footnote_inline);
      md.inline.ruler.after('footnote_inline', 'footnote_ref', footnote_ref);
      md.core.ruler.after('inline', 'footnote_tail', footnote_tail);
    };
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/services/markdown-it-plugins/html.js":
  /*!******************************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/services/markdown-it-plugins/html.js ***!
    \******************************************************************************/

  /*! no static exports found */

  /***/
  function srcAppModulesMarkdownViewerServicesMarkdownItPluginsHtmlJs(module, exports) {
    module.exports = function (incrementalDom, enableIDOM) {
      return function (md) {
        var originalRule = md.renderer.rules.html_block;

        md.renderer.rules.html_block = function () {
          for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
            args[_key7] = arguments[_key7];
          }

          var tokens = args[0],
              idx = args[1],
              env = args[3],
              self = args[4];

          if (enableIDOM) {
            var elementClose = incrementalDom.elementClose,
                elementOpen = incrementalDom.elementOpen,
                elementVoid = incrementalDom.elementVoid,
                text = incrementalDom.text,
                skipNode = incrementalDom.skipNode,
                skip = incrementalDom.skip;
            var content = tokens[idx].content.trimStart();

            if (content.startsWith('<i-')) {
              // return function to bypass
              var tag = content.match(/^<(i-[^>]+)>/)[1];

              if (tag) {
                return function () {
                  elementOpen(tag);
                  skip();
                  elementClose(tag);
                };
              }
            }
          }

          return originalRule.apply(void 0, args);
        };

        md.renderer.rules.html_inline = function () {
          for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
            args[_key8] = arguments[_key8];
          }

          var tokens = args[0],
              idx = args[1],
              env = args[3],
              self = args[4];

          if (enableIDOM) {
            var elementClose = incrementalDom.elementClose,
                elementOpen = incrementalDom.elementOpen,
                elementVoid = incrementalDom.elementVoid,
                text = incrementalDom.text,
                skipNode = incrementalDom.skipNode,
                skip = incrementalDom.skip;
            var content = tokens[idx].content.trimStart();

            if (content.startsWith('<i-')) {
              var tag = content.match(/^<(i-.*)>/)[1];

              if (tag) {
                return function () {
                  elementOpen(tag);
                  skip();
                };
              }
            } else if (content.startsWith('</i-')) {
              var _tag2 = content.match(/^<\/(i-[^>]+)>/)[1];

              if (_tag2) {
                return function () {
                  return elementClose(_tag2);
                };
              }
            }
          }

          return originalRule.apply(void 0, args);
        };
      };
    };
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/services/markdown-it-plugins/imsize/helpers/parse_image_size.js":
  /*!*********************************************************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/services/markdown-it-plugins/imsize/helpers/parse_image_size.js ***!
    \*********************************************************************************************************/

  /*! no static exports found */

  /***/
  function srcAppModulesMarkdownViewerServicesMarkdownItPluginsImsizeHelpersParse_image_sizeJs(module, exports, __webpack_require__) {
    "use strict"; // Parse image size
    //

    function parseNextNumber(str, pos, max) {
      var code,
          start = pos,
          result = {
        ok: false,
        pos: pos,
        value: ""
      };
      code = str.charCodeAt(pos);

      while (pos < max && code >= 0x30
      /* 0 */
      && code <= 0x39 ||
      /* 9 */
      code === 0x25
      /* % */
      ) {
        code = str.charCodeAt(++pos);
      }

      result.ok = true;
      result.pos = pos;
      result.value = str.slice(start, pos);
      return result;
    }

    module.exports = function parseImageSize(str, pos, max) {
      var code,
          result = {
        ok: false,
        pos: 0,
        width: "",
        height: ""
      };

      if (pos >= max) {
        return result;
      }

      code = str.charCodeAt(pos);

      if (code !== 0x3d
      /* = */
      ) {
          return result;
        }

      pos++; // size must follow = without any white spaces as follows
      // (1) =300x200
      // (2) =300x
      // (3) =x200

      code = str.charCodeAt(pos);

      if (code !== 0x78
      /* x */
      && code !== 0x2a
      /* * */
      && (code < 0x30 || code > 0x39)
      /* [0-9] */
      ) {
          return result;
        } // parse width


      var resultW = parseNextNumber(str, pos, max);
      pos = resultW.pos; // next charactor must be 'x'

      code = str.charCodeAt(pos);

      if (code !== 0x78
      /* x */
      && code !== 0x2a
      /* * */
      ) {
          return result;
        }

      pos++; // parse height

      var resultH = parseNextNumber(str, pos, max);
      pos = resultH.pos;
      result.width = resultW.value;
      result.height = resultH.value;
      result.pos = pos;
      result.ok = true;
      return result;
    };
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/services/markdown-it-plugins/imsize/index.js":
  /*!**************************************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/services/markdown-it-plugins/imsize/index.js ***!
    \**************************************************************************************/

  /*! no static exports found */

  /***/
  function srcAppModulesMarkdownViewerServicesMarkdownItPluginsImsizeIndexJs(module, exports, __webpack_require__) {
    "use strict"; // Process ![test]( x =100x200)
    //                    ^^^^^^^^ this size specification
    // var sizeOf = require("./imsize");

    var parseImageSize = __webpack_require__(
    /*! ./helpers/parse_image_size */
    "./src/app/modules/markdown/viewer/services/markdown-it-plugins/imsize/helpers/parse_image_size.js");

    function image_with_size(md, options) {
      return function (state, silent) {
        var attrs,
            code,
            label,
            labelEnd,
            labelStart,
            pos,
            ref,
            res,
            title,
            width = "",
            height = "",
            token,
            tokens,
            start,
            href = "",
            oldPos = state.pos,
            max = state.posMax;

        if (state.src.charCodeAt(state.pos) !== 0x21
        /* ! */
        ) {
            return false;
          }

        if (state.src.charCodeAt(state.pos + 1) !== 0x5b
        /* [ */
        ) {
            return false;
          }

        labelStart = state.pos + 2;
        labelEnd = md.helpers.parseLinkLabel(state, state.pos + 1, false);
        var sizeStart = -1;
        var sizeEnd = labelEnd;
        var codeNext = 0; // [link  =WidthxHeight](  <href>  "title"  )
        //        ^^ find this position

        for (pos = labelEnd; pos >= labelStart - 1; pos--) {
          code = state.src.charCodeAt(pos);
          codeNext = state.src.charCodeAt(pos + 1);

          if (code >= 0x30
          /* 0 */
          && code <= 0x39
          /* 9 */
          && codeNext === 0x20) {
            sizeEnd = pos;
          }

          if ((code === 0x20 || code === 0x5b) &&
          /* [ */
          codeNext === 0x3d
          /* = */
          ) {
              sizeStart = pos + 1;
              break;
            }
        }

        if (sizeStart !== -1) {
          res = parseImageSize(state.src, sizeStart, sizeEnd + 1);

          if (res.ok) {
            width = res.width;
            height = res.height;
          }
        } // parser failed to find ']', so it's not a valid link


        if (labelEnd < 0) {
          return false;
        }

        pos = labelEnd + 1;

        if (pos < max && state.src.charCodeAt(pos) === 0x28
        /* ( */
        ) {
            //
            // Inline link
            //
            // [link](  <href>  "title"  )
            //        ^^ skipping these spaces
            pos++;

            for (; pos < max; pos++) {
              code = state.src.charCodeAt(pos);

              if (code !== 0x20 && code !== 0x0a) {
                break;
              }
            }

            if (pos >= max) {
              return false;
            } // [link](  <href>  "title"  )
            //          ^^^^^^ parsing link destination


            start = pos;
            res = md.helpers.parseLinkDestination(state.src, pos, state.posMax);

            if (res.ok) {
              href = state.md.normalizeLink(res.str);

              if (state.md.validateLink(href)) {
                pos = res.pos;
              } else {
                href = "";
              }
            } // [link](  <href>  "title"  )
            //                ^^ skipping these spaces


            start = pos;

            for (; pos < max; pos++) {
              code = state.src.charCodeAt(pos);

              if (code !== 0x20 && code !== 0x0a) {
                break;
              }
            } // [link](  <href>  "title"  )
            //                  ^^^^^^^ parsing link title


            res = md.helpers.parseLinkTitle(state.src, pos, state.posMax);

            if (pos < max && start !== pos && res.ok) {
              title = res.str;
              pos = res.pos; // [link](  <href>  "title"  )
              //                         ^^ skipping these spaces

              for (; pos < max; pos++) {
                code = state.src.charCodeAt(pos);

                if (code !== 0x20 && code !== 0x0a) {
                  break;
                }
              }
            } else {
              title = "";
            } // [link](  <href>  "title" =WxH  )
            //                          ^^^^ parsing image size


            if (pos - 1 >= 0) {
              code = state.src.charCodeAt(pos - 1); // there must be at least one white spaces
              // between previous field and the size

              if (code === 0x20) {
                res = parseImageSize(state.src, pos, state.posMax);

                if (res.ok) {
                  if (!width) {
                    width = res.width;
                  }

                  if (!height) {
                    height = res.height;
                  }

                  pos = res.pos; // [link](  <href>  "title" =WxH  )
                  //                              ^^ skipping these spaces

                  for (; pos < max; pos++) {
                    code = state.src.charCodeAt(pos);

                    if (code !== 0x20 && code !== 0x0a) {
                      break;
                    }
                  }
                }
              }
            }

            if (pos >= max || state.src.charCodeAt(pos) !== 0x29
            /* ) */
            ) {
                state.pos = oldPos;
                return false;
              }

            pos++;
          } else {
          //
          // Link reference
          //
          if (typeof state.env.references === "undefined") {
            return false;
          } // [foo]  [bar]
          //      ^^ optional whitespace (can include newlines)


          for (; pos < max; pos++) {
            code = state.src.charCodeAt(pos);

            if (code !== 0x20 && code !== 0x0a) {
              break;
            }
          }

          if (pos < max && state.src.charCodeAt(pos) === 0x5b
          /* [ */
          ) {
              start = pos + 1;
              pos = md.helpers.parseLinkLabel(state, pos);

              if (pos >= 0) {
                label = state.src.slice(start, pos++);
              } else {
                pos = labelEnd + 1;
              }
            } else {
            pos = labelEnd + 1;
          } // covers label === '' and label === undefined
          // (collapsed reference link and shortcut reference link respectively)


          if (!label) {
            label = state.src.slice(labelStart, labelEnd);
          }

          ref = state.env.references[md.utils.normalizeReference(label)];

          if (!ref) {
            state.pos = oldPos;
            return false;
          }

          href = ref.href;
          title = ref.title;
        } //
        // We found the end of the link, and know for a fact it's a valid link;
        // so all that's left to do is to call tokenizer.
        //


        if (!silent) {
          state.pos = labelStart;
          state.posMax = labelEnd;
          var newState = new state.md.inline.State(state.src.slice(labelStart, labelEnd), state.md, state.env, tokens = []);
          newState.md.inline.tokenize(newState); // if 'autofill' option is specified
          // and width/height are both blank,
          // they are filled automatically

          if (options) {
            if (options.autofill && width === "" && height === "") {
              try {
                // var dimensions = sizeOf(href);
                width = '100%'; // height = dimensions.height;
              } catch (e) {}
            }
          }

          token = state.push("image", "img", 0);

          if (document.iamMarkdownIsPureViewMode) {
            token.attrs = attrs = [["data-src", href], ["alt", ""]];
          } else {
            token.attrs = attrs = [["src", href], ["alt", ""]];
          }

          token.children = tokens;

          if (title) {
            attrs.push(["title", title]);
          }

          if (width !== "") {
            attrs.push(["width", width]);
          }

          if (height !== "") {
            attrs.push(["height", height]);
          }
        }

        state.pos = pos;
        state.posMax = max;
        return true;
      };
    }

    module.exports = function imsize_plugin(md, options) {
      md.inline.ruler.before("emphasis", "image", image_with_size(md, options));
    };
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/services/markdown-it-plugins/lisp.ts":
  /*!******************************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/services/markdown-it-plugins/lisp.ts ***!
    \******************************************************************************/

  /*! exports provided: LispPlugin */

  /***/
  function srcAppModulesMarkdownViewerServicesMarkdownItPluginsLispTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LispPlugin", function () {
      return LispPlugin;
    });
    /* harmony import */


    var lispjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! lispjs */
    "./packages/lisp.js/littlelisp.js");
    /* harmony import */


    var lispjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lispjs__WEBPACK_IMPORTED_MODULE_0__);

    var LispPlugin = function LispPlugin(markdownIt, options) {
      var _this18 = this;

      _classCallCheck(this, LispPlugin);

      this.markdownIt = markdownIt;
      this.config = {
        markerPattern: /\*\([\s\S]*?\)\*/gm
      };

      this.lispPlugin = function (md, options) {
        md.renderer.rules.lisp_open = function (tokens, index) {
          return '';
        };

        md.renderer.rules.lisp_close = function (tokens, index) {
          return '';
        };

        md.renderer.rules.lisp_body = function (tokens, index) {
          try {
            var r = lispjs__WEBPACK_IMPORTED_MODULE_0__["littleLisp"].execute(tokens[index].content); // this.gState.tokens

            return r;
          } catch (e) {
            console.error(e);
            return e;
          }
        };

        md.core.ruler.push('grab_state', function (state) {
          this.gState = state;
          return null; //null is ok for core ruler
        });
        md.inline.ruler.before('emphasis', 'lisp', _this18.parse);
      };

      this.parse = function (state, silent) {
        var pos = state.pos;
        var max = state.posMax;
        var token;
        var match;
        var start; // Don't run any pairs in validation mode

        if (silent) {
          return false;
        } // Reject if the token does not start with .


        if (state.src.charCodeAt(pos) !== 0x2a
        /* * */
        || state.src.charCodeAt(pos + 1) !== 0x28
        /* ( */
        ) {
            return false;
          }

        start = pos; // while(pos < max && )
        // Detect lisp markdown

        var regex = _this18.config.markerPattern;
        regex.lastIndex = start;
        match = regex.exec(state.src);
        match = !match ? [] : match.filter(function (m) {
          // validate here!
          var counter = 0;

          for (var i = 0; i < m.length; i++) {
            var charCode = m.charCodeAt(i);
            if (charCode === 0x28
            /* ( */
            ) counter += 1;
            if (charCode === 0x29
            /* ) */
            ) counter -= 1;
          }

          return counter === 0;
        });

        if (match.length < 1) {
          return false;
        } // Update pos so the parser can continue


        var len = match[0].length;

        if (len > 0) {
          state.pos = state.pos + len;
          var lispExp = match[0].slice(1, -1); // Build content

          token = state.push('lisp_open', 'lisp', 1);
          token.markup = '*()*';
          token = state.push('lisp_body', 'lisp-body', 0);
          token.content = lispExp;
          token = state.push('lisp_close', 'lisp', -1);
          return true;
        }

        return false;
      };

      this.config = Object.assign(Object.assign({}, this.config), options);
      this.markdownIt.use(this.lispPlugin, this.config);
    };
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/services/markdown-it-plugins/mermaid.plugin.ts":
  /*!****************************************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/services/markdown-it-plugins/mermaid.plugin.ts ***!
    \****************************************************************************************/

  /*! exports provided: MermaidPlugin */

  /***/
  function srcAppModulesMarkdownViewerServicesMarkdownItPluginsMermaidPluginTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MermaidPlugin", function () {
      return MermaidPlugin;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! core */
    "./src/app/modules/core/index.ts");

    var MermaidPlugin = /*#__PURE__*/function () {
      function MermaidPlugin(markdownIt) {
        var _this19 = this;

        _classCallCheck(this, MermaidPlugin);

        this.markdownIt = markdownIt;

        this.mermaidChart = function (code) {
          try {
            var id = 'id' + Object(core__WEBPACK_IMPORTED_MODULE_1__["uid"])();

            _this19.mermaid().then(function (mermaid) {
              mermaid.parse(code);
              mermaid.init(undefined, "#".concat(id));
            });

            return "<div class=\"mermaid\" id=\"".concat(id, "\">").concat(code, "</div>");
          } catch (e) {
            return "<pre>".concat(e, "</pre>");
          }
        };

        this.loadPreferences = function (mermaid, preferenceStore) {
          var mermaidTheme = preferenceStore.get('mermaid-theme');

          if (mermaidTheme === undefined) {
            mermaidTheme = 'default';
          }

          var ganttAxisFormat = preferenceStore.get('gantt-axis-format');

          if (ganttAxisFormat === undefined) {
            ganttAxisFormat = '%Y-%m-%d';
          }

          var option = {
            theme: mermaidTheme,
            gantt: {
              axisFormatter: [[ganttAxisFormat, function (d) {
                return d.getDay() === 1;
              }]]
            },
            startOnLoad: false // logLevel: 1

          };
          mermaid.initialize(option);
          return {
            'mermaid-theme': mermaidTheme,
            'gantt-axis-format': ganttAxisFormat
          };
        };

        this.mermaidPlugin = function (markdown) {
          var temp = markdown.renderer.rules.fence.bind(markdown.renderer.rules);

          markdown.renderer.rules.fence = function (tokens, idx, options, env, slf) {
            var token = tokens[idx];
            var code = token.content.trim();

            if (token.info === 'mermaid') {
              return _this19.mermaidChart(code);
            }

            var firstLine = code.split(/\n/)[0].trim();

            if (firstLine === 'gantt' || firstLine === 'sequenceDiagram' || firstLine.match(/^graph (?:TB|BT|RL|LR|TD);?$/)) {
              return _this19.mermaidChart(code);
            }

            return temp(tokens, idx, options, env, slf);
          };
        };

        this.markdownIt.use(this.mermaidPlugin, 'mermaid');
      }

      _createClass(MermaidPlugin, [{
        key: "mermaid",
        value: function mermaid() {
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (this._mermaid) {
                      _context.next = 5;
                      break;
                    }

                    _context.next = 3;
                    return __webpack_require__.e(
                    /*! import() | mermaid */
                    "mermaid").then(__webpack_require__.t.bind(null,
                    /*! mermaid */
                    "./node_modules/mermaid/dist/mermaid.core.js", 7));

                  case 3:
                    this._mermaid = _context.sent;
                    this.loadPreferences(this._mermaid, {
                      get: function get(key) {
                        // if (key === 'mermaid-theme') {
                        //   return 'forest'
                        // } else if (key === 'gantt-axis-format') {
                        //   return '%Y/%m/%d'
                        // } else {
                        //   return undefined
                        // }
                        return undefined;
                      }
                    });

                  case 5:
                    return _context.abrupt("return", this._mermaid);

                  case 6:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
        }
      }]);

      return MermaidPlugin;
    }();
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/services/markdown-it-plugins/meta.ts":
  /*!******************************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/services/markdown-it-plugins/meta.ts ***!
    \******************************************************************************/

  /*! exports provided: MetaPlugin */

  /***/
  function srcAppModulesMarkdownViewerServicesMarkdownItPluginsMetaTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MetaPlugin", function () {
      return MetaPlugin;
    });
    /* harmony import */


    var js_yaml__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! js-yaml */
    "./node_modules/js-yaml/index.js");
    /* harmony import */


    var js_yaml__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_yaml__WEBPACK_IMPORTED_MODULE_0__); // https://github.com/CaliStyle/markdown-it-meta


    var MetaPlugin = function MetaPlugin(markdownIt, updateMeta) {
      var _this20 = this;

      _classCallCheck(this, MetaPlugin);

      this.markdownIt = markdownIt;
      this.updateMeta = updateMeta;

      this.metaPlugin = function (md) {
        md.block.ruler.before('code', 'meta', _this20.metaParser, {
          alt: []
        });

        md.renderer.rules.meta_open = function (tokens, index) {
          return '<articleinfo class="doc-meta">';
        };

        md.renderer.rules.meta_close = function (tokens, index) {
          return '</articleinfo>';
        };

        md.renderer.rules.meta_body = function (tokens, index) {
          try {
            var meta = tokens[index].docmeta;
            var content = '';

            if (meta.author) {
              var link;
              meta.author.replace(/<(.*)>/, function (match, p1, offset, string) {
                content += '<author class="meta-author">';
                var author = string.substr(0, offset);
                link = p1;

                if (link) {
                  if (link.includes('@')) {
                    link = 'mailto:' + link;
                  }

                  content += "<a href=\"".concat(link, "\">").concat(author, "</a>");
                } else {
                  content += author;
                }

                content += '</author>';
              });
            }

            if (meta.version || meta.updateDate) {
              content += "<div class=\"meta-version-date\">";

              if (meta.version) {
                content += "<span class=\"meta-version\"> v".concat(meta.version, " </span>");
              }

              if (meta.updateDate) {
                if (meta.createDate) {
                  var createDate = meta.createDate;
                  content += "<span style=\"margin-left:10px\" class=\"meta-date\">".concat(createDate.toLocaleDateString(), " - </span>");
                }

                content += "<span class=\"meta-date\">  ".concat(meta.updateDate.toLocaleDateString(), "</span>");
              }

              content += "</div>";
            }

            var tag = meta.tags || meta.tag;

            if (tag) {
              content += '<ul class="meta-tags">';
              tag.forEach(function (t) {
                content += '<li class="meta-tag">' + t + '</li>';
              });
              content += '</ul>';
            }

            if (meta.enable && meta.enable.length > 0) {}

            return content;
          } catch (e) {
            console.log(e);
            return e;
          }
        };
      };

      this.getLine = function (state, line) {
        var pos = state.bMarks[line];
        var max = state.eMarks[line];
        return state.src.substr(pos, max - pos);
      };

      this.metaParser = function (state, startLine, endLine, silent) {
        if (startLine > 5 || state.blkIndent !== 0) {
          return false;
        }

        if (state.tShift[startLine] < 0) {
          return false;
        }

        if (!_this20.getLine(state, startLine).match(/^---$/)) {
          return false;
        }

        var data = [];
        var line = startLine;
        var findEnd = false;

        while (line < endLine) {
          line++;

          var str = _this20.getLine(state, line);

          if (str.match(/^---$/)) {
            findEnd = true;
            break;
          }

          if (state.tShift[line] < 0) {
            break;
          }

          data.push(str);
        }

        if (!findEnd) return;

        try {
          var d = js_yaml__WEBPACK_IMPORTED_MODULE_0___default.a.safeLoad(data.join('\n'), {
            json: true
          });
          state.line = line + 1;

          if (d) {
            var token = state.push('meta_open', 'meta', 1);
            token.markup = '---';
            token = state.push('meta_body', 'meta-body', 0);
            token.docmeta = _this20.updateMeta(d);

            if (token.docmeta && token.docmeta.enable.includes('toc')) {
              // put web component in html block; should not render it directly.
              token = state.push('html_block', '', 0);
              token.content = '<i-toc>/n</i-toc>';
            }

            token = state.push('meta_close', 'meta', -1);
            token.markup = '---';
          }
        } catch (e) {
          console.log(e);
          return false;
        } // (this.markdownIt as any).meta = Object.assign({}, (this.markdownIt as any).meta, d);


        return true;
      };

      this.markdownIt.use(this.metaPlugin);
    };
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/services/markdown-it-plugins/source-line.ts":
  /*!*************************************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/services/markdown-it-plugins/source-line.ts ***!
    \*************************************************************************************/

  /*! exports provided: sourceLine */

  /***/
  function srcAppModulesMarkdownViewerServicesMarkdownItPluginsSourceLineTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sourceLine", function () {
      return sourceLine;
    });

    function sourceLine(md) {
      var _ref14 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref14$permalinkClass = _ref14.permalinkClass,
          permalinkClass = _ref14$permalinkClass === void 0 ? 'edit-it' : _ref14$permalinkClass,
          _ref14$permalinkBefor = _ref14.permalinkBefore,
          permalinkBefore = _ref14$permalinkBefor === void 0 ? false : _ref14$permalinkBefor,
          _ref14$permalinkSymbo = _ref14.permalinkSymbol,
          permalinkSymbol = _ref14$permalinkSymbo === void 0 ? "<i class=\"material-icons edit-it-icon\">edit</i>" : _ref14$permalinkSymbo;

      // const ruleKeys = Object.keys(md.renderer.rules);
      // ruleKeys.forEach(key => {
      //   const originalRule = md.renderer.rules[key];
      //   md.renderer.rules[key] = (tokens, index, options, env, render) => {
      //     const token = tokens[index];
      //     if (token.map) token.attrSet('data-source-lines', JSON.stringify(token.map));
      //     return originalRule
      //       ? originalRule(tokens, index, options, env, render)
      //       : render.renderToken(tokens, index, options);
      //   };
      // });
      var originalHeadingOpen = md.renderer.rules.heading_open;
      md.core.ruler.push('source_line', function (state) {
        var tokens = state.tokens;
        tokens.filter(function (t) {
          return t.map;
        }).forEach(function (token) {
          var parentMap = JSON.stringify(token.map); // start from 0

          token.attrSet('data-source-lines', parentMap);
          token.attrSet('class', 'edit-it-content');
          token.attrSet('onmouseenter', 'md_edit_mouseenter()');
          token.attrSet('onmouseleave', 'md_edit_mouseleave()');
          var linkTokens = [Object.assign(new state.Token('link_open', 'a', 1), {
            attrs: [['class', permalinkClass], ['onclick', 'md_edit_event(event.target.parentElement.parentElement)'], ['aria-hidden', 'true']]
          }), Object.assign(new state.Token('html_block', '', 0), {
            content: permalinkSymbol
          }), new state.Token('link_close', 'a', -1)];

          if (token.children) {
            var _token$children;

            token.children.forEach(function (tk) {
              if (tk.map) {
                tk.attrSet('data-source-lines', JSON.stringify(tk.map));
              } else {
                tk.attrSet('data-source-lines', parentMap);
              }
            });
            token.attrSet('data-source-lines-children', parentMap);

            (_token$children = token.children).push.apply(_token$children, linkTokens);
          } else if (token.type === 'fence') {// code
          }
        });
        return null; // null is ok for core ruler
      });
    }
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/services/markdown-it-plugins/title.js":
  /*!*******************************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/services/markdown-it-plugins/title.js ***!
    \*******************************************************************************/

  /*! no static exports found */

  /***/
  function srcAppModulesMarkdownViewerServicesMarkdownItPluginsTitleJs(module, exports) {
    // https://github.com/valeriangalliat/markdown-it-title 2018/03/28
    module.exports = function (updateTitle) {
      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      return function (md) {
        var originalHeadingOpen = md.renderer.rules.heading_open;

        md.renderer.rules.heading_open = function () {
          for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
            args[_key9] = arguments[_key9];
          }

          var tokens = args[0],
              idx = args[1],
              env = args[3],
              self = args[4];

          if (!env.title && (level < 1 || tokens[idx].tag === "h".concat(level))) {
            env.title = tokens[idx + 1].children.filter(function (t) {
              return t.type === 'text';
            }).reduce(function (acc, t) {
              return acc + t.content;
            }, '').trim();
            updateTitle && updateTitle(env.title, level);
          } // Execute original rule.


          if (originalHeadingOpen) {
            return originalHeadingOpen.apply(this, args);
          } else {
            return self.renderToken.apply(self, args);
          }
        };
      };
    };
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/services/markdown-it-plugins/toc.js":
  /*!*****************************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/services/markdown-it-plugins/toc.js ***!
    \*****************************************************************************/

  /*! no static exports found */

  /***/
  function srcAppModulesMarkdownViewerServicesMarkdownItPluginsTocJs(module, exports, __webpack_require__) {
    "use strict"; // reference this to implement popup toc: https://codepad.co/snippet/J4F52QsF
    // var string = require("string");

    var assign = __webpack_require__(
    /*! lodash.assign */
    "../../node_modules/lodash.assign/index.js");

    var defaults = {
      includeLevel: [1, 2],
      containerClass: 'table-of-contents',
      slugify: function slugify(s) {
        return s;
      },
      // function(str) {
      //   return string(str)
      //     .slugify()
      //     .toString();
      // },
      markerPattern: /^\[\[toc\]\]/im,
      listType: 'ul',
      getHref: function getHref(slug, state) {
        return "#".concat(slug);
      },
      format: undefined
    };

    module.exports = function (md, options) {
      var options = assign({}, defaults, options);
      var tocRegexp = options.markerPattern;
      var gstate;

      function toc(state, silent) {
        var token;
        var match; // Reject if the token does not start with [

        if (state.src.charCodeAt(state.pos) !== 0x5b
        /* [ */
        ) {
            return false;
          } // Don't run any pairs in validation mode


        if (silent) {
          return false;
        } // Detect TOC markdown


        match = tocRegexp.exec(state.src);
        match = !match ? [] : match.filter(function (m) {
          return m;
        });

        if (match.length < 1) {
          return false;
        } // Build content


        token = state.push('toc_open', 'toc', 1);
        token.markup = '[[toc]]';
        token = state.push('toc_body', '', 0);
        token = state.push('toc_close', 'toc', -1); // Update pos so the parser can continue

        var newline = state.src.indexOf('\n');

        if (newline !== -1) {
          state.pos = state.pos + newline;
        } else {
          state.pos = state.pos + state.posMax + 1;
        }

        return true;
      }

      md.renderer.rules.toc_open = function (tokens, index) {
        return '<div class="' + options.containerClass + '">';
      };

      md.renderer.rules.toc_close = function (tokens, index) {
        return '</div>';
      };

      md.renderer.rules.toc_body = function (tokens, index) {
        return renderChildsTokens(0, gstate.tokens)[1];
      };

      function renderChildsTokens(pos, tokens) {
        var headings = [],
            buffer = '',
            currentLevel,
            subHeadings,
            size = tokens.length,
            i = pos;

        while (i < size) {
          var token = tokens[i];
          var heading = tokens[i - 1];
          var level = token.tag && parseInt(token.tag.substr(1, 1));

          if (token.type !== 'heading_close' || options.includeLevel.indexOf(level) == -1 || heading.type !== 'inline') {
            i++;
            continue; // Skip if not matching criteria
          }

          if (!currentLevel) {
            currentLevel = level; // We init with the first found level
          } else {
            if (level > currentLevel) {
              subHeadings = renderChildsTokens(i, tokens);
              buffer += subHeadings[1];
              i = subHeadings[0];
              continue;
            }

            if (level < currentLevel) {
              // Finishing the sub headings
              buffer += '</li>';
              headings.push(buffer);
              return [i, '<' + options.listType + '>' + headings.join('') + '</' + options.listType + '>'];
            }

            if (level == currentLevel) {
              // Finishing the sub headings
              buffer += '</li>';
              headings.push(buffer);
            }
          }

          var title = heading.children.filter(function (token) {
            return token.type === 'text' || token.type === 'code_inline';
          }).reduce(function (acc, t) {
            return acc + t.content;
          }, '');
          buffer = '<li><a href="' + options.getHref(options.slugify(title)) + '">';
          buffer += typeof options.format === 'function' ? options.format(heading.content) : title;
          buffer += '</a>';
          i++;
        }

        buffer += buffer === '' ? '' : '</li>';
        headings.push(buffer);
        return [i, '<' + options.listType + '>' + headings.join('') + '</' + options.listType + '>'];
      } // Catch all the tokens for iteration later


      md.core.ruler.push('grab_state', function (state) {
        gstate = state;
      }); // Insert TOC

      md.inline.ruler.after('emphasis', 'toc', toc);
    };
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/services/markdown.viewer.service.ts":
  /*!*****************************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/services/markdown.viewer.service.ts ***!
    \*****************************************************************************/

  /*! exports provided: MarkdownViewerService */

  /***/
  function srcAppModulesMarkdownViewerServicesMarkdownViewerServiceTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MarkdownViewerService", function () {
      return MarkdownViewerService;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var prismjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! prismjs */
    "./node_modules/prismjs/prism.js");
    /* harmony import */


    var prismjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prismjs__WEBPACK_IMPORTED_MODULE_2__);
    /* harmony import */


    var prismjs_components_prism_clike__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! prismjs/components/prism-clike */
    "./node_modules/prismjs/components/prism-clike.js");
    /* harmony import */


    var prismjs_components_prism_clike__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_clike__WEBPACK_IMPORTED_MODULE_3__);
    /* harmony import */


    var prismjs_components_prism_c__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! prismjs/components/prism-c */
    "./node_modules/prismjs/components/prism-c.js");
    /* harmony import */


    var prismjs_components_prism_c__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_c__WEBPACK_IMPORTED_MODULE_4__);
    /* harmony import */


    var prismjs_components_prism_typescript__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! prismjs/components/prism-typescript */
    "./node_modules/prismjs/components/prism-typescript.js");
    /* harmony import */


    var prismjs_components_prism_typescript__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_typescript__WEBPACK_IMPORTED_MODULE_5__);
    /* harmony import */


    var prismjs_components_prism_bash__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! prismjs/components/prism-bash */
    "./node_modules/prismjs/components/prism-bash.js");
    /* harmony import */


    var prismjs_components_prism_bash__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_bash__WEBPACK_IMPORTED_MODULE_6__);
    /* harmony import */


    var prismjs_components_prism_cpp__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! prismjs/components/prism-cpp */
    "./node_modules/prismjs/components/prism-cpp.js");
    /* harmony import */


    var prismjs_components_prism_cpp__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_cpp__WEBPACK_IMPORTED_MODULE_7__);
    /* harmony import */


    var prismjs_components_prism_csharp__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! prismjs/components/prism-csharp */
    "./node_modules/prismjs/components/prism-csharp.js");
    /* harmony import */


    var prismjs_components_prism_csharp__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_csharp__WEBPACK_IMPORTED_MODULE_8__);
    /* harmony import */


    var prismjs_components_prism_css__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! prismjs/components/prism-css */
    "./node_modules/prismjs/components/prism-css.js");
    /* harmony import */


    var prismjs_components_prism_css__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_css__WEBPACK_IMPORTED_MODULE_9__);
    /* harmony import */


    var prismjs_components_prism_docker__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! prismjs/components/prism-docker */
    "./node_modules/prismjs/components/prism-docker.js");
    /* harmony import */


    var prismjs_components_prism_docker__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_docker__WEBPACK_IMPORTED_MODULE_10__);
    /* harmony import */


    var prismjs_components_prism_git__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! prismjs/components/prism-git */
    "./node_modules/prismjs/components/prism-git.js");
    /* harmony import */


    var prismjs_components_prism_git__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_git__WEBPACK_IMPORTED_MODULE_11__);
    /* harmony import */


    var prismjs_components_prism_graphql__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
    /*! prismjs/components/prism-graphql */
    "./node_modules/prismjs/components/prism-graphql.js");
    /* harmony import */


    var prismjs_components_prism_graphql__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_graphql__WEBPACK_IMPORTED_MODULE_12__);
    /* harmony import */


    var prismjs_components_prism_java__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
    /*! prismjs/components/prism-java */
    "./node_modules/prismjs/components/prism-java.js");
    /* harmony import */


    var prismjs_components_prism_java__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_java__WEBPACK_IMPORTED_MODULE_13__);
    /* harmony import */


    var prismjs_components_prism_json__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
    /*! prismjs/components/prism-json */
    "./node_modules/prismjs/components/prism-json.js");
    /* harmony import */


    var prismjs_components_prism_json__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_json__WEBPACK_IMPORTED_MODULE_14__);
    /* harmony import */


    var prismjs_components_prism_makefile__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
    /*! prismjs/components/prism-makefile */
    "./node_modules/prismjs/components/prism-makefile.js");
    /* harmony import */


    var prismjs_components_prism_makefile__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_makefile__WEBPACK_IMPORTED_MODULE_15__);
    /* harmony import */


    var prismjs_components_prism_markdown__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
    /*! prismjs/components/prism-markdown */
    "./node_modules/prismjs/components/prism-markdown.js");
    /* harmony import */


    var prismjs_components_prism_markdown__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_markdown__WEBPACK_IMPORTED_MODULE_16__);
    /* harmony import */


    var prismjs_components_prism_powershell__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
    /*! prismjs/components/prism-powershell */
    "./node_modules/prismjs/components/prism-powershell.js");
    /* harmony import */


    var prismjs_components_prism_powershell__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_powershell__WEBPACK_IMPORTED_MODULE_17__);
    /* harmony import */


    var prismjs_components_prism_lisp__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
    /*! prismjs/components/prism-lisp */
    "./node_modules/prismjs/components/prism-lisp.js");
    /* harmony import */


    var prismjs_components_prism_lisp__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_lisp__WEBPACK_IMPORTED_MODULE_18__);
    /* harmony import */


    var prismjs_components_prism_python__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(
    /*! prismjs/components/prism-python */
    "./node_modules/prismjs/components/prism-python.js");
    /* harmony import */


    var prismjs_components_prism_python__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_python__WEBPACK_IMPORTED_MODULE_19__);
    /* harmony import */


    var prismjs_components_prism_sass__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(
    /*! prismjs/components/prism-sass */
    "./node_modules/prismjs/components/prism-sass.js");
    /* harmony import */


    var prismjs_components_prism_sass__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_sass__WEBPACK_IMPORTED_MODULE_20__);
    /* harmony import */


    var prismjs_components_prism_sql__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(
    /*! prismjs/components/prism-sql */
    "./node_modules/prismjs/components/prism-sql.js");
    /* harmony import */


    var prismjs_components_prism_sql__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_sql__WEBPACK_IMPORTED_MODULE_21__);
    /* harmony import */


    var prismjs_components_prism_vim__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(
    /*! prismjs/components/prism-vim */
    "./node_modules/prismjs/components/prism-vim.js");
    /* harmony import */


    var prismjs_components_prism_vim__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_vim__WEBPACK_IMPORTED_MODULE_22__);
    /* harmony import */


    var prismjs_components_prism_yaml__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(
    /*! prismjs/components/prism-yaml */
    "./node_modules/prismjs/components/prism-yaml.js");
    /* harmony import */


    var prismjs_components_prism_yaml__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_yaml__WEBPACK_IMPORTED_MODULE_23__);
    /* harmony import */


    var prismjs_plugins_line_numbers_prism_line_numbers__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(
    /*! prismjs/plugins/line-numbers/prism-line-numbers */
    "./node_modules/prismjs/plugins/line-numbers/prism-line-numbers.js");
    /* harmony import */


    var prismjs_plugins_line_numbers_prism_line_numbers__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(prismjs_plugins_line_numbers_prism_line_numbers__WEBPACK_IMPORTED_MODULE_24__);
    /* harmony import */


    var prismjs_plugins_line_highlight_prism_line_highlight__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(
    /*! prismjs/plugins/line-highlight/prism-line-highlight */
    "./node_modules/prismjs/plugins/line-highlight/prism-line-highlight.js");
    /* harmony import */


    var prismjs_plugins_line_highlight_prism_line_highlight__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(prismjs_plugins_line_highlight_prism_line_highlight__WEBPACK_IMPORTED_MODULE_25__);
    /* harmony import */


    var markdown_it__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(
    /*! markdown-it */
    "./node_modules/markdown-it/index.js");
    /* harmony import */


    var markdown_it__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(markdown_it__WEBPACK_IMPORTED_MODULE_26__);
    /* harmony import */


    var markdown_it_video__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(
    /*! markdown-it-video */
    "./node_modules/markdown-it-video/index.js");
    /* harmony import */


    var markdown_it_video__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(markdown_it_video__WEBPACK_IMPORTED_MODULE_27__);
    /* harmony import */


    var markdown_it_task_lists__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(
    /*! markdown-it-task-lists */
    "./node_modules/markdown-it-task-lists/index.js");
    /* harmony import */


    var markdown_it_task_lists__WEBPACK_IMPORTED_MODULE_28___default = /*#__PURE__*/__webpack_require__.n(markdown_it_task_lists__WEBPACK_IMPORTED_MODULE_28__);
    /* harmony import */


    var markdown_it_emoji__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(
    /*! markdown-it-emoji */
    "./node_modules/markdown-it-emoji/index.js");
    /* harmony import */


    var markdown_it_emoji__WEBPACK_IMPORTED_MODULE_29___default = /*#__PURE__*/__webpack_require__.n(markdown_it_emoji__WEBPACK_IMPORTED_MODULE_29__);
    /* harmony import */


    var markdown_it_sub__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(
    /*! markdown-it-sub */
    "./node_modules/markdown-it-sub/index.js");
    /* harmony import */


    var markdown_it_sub__WEBPACK_IMPORTED_MODULE_30___default = /*#__PURE__*/__webpack_require__.n(markdown_it_sub__WEBPACK_IMPORTED_MODULE_30__);
    /* harmony import */


    var markdown_it_sup__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(
    /*! markdown-it-sup */
    "./node_modules/markdown-it-sup/index.js");
    /* harmony import */


    var markdown_it_sup__WEBPACK_IMPORTED_MODULE_31___default = /*#__PURE__*/__webpack_require__.n(markdown_it_sup__WEBPACK_IMPORTED_MODULE_31__);
    /* harmony import */


    var markdown_it_ins__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(
    /*! markdown-it-ins */
    "./node_modules/markdown-it-ins/index.js");
    /* harmony import */


    var markdown_it_ins__WEBPACK_IMPORTED_MODULE_32___default = /*#__PURE__*/__webpack_require__.n(markdown_it_ins__WEBPACK_IMPORTED_MODULE_32__);
    /* harmony import */


    var markdown_it_mark__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(
    /*! markdown-it-mark */
    "./node_modules/markdown-it-mark/index.js");
    /* harmony import */


    var markdown_it_mark__WEBPACK_IMPORTED_MODULE_33___default = /*#__PURE__*/__webpack_require__.n(markdown_it_mark__WEBPACK_IMPORTED_MODULE_33__);
    /* harmony import */


    var markdown_it_abbr__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(
    /*! markdown-it-abbr */
    "./node_modules/markdown-it-abbr/index.js");
    /* harmony import */


    var markdown_it_abbr__WEBPACK_IMPORTED_MODULE_34___default = /*#__PURE__*/__webpack_require__.n(markdown_it_abbr__WEBPACK_IMPORTED_MODULE_34__);
    /* harmony import */


    var markdown_it_deflist__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(
    /*! markdown-it-deflist */
    "./node_modules/markdown-it-deflist/index.js");
    /* harmony import */


    var markdown_it_deflist__WEBPACK_IMPORTED_MODULE_35___default = /*#__PURE__*/__webpack_require__.n(markdown_it_deflist__WEBPACK_IMPORTED_MODULE_35__);
    /* harmony import */


    var _markdown_it_plugins_title__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(
    /*! ./markdown-it-plugins/title */
    "./src/app/modules/markdown/viewer/services/markdown-it-plugins/title.js");
    /* harmony import */


    var _markdown_it_plugins_title__WEBPACK_IMPORTED_MODULE_36___default = /*#__PURE__*/__webpack_require__.n(_markdown_it_plugins_title__WEBPACK_IMPORTED_MODULE_36__);
    /* harmony import */


    var _markdown_it_plugins_html__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(
    /*! ./markdown-it-plugins/html */
    "./src/app/modules/markdown/viewer/services/markdown-it-plugins/html.js");
    /* harmony import */


    var _markdown_it_plugins_html__WEBPACK_IMPORTED_MODULE_37___default = /*#__PURE__*/__webpack_require__.n(_markdown_it_plugins_html__WEBPACK_IMPORTED_MODULE_37__);
    /* harmony import */


    var _markdown_it_plugins_footnote__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(
    /*! ./markdown-it-plugins/footnote */
    "./src/app/modules/markdown/viewer/services/markdown-it-plugins/footnote.js");
    /* harmony import */


    var _markdown_it_plugins_footnote__WEBPACK_IMPORTED_MODULE_38___default = /*#__PURE__*/__webpack_require__.n(_markdown_it_plugins_footnote__WEBPACK_IMPORTED_MODULE_38__);
    /* harmony import */


    var _markdown_it_plugins_imsize__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(
    /*! ./markdown-it-plugins/imsize */
    "./src/app/modules/markdown/viewer/services/markdown-it-plugins/imsize/index.js");
    /* harmony import */


    var _markdown_it_plugins_imsize__WEBPACK_IMPORTED_MODULE_39___default = /*#__PURE__*/__webpack_require__.n(_markdown_it_plugins_imsize__WEBPACK_IMPORTED_MODULE_39__);
    /* harmony import */


    var _markdown_it_plugins_anchor__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(
    /*! ./markdown-it-plugins/anchor */
    "./src/app/modules/markdown/viewer/services/markdown-it-plugins/anchor.js");
    /* harmony import */


    var _markdown_it_plugins_anchor__WEBPACK_IMPORTED_MODULE_40___default = /*#__PURE__*/__webpack_require__.n(_markdown_it_plugins_anchor__WEBPACK_IMPORTED_MODULE_40__);
    /* harmony import */


    var _markdown_it_plugins_fence__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(
    /*! ./markdown-it-plugins/fence */
    "./src/app/modules/markdown/viewer/services/markdown-it-plugins/fence.js");
    /* harmony import */


    var _markdown_it_plugins_toc__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(
    /*! ./markdown-it-plugins/toc */
    "./src/app/modules/markdown/viewer/services/markdown-it-plugins/toc.js");
    /* harmony import */


    var _markdown_it_plugins_toc__WEBPACK_IMPORTED_MODULE_42___default = /*#__PURE__*/__webpack_require__.n(_markdown_it_plugins_toc__WEBPACK_IMPORTED_MODULE_42__);
    /* harmony import */


    var _markdown_it_plugins_container__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(
    /*! ./markdown-it-plugins/container */
    "./src/app/modules/markdown/viewer/services/markdown-it-plugins/container.ts");
    /* harmony import */


    var markdown_it_latex__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(
    /*! markdown-it-latex */
    "./node_modules/markdown-it-latex/dist/index.js");
    /* harmony import */


    var markdown_it_latex__WEBPACK_IMPORTED_MODULE_44___default = /*#__PURE__*/__webpack_require__.n(markdown_it_latex__WEBPACK_IMPORTED_MODULE_44__);
    /* harmony import */


    var core__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(
    /*! core */
    "./src/app/modules/core/index.ts");
    /* harmony import */


    var _markdown_it_plugins_mermaid_plugin__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(
    /*! ./markdown-it-plugins/mermaid.plugin */
    "./src/app/modules/markdown/viewer/services/markdown-it-plugins/mermaid.plugin.ts");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var _utils_getUri__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(
    /*! ../utils/getUri */
    "./src/app/modules/markdown/viewer/utils/getUri.ts");
    /* harmony import */


    var _markdown_it_plugins_lisp__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(
    /*! ./markdown-it-plugins/lisp */
    "./src/app/modules/markdown/viewer/services/markdown-it-plugins/lisp.ts");
    /* harmony import */


    var _markdown_it_plugins_source_line__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(
    /*! ./markdown-it-plugins/source-line */
    "./src/app/modules/markdown/viewer/services/markdown-it-plugins/source-line.ts");
    /* harmony import */


    var markdown_it_incremental_dom__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(
    /*! markdown-it-incremental-dom */
    "./node_modules/markdown-it-incremental-dom/lib/markdown-it-incremental-dom.js");
    /* harmony import */


    var markdown_it_incremental_dom__WEBPACK_IMPORTED_MODULE_51___default = /*#__PURE__*/__webpack_require__.n(markdown_it_incremental_dom__WEBPACK_IMPORTED_MODULE_51__);
    /* harmony import */


    var incremental_dom__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(
    /*! incremental-dom */
    "./node_modules/incremental-dom/dist/incremental-dom-cjs.js");
    /* harmony import */


    var incremental_dom__WEBPACK_IMPORTED_MODULE_52___default = /*#__PURE__*/__webpack_require__.n(incremental_dom__WEBPACK_IMPORTED_MODULE_52__);
    /* harmony import */


    var _markdown_it_plugins_meta__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(
    /*! ./markdown-it-plugins/meta */
    "./src/app/modules/markdown/viewer/services/markdown-it-plugins/meta.ts");
    /* harmony import */


    var shared__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(
    /*! shared */
    "./src/app/modules/shared/index.ts"); // import highlightjs from 'highlight.js/lib/highlight';
    // import 'prismjs/components/prism-core';
    // import 'prismjs/components/prism-php';// have problem
    // import * as emoji from 'markdown-it-emoji/light';


    var enableIDOM = true; // @Injectable()

    var MarkdownViewerService = /*#__PURE__*/function () {
      function MarkdownViewerService(router, docRef, utils, state, store, config) {
        var _this21 = this;

        _classCallCheck(this, MarkdownViewerService);

        this.router = router;
        this.docRef = docRef;
        this.utils = utils;
        this.state = state;
        this.store = store;
        this.defaultConfig = {
          markdownIt: {
            html: true,
            xhtmlOut: false,
            breaks: false,
            langPrefix: 'langPrefix-',
            linkify: true,
            typographer: true
          }
        };

        this.updateMeta = function (meta) {
          function isDiff(obj, withObj) {
            for (var _i7 = 0, _Object$keys = Object.keys(obj); _i7 < _Object$keys.length; _i7++) {
              var key = _Object$keys[_i7];
              var value = obj[key];
              var withValue = withObj[key];

              if (value !== withValue) {
                if (typeof value === 'object') {
                  if (isDiff(value, withValue)) return true;
                } else {
                  return true;
                }
              }
            }

            return false;
          }

          if (!meta) return meta;
          var doc = Object(shared__WEBPACK_IMPORTED_MODULE_54__["selectCurrentDocumentState"])(_this21.state.value);
          if (!doc || !doc.metaData) return meta;
          if (!isDiff(meta, doc.metaData)) return doc.metaData;
          var newMeta = Object.assign(Object.assign({}, doc.metaData), meta);
          rxjs__WEBPACK_IMPORTED_MODULE_47__["asyncScheduler"].schedule(function (m) {
            _this21.store.dispatch(new shared__WEBPACK_IMPORTED_MODULE_54__["UpdateDocument"]({
              collectionDocument: {
                id: doc.id,
                changes: Object.assign(Object.assign({}, doc), {
                  metaData: m,
                  isUpdateMeta: true
                })
              }
            }));
          }, 0, newMeta);
          return newMeta;
        };

        this.env = {};

        this.DEFAULT_HIGHLIGHT_FUNCTION = function (str, lang) {
          var reg = /\s+{[ ,-\d+]+}/;
          lang = lang.replace(reg, '');
          var hlLineNumbers = _this21.env.highlightLineNumbers;
          var language = prismjs__WEBPACK_IMPORTED_MODULE_2__["languages"][lang];

          if (lang && language) {
            var preNode = _this21.docRef.document.createElement('pre');

            var codeNode = _this21.docRef.document.createElement('code');

            preNode.className = (_this21.showCodeLineNumber ? 'line-numbers' : '') + ' language-' + lang;
            preNode.appendChild(codeNode);
            codeNode.textContent = str;

            if (hlLineNumbers) {
              preNode.setAttribute('data-line', hlLineNumbers);
              codeNode.style['white-space'] = 'pre';
            }

            preNode.style.visibility = 'collapse';

            _this21.target.appendChild(preNode);

            try {
              prismjs__WEBPACK_IMPORTED_MODULE_2__["highlightElement"](codeNode);
              preNode.style.visibility = 'visible';

              _this21.target.removeChild(preNode);

              var r = "<div class=\"markdown-code\">\n<div class=\"markdown-code__lang\">".concat(lang, "</div>\n<div class=\"code-buttons\">\n\n<button class=\"material-icons code-button\"\nonclick=\"md_edit_event(event.target.parentElement.parentElement.parentElement)\">\nedit\n</button>\n\n<button class=\"material-icons code-button\"\nonclick=\"md_code_wrapText()\">\nwrap_text\n</button>\n\n<button class=\"material-icons code-button no-print\"\ntitle=\"Copy code snippet\"\noriginalstr=").concat(Object(core__WEBPACK_IMPORTED_MODULE_45__["base64Encode"])(str), "\nonclick=\"document.copier.copyText(this.attributes.originalstr.value,true)\">\n<span aria-hidden=\"true\">content_copy</span>\n</button></div>").concat(preNode.outerHTML, "</div>");
              return r;
            } catch (e) {
              console.error(e);
            }
          }

          return "<pre class=\"highlight\"><code>".concat(_this21.markdown.utils.escapeHtml(str), " </code></pre>");
        };

        this.utils.isScreenWide$.subscribe(function (wide) {
          return _this21.showCodeLineNumber = wide;
        });
        config = config || Object(core__WEBPACK_IMPORTED_MODULE_45__["mergeConf"])(this.defaultConfig, config);

        if (!config.markdownIt.highlight) {
          config.markdownIt.highlight = this.DEFAULT_HIGHLIGHT_FUNCTION;
        }

        this.markdown = new markdown_it__WEBPACK_IMPORTED_MODULE_26__(config.markdownIt);
        this.metaPlugin = new _markdown_it_plugins_meta__WEBPACK_IMPORTED_MODULE_53__["MetaPlugin"](this.markdown, this.updateMeta);
        this.lispPlugin = new _markdown_it_plugins_lisp__WEBPACK_IMPORTED_MODULE_49__["LispPlugin"](this.markdown);
        this.markdown.use(markdown_it_incremental_dom__WEBPACK_IMPORTED_MODULE_51___default.a, incremental_dom__WEBPACK_IMPORTED_MODULE_52__, {
          incrementalizeDefaultRules: true
        }).use(_markdown_it_plugins_title__WEBPACK_IMPORTED_MODULE_36__(function (title, level) {
          _this21.updateMeta({
            title: title
          });
        }, 1)).use(markdown_it_video__WEBPACK_IMPORTED_MODULE_27__, {
          youtube: {
            width: 640,
            height: 390
          }
        }).use(markdown_it_task_lists__WEBPACK_IMPORTED_MODULE_28__, {
          enabled: false
        }).use(markdown_it_emoji__WEBPACK_IMPORTED_MODULE_29__).use(markdown_it_sub__WEBPACK_IMPORTED_MODULE_30__).use(markdown_it_sup__WEBPACK_IMPORTED_MODULE_31__).use(markdown_it_ins__WEBPACK_IMPORTED_MODULE_32__).use(markdown_it_mark__WEBPACK_IMPORTED_MODULE_33__).use(_markdown_it_plugins_footnote__WEBPACK_IMPORTED_MODULE_38__, {
          getUrl: function getUrl(_) {
            return Object(_utils_getUri__WEBPACK_IMPORTED_MODULE_48__["getAddr"])(_this21.docRef.document.location.href);
          }
        }).use(markdown_it_deflist__WEBPACK_IMPORTED_MODULE_35__).use(markdown_it_abbr__WEBPACK_IMPORTED_MODULE_34__).use(_markdown_it_plugins_fence__WEBPACK_IMPORTED_MODULE_41__["fence"]).use(_markdown_it_plugins_anchor__WEBPACK_IMPORTED_MODULE_40__, {
          level: 1,
          // slugify: string => string,
          permalink: true,
          permalinkHref: function permalinkHref(slug, state) {
            return "".concat(Object(_utils_getUri__WEBPACK_IMPORTED_MODULE_48__["getAddr"])(_this21.docRef.document.location.href), "#").concat(slug);
          },
          permalinkClass: 'deep-link',
          permalinkSymbol: "<i class=\"material-icons deep-link-icon\">link</i>",
          permalinkBefore: false
        }).use(_markdown_it_plugins_toc__WEBPACK_IMPORTED_MODULE_42__, {
          getHref: function getHref(slug, state) {
            return "".concat(Object(_utils_getUri__WEBPACK_IMPORTED_MODULE_48__["getAddr"])(_this21.docRef.document.location.href), "#").concat(slug);
          },
          includeLevel: [2, 3, 4]
        }).use(_markdown_it_plugins_imsize__WEBPACK_IMPORTED_MODULE_39__, {
          autofill: true
        }).use(_markdown_it_plugins_source_line__WEBPACK_IMPORTED_MODULE_50__["sourceLine"]).use(markdown_it_latex__WEBPACK_IMPORTED_MODULE_44___default.a).use(_markdown_it_plugins_html__WEBPACK_IMPORTED_MODULE_37__(incremental_dom__WEBPACK_IMPORTED_MODULE_52__, enableIDOM));
        this.mermaidPlugin = new _markdown_it_plugins_mermaid_plugin__WEBPACK_IMPORTED_MODULE_46__["MermaidPlugin"](this.markdown);
        this.containerPlugin = new _markdown_it_plugins_container__WEBPACK_IMPORTED_MODULE_43__["ContainerPlugin"](this.markdown, 'warning');
        this.docRef.document['copier'] = new core__WEBPACK_IMPORTED_MODULE_45__["CopierService"]();
      }

      _createClass(MarkdownViewerService, [{
        key: "render",
        value: function render(target, raw) {
          this.target = target;

          if (enableIDOM) {
            try {
              var code_inline_before = this.markdown.renderer.rules.code_inline; // latex code_inline rule or default

              var elementClose = incremental_dom__WEBPACK_IMPORTED_MODULE_52__.elementClose,
                  elementOpen = incremental_dom__WEBPACK_IMPORTED_MODULE_52__.elementOpen,
                  elementVoid = incremental_dom__WEBPACK_IMPORTED_MODULE_52__.elementVoid,
                  text = incremental_dom__WEBPACK_IMPORTED_MODULE_52__.text,
                  skipNode = incremental_dom__WEBPACK_IMPORTED_MODULE_52__.skipNode,
                  skip = incremental_dom__WEBPACK_IMPORTED_MODULE_52__.skip;
              var md = this.markdown;
              var irender = md['IncrementalDOMRenderer'];
              var irender_code_inline_rule = irender.rules.code_inline; // override the irender rules

              irender.rules.code_inline = function () {
                for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
                  args[_key10] = arguments[_key10];
                }

                var tokens = args[0],
                    idx = args[1],
                    options = args[2],
                    env = args[3],
                    slf = args[4];
                var content = tokens[idx].content;

                if (content.startsWith('$') || content.startsWith('@')) {
                  // latex
                  return code_inline_before.apply(void 0, args);
                }

                return irender_code_inline_rule.apply(void 0, args);
              };

              var r = incremental_dom__WEBPACK_IMPORTED_MODULE_52__["patch"](target, irender.render(md.parse(raw, this.env), md['options'], this.env));
              return r.textContent;
            } catch (e) {
              console.error(e);
              return e;
            }
          } else {
            var _r = target.innerHTML = this.markdown.render(raw, this.env);

            return _r;
          }
        }
      }]);

      return MarkdownViewerService;
    }();
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/utils/getUri.ts":
  /*!*********************************************************!*\
    !*** ./src/app/modules/markdown/viewer/utils/getUri.ts ***!
    \*********************************************************/

  /*! exports provided: getAddr */

  /***/
  function srcAppModulesMarkdownViewerUtilsGetUriTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getAddr", function () {
      return getAddr;
    });

    var getAddr = function getAddr(href) {
      var indexofHash = href.indexOf('#');
      var addr = indexofHash !== -1 ? href.substr(0, indexofHash) : href;
      return addr;
    };
    /***/

  },

  /***/
  "./src/app/modules/markdown/viewer/viewer-toolbar/viewer-toolbar.component.ts":
  /*!************************************************************************************!*\
    !*** ./src/app/modules/markdown/viewer/viewer-toolbar/viewer-toolbar.component.ts ***!
    \************************************************************************************/

  /*! exports provided: ViewerToolbarComponent */

  /***/
  function srcAppModulesMarkdownViewerViewerToolbarViewerToolbarComponentTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ViewerToolbarComponent", function () {
      return ViewerToolbarComponent;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var _state_actions_document__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../../state/actions/document */
    "./src/app/modules/markdown/state/actions/document.ts");
    /* harmony import */


    var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! @angular/common */
    "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");
    /* harmony import */


    var _ngrx_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! @ngrx/store */
    "./node_modules/@ngrx/store/__ivy_ngcc__/fesm2015/store.js");
    /* harmony import */


    var _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! @angular/material/toolbar */
    "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/toolbar.js");
    /* harmony import */


    var _angular_material_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! @angular/material/button */
    "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/button.js");
    /* harmony import */


    var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! @angular/router */
    "./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js");
    /* harmony import */


    var _angular_material_icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! @angular/material/icon */
    "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/icon.js");
    /* harmony import */


    var _angular_material_menu__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! @angular/material/menu */
    "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/menu.js");

    var _c0 = ["toolbar"];

    var ViewerToolbarComponent = /*@__PURE__*/function () {
      var ViewerToolbarComponent = /*#__PURE__*/function () {
        function ViewerToolbarComponent(location, store) {
          _classCallCheck(this, ViewerToolbarComponent);

          this.location = location;
          this.store = store;
        }

        _createClass(ViewerToolbarComponent, [{
          key: "onRefresh",
          value: function onRefresh(e) {
            this.store.dispatch(new _state_actions_document__WEBPACK_IMPORTED_MODULE_1__["RefreshAction"]());
          }
        }, {
          key: "back",
          value: function back(e) {
            this.location.back();
          }
        }, {
          key: "toEditMode",
          value: function toEditMode(e) {
            this.store.dispatch(new _state_actions_document__WEBPACK_IMPORTED_MODULE_1__["EditMode"]());
          }
        }]);

        return ViewerToolbarComponent;
      }();

      ViewerToolbarComponent.ɵfac = function ViewerToolbarComponent_Factory(t) {
        return new (t || ViewerToolbarComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_2__["Location"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_ngrx_store__WEBPACK_IMPORTED_MODULE_3__["Store"]));
      };

      ViewerToolbarComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: ViewerToolbarComponent,
        selectors: [["ms-viewer-toolbar"]],
        viewQuery: function ViewerToolbarComponent_Query(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c0, true);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.toolbar = _t.first);
          }
        },
        decls: 27,
        vars: 2,
        consts: [["color", "primary"], ["toolbar", ""], ["routerLinkActive", "", "mat-icon-button", "", 3, "click"], [2, "flex", "1 1 auto", "margin", "2.4rem"], ["mat-icon-button", "", 3, "click"], ["mat-icon-button", "", 3, "matMenuTriggerFor"], ["menu", ""], ["mat-menu-item", "", 3, "click"], ["mat-menu-item", "", 3, "disabled"], ["mat-menu-item", ""]],
        template: function ViewerToolbarComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mat-toolbar", 0, 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "mat-toolbar-row");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "button", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function ViewerToolbarComponent_Template_button_click_3_listener($event) {
              return ctx.back($event);
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "mat-icon");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](5, "arrow_back");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "span", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](7, "Document");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "button", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function ViewerToolbarComponent_Template_button_click_8_listener($event) {
              return ctx.toEditMode($event);
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "mat-icon");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](10, " mode_edit ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](11, "button", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](12, "mat-icon");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](13, " more_vert ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](14, "mat-menu", null, 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "button", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function ViewerToolbarComponent_Template_button_click_16_listener($event) {
              return ctx.onRefresh($event);
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](17, "mat-icon");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](18, "refresh");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](19, "span");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](20, "Refresh");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](21, "button", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](22, "Item 2");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](23, "button", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](24, "Item 3");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](25, "button", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](26, "Item 4");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            var _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](15);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("matMenuTriggerFor", _r1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", true);
          }
        },
        directives: [_angular_material_toolbar__WEBPACK_IMPORTED_MODULE_4__["MatToolbar"], _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_4__["MatToolbarRow"], _angular_material_button__WEBPACK_IMPORTED_MODULE_5__["MatButton"], _angular_router__WEBPACK_IMPORTED_MODULE_6__["RouterLinkActive"], _angular_material_icon__WEBPACK_IMPORTED_MODULE_7__["MatIcon"], _angular_material_menu__WEBPACK_IMPORTED_MODULE_8__["MatMenuTrigger"], _angular_material_menu__WEBPACK_IMPORTED_MODULE_8__["_MatMenu"], _angular_material_menu__WEBPACK_IMPORTED_MODULE_8__["MatMenuItem"]],
        styles: ["a[_ngcontent-%COMP%]:hover {\n  color: rgba(255, 255, 255, 0.7);\n  text-decoration: none;\n}"]
      });
      return ViewerToolbarComponent;
    }();
    /***/

  }
}]);