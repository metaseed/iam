{
  "version": 3,
  "file": "metaseed-angular-hotkey.umd.js",
  "sources": [
    "ng://@metaseed/angular-hotkey/projects/angular-hotkey/src/lib/angular-hotkey.module.ts",
    "ng://@metaseed/angular-hotkey/projects/angular-hotkey/src/lib/hotkeys.directive.ts",
    "ng://@metaseed/angular-hotkey/projects/angular-hotkey/src/lib/cheatsheet.component.ts",
    "ng://@metaseed/angular-hotkey/projects/angular-hotkey/src/lib/hotkeys.service.ts",
    "ng://@metaseed/angular-hotkey/projects/angular-hotkey/src/lib/hotkey.model.ts",
    "ng://@metaseed/angular-hotkey/projects/angular-hotkey/src/lib/hotkey.options.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HotkeysDirective } from './hotkeys.directive';\nimport { CheatSheetComponent } from './cheatsheet.component';\nimport { CommonModule } from '@angular/common';\nimport { IHotkeyOptions, HotkeyOptions } from './hotkey.options';\nimport { HotkeysService } from './hotkeys.service';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [HotkeysDirective, CheatSheetComponent],\n  declarations: [HotkeysDirective, CheatSheetComponent]\n})\nexport class HotkeyModule {\n  static forRoot(options: IHotkeyOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: HotkeyModule,\n      providers: [HotkeysService, { provide: HotkeyOptions, useValue: options }]\n    };\n  }\n}\n",
    "import {Directive, Input, OnInit, OnDestroy, ElementRef} from '@angular/core';\nimport {Hotkey, ExtendedKeyboardEvent} from './hotkey.model';\nimport {HotkeysService} from './hotkeys.service';\nimport 'mousetrap';\n\n@Directive({\n    selector : '[hotkeys]',\n    providers : [HotkeysService]\n})\nexport class HotkeysDirective implements OnInit, OnDestroy {\n    @Input() hotkeys: {[combo: string]: (event: KeyboardEvent, combo: string) => ExtendedKeyboardEvent}[];\n\n    private mousetrap: MousetrapInstance;\n    private hotkeysList: Hotkey[] = [];\n    private oldHotkeys: Hotkey[] = [];\n\n    constructor(private _hotkeysService: HotkeysService, private _elementRef: ElementRef) {\n        this.mousetrap = new Mousetrap(this._elementRef.nativeElement); // Bind hotkeys to the current element (and any children)\n    }\n\n    ngOnInit() {\n        for (let hotkey of this.hotkeys) {\n            let combo = Object.keys(hotkey)[0];\n            let hotkeyObj: Hotkey = new Hotkey(combo, hotkey[combo]);\n            let oldHotkey: Hotkey = <Hotkey>this._hotkeysService.get(combo);\n            if(oldHotkey !== null) { // We let the user overwrite callbacks temporarily if you specify it in HTML\n                this.oldHotkeys.push(oldHotkey);\n                this._hotkeysService.remove(oldHotkey);\n            }\n            this.hotkeysList.push(hotkeyObj);\n            this.mousetrap.bind(hotkeyObj.combo, hotkeyObj.callback);\n        }\n    }\n\n    ngOnDestroy() {\n        for (let hotkey of this.hotkeysList) {\n            this.mousetrap.unbind(hotkey.combo);\n        }\n        this._hotkeysService.add(this.oldHotkeys);\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "import { Component, OnInit, OnDestroy, Input } from \"@angular/core\";\nimport { HotkeysService } from \"./hotkeys.service\";\nimport { Hotkey } from \"./hotkey.model\";\n\n@Component({\n  selector: \"hotkeys-cheatsheet\",\n  styles: [\n    `\n.cfp-hotkeys-container {\n  display: table !important;\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  color: #333;\n  font-size: 1em;\n  background-color: rgba(255,255,255,0.9);\n}\n\n.cfp-hotkeys-container.fade {\n  z-index: -1024;\n  visibility: hidden;\n  opacity: 0;\n  -webkit-transition: opacity 0.15s linear;\n  -moz-transition: opacity 0.15s linear;\n  -o-transition: opacity 0.15s linear;\n  transition: opacity 0.15s linear;\n}\n\n.cfp-hotkeys-container.fade.in {\n  z-index: 10002;\n  visibility: visible;\n  opacity: 1;\n}\n\n.cfp-hotkeys-title {\n  font-weight: bold;\n  text-align: center;\n  font-size: 1.2em;\n}\n\n.cfp-hotkeys {\n  width: 100%;\n  height: 100%;\n  display: table-cell;\n  vertical-align: middle;\n}\n\n.cfp-hotkeys table {\n  margin: auto;\n  color: #333;\n}\n\n.cfp-content {\n  display: table-cell;\n  vertical-align: middle;\n}\n\n.cfp-hotkeys-keys {\n  padding: 5px;\n  text-align: right;\n}\n\n.cfp-hotkeys-key {\n  display: inline-block;\n  color: #fff;\n  background-color: #333;\n  border: 1px solid #333;\n  border-radius: 5px;\n  text-align: center;\n  margin-right: 5px;\n  box-shadow: inset 0 1px 0 #666, 0 1px 0 #bbb;\n  padding: 5px 9px;\n  font-size: 1em;\n}\n\n.cfp-hotkeys-text {\n  padding-left: 10px;\n  font-size: 1em;\n}\n\n.cfp-hotkeys-close {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  font-size: 2em;\n  font-weight: bold;\n  padding: 5px 10px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  min-height: 45px;\n  min-width: 45px;\n  text-align: center;\n}\n\n.cfp-hotkeys-close:hover {\n  background-color: #fff;\n  cursor: pointer;\n}\n\n@media all and (max-width: 500px) {\n  .cfp-hotkeys {\n    font-size: 0.8em;\n  }\n}\n\n@media all and (min-width: 750px) {\n  .cfp-hotkeys {\n    font-size: 1.2em;\n  }\n}  `\n  ],\n  template: `<div class=\"cfp-hotkeys-container fade\" [ngClass]=\"{'in': helpVisible}\" style=\"display:none\"><div class=\"cfp-hotkeys\">\n  <h4 class=\"cfp-hotkeys-title\">{{ title }}</h4>\n  <table><tbody>\n    <tr *ngFor=\"let hotkey of hotkeys\">\n      <td class=\"cfp-hotkeys-keys\">\n        <span *ngFor=\"let key of hotkey.formatted\" class=\"cfp-hotkeys-key\">{{ key }}</span>\n      </td>\n      <td class=\"cfp-hotkeys-text\">{{ hotkey.description }}</td>\n    </tr>\n  </tbody></table>\n  <div class=\"cfp-hotkeys-close\" (click)=\"toggleCheatSheet()\">&#215;</div>\n</div></div>`\n})\nexport class CheatSheetComponent implements OnInit, OnDestroy {\n  helpVisible = false;\n  @Input() title = \"Keyboard Shortcuts:\";\n  subscription: any;\n\n  hotkeys: Hotkey[];\n\n  constructor(private hotkeysService: HotkeysService) {}\n\n  public ngOnInit(): void {\n    this.subscription = this.hotkeysService.cheatSheetToggle.subscribe(\n      isOpen => {\n        if (isOpen !== false) {\n          this.hotkeys = this.hotkeysService.hotkeys.filter(\n            hotkey => hotkey.description\n          );\n        }\n\n        if (isOpen === false) {\n          this.helpVisible = false;\n        } else {\n          this.toggleCheatSheet();\n        }\n      }\n    );\n  }\n\n  public ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  public toggleCheatSheet(): void {\n    this.helpVisible = !this.helpVisible;\n  }\n}\n",
    "import { HotkeyOptions, IHotkeyOptions } from './hotkey.options';\nimport { Subject } from 'rxjs';\nimport { Inject, Injectable } from '@angular/core';\nimport { Hotkey } from './hotkey.model';\nimport 'mousetrap';\n\n@Injectable()\nexport class HotkeysService {\n  hotkeys: Hotkey[] = [];\n  pausedHotkeys: Hotkey[] = [];\n  mousetrap: MousetrapInstance;\n  cheatSheetToggle: Subject<any> = new Subject();\n\n  private _preventIn = ['INPUT', 'SELECT', 'TEXTAREA'];\n\n  constructor(@Inject(HotkeyOptions) private options: IHotkeyOptions) {\n    Mousetrap.prototype.stopCallback = (\n      event: KeyboardEvent,\n      element: HTMLElement,\n      combo: string,\n      callback: Function\n    ) => {\n      // if the element has the class \"mousetrap\" then no need to stop\n      if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\n        return false;\n      }\n      return element.contentEditable && element.contentEditable === 'true';\n    };\n    this.mousetrap = new (<any>Mousetrap)();\n    if (!this.options.disableCheatSheet) {\n      this.add(\n        new Hotkey(\n          this.options.cheatSheetHotkey || '?',\n          function(event: KeyboardEvent) {\n            this.cheatSheetToggle.next();\n          }.bind(this),\n          [],\n          this.options.cheatSheetDescription || 'Show / hide this help menu'\n        )\n      );\n    }\n\n    if (this.options.cheatSheetCloseEsc) {\n      this.add(\n        new Hotkey(\n          'esc',\n          function(event: KeyboardEvent) {\n            this.cheatSheetToggle.next(false);\n          }.bind(this),\n          ['HOTKEYS-CHEATSHEET'],\n          'Hide this help menu'\n        )\n      );\n    }\n  }\n\n  add(hotkey: Hotkey | Hotkey[], specificEvent?: string): Hotkey | Hotkey[] {\n    if (Array.isArray(hotkey)) {\n      let temp: Hotkey[] = [];\n      for (let key of hotkey) {\n        temp.push(<Hotkey>this.add(key, specificEvent));\n      }\n      return temp;\n    }\n    this.remove(hotkey);\n    this.hotkeys.push(<Hotkey>hotkey);\n    this.mousetrap.bind(\n      (<Hotkey>hotkey).combo,\n      (event: KeyboardEvent, combo: string) => {\n        let shouldExecute = true;\n\n        // if the callback is executed directly `hotkey.get('w').callback()`\n        // there will be no event, so just execute the callback.\n        if (event) {\n          let target: HTMLElement = <HTMLElement>(event.target || event.srcElement); // srcElement is IE only\n          let nodeName: string = target.nodeName.toUpperCase();\n\n          // check if the input has a mousetrap class, and skip checking preventIn if so\n          if ((' ' + target.className + ' ').indexOf(' mousetrap ') > -1) {\n            shouldExecute = true;\n          } else if (\n            this._preventIn.indexOf(nodeName) > -1 &&\n            (<Hotkey>hotkey).allowIn.map(allow => allow.toUpperCase()).indexOf(nodeName) === -1\n          ) {\n            // don't execute callback if the event was fired from inside an element listed in preventIn but not in allowIn\n            shouldExecute = false;\n          }\n        }\n\n        if (shouldExecute) {\n          return (<Hotkey>hotkey).callback.apply(this, [event, combo]);\n        }\n      },\n      specificEvent\n    );\n    return hotkey;\n  }\n\n  remove(hotkey?: Hotkey | Hotkey[]): Hotkey | Hotkey[] {\n    let temp: Hotkey[] = [];\n    if (!hotkey) {\n      for (let key of this.hotkeys) {\n        temp.push(<Hotkey>this.remove(key));\n      }\n      return temp;\n    }\n    if (Array.isArray(hotkey)) {\n      for (let key of hotkey) {\n        temp.push(<Hotkey>this.remove(key));\n      }\n      return temp;\n    }\n    let index = this.findHotkey(<Hotkey>hotkey);\n    if (index > -1) {\n      this.hotkeys.splice(index, 1);\n      this.mousetrap.unbind((<Hotkey>hotkey).combo);\n      return hotkey;\n    }\n    return null;\n  }\n\n  get(combo?: string | string[]): Hotkey | Hotkey[] {\n    if (!combo) {\n      return this.hotkeys;\n    }\n    if (Array.isArray(combo)) {\n      let temp: Hotkey[] = [];\n      for (let key of combo) {\n        temp.push(<Hotkey>this.get(key));\n      }\n      return temp;\n    }\n    for (let i = 0; i < this.hotkeys.length; i++) {\n      if (this.hotkeys[i].combo.indexOf(<string>combo) > -1) {\n        return this.hotkeys[i];\n      }\n    }\n    return null;\n  }\n\n  pause(hotkey?: Hotkey | Hotkey[]): Hotkey | Hotkey[] {\n    if (!hotkey) {\n      return this.pause(this.hotkeys);\n    }\n    if (Array.isArray(hotkey)) {\n      let temp: Hotkey[] = [];\n      for (let key of hotkey) {\n        temp.push(<Hotkey>this.pause(key));\n      }\n      return temp;\n    }\n    this.remove(hotkey);\n    this.pausedHotkeys.push(<Hotkey>hotkey);\n    return hotkey;\n  }\n\n  unpause(hotkey?: Hotkey | Hotkey[]): Hotkey | Hotkey[] {\n    if (!hotkey) {\n      return this.unpause(this.pausedHotkeys);\n    }\n    if (Array.isArray(hotkey)) {\n      let temp: Hotkey[] = [];\n      for (let key of hotkey) {\n        temp.push(<Hotkey>this.unpause(key));\n      }\n      return temp;\n    }\n    let index: number = this.pausedHotkeys.indexOf(<Hotkey>hotkey);\n    if (index > -1) {\n      this.add(hotkey);\n      return this.pausedHotkeys.splice(index, 1);\n    }\n    return null;\n  }\n\n  reset() {\n    this.mousetrap.reset();\n  }\n\n  private findHotkey(hotkey: Hotkey): number {\n    return this.hotkeys.indexOf(hotkey);\n  }\n}\n",
    "export interface ExtendedKeyboardEvent extends KeyboardEvent {\n  returnValue: boolean; // IE returnValue\n}\n\nexport class Hotkey {\n  _formatted: string[];\n\n  static symbolize(combo: string): string {\n    let map: any = {\n      command: \"\\u2318\", // ⌘\n      shift: \"\\u21E7\", // ⇧\n      left: \"\\u2190\", // ←\n      right: \"\\u2192\", // →\n      up: \"\\u2191\", // ↑\n      down: \"\\u2193\", // ↓\n      return: \"\\u23CE\", // ⏎\n      backspace: \"\\u232B\" // ⌫\n    };\n    let comboSplit: string[] = combo.split(\"+\");\n\n    for (let i = 0; i < comboSplit.length; i++) {\n      // try to resolve command / ctrl based on OS:\n      if (comboSplit[i] === \"mod\") {\n        if (window.navigator && window.navigator.platform.indexOf(\"Mac\") >= 0) {\n          comboSplit[i] = \"command\";\n        } else {\n          comboSplit[i] = \"ctrl\";\n        }\n      }\n\n      comboSplit[i] = map[comboSplit[i]] || comboSplit[i];\n    }\n\n    return comboSplit.join(\" + \");\n  }\n\n  /**\n   * Creates a new Hotkey for Mousetrap binding\n   *\n   * @param  combo       mousetrap key binding\n   * @param   description description for the help menu\n   * @param  callback    method to call when key is pressed\n   * @param   action      the type of event to listen for (for mousetrap)\n   * @param     allowIn     an array of tag names to allow this combo in ('INPUT', 'SELECT', and/or 'TEXTAREA')\n   * @param  persistent  if true, the binding is preserved upon route changes\n   */\n  constructor(\n    public combo: string | string[],\n    public callback: (\n      event: KeyboardEvent,\n      combo: string\n    ) => ExtendedKeyboardEvent | boolean,\n    public allowIn?: string[],\n    public description?: string | Function,\n    public action?: string,\n    public persistent?: boolean\n  ) {\n    this.combo = Array.isArray(combo) ? combo : [<string>combo];\n    this.allowIn = allowIn || [];\n    this.description = description || \"\";\n  }\n\n  get formatted(): string[] {\n    if (!this._formatted) {\n      let combo: string = this.combo[0];\n      let sequence: string[] = combo.split(/[\\s]/);\n      for (let i = 0; i < sequence.length; i++) {\n        sequence[i] = Hotkey.symbolize(sequence[i]);\n      }\n      this._formatted = sequence;\n    }\n    return this._formatted;\n  }\n}\n",
    "import { InjectionToken } from '@angular/core';\n\nexport interface IHotkeyOptions {\n  /**\n   * Disable the cheat sheet popover dialog? Default: false\n   */\n  disableCheatSheet?: boolean;\n  /**\n   * Key combination to trigger the cheat sheet. Default: '?'\n   */\n  cheatSheetHotkey?: string;\n\n  /**\n   * Use also ESC for closing the cheat sheet. Default: false\n   */\n  cheatSheetCloseEsc?: boolean;\n  /**\n   * Description for the cheat sheet hot key in the cheat sheet. Default: 'Show / hide this help menu'\n   */\n  cheatSheetDescription?: string;\n}\n\nexport const HotkeyOptions = new InjectionToken<IHotkeyOptions>('HotkeyOptions');\n"
  ],
  "names": [
    "tslib_1.__values",
    "Component",
    "Subject",
    "InjectionToken"
  ],
  "mappings": "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"
}
