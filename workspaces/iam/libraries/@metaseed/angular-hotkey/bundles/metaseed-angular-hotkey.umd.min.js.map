{
  "version": 3,
  "file": "metaseed-angular-hotkey.umd.min.js",
  "sources": [
    "ng://@metaseed/angular-hotkey/projects/angular-hotkey/src/lib/hotkey.options.ts",
    "ng://@metaseed/angular-hotkey/projects/angular-hotkey/src/lib/hotkey.model.ts",
    "ng://@metaseed/angular-hotkey/projects/angular-hotkey/src/lib/hotkeys.service.ts",
    "ng://@metaseed/angular-hotkey/projects/angular-hotkey/src/lib/cheatsheet.component.ts",
    "ng://@metaseed/angular-hotkey/projects/angular-hotkey/src/lib/hotkeys.directive.ts",
    "ng://@metaseed/angular-hotkey/projects/angular-hotkey/src/lib/angular-hotkey.module.ts"
  ],
  "sourcesContent": [
    "import { InjectionToken } from '@angular/core';\n\nexport interface IHotkeyOptions {\n  /**\n   * Disable the cheat sheet popover dialog? Default: false\n   */\n  disableCheatSheet?: boolean;\n  /**\n   * Key combination to trigger the cheat sheet. Default: '?'\n   */\n  cheatSheetHotkey?: string;\n\n  /**\n   * Use also ESC for closing the cheat sheet. Default: false\n   */\n  cheatSheetCloseEsc?: boolean;\n  /**\n   * Description for the cheat sheet hot key in the cheat sheet. Default: 'Show / hide this help menu'\n   */\n  cheatSheetDescription?: string;\n}\n\nexport const HotkeyOptions = new InjectionToken<IHotkeyOptions>('HotkeyOptions');\n",
    "export interface ExtendedKeyboardEvent extends KeyboardEvent {\n  returnValue: boolean; // IE returnValue\n}\n\nexport class Hotkey {\n  _formatted: string[];\n\n  static symbolize(combo: string): string {\n    let map: any = {\n      command: \"\\u2318\", // ⌘\n      shift: \"\\u21E7\", // ⇧\n      left: \"\\u2190\", // ←\n      right: \"\\u2192\", // →\n      up: \"\\u2191\", // ↑\n      down: \"\\u2193\", // ↓\n      return: \"\\u23CE\", // ⏎\n      backspace: \"\\u232B\" // ⌫\n    };\n    let comboSplit: string[] = combo.split(\"+\");\n\n    for (let i = 0; i < comboSplit.length; i++) {\n      // try to resolve command / ctrl based on OS:\n      if (comboSplit[i] === \"mod\") {\n        if (window.navigator && window.navigator.platform.indexOf(\"Mac\") >= 0) {\n          comboSplit[i] = \"command\";\n        } else {\n          comboSplit[i] = \"ctrl\";\n        }\n      }\n\n      comboSplit[i] = map[comboSplit[i]] || comboSplit[i];\n    }\n\n    return comboSplit.join(\" + \");\n  }\n\n  /**\n   * Creates a new Hotkey for Mousetrap binding\n   *\n   * @param  combo       mousetrap key binding\n   * @param   description description for the help menu\n   * @param  callback    method to call when key is pressed\n   * @param   action      the type of event to listen for (for mousetrap)\n   * @param     allowIn     an array of tag names to allow this combo in ('INPUT', 'SELECT', and/or 'TEXTAREA')\n   * @param  persistent  if true, the binding is preserved upon route changes\n   */\n  constructor(\n    public combo: string | string[],\n    public callback: (\n      event: KeyboardEvent,\n      combo: string\n    ) => ExtendedKeyboardEvent | boolean,\n    public allowIn?: string[],\n    public description?: string | Function,\n    public action?: string,\n    public persistent?: boolean\n  ) {\n    this.combo = Array.isArray(combo) ? combo : [<string>combo];\n    this.allowIn = allowIn || [];\n    this.description = description || \"\";\n  }\n\n  get formatted(): string[] {\n    if (!this._formatted) {\n      let combo: string = this.combo[0];\n      let sequence: string[] = combo.split(/[\\s]/);\n      for (let i = 0; i < sequence.length; i++) {\n        sequence[i] = Hotkey.symbolize(sequence[i]);\n      }\n      this._formatted = sequence;\n    }\n    return this._formatted;\n  }\n}\n",
    "import { HotkeyOptions, IHotkeyOptions } from './hotkey.options';\nimport { Subject } from 'rxjs';\nimport { Inject, Injectable } from '@angular/core';\nimport { Hotkey } from './hotkey.model';\nimport 'mousetrap';\n\n@Injectable()\nexport class HotkeysService {\n  hotkeys: Hotkey[] = [];\n  pausedHotkeys: Hotkey[] = [];\n  mousetrap: MousetrapInstance;\n  cheatSheetToggle: Subject<any> = new Subject();\n\n  private _preventIn = ['INPUT', 'SELECT', 'TEXTAREA'];\n\n  constructor(@Inject(HotkeyOptions) private options: IHotkeyOptions) {\n    Mousetrap.prototype.stopCallback = (\n      event: KeyboardEvent,\n      element: HTMLElement,\n      combo: string,\n      callback: Function\n    ) => {\n      // if the element has the class \"mousetrap\" then no need to stop\n      if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\n        return false;\n      }\n      return element.contentEditable && element.contentEditable === 'true';\n    };\n    this.mousetrap = new (<any>Mousetrap)();\n    if (!this.options.disableCheatSheet) {\n      this.add(\n        new Hotkey(\n          this.options.cheatSheetHotkey || '?',\n          function(event: KeyboardEvent) {\n            this.cheatSheetToggle.next();\n          }.bind(this),\n          [],\n          this.options.cheatSheetDescription || 'Show / hide this help menu'\n        )\n      );\n    }\n\n    if (this.options.cheatSheetCloseEsc) {\n      this.add(\n        new Hotkey(\n          'esc',\n          function(event: KeyboardEvent) {\n            this.cheatSheetToggle.next(false);\n          }.bind(this),\n          ['HOTKEYS-CHEATSHEET'],\n          'Hide this help menu'\n        )\n      );\n    }\n  }\n\n  add(hotkey: Hotkey | Hotkey[], specificEvent?: string): Hotkey | Hotkey[] {\n    if (Array.isArray(hotkey)) {\n      let temp: Hotkey[] = [];\n      for (let key of hotkey) {\n        temp.push(<Hotkey>this.add(key, specificEvent));\n      }\n      return temp;\n    }\n    this.remove(hotkey);\n    this.hotkeys.push(<Hotkey>hotkey);\n    this.mousetrap.bind(\n      (<Hotkey>hotkey).combo,\n      (event: KeyboardEvent, combo: string) => {\n        let shouldExecute = true;\n\n        // if the callback is executed directly `hotkey.get('w').callback()`\n        // there will be no event, so just execute the callback.\n        if (event) {\n          let target: HTMLElement = <HTMLElement>(event.target || event.srcElement); // srcElement is IE only\n          let nodeName: string = target.nodeName.toUpperCase();\n\n          // check if the input has a mousetrap class, and skip checking preventIn if so\n          if ((' ' + target.className + ' ').indexOf(' mousetrap ') > -1) {\n            shouldExecute = true;\n          } else if (\n            this._preventIn.indexOf(nodeName) > -1 &&\n            (<Hotkey>hotkey).allowIn.map(allow => allow.toUpperCase()).indexOf(nodeName) === -1\n          ) {\n            // don't execute callback if the event was fired from inside an element listed in preventIn but not in allowIn\n            shouldExecute = false;\n          }\n        }\n\n        if (shouldExecute) {\n          return (<Hotkey>hotkey).callback.apply(this, [event, combo]);\n        }\n      },\n      specificEvent\n    );\n    return hotkey;\n  }\n\n  remove(hotkey?: Hotkey | Hotkey[]): Hotkey | Hotkey[] {\n    let temp: Hotkey[] = [];\n    if (!hotkey) {\n      for (let key of this.hotkeys) {\n        temp.push(<Hotkey>this.remove(key));\n      }\n      return temp;\n    }\n    if (Array.isArray(hotkey)) {\n      for (let key of hotkey) {\n        temp.push(<Hotkey>this.remove(key));\n      }\n      return temp;\n    }\n    let index = this.findHotkey(<Hotkey>hotkey);\n    if (index > -1) {\n      this.hotkeys.splice(index, 1);\n      this.mousetrap.unbind((<Hotkey>hotkey).combo);\n      return hotkey;\n    }\n    return null;\n  }\n\n  get(combo?: string | string[]): Hotkey | Hotkey[] {\n    if (!combo) {\n      return this.hotkeys;\n    }\n    if (Array.isArray(combo)) {\n      let temp: Hotkey[] = [];\n      for (let key of combo) {\n        temp.push(<Hotkey>this.get(key));\n      }\n      return temp;\n    }\n    for (let i = 0; i < this.hotkeys.length; i++) {\n      if (this.hotkeys[i].combo.indexOf(<string>combo) > -1) {\n        return this.hotkeys[i];\n      }\n    }\n    return null;\n  }\n\n  pause(hotkey?: Hotkey | Hotkey[]): Hotkey | Hotkey[] {\n    if (!hotkey) {\n      return this.pause(this.hotkeys);\n    }\n    if (Array.isArray(hotkey)) {\n      let temp: Hotkey[] = [];\n      for (let key of hotkey) {\n        temp.push(<Hotkey>this.pause(key));\n      }\n      return temp;\n    }\n    this.remove(hotkey);\n    this.pausedHotkeys.push(<Hotkey>hotkey);\n    return hotkey;\n  }\n\n  unpause(hotkey?: Hotkey | Hotkey[]): Hotkey | Hotkey[] {\n    if (!hotkey) {\n      return this.unpause(this.pausedHotkeys);\n    }\n    if (Array.isArray(hotkey)) {\n      let temp: Hotkey[] = [];\n      for (let key of hotkey) {\n        temp.push(<Hotkey>this.unpause(key));\n      }\n      return temp;\n    }\n    let index: number = this.pausedHotkeys.indexOf(<Hotkey>hotkey);\n    if (index > -1) {\n      this.add(hotkey);\n      return this.pausedHotkeys.splice(index, 1);\n    }\n    return null;\n  }\n\n  reset() {\n    this.mousetrap.reset();\n  }\n\n  private findHotkey(hotkey: Hotkey): number {\n    return this.hotkeys.indexOf(hotkey);\n  }\n}\n",
    "import { Component, OnInit, OnDestroy, Input } from \"@angular/core\";\nimport { HotkeysService } from \"./hotkeys.service\";\nimport { Hotkey } from \"./hotkey.model\";\n\n@Component({\n  selector: \"hotkeys-cheatsheet\",\n  styles: [\n    `\n.cfp-hotkeys-container {\n  display: table !important;\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  color: #333;\n  font-size: 1em;\n  background-color: rgba(255,255,255,0.9);\n}\n\n.cfp-hotkeys-container.fade {\n  z-index: -1024;\n  visibility: hidden;\n  opacity: 0;\n  -webkit-transition: opacity 0.15s linear;\n  -moz-transition: opacity 0.15s linear;\n  -o-transition: opacity 0.15s linear;\n  transition: opacity 0.15s linear;\n}\n\n.cfp-hotkeys-container.fade.in {\n  z-index: 10002;\n  visibility: visible;\n  opacity: 1;\n}\n\n.cfp-hotkeys-title {\n  font-weight: bold;\n  text-align: center;\n  font-size: 1.2em;\n}\n\n.cfp-hotkeys {\n  width: 100%;\n  height: 100%;\n  display: table-cell;\n  vertical-align: middle;\n}\n\n.cfp-hotkeys table {\n  margin: auto;\n  color: #333;\n}\n\n.cfp-content {\n  display: table-cell;\n  vertical-align: middle;\n}\n\n.cfp-hotkeys-keys {\n  padding: 5px;\n  text-align: right;\n}\n\n.cfp-hotkeys-key {\n  display: inline-block;\n  color: #fff;\n  background-color: #333;\n  border: 1px solid #333;\n  border-radius: 5px;\n  text-align: center;\n  margin-right: 5px;\n  box-shadow: inset 0 1px 0 #666, 0 1px 0 #bbb;\n  padding: 5px 9px;\n  font-size: 1em;\n}\n\n.cfp-hotkeys-text {\n  padding-left: 10px;\n  font-size: 1em;\n}\n\n.cfp-hotkeys-close {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  font-size: 2em;\n  font-weight: bold;\n  padding: 5px 10px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  min-height: 45px;\n  min-width: 45px;\n  text-align: center;\n}\n\n.cfp-hotkeys-close:hover {\n  background-color: #fff;\n  cursor: pointer;\n}\n\n@media all and (max-width: 500px) {\n  .cfp-hotkeys {\n    font-size: 0.8em;\n  }\n}\n\n@media all and (min-width: 750px) {\n  .cfp-hotkeys {\n    font-size: 1.2em;\n  }\n}  `\n  ],\n  template: `<div class=\"cfp-hotkeys-container fade\" [ngClass]=\"{'in': helpVisible}\" style=\"display:none\"><div class=\"cfp-hotkeys\">\n  <h4 class=\"cfp-hotkeys-title\">{{ title }}</h4>\n  <table><tbody>\n    <tr *ngFor=\"let hotkey of hotkeys\">\n      <td class=\"cfp-hotkeys-keys\">\n        <span *ngFor=\"let key of hotkey.formatted\" class=\"cfp-hotkeys-key\">{{ key }}</span>\n      </td>\n      <td class=\"cfp-hotkeys-text\">{{ hotkey.description }}</td>\n    </tr>\n  </tbody></table>\n  <div class=\"cfp-hotkeys-close\" (click)=\"toggleCheatSheet()\">&#215;</div>\n</div></div>`\n})\nexport class CheatSheetComponent implements OnInit, OnDestroy {\n  helpVisible = false;\n  @Input() title = \"Keyboard Shortcuts:\";\n  subscription: any;\n\n  hotkeys: Hotkey[];\n\n  constructor(private hotkeysService: HotkeysService) {}\n\n  public ngOnInit(): void {\n    this.subscription = this.hotkeysService.cheatSheetToggle.subscribe(\n      isOpen => {\n        if (isOpen !== false) {\n          this.hotkeys = this.hotkeysService.hotkeys.filter(\n            hotkey => hotkey.description\n          );\n        }\n\n        if (isOpen === false) {\n          this.helpVisible = false;\n        } else {\n          this.toggleCheatSheet();\n        }\n      }\n    );\n  }\n\n  public ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  public toggleCheatSheet(): void {\n    this.helpVisible = !this.helpVisible;\n  }\n}\n",
    "import {Directive, Input, OnInit, OnDestroy, ElementRef} from '@angular/core';\nimport {Hotkey, ExtendedKeyboardEvent} from './hotkey.model';\nimport {HotkeysService} from './hotkeys.service';\nimport 'mousetrap';\n\n@Directive({\n    selector : '[hotkeys]',\n    providers : [HotkeysService]\n})\nexport class HotkeysDirective implements OnInit, OnDestroy {\n    @Input() hotkeys: {[combo: string]: (event: KeyboardEvent, combo: string) => ExtendedKeyboardEvent}[];\n\n    private mousetrap: MousetrapInstance;\n    private hotkeysList: Hotkey[] = [];\n    private oldHotkeys: Hotkey[] = [];\n\n    constructor(private _hotkeysService: HotkeysService, private _elementRef: ElementRef) {\n        this.mousetrap = new Mousetrap(this._elementRef.nativeElement); // Bind hotkeys to the current element (and any children)\n    }\n\n    ngOnInit() {\n        for (let hotkey of this.hotkeys) {\n            let combo = Object.keys(hotkey)[0];\n            let hotkeyObj: Hotkey = new Hotkey(combo, hotkey[combo]);\n            let oldHotkey: Hotkey = <Hotkey>this._hotkeysService.get(combo);\n            if(oldHotkey !== null) { // We let the user overwrite callbacks temporarily if you specify it in HTML\n                this.oldHotkeys.push(oldHotkey);\n                this._hotkeysService.remove(oldHotkey);\n            }\n            this.hotkeysList.push(hotkeyObj);\n            this.mousetrap.bind(hotkeyObj.combo, hotkeyObj.callback);\n        }\n    }\n\n    ngOnDestroy() {\n        for (let hotkey of this.hotkeysList) {\n            this.mousetrap.unbind(hotkey.combo);\n        }\n        this._hotkeysService.add(this.oldHotkeys);\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HotkeysDirective } from './hotkeys.directive';\nimport { CheatSheetComponent } from './cheatsheet.component';\nimport { CommonModule } from '@angular/common';\nimport { IHotkeyOptions, HotkeyOptions } from './hotkey.options';\nimport { HotkeysService } from './hotkeys.service';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [HotkeysDirective, CheatSheetComponent],\n  declarations: [HotkeysDirective, CheatSheetComponent]\n})\nexport class HotkeyModule {\n  static forRoot(options: IHotkeyOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: HotkeyModule,\n      providers: [HotkeysService, { provide: HotkeyOptions, useValue: options }]\n    };\n  }\n}\n"
  ],
  "names": [
    "HotkeyOptions",
    "InjectionToken",
    "Hotkey",
    "combo",
    "callback",
    "allowIn",
    "description",
    "action",
    "persistent",
    "this",
    "Array",
    "isArray",
    "symbolize",
    "map",
    "command",
    "shift",
    "left",
    "right",
    "up",
    "down",
    "return",
    "backspace",
    "comboSplit",
    "split",
    "i",
    "length",
    "window",
    "navigator",
    "platform",
    "indexOf",
    "join",
    "get",
    "_formatted",
    "sequence",
    "HotkeysService",
    "options",
    "hotkeys",
    "pausedHotkeys",
    "cheatSheetToggle",
    "Subject",
    "_preventIn",
    "element",
    "className",
    "contentEditable",
    "mousetrap",
    "disableCheatSheet",
    "add",
    "cheatSheetHotkey",
    "event",
    "next",
    "bind",
    "cheatSheetDescription",
    "cheatSheetCloseEsc",
    "prototype",
    "hotkey",
    "specificEvent",
    "e_1",
    "_a",
    "_this",
    "temp",
    "hotkey_1",
    "tslib_1.__values",
    "hotkey_1_1",
    "done",
    "key",
    "value",
    "push",
    "e_1_1",
    "error",
    "call",
    "remove",
    "target",
    "srcElement",
    "nodeName",
    "toUpperCase",
    "shouldExecute",
    "apply",
    "_b",
    "e_2",
    "hotkey_2",
    "hotkey_2_1",
    "e_3_1",
    "e_3",
    "_d",
    "_c",
    "index",
    "splice",
    "unbind",
    "combo_1",
    "combo_1_1",
    "e_4_1",
    "e_4",
    "pause",
    "hotkey_3",
    "hotkey_3_1",
    "CheatSheetComponent",
    "hotkeysService",
    "helpVisible",
    "title",
    "ngOnInit",
    "subscription",
    "subscribe",
    "isOpen",
    "filter",
    "toggleCheatSheet",
    "ngOnDestroy",
    "unsubscribe",
    "decorators",
    "type",
    "Component",
    "args",
    "HotkeysDirective",
    "_hotkeysService",
    "_elementRef",
    "hotkeysList",
    "oldHotkeys",
    "Mousetrap",
    "nativeElement",
    "Object",
    "keys",
    "oldHotkey",
    "hotkeyObj",
    "e_2_1",
    "HotkeyModule",
    "forRoot",
    "ngModule"
  ],
  "mappings": "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"
}
