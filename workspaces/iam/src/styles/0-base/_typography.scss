@use '@angular/material' as mat;

@import '../typography-variables';
// always using rem as size unit, 1rem = 10px
html {
  font-size: 62.5%;
}
@include mat.typography-hierarchy($iam-typography-config);
.markdown-container {
  kbd {
    display: inline-block;
    padding: 3px 5px;
    font-size: 11px;
    line-height: 10px;
    color: #444d56;
    vertical-align: middle;
    background-color: #fafbfc;
    border: solid 1px #c6cbd1;
    border-bottom-color: #959da5;
    border-radius: 3px;
    box-shadow: inset 0 -1px 0 #959da5;
  }
  ins:before {
    content: '\21b1';
    font-size: 0.8rem;
  }
  ins:after {
    content: '\21b0';
    font-size: 0.8rem;
  }
  .markdown-viewer {
    // font-size: 1.8rem;
    blockquote {
      // @include mat-typography-level-to-styles($iam-typography-config, blockquote);
      color: #555;
      --x-height-multiplier: 0.375;
      --baseline-multiplier: 0.17;
      font-style: italic;
      border-left: 3px solid rgba(0, 0, 0, 0.84);
      padding-left: 20px;
      margin-left: 0px; // padding-bottom: 2px;
      // border-left: 0.25rem solid #eceeef;
    }
    pre[class*='language-'] {
      font-family: $code-font;
      font-size: 1.4rem;
      line-height: 1.9rem;
      margin: 0.8em 0 0;
    }
    code {
      margin: 0;
      background-color: #f5f2f0;
      font-family: $code-font;
      font-size: 1.4rem;
      line-height: 1.9rem;
      white-space: pre-wrap;
    }

    pre:not(.line-numbers)[data-line] {
      padding: 1em;
      padding-left: 1.7em;
    }
    pre.line-numbers {
      margin-top: 0.8em;
      line-height: 1.9rem;
      .line-numbers-rows {
        font-family: $code-font;
        font-size: 1.4rem;
        line-height: 1.9rem;
      }
    }
    pre .line-highlight {
      margin-top: 1em;
    }
    .line-highlight:before,
    .line-highlight[data-end]:after {
      left: 0em;
      box-shadow: none;
      border-radius: 40%;
      padding: 0 0.2rem;
      line-height: 1.4;
    }
    h1 {
      counter-reset: the-h2;
    }

    h2::before {
      counter-increment: the-h2;
      content: counter(the-h2) '. ';
    }
    h2 {
      text-transform: capitalize;
      counter-reset: the-h3;
    }
    h3::before {
      counter-increment: the-h3;
      content: counter(the-h2) '.' counter(the-h3) '. ';
    }
    h3 {
      counter-reset: the-h4;
    }
    h4::before {
      counter-increment: the-h4;
      content: counter(the-h2) '.' counter(the-h3) '.' counter(the-h4) '. ';
    }
  }
  .CodeMirror {
    height: 100%;
    font-family: inherit;
    .cm-s-default .cm-formatting {
      opacity: 0.48;
    }

    .cm-header-1 {
      @extend h1;
    }
    .cm-header-2 {
      @extend h2;
    }
    .cm-header-3 {
      @extend h3;
    }
    .cm-header-4 {
      @extend h4;
    }
    .cm-header-5 {
      @extend h5;
    }
    .cm-header-6 {
      @extend h4;
    }
    /* TODO(mdc-migration): The following rule targets internal classes of tabs that may no longer apply for the MDC version.*/
    .mat-tab-body-wrapper h2 {
      margin-top: 0;
    }
    .cm-keyword,
    .cm-def,
    .cm-def,
    .cm-comment,
    .cm-tab,
    .cm-variable,
    .cm-property,
    .cm-operator,
    .cm-string {
      font-family: $code-font;
      font-size: 90%;
    }
  }
}
